apiVersion: "cilium.io/v2"
kind: CiliumNetworkPolicy
metadata:
  name: kube-dns-konnectivity-aks
  namespace: kube-system
spec:
  endpointSelector:
    matchLabels:
      k8s-app: kube-dns
  ingress:
    # Allow konnectivity-agent to communicate with kube-dns
    - fromEndpoints:
        - matchLabels:
            app: konnectivity-agent
            k8s:io.kubernetes.pod.namespace: kube-system
      toPorts:
        - ports:
            - port: "9153"
              protocol: ANY
  egress:
    # Allow kube-dns to communicate with the Azure DNS server
    - toCIDR:
        - 168.63.129.16/32
      toPorts:
        - ports:
            - port: "53"
              protocol: ANY
---
apiVersion: "cilium.io/v2"
kind: CiliumNetworkPolicy
metadata:
  name: coredns-autoscaler
  namespace: kube-system
spec:
  # `coredns-autoscaler` allows the CoreDNS pods to scale based on load/number of nodes
  endpointSelector:
    matchLabels:
      k8s-app: coredns-autoscaler
  egress:
    # Allow CoreDNS autoscaler to communicate with the Kubernetes API server
    # Necessary to allow it to monitor the number of pods/nodes and scale accordingly
    - toEntities:
        - kube-apiserver
      toPorts:
        - ports:
            - port: "443"
              protocol: TCP
---
apiVersion: "cilium.io/v2"
kind: CiliumNetworkPolicy
metadata:
  name: metrics-server-aks
  namespace: kube-system
spec:
  endpointSelector:
    matchLabels:
      k8s-app: metrics-server
  # The metrics-server collects realtime metrics from kubelets
  # and provides them to the Kubernetes API server for use in autoscaling
  # https://kubernetes-sigs.github.io/metrics-server/
  ingress:
    - fromEndpoints:
        - matchLabels:
            app: konnectivity-agent
      toPorts:
        - ports:
            - port: "4443"
              protocol: TCP
---
apiVersion: "cilium.io/v2"
kind: CiliumNetworkPolicy
metadata:
  name: konnectivity-agent
  namespace: kube-system
spec:
  endpointSelector:
    matchLabels:
      app: konnectivity-agent
  # konnectivity-agent provides a way for the Kubernetes API server to connect to nodes/pods
  # https://kubernetes.io/docs/tasks/extend-kubernetes/setup-konnectivity/
  ingress:
    - fromEndpoints:
        - matchLabels:
            app: konnectivity-agent
      toPorts:
        - ports:
            - port: "8082"
              protocol: TCP
---
apiVersion: "cilium.io/v2"
kind: CiliumNetworkPolicy
metadata:
  name: konnectivity-agent-autoscaler
  namespace: kube-system
spec:
  endpointSelector:
    matchLabels:
      app: konnectivity-agent-autoscaler
  egress:
    # The autoscaler needs to communicate with the API to determine how many konnectivity agents to run
    - toEntities:
        - kube-apiserver
      # We can be specific about the port since this rule is only applied on AKS
      toPorts:
        - ports:
            - port: "443"
              protocol: TCP
---
apiVersion: "cilium.io/v2"
kind: CiliumNetworkPolicy
metadata:
  name: konnectivity-ingress-nginx
  namespace: ingress-nginx
  # Allow access to the Ingress NGINX controller from the Konnectivity Agent,
  # which mediates traffic from the Kubernetes API server resulting from
  # webhooks
spec:
  endpointSelector:
    matchLabels:
      k8s:app.kubernetes.io/name: ingress-nginx
      k8s:app.kubernetes.io/component: controller
  ingress:
    - fromEndpoints:
        - matchLabels:
            app: konnectivity-agent
            k8s:io.kubernetes.pod.namespace: kube-system
      toPorts:
        - ports:
            - port: "8443"
              protocol: TCP
---
apiVersion: "cilium.io/v2"
kind: CiliumNetworkPolicy
metadata:
  name: konnectivity-longhorn
  namespace: longhorn-system
  # Allow access to the Ingress NGINX controller from the Konnectivity Agent,
  # which mediates traffic from the Kubernetes API server resulting from
  # webhooks
spec:
  endpointSelector:
    matchLabels:
      app: longhorn-manager
  # Konnectivity agent manages some communication between Longhorn's
  # webhooks and the Longhorn manager
  ingress:
    - fromEndpoints:
        - matchLabels:
            app: konnectivity-agent
            k8s:io.kubernetes.pod.namespace: kube-system
      toPorts:
        - ports:
            - port: "9501"
              endPort: 9502
              protocol: TCP
