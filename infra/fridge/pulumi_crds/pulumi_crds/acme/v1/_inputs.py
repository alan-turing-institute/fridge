# coding=utf-8
# *** WARNING: this file was generated by crd2pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload

if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from ... import _utilities
from ... import meta as _meta

__all__ = [
    "ChallengeSpecIssuerRefPatchArgs",
    "ChallengeSpecIssuerRefPatchArgsDict",
    "ChallengeSpecIssuerRefArgs",
    "ChallengeSpecIssuerRefArgsDict",
    "ChallengeSpecPatchArgs",
    "ChallengeSpecPatchArgsDict",
    "ChallengeSpecSolverDns01AcmeDNSAccountSecretRefPatchArgs",
    "ChallengeSpecSolverDns01AcmeDNSAccountSecretRefPatchArgsDict",
    "ChallengeSpecSolverDns01AcmeDNSAccountSecretRefArgs",
    "ChallengeSpecSolverDns01AcmeDNSAccountSecretRefArgsDict",
    "ChallengeSpecSolverDns01AcmeDNSPatchArgs",
    "ChallengeSpecSolverDns01AcmeDNSPatchArgsDict",
    "ChallengeSpecSolverDns01AcmeDNSArgs",
    "ChallengeSpecSolverDns01AcmeDNSArgsDict",
    "ChallengeSpecSolverDns01AkamaiAccessTokenSecretRefPatchArgs",
    "ChallengeSpecSolverDns01AkamaiAccessTokenSecretRefPatchArgsDict",
    "ChallengeSpecSolverDns01AkamaiAccessTokenSecretRefArgs",
    "ChallengeSpecSolverDns01AkamaiAccessTokenSecretRefArgsDict",
    "ChallengeSpecSolverDns01AkamaiClientSecretSecretRefPatchArgs",
    "ChallengeSpecSolverDns01AkamaiClientSecretSecretRefPatchArgsDict",
    "ChallengeSpecSolverDns01AkamaiClientSecretSecretRefArgs",
    "ChallengeSpecSolverDns01AkamaiClientSecretSecretRefArgsDict",
    "ChallengeSpecSolverDns01AkamaiClientTokenSecretRefPatchArgs",
    "ChallengeSpecSolverDns01AkamaiClientTokenSecretRefPatchArgsDict",
    "ChallengeSpecSolverDns01AkamaiClientTokenSecretRefArgs",
    "ChallengeSpecSolverDns01AkamaiClientTokenSecretRefArgsDict",
    "ChallengeSpecSolverDns01AkamaiPatchArgs",
    "ChallengeSpecSolverDns01AkamaiPatchArgsDict",
    "ChallengeSpecSolverDns01AkamaiArgs",
    "ChallengeSpecSolverDns01AkamaiArgsDict",
    "ChallengeSpecSolverDns01AzureDNSClientSecretSecretRefPatchArgs",
    "ChallengeSpecSolverDns01AzureDNSClientSecretSecretRefPatchArgsDict",
    "ChallengeSpecSolverDns01AzureDNSClientSecretSecretRefArgs",
    "ChallengeSpecSolverDns01AzureDNSClientSecretSecretRefArgsDict",
    "ChallengeSpecSolverDns01AzureDNSManagedIdentityPatchArgs",
    "ChallengeSpecSolverDns01AzureDNSManagedIdentityPatchArgsDict",
    "ChallengeSpecSolverDns01AzureDNSManagedIdentityArgs",
    "ChallengeSpecSolverDns01AzureDNSManagedIdentityArgsDict",
    "ChallengeSpecSolverDns01AzureDNSPatchArgs",
    "ChallengeSpecSolverDns01AzureDNSPatchArgsDict",
    "ChallengeSpecSolverDns01AzureDNSArgs",
    "ChallengeSpecSolverDns01AzureDNSArgsDict",
    "ChallengeSpecSolverDns01CloudDNSPatchArgs",
    "ChallengeSpecSolverDns01CloudDNSPatchArgsDict",
    "ChallengeSpecSolverDns01CloudDNSServiceAccountSecretRefPatchArgs",
    "ChallengeSpecSolverDns01CloudDNSServiceAccountSecretRefPatchArgsDict",
    "ChallengeSpecSolverDns01CloudDNSServiceAccountSecretRefArgs",
    "ChallengeSpecSolverDns01CloudDNSServiceAccountSecretRefArgsDict",
    "ChallengeSpecSolverDns01CloudDNSArgs",
    "ChallengeSpecSolverDns01CloudDNSArgsDict",
    "ChallengeSpecSolverDns01CloudflareApiKeySecretRefPatchArgs",
    "ChallengeSpecSolverDns01CloudflareApiKeySecretRefPatchArgsDict",
    "ChallengeSpecSolverDns01CloudflareApiKeySecretRefArgs",
    "ChallengeSpecSolverDns01CloudflareApiKeySecretRefArgsDict",
    "ChallengeSpecSolverDns01CloudflareApiTokenSecretRefPatchArgs",
    "ChallengeSpecSolverDns01CloudflareApiTokenSecretRefPatchArgsDict",
    "ChallengeSpecSolverDns01CloudflareApiTokenSecretRefArgs",
    "ChallengeSpecSolverDns01CloudflareApiTokenSecretRefArgsDict",
    "ChallengeSpecSolverDns01CloudflarePatchArgs",
    "ChallengeSpecSolverDns01CloudflarePatchArgsDict",
    "ChallengeSpecSolverDns01CloudflareArgs",
    "ChallengeSpecSolverDns01CloudflareArgsDict",
    "ChallengeSpecSolverDns01DigitaloceanPatchArgs",
    "ChallengeSpecSolverDns01DigitaloceanPatchArgsDict",
    "ChallengeSpecSolverDns01DigitaloceanTokenSecretRefPatchArgs",
    "ChallengeSpecSolverDns01DigitaloceanTokenSecretRefPatchArgsDict",
    "ChallengeSpecSolverDns01DigitaloceanTokenSecretRefArgs",
    "ChallengeSpecSolverDns01DigitaloceanTokenSecretRefArgsDict",
    "ChallengeSpecSolverDns01DigitaloceanArgs",
    "ChallengeSpecSolverDns01DigitaloceanArgsDict",
    "ChallengeSpecSolverDns01PatchArgs",
    "ChallengeSpecSolverDns01PatchArgsDict",
    "ChallengeSpecSolverDns01Rfc2136PatchArgs",
    "ChallengeSpecSolverDns01Rfc2136PatchArgsDict",
    "ChallengeSpecSolverDns01Rfc2136TsigSecretSecretRefPatchArgs",
    "ChallengeSpecSolverDns01Rfc2136TsigSecretSecretRefPatchArgsDict",
    "ChallengeSpecSolverDns01Rfc2136TsigSecretSecretRefArgs",
    "ChallengeSpecSolverDns01Rfc2136TsigSecretSecretRefArgsDict",
    "ChallengeSpecSolverDns01Rfc2136Args",
    "ChallengeSpecSolverDns01Rfc2136ArgsDict",
    "ChallengeSpecSolverDns01Route53AccessKeyIDSecretRefPatchArgs",
    "ChallengeSpecSolverDns01Route53AccessKeyIDSecretRefPatchArgsDict",
    "ChallengeSpecSolverDns01Route53AccessKeyIDSecretRefArgs",
    "ChallengeSpecSolverDns01Route53AccessKeyIDSecretRefArgsDict",
    "ChallengeSpecSolverDns01Route53AuthKubernetesPatchArgs",
    "ChallengeSpecSolverDns01Route53AuthKubernetesPatchArgsDict",
    "ChallengeSpecSolverDns01Route53AuthKubernetesServiceAccountRefPatchArgs",
    "ChallengeSpecSolverDns01Route53AuthKubernetesServiceAccountRefPatchArgsDict",
    "ChallengeSpecSolverDns01Route53AuthKubernetesServiceAccountRefArgs",
    "ChallengeSpecSolverDns01Route53AuthKubernetesServiceAccountRefArgsDict",
    "ChallengeSpecSolverDns01Route53AuthKubernetesArgs",
    "ChallengeSpecSolverDns01Route53AuthKubernetesArgsDict",
    "ChallengeSpecSolverDns01Route53AuthPatchArgs",
    "ChallengeSpecSolverDns01Route53AuthPatchArgsDict",
    "ChallengeSpecSolverDns01Route53AuthArgs",
    "ChallengeSpecSolverDns01Route53AuthArgsDict",
    "ChallengeSpecSolverDns01Route53PatchArgs",
    "ChallengeSpecSolverDns01Route53PatchArgsDict",
    "ChallengeSpecSolverDns01Route53SecretAccessKeySecretRefPatchArgs",
    "ChallengeSpecSolverDns01Route53SecretAccessKeySecretRefPatchArgsDict",
    "ChallengeSpecSolverDns01Route53SecretAccessKeySecretRefArgs",
    "ChallengeSpecSolverDns01Route53SecretAccessKeySecretRefArgsDict",
    "ChallengeSpecSolverDns01Route53Args",
    "ChallengeSpecSolverDns01Route53ArgsDict",
    "ChallengeSpecSolverDns01WebhookPatchArgs",
    "ChallengeSpecSolverDns01WebhookPatchArgsDict",
    "ChallengeSpecSolverDns01WebhookArgs",
    "ChallengeSpecSolverDns01WebhookArgsDict",
    "ChallengeSpecSolverDns01Args",
    "ChallengeSpecSolverDns01ArgsDict",
    "ChallengeSpecSolverHttp01GatewayHTTPRouteParentRefsPatchArgs",
    "ChallengeSpecSolverHttp01GatewayHTTPRouteParentRefsPatchArgsDict",
    "ChallengeSpecSolverHttp01GatewayHTTPRouteParentRefsArgs",
    "ChallengeSpecSolverHttp01GatewayHTTPRouteParentRefsArgsDict",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePatchArgs",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePatchArgsDict",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateMetadataPatchArgs",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateMetadataPatchArgsDict",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateMetadataArgs",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateMetadataArgsDict",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplatePatchArgs",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplatePatchArgsDict",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPatchArgs",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPatchArgsDict",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgs",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgsDict",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatchArgs",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatchArgsDict",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgs",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgsDict",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatchArgs",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatchArgsDict",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgs",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgsDict",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatchArgs",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatchArgsDict",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgs",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgsDict",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgsDict",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatchArgs",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatchArgsDict",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgs",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgsDict",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatchArgs",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatchArgsDict",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgs",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgsDict",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatchArgs",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatchArgsDict",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgs",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgsDict",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgs",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgsDict",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgsDict",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityArgs",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityArgsDict",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPatchArgs",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPatchArgsDict",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPatchArgs",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPatchArgsDict",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgs",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgsDict",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArgs",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArgsDict",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgsDict",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchArgs",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchArgsDict",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgsDict",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArgs",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArgsDict",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgsDict",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchArgs",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchArgsDict",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgsDict",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchArgs",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchArgsDict",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgsDict",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgsDict",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArgs",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArgsDict",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgsDict",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchArgs",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchArgsDict",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgsDict",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArgs",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArgsDict",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgsDict",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchArgs",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchArgsDict",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgsDict",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgs",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgsDict",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgsDict",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityArgs",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityArgsDict",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPatchArgs",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPatchArgsDict",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgs",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgsDict",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArgs",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArgsDict",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgsDict",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchArgs",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchArgsDict",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgsDict",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArgs",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArgsDict",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgsDict",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchArgs",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchArgsDict",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgsDict",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchArgs",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchArgsDict",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgsDict",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgsDict",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArgs",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArgsDict",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgsDict",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchArgs",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchArgsDict",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgsDict",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArgs",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArgsDict",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgsDict",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchArgs",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchArgsDict",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgsDict",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgs",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgsDict",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgsDict",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityArgs",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityArgsDict",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityArgs",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityArgsDict",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecImagePullSecretsPatchArgs",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecImagePullSecretsPatchArgsDict",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecImagePullSecretsArgs",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecImagePullSecretsArgsDict",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecPatchArgs",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecPatchArgsDict",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextPatchArgs",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextPatchArgsDict",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSeLinuxOptionsPatchArgs",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSeLinuxOptionsPatchArgsDict",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSeLinuxOptionsArgs",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSeLinuxOptionsArgsDict",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSeccompProfilePatchArgs",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSeccompProfilePatchArgsDict",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSeccompProfileArgs",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSeccompProfileArgsDict",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSysctlsPatchArgs",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSysctlsPatchArgsDict",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSysctlsArgs",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSysctlsArgsDict",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextArgs",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextArgsDict",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecTolerationsPatchArgs",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecTolerationsPatchArgsDict",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecTolerationsArgs",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecTolerationsArgsDict",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecArgs",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecArgsDict",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateArgs",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateArgsDict",
    "ChallengeSpecSolverHttp01GatewayHTTPRouteArgs",
    "ChallengeSpecSolverHttp01GatewayHTTPRouteArgsDict",
    "ChallengeSpecSolverHttp01IngressIngressTemplateMetadataPatchArgs",
    "ChallengeSpecSolverHttp01IngressIngressTemplateMetadataPatchArgsDict",
    "ChallengeSpecSolverHttp01IngressIngressTemplateMetadataArgs",
    "ChallengeSpecSolverHttp01IngressIngressTemplateMetadataArgsDict",
    "ChallengeSpecSolverHttp01IngressIngressTemplatePatchArgs",
    "ChallengeSpecSolverHttp01IngressIngressTemplatePatchArgsDict",
    "ChallengeSpecSolverHttp01IngressIngressTemplateArgs",
    "ChallengeSpecSolverHttp01IngressIngressTemplateArgsDict",
    "ChallengeSpecSolverHttp01IngressPatchArgs",
    "ChallengeSpecSolverHttp01IngressPatchArgsDict",
    "ChallengeSpecSolverHttp01IngressPodTemplateMetadataPatchArgs",
    "ChallengeSpecSolverHttp01IngressPodTemplateMetadataPatchArgsDict",
    "ChallengeSpecSolverHttp01IngressPodTemplateMetadataArgs",
    "ChallengeSpecSolverHttp01IngressPodTemplateMetadataArgsDict",
    "ChallengeSpecSolverHttp01IngressPodTemplatePatchArgs",
    "ChallengeSpecSolverHttp01IngressPodTemplatePatchArgsDict",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPatchArgs",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPatchArgsDict",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgs",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgsDict",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatchArgs",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatchArgsDict",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgs",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgsDict",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatchArgs",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatchArgsDict",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgs",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgsDict",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatchArgs",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatchArgsDict",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgs",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgsDict",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgsDict",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatchArgs",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatchArgsDict",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgs",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgsDict",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatchArgs",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatchArgsDict",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgs",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgsDict",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatchArgs",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatchArgsDict",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgs",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgsDict",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgs",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgsDict",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgsDict",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityArgs",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityArgsDict",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPatchArgs",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPatchArgsDict",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPatchArgs",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPatchArgsDict",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgs",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgsDict",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArgs",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArgsDict",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgsDict",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchArgs",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchArgsDict",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgsDict",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArgs",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArgsDict",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgsDict",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchArgs",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchArgsDict",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgsDict",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchArgs",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchArgsDict",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgsDict",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgsDict",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArgs",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArgsDict",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgsDict",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchArgs",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchArgsDict",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgsDict",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArgs",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArgsDict",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgsDict",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchArgs",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchArgsDict",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgsDict",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgs",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgsDict",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgsDict",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityArgs",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityArgsDict",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPatchArgs",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPatchArgsDict",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgs",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgsDict",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArgs",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArgsDict",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgsDict",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchArgs",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchArgsDict",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgsDict",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArgs",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArgsDict",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgsDict",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchArgs",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchArgsDict",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgsDict",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchArgs",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchArgsDict",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgsDict",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgsDict",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArgs",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArgsDict",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgsDict",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchArgs",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchArgsDict",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgsDict",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArgs",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArgsDict",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgsDict",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchArgs",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchArgsDict",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgsDict",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgs",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgsDict",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgsDict",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityArgs",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityArgsDict",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityArgs",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityArgsDict",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecImagePullSecretsPatchArgs",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecImagePullSecretsPatchArgsDict",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecImagePullSecretsArgs",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecImagePullSecretsArgsDict",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecPatchArgs",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecPatchArgsDict",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecSecurityContextPatchArgs",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecSecurityContextPatchArgsDict",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecSecurityContextSeLinuxOptionsPatchArgs",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecSecurityContextSeLinuxOptionsPatchArgsDict",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecSecurityContextSeLinuxOptionsArgs",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecSecurityContextSeLinuxOptionsArgsDict",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecSecurityContextSeccompProfilePatchArgs",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecSecurityContextSeccompProfilePatchArgsDict",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecSecurityContextSeccompProfileArgs",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecSecurityContextSeccompProfileArgsDict",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecSecurityContextSysctlsPatchArgs",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecSecurityContextSysctlsPatchArgsDict",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecSecurityContextSysctlsArgs",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecSecurityContextSysctlsArgsDict",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecSecurityContextArgs",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecSecurityContextArgsDict",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecTolerationsPatchArgs",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecTolerationsPatchArgsDict",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecTolerationsArgs",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecTolerationsArgsDict",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecArgs",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecArgsDict",
    "ChallengeSpecSolverHttp01IngressPodTemplateArgs",
    "ChallengeSpecSolverHttp01IngressPodTemplateArgsDict",
    "ChallengeSpecSolverHttp01IngressArgs",
    "ChallengeSpecSolverHttp01IngressArgsDict",
    "ChallengeSpecSolverHttp01PatchArgs",
    "ChallengeSpecSolverHttp01PatchArgsDict",
    "ChallengeSpecSolverHttp01Args",
    "ChallengeSpecSolverHttp01ArgsDict",
    "ChallengeSpecSolverPatchArgs",
    "ChallengeSpecSolverPatchArgsDict",
    "ChallengeSpecSolverSelectorPatchArgs",
    "ChallengeSpecSolverSelectorPatchArgsDict",
    "ChallengeSpecSolverSelectorArgs",
    "ChallengeSpecSolverSelectorArgsDict",
    "ChallengeSpecSolverArgs",
    "ChallengeSpecSolverArgsDict",
    "ChallengeSpecArgs",
    "ChallengeSpecArgsDict",
    "ChallengeStatusArgs",
    "ChallengeStatusArgsDict",
    "ChallengeArgs",
    "ChallengeArgsDict",
    "OrderSpecIssuerRefPatchArgs",
    "OrderSpecIssuerRefPatchArgsDict",
    "OrderSpecIssuerRefArgs",
    "OrderSpecIssuerRefArgsDict",
    "OrderSpecPatchArgs",
    "OrderSpecPatchArgsDict",
    "OrderSpecArgs",
    "OrderSpecArgsDict",
    "OrderStatusAuthorizationsChallengesArgs",
    "OrderStatusAuthorizationsChallengesArgsDict",
    "OrderStatusAuthorizationsArgs",
    "OrderStatusAuthorizationsArgsDict",
    "OrderStatusArgs",
    "OrderStatusArgsDict",
    "OrderArgs",
    "OrderArgsDict",
]

MYPY = False

if not MYPY:

    class ChallengeSpecIssuerRefPatchArgsDict(TypedDict):
        """
        References a properly configured ACME-type Issuer which should
        be used to create this Challenge.
        If the Issuer does not exist, processing will be retried.
        If the Issuer is not an 'ACME' Issuer, an error will be returned and the
        Challenge will be marked as failed.
        """

        group: NotRequired[pulumi.Input[str]]
        """
        Group of the resource being referred to.
        """
        kind: NotRequired[pulumi.Input[str]]
        """
        Kind of the resource being referred to.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the resource being referred to.
        """

elif False:
    ChallengeSpecIssuerRefPatchArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class ChallengeSpecIssuerRefPatchArgs:
    def __init__(
        __self__,
        *,
        group: Optional[pulumi.Input[str]] = None,
        kind: Optional[pulumi.Input[str]] = None,
        name: Optional[pulumi.Input[str]] = None
    ):
        """
        References a properly configured ACME-type Issuer which should
        be used to create this Challenge.
        If the Issuer does not exist, processing will be retried.
        If the Issuer is not an 'ACME' Issuer, an error will be returned and the
        Challenge will be marked as failed.
        :param pulumi.Input[str] group: Group of the resource being referred to.
        :param pulumi.Input[str] kind: Kind of the resource being referred to.
        :param pulumi.Input[str] name: Name of the resource being referred to.
        """
        if group is not None:
            pulumi.set(__self__, "group", group)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def group(self) -> Optional[pulumi.Input[str]]:
        """
        Group of the resource being referred to.
        """
        return pulumi.get(self, "group")

    @group.setter
    def group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group", value)

    @property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[str]]:
        """
        Kind of the resource being referred to.
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the resource being referred to.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:

    class ChallengeSpecIssuerRefArgsDict(TypedDict):
        """
        References a properly configured ACME-type Issuer which should
        be used to create this Challenge.
        If the Issuer does not exist, processing will be retried.
        If the Issuer is not an 'ACME' Issuer, an error will be returned and the
        Challenge will be marked as failed.
        """

        group: NotRequired[pulumi.Input[str]]
        """
        Group of the resource being referred to.
        """
        kind: NotRequired[pulumi.Input[str]]
        """
        Kind of the resource being referred to.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the resource being referred to.
        """

elif False:
    ChallengeSpecIssuerRefArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class ChallengeSpecIssuerRefArgs:
    def __init__(
        __self__,
        *,
        group: Optional[pulumi.Input[str]] = None,
        kind: Optional[pulumi.Input[str]] = None,
        name: Optional[pulumi.Input[str]] = None
    ):
        """
        References a properly configured ACME-type Issuer which should
        be used to create this Challenge.
        If the Issuer does not exist, processing will be retried.
        If the Issuer is not an 'ACME' Issuer, an error will be returned and the
        Challenge will be marked as failed.
        :param pulumi.Input[str] group: Group of the resource being referred to.
        :param pulumi.Input[str] kind: Kind of the resource being referred to.
        :param pulumi.Input[str] name: Name of the resource being referred to.
        """
        if group is not None:
            pulumi.set(__self__, "group", group)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def group(self) -> Optional[pulumi.Input[str]]:
        """
        Group of the resource being referred to.
        """
        return pulumi.get(self, "group")

    @group.setter
    def group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group", value)

    @property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[str]]:
        """
        Kind of the resource being referred to.
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the resource being referred to.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:

    class ChallengeSpecPatchArgsDict(TypedDict):
        authorization_url: NotRequired[pulumi.Input[str]]
        """
        The URL to the ACME Authorization resource that this
        challenge is a part of.
        """
        dns_name: NotRequired[pulumi.Input[str]]
        """
        dnsName is the identifier that this challenge is for, e.g. example.com.
        If the requested DNSName is a 'wildcard', this field MUST be set to the
        non-wildcard domain, e.g. for `*.example.com`, it must be `example.com`.
        """
        issuer_ref: NotRequired[pulumi.Input["ChallengeSpecIssuerRefPatchArgsDict"]]
        key: NotRequired[pulumi.Input[str]]
        """
        The ACME challenge key for this challenge
        For HTTP01 challenges, this is the value that must be responded with to
        complete the HTTP01 challenge in the format:
        `<private key JWK thumbprint>.<key from acme server for challenge>`.
        For DNS01 challenges, this is the base64 encoded SHA256 sum of the
        `<private key JWK thumbprint>.<key from acme server for challenge>`
        text that must be set as the TXT record content.
        """
        solver: NotRequired[pulumi.Input["ChallengeSpecSolverPatchArgsDict"]]
        token: NotRequired[pulumi.Input[str]]
        """
        The ACME challenge token for this challenge.
        This is the raw value returned from the ACME server.
        """
        type: NotRequired[pulumi.Input[str]]
        """
        The type of ACME challenge this resource represents.
        One of "HTTP-01" or "DNS-01".
        """
        url: NotRequired[pulumi.Input[str]]
        """
        The URL of the ACME Challenge resource for this challenge.
        This can be used to lookup details about the status of this challenge.
        """
        wildcard: NotRequired[pulumi.Input[bool]]
        """
        wildcard will be true if this challenge is for a wildcard identifier,
        for example '*.example.com'.
        """

elif False:
    ChallengeSpecPatchArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class ChallengeSpecPatchArgs:
    def __init__(
        __self__,
        *,
        authorization_url: Optional[pulumi.Input[str]] = None,
        dns_name: Optional[pulumi.Input[str]] = None,
        issuer_ref: Optional[pulumi.Input["ChallengeSpecIssuerRefPatchArgs"]] = None,
        key: Optional[pulumi.Input[str]] = None,
        solver: Optional[pulumi.Input["ChallengeSpecSolverPatchArgs"]] = None,
        token: Optional[pulumi.Input[str]] = None,
        type: Optional[pulumi.Input[str]] = None,
        url: Optional[pulumi.Input[str]] = None,
        wildcard: Optional[pulumi.Input[bool]] = None
    ):
        """
        :param pulumi.Input[str] authorization_url: The URL to the ACME Authorization resource that this
               challenge is a part of.
        :param pulumi.Input[str] dns_name: dnsName is the identifier that this challenge is for, e.g. example.com.
               If the requested DNSName is a 'wildcard', this field MUST be set to the
               non-wildcard domain, e.g. for `*.example.com`, it must be `example.com`.
        :param pulumi.Input[str] key: The ACME challenge key for this challenge
               For HTTP01 challenges, this is the value that must be responded with to
               complete the HTTP01 challenge in the format:
               `<private key JWK thumbprint>.<key from acme server for challenge>`.
               For DNS01 challenges, this is the base64 encoded SHA256 sum of the
               `<private key JWK thumbprint>.<key from acme server for challenge>`
               text that must be set as the TXT record content.
        :param pulumi.Input[str] token: The ACME challenge token for this challenge.
               This is the raw value returned from the ACME server.
        :param pulumi.Input[str] type: The type of ACME challenge this resource represents.
               One of "HTTP-01" or "DNS-01".
        :param pulumi.Input[str] url: The URL of the ACME Challenge resource for this challenge.
               This can be used to lookup details about the status of this challenge.
        :param pulumi.Input[bool] wildcard: wildcard will be true if this challenge is for a wildcard identifier,
               for example '*.example.com'.
        """
        if authorization_url is not None:
            pulumi.set(__self__, "authorization_url", authorization_url)
        if dns_name is not None:
            pulumi.set(__self__, "dns_name", dns_name)
        if issuer_ref is not None:
            pulumi.set(__self__, "issuer_ref", issuer_ref)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if solver is not None:
            pulumi.set(__self__, "solver", solver)
        if token is not None:
            pulumi.set(__self__, "token", token)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if url is not None:
            pulumi.set(__self__, "url", url)
        if wildcard is not None:
            pulumi.set(__self__, "wildcard", wildcard)

    @property
    @pulumi.getter(name="authorizationURL")
    def authorization_url(self) -> Optional[pulumi.Input[str]]:
        """
        The URL to the ACME Authorization resource that this
        challenge is a part of.
        """
        return pulumi.get(self, "authorization_url")

    @authorization_url.setter
    def authorization_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authorization_url", value)

    @property
    @pulumi.getter(name="dnsName")
    def dns_name(self) -> Optional[pulumi.Input[str]]:
        """
        dnsName is the identifier that this challenge is for, e.g. example.com.
        If the requested DNSName is a 'wildcard', this field MUST be set to the
        non-wildcard domain, e.g. for `*.example.com`, it must be `example.com`.
        """
        return pulumi.get(self, "dns_name")

    @dns_name.setter
    def dns_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns_name", value)

    @property
    @pulumi.getter(name="issuerRef")
    def issuer_ref(self) -> Optional[pulumi.Input["ChallengeSpecIssuerRefPatchArgs"]]:
        return pulumi.get(self, "issuer_ref")

    @issuer_ref.setter
    def issuer_ref(
        self, value: Optional[pulumi.Input["ChallengeSpecIssuerRefPatchArgs"]]
    ):
        pulumi.set(self, "issuer_ref", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The ACME challenge key for this challenge
        For HTTP01 challenges, this is the value that must be responded with to
        complete the HTTP01 challenge in the format:
        `<private key JWK thumbprint>.<key from acme server for challenge>`.
        For DNS01 challenges, this is the base64 encoded SHA256 sum of the
        `<private key JWK thumbprint>.<key from acme server for challenge>`
        text that must be set as the TXT record content.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def solver(self) -> Optional[pulumi.Input["ChallengeSpecSolverPatchArgs"]]:
        return pulumi.get(self, "solver")

    @solver.setter
    def solver(self, value: Optional[pulumi.Input["ChallengeSpecSolverPatchArgs"]]):
        pulumi.set(self, "solver", value)

    @property
    @pulumi.getter
    def token(self) -> Optional[pulumi.Input[str]]:
        """
        The ACME challenge token for this challenge.
        This is the raw value returned from the ACME server.
        """
        return pulumi.get(self, "token")

    @token.setter
    def token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "token", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of ACME challenge this resource represents.
        One of "HTTP-01" or "DNS-01".
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        """
        The URL of the ACME Challenge resource for this challenge.
        This can be used to lookup details about the status of this challenge.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter
    def wildcard(self) -> Optional[pulumi.Input[bool]]:
        """
        wildcard will be true if this challenge is for a wildcard identifier,
        for example '*.example.com'.
        """
        return pulumi.get(self, "wildcard")

    @wildcard.setter
    def wildcard(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "wildcard", value)


if not MYPY:

    class ChallengeSpecSolverDns01AcmeDNSAccountSecretRefPatchArgsDict(TypedDict):
        """
        A reference to a specific 'key' within a Secret resource.
        In some instances, `key` is a required field.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """

elif False:
    ChallengeSpecSolverDns01AcmeDNSAccountSecretRefPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverDns01AcmeDNSAccountSecretRefPatchArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        name: Optional[pulumi.Input[str]] = None
    ):
        """
        A reference to a specific 'key' within a Secret resource.
        In some instances, `key` is a required field.
        :param pulumi.Input[str] key: The key of the entry in the Secret resource's `data` field to be used.
               Some instances of this field may be defaulted, in others it may be
               required.
        :param pulumi.Input[str] name: Name of the resource being referred to.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:

    class ChallengeSpecSolverDns01AcmeDNSAccountSecretRefArgsDict(TypedDict):
        """
        A reference to a specific 'key' within a Secret resource.
        In some instances, `key` is a required field.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """

elif False:
    ChallengeSpecSolverDns01AcmeDNSAccountSecretRefArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverDns01AcmeDNSAccountSecretRefArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        name: Optional[pulumi.Input[str]] = None
    ):
        """
        A reference to a specific 'key' within a Secret resource.
        In some instances, `key` is a required field.
        :param pulumi.Input[str] key: The key of the entry in the Secret resource's `data` field to be used.
               Some instances of this field may be defaulted, in others it may be
               required.
        :param pulumi.Input[str] name: Name of the resource being referred to.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:

    class ChallengeSpecSolverDns01AcmeDNSPatchArgsDict(TypedDict):
        """
        Use the 'ACME DNS' (https://github.com/joohoi/acme-dns) API to manage
        DNS01 challenge records.
        """

        account_secret_ref: NotRequired[
            pulumi.Input["ChallengeSpecSolverDns01AcmeDNSAccountSecretRefPatchArgsDict"]
        ]
        host: NotRequired[pulumi.Input[str]]

elif False:
    ChallengeSpecSolverDns01AcmeDNSPatchArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class ChallengeSpecSolverDns01AcmeDNSPatchArgs:
    def __init__(
        __self__,
        *,
        account_secret_ref: Optional[
            pulumi.Input["ChallengeSpecSolverDns01AcmeDNSAccountSecretRefPatchArgs"]
        ] = None,
        host: Optional[pulumi.Input[str]] = None
    ):
        """
        Use the 'ACME DNS' (https://github.com/joohoi/acme-dns) API to manage
        DNS01 challenge records.
        """
        if account_secret_ref is not None:
            pulumi.set(__self__, "account_secret_ref", account_secret_ref)
        if host is not None:
            pulumi.set(__self__, "host", host)

    @property
    @pulumi.getter(name="accountSecretRef")
    def account_secret_ref(
        self,
    ) -> Optional[
        pulumi.Input["ChallengeSpecSolverDns01AcmeDNSAccountSecretRefPatchArgs"]
    ]:
        return pulumi.get(self, "account_secret_ref")

    @account_secret_ref.setter
    def account_secret_ref(
        self,
        value: Optional[
            pulumi.Input["ChallengeSpecSolverDns01AcmeDNSAccountSecretRefPatchArgs"]
        ],
    ):
        pulumi.set(self, "account_secret_ref", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)


if not MYPY:

    class ChallengeSpecSolverDns01AcmeDNSArgsDict(TypedDict):
        """
        Use the 'ACME DNS' (https://github.com/joohoi/acme-dns) API to manage
        DNS01 challenge records.
        """

        account_secret_ref: NotRequired[
            pulumi.Input["ChallengeSpecSolverDns01AcmeDNSAccountSecretRefArgsDict"]
        ]
        host: NotRequired[pulumi.Input[str]]

elif False:
    ChallengeSpecSolverDns01AcmeDNSArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class ChallengeSpecSolverDns01AcmeDNSArgs:
    def __init__(
        __self__,
        *,
        account_secret_ref: Optional[
            pulumi.Input["ChallengeSpecSolverDns01AcmeDNSAccountSecretRefArgs"]
        ] = None,
        host: Optional[pulumi.Input[str]] = None
    ):
        """
        Use the 'ACME DNS' (https://github.com/joohoi/acme-dns) API to manage
        DNS01 challenge records.
        """
        if account_secret_ref is not None:
            pulumi.set(__self__, "account_secret_ref", account_secret_ref)
        if host is not None:
            pulumi.set(__self__, "host", host)

    @property
    @pulumi.getter(name="accountSecretRef")
    def account_secret_ref(
        self,
    ) -> Optional[pulumi.Input["ChallengeSpecSolverDns01AcmeDNSAccountSecretRefArgs"]]:
        return pulumi.get(self, "account_secret_ref")

    @account_secret_ref.setter
    def account_secret_ref(
        self,
        value: Optional[
            pulumi.Input["ChallengeSpecSolverDns01AcmeDNSAccountSecretRefArgs"]
        ],
    ):
        pulumi.set(self, "account_secret_ref", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)


if not MYPY:

    class ChallengeSpecSolverDns01AkamaiAccessTokenSecretRefPatchArgsDict(TypedDict):
        """
        A reference to a specific 'key' within a Secret resource.
        In some instances, `key` is a required field.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """

elif False:
    ChallengeSpecSolverDns01AkamaiAccessTokenSecretRefPatchArgsDict: TypeAlias = (
        Mapping[str, Any]
    )


@pulumi.input_type
class ChallengeSpecSolverDns01AkamaiAccessTokenSecretRefPatchArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        name: Optional[pulumi.Input[str]] = None
    ):
        """
        A reference to a specific 'key' within a Secret resource.
        In some instances, `key` is a required field.
        :param pulumi.Input[str] key: The key of the entry in the Secret resource's `data` field to be used.
               Some instances of this field may be defaulted, in others it may be
               required.
        :param pulumi.Input[str] name: Name of the resource being referred to.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:

    class ChallengeSpecSolverDns01AkamaiAccessTokenSecretRefArgsDict(TypedDict):
        """
        A reference to a specific 'key' within a Secret resource.
        In some instances, `key` is a required field.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """

elif False:
    ChallengeSpecSolverDns01AkamaiAccessTokenSecretRefArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverDns01AkamaiAccessTokenSecretRefArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        name: Optional[pulumi.Input[str]] = None
    ):
        """
        A reference to a specific 'key' within a Secret resource.
        In some instances, `key` is a required field.
        :param pulumi.Input[str] key: The key of the entry in the Secret resource's `data` field to be used.
               Some instances of this field may be defaulted, in others it may be
               required.
        :param pulumi.Input[str] name: Name of the resource being referred to.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:

    class ChallengeSpecSolverDns01AkamaiClientSecretSecretRefPatchArgsDict(TypedDict):
        """
        A reference to a specific 'key' within a Secret resource.
        In some instances, `key` is a required field.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """

elif False:
    ChallengeSpecSolverDns01AkamaiClientSecretSecretRefPatchArgsDict: TypeAlias = (
        Mapping[str, Any]
    )


@pulumi.input_type
class ChallengeSpecSolverDns01AkamaiClientSecretSecretRefPatchArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        name: Optional[pulumi.Input[str]] = None
    ):
        """
        A reference to a specific 'key' within a Secret resource.
        In some instances, `key` is a required field.
        :param pulumi.Input[str] key: The key of the entry in the Secret resource's `data` field to be used.
               Some instances of this field may be defaulted, in others it may be
               required.
        :param pulumi.Input[str] name: Name of the resource being referred to.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:

    class ChallengeSpecSolverDns01AkamaiClientSecretSecretRefArgsDict(TypedDict):
        """
        A reference to a specific 'key' within a Secret resource.
        In some instances, `key` is a required field.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """

elif False:
    ChallengeSpecSolverDns01AkamaiClientSecretSecretRefArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverDns01AkamaiClientSecretSecretRefArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        name: Optional[pulumi.Input[str]] = None
    ):
        """
        A reference to a specific 'key' within a Secret resource.
        In some instances, `key` is a required field.
        :param pulumi.Input[str] key: The key of the entry in the Secret resource's `data` field to be used.
               Some instances of this field may be defaulted, in others it may be
               required.
        :param pulumi.Input[str] name: Name of the resource being referred to.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:

    class ChallengeSpecSolverDns01AkamaiClientTokenSecretRefPatchArgsDict(TypedDict):
        """
        A reference to a specific 'key' within a Secret resource.
        In some instances, `key` is a required field.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """

elif False:
    ChallengeSpecSolverDns01AkamaiClientTokenSecretRefPatchArgsDict: TypeAlias = (
        Mapping[str, Any]
    )


@pulumi.input_type
class ChallengeSpecSolverDns01AkamaiClientTokenSecretRefPatchArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        name: Optional[pulumi.Input[str]] = None
    ):
        """
        A reference to a specific 'key' within a Secret resource.
        In some instances, `key` is a required field.
        :param pulumi.Input[str] key: The key of the entry in the Secret resource's `data` field to be used.
               Some instances of this field may be defaulted, in others it may be
               required.
        :param pulumi.Input[str] name: Name of the resource being referred to.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:

    class ChallengeSpecSolverDns01AkamaiClientTokenSecretRefArgsDict(TypedDict):
        """
        A reference to a specific 'key' within a Secret resource.
        In some instances, `key` is a required field.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """

elif False:
    ChallengeSpecSolverDns01AkamaiClientTokenSecretRefArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverDns01AkamaiClientTokenSecretRefArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        name: Optional[pulumi.Input[str]] = None
    ):
        """
        A reference to a specific 'key' within a Secret resource.
        In some instances, `key` is a required field.
        :param pulumi.Input[str] key: The key of the entry in the Secret resource's `data` field to be used.
               Some instances of this field may be defaulted, in others it may be
               required.
        :param pulumi.Input[str] name: Name of the resource being referred to.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:

    class ChallengeSpecSolverDns01AkamaiPatchArgsDict(TypedDict):
        """
        Use the Akamai DNS zone management API to manage DNS01 challenge records.
        """

        access_token_secret_ref: NotRequired[
            pulumi.Input[
                "ChallengeSpecSolverDns01AkamaiAccessTokenSecretRefPatchArgsDict"
            ]
        ]
        client_secret_secret_ref: NotRequired[
            pulumi.Input[
                "ChallengeSpecSolverDns01AkamaiClientSecretSecretRefPatchArgsDict"
            ]
        ]
        client_token_secret_ref: NotRequired[
            pulumi.Input[
                "ChallengeSpecSolverDns01AkamaiClientTokenSecretRefPatchArgsDict"
            ]
        ]
        service_consumer_domain: NotRequired[pulumi.Input[str]]

elif False:
    ChallengeSpecSolverDns01AkamaiPatchArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class ChallengeSpecSolverDns01AkamaiPatchArgs:
    def __init__(
        __self__,
        *,
        access_token_secret_ref: Optional[
            pulumi.Input["ChallengeSpecSolverDns01AkamaiAccessTokenSecretRefPatchArgs"]
        ] = None,
        client_secret_secret_ref: Optional[
            pulumi.Input["ChallengeSpecSolverDns01AkamaiClientSecretSecretRefPatchArgs"]
        ] = None,
        client_token_secret_ref: Optional[
            pulumi.Input["ChallengeSpecSolverDns01AkamaiClientTokenSecretRefPatchArgs"]
        ] = None,
        service_consumer_domain: Optional[pulumi.Input[str]] = None
    ):
        """
        Use the Akamai DNS zone management API to manage DNS01 challenge records.
        """
        if access_token_secret_ref is not None:
            pulumi.set(__self__, "access_token_secret_ref", access_token_secret_ref)
        if client_secret_secret_ref is not None:
            pulumi.set(__self__, "client_secret_secret_ref", client_secret_secret_ref)
        if client_token_secret_ref is not None:
            pulumi.set(__self__, "client_token_secret_ref", client_token_secret_ref)
        if service_consumer_domain is not None:
            pulumi.set(__self__, "service_consumer_domain", service_consumer_domain)

    @property
    @pulumi.getter(name="accessTokenSecretRef")
    def access_token_secret_ref(
        self,
    ) -> Optional[
        pulumi.Input["ChallengeSpecSolverDns01AkamaiAccessTokenSecretRefPatchArgs"]
    ]:
        return pulumi.get(self, "access_token_secret_ref")

    @access_token_secret_ref.setter
    def access_token_secret_ref(
        self,
        value: Optional[
            pulumi.Input["ChallengeSpecSolverDns01AkamaiAccessTokenSecretRefPatchArgs"]
        ],
    ):
        pulumi.set(self, "access_token_secret_ref", value)

    @property
    @pulumi.getter(name="clientSecretSecretRef")
    def client_secret_secret_ref(
        self,
    ) -> Optional[
        pulumi.Input["ChallengeSpecSolverDns01AkamaiClientSecretSecretRefPatchArgs"]
    ]:
        return pulumi.get(self, "client_secret_secret_ref")

    @client_secret_secret_ref.setter
    def client_secret_secret_ref(
        self,
        value: Optional[
            pulumi.Input["ChallengeSpecSolverDns01AkamaiClientSecretSecretRefPatchArgs"]
        ],
    ):
        pulumi.set(self, "client_secret_secret_ref", value)

    @property
    @pulumi.getter(name="clientTokenSecretRef")
    def client_token_secret_ref(
        self,
    ) -> Optional[
        pulumi.Input["ChallengeSpecSolverDns01AkamaiClientTokenSecretRefPatchArgs"]
    ]:
        return pulumi.get(self, "client_token_secret_ref")

    @client_token_secret_ref.setter
    def client_token_secret_ref(
        self,
        value: Optional[
            pulumi.Input["ChallengeSpecSolverDns01AkamaiClientTokenSecretRefPatchArgs"]
        ],
    ):
        pulumi.set(self, "client_token_secret_ref", value)

    @property
    @pulumi.getter(name="serviceConsumerDomain")
    def service_consumer_domain(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "service_consumer_domain")

    @service_consumer_domain.setter
    def service_consumer_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_consumer_domain", value)


if not MYPY:

    class ChallengeSpecSolverDns01AkamaiArgsDict(TypedDict):
        """
        Use the Akamai DNS zone management API to manage DNS01 challenge records.
        """

        access_token_secret_ref: NotRequired[
            pulumi.Input["ChallengeSpecSolverDns01AkamaiAccessTokenSecretRefArgsDict"]
        ]
        client_secret_secret_ref: NotRequired[
            pulumi.Input["ChallengeSpecSolverDns01AkamaiClientSecretSecretRefArgsDict"]
        ]
        client_token_secret_ref: NotRequired[
            pulumi.Input["ChallengeSpecSolverDns01AkamaiClientTokenSecretRefArgsDict"]
        ]
        service_consumer_domain: NotRequired[pulumi.Input[str]]

elif False:
    ChallengeSpecSolverDns01AkamaiArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class ChallengeSpecSolverDns01AkamaiArgs:
    def __init__(
        __self__,
        *,
        access_token_secret_ref: Optional[
            pulumi.Input["ChallengeSpecSolverDns01AkamaiAccessTokenSecretRefArgs"]
        ] = None,
        client_secret_secret_ref: Optional[
            pulumi.Input["ChallengeSpecSolverDns01AkamaiClientSecretSecretRefArgs"]
        ] = None,
        client_token_secret_ref: Optional[
            pulumi.Input["ChallengeSpecSolverDns01AkamaiClientTokenSecretRefArgs"]
        ] = None,
        service_consumer_domain: Optional[pulumi.Input[str]] = None
    ):
        """
        Use the Akamai DNS zone management API to manage DNS01 challenge records.
        """
        if access_token_secret_ref is not None:
            pulumi.set(__self__, "access_token_secret_ref", access_token_secret_ref)
        if client_secret_secret_ref is not None:
            pulumi.set(__self__, "client_secret_secret_ref", client_secret_secret_ref)
        if client_token_secret_ref is not None:
            pulumi.set(__self__, "client_token_secret_ref", client_token_secret_ref)
        if service_consumer_domain is not None:
            pulumi.set(__self__, "service_consumer_domain", service_consumer_domain)

    @property
    @pulumi.getter(name="accessTokenSecretRef")
    def access_token_secret_ref(
        self,
    ) -> Optional[
        pulumi.Input["ChallengeSpecSolverDns01AkamaiAccessTokenSecretRefArgs"]
    ]:
        return pulumi.get(self, "access_token_secret_ref")

    @access_token_secret_ref.setter
    def access_token_secret_ref(
        self,
        value: Optional[
            pulumi.Input["ChallengeSpecSolverDns01AkamaiAccessTokenSecretRefArgs"]
        ],
    ):
        pulumi.set(self, "access_token_secret_ref", value)

    @property
    @pulumi.getter(name="clientSecretSecretRef")
    def client_secret_secret_ref(
        self,
    ) -> Optional[
        pulumi.Input["ChallengeSpecSolverDns01AkamaiClientSecretSecretRefArgs"]
    ]:
        return pulumi.get(self, "client_secret_secret_ref")

    @client_secret_secret_ref.setter
    def client_secret_secret_ref(
        self,
        value: Optional[
            pulumi.Input["ChallengeSpecSolverDns01AkamaiClientSecretSecretRefArgs"]
        ],
    ):
        pulumi.set(self, "client_secret_secret_ref", value)

    @property
    @pulumi.getter(name="clientTokenSecretRef")
    def client_token_secret_ref(
        self,
    ) -> Optional[
        pulumi.Input["ChallengeSpecSolverDns01AkamaiClientTokenSecretRefArgs"]
    ]:
        return pulumi.get(self, "client_token_secret_ref")

    @client_token_secret_ref.setter
    def client_token_secret_ref(
        self,
        value: Optional[
            pulumi.Input["ChallengeSpecSolverDns01AkamaiClientTokenSecretRefArgs"]
        ],
    ):
        pulumi.set(self, "client_token_secret_ref", value)

    @property
    @pulumi.getter(name="serviceConsumerDomain")
    def service_consumer_domain(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "service_consumer_domain")

    @service_consumer_domain.setter
    def service_consumer_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_consumer_domain", value)


if not MYPY:

    class ChallengeSpecSolverDns01AzureDNSClientSecretSecretRefPatchArgsDict(TypedDict):
        """
        Auth: Azure Service Principal:
        A reference to a Secret containing the password associated with the Service Principal.
        If set, ClientID and TenantID must also be set.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """

elif False:
    ChallengeSpecSolverDns01AzureDNSClientSecretSecretRefPatchArgsDict: TypeAlias = (
        Mapping[str, Any]
    )


@pulumi.input_type
class ChallengeSpecSolverDns01AzureDNSClientSecretSecretRefPatchArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        name: Optional[pulumi.Input[str]] = None
    ):
        """
        Auth: Azure Service Principal:
        A reference to a Secret containing the password associated with the Service Principal.
        If set, ClientID and TenantID must also be set.
        :param pulumi.Input[str] key: The key of the entry in the Secret resource's `data` field to be used.
               Some instances of this field may be defaulted, in others it may be
               required.
        :param pulumi.Input[str] name: Name of the resource being referred to.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:

    class ChallengeSpecSolverDns01AzureDNSClientSecretSecretRefArgsDict(TypedDict):
        """
        Auth: Azure Service Principal:
        A reference to a Secret containing the password associated with the Service Principal.
        If set, ClientID and TenantID must also be set.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """

elif False:
    ChallengeSpecSolverDns01AzureDNSClientSecretSecretRefArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverDns01AzureDNSClientSecretSecretRefArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        name: Optional[pulumi.Input[str]] = None
    ):
        """
        Auth: Azure Service Principal:
        A reference to a Secret containing the password associated with the Service Principal.
        If set, ClientID and TenantID must also be set.
        :param pulumi.Input[str] key: The key of the entry in the Secret resource's `data` field to be used.
               Some instances of this field may be defaulted, in others it may be
               required.
        :param pulumi.Input[str] name: Name of the resource being referred to.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:

    class ChallengeSpecSolverDns01AzureDNSManagedIdentityPatchArgsDict(TypedDict):
        """
        Auth: Azure Workload Identity or Azure Managed Service Identity:
        Settings to enable Azure Workload Identity or Azure Managed Service Identity
        If set, ClientID, ClientSecret and TenantID must not be set.
        """

        client_id: NotRequired[pulumi.Input[str]]
        """
        client ID of the managed identity, can not be used at the same time as resourceID
        """
        resource_id: NotRequired[pulumi.Input[str]]
        """
        resource ID of the managed identity, can not be used at the same time as clientID
        Cannot be used for Azure Managed Service Identity
        """
        tenant_id: NotRequired[pulumi.Input[str]]
        """
        tenant ID of the managed identity, can not be used at the same time as resourceID
        """

elif False:
    ChallengeSpecSolverDns01AzureDNSManagedIdentityPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverDns01AzureDNSManagedIdentityPatchArgs:
    def __init__(
        __self__,
        *,
        client_id: Optional[pulumi.Input[str]] = None,
        resource_id: Optional[pulumi.Input[str]] = None,
        tenant_id: Optional[pulumi.Input[str]] = None
    ):
        """
        Auth: Azure Workload Identity or Azure Managed Service Identity:
        Settings to enable Azure Workload Identity or Azure Managed Service Identity
        If set, ClientID, ClientSecret and TenantID must not be set.
        :param pulumi.Input[str] client_id: client ID of the managed identity, can not be used at the same time as resourceID
        :param pulumi.Input[str] resource_id: resource ID of the managed identity, can not be used at the same time as clientID
               Cannot be used for Azure Managed Service Identity
        :param pulumi.Input[str] tenant_id: tenant ID of the managed identity, can not be used at the same time as resourceID
        """
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if tenant_id is not None:
            pulumi.set(__self__, "tenant_id", tenant_id)

    @property
    @pulumi.getter(name="clientID")
    def client_id(self) -> Optional[pulumi.Input[str]]:
        """
        client ID of the managed identity, can not be used at the same time as resourceID
        """
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="resourceID")
    def resource_id(self) -> Optional[pulumi.Input[str]]:
        """
        resource ID of the managed identity, can not be used at the same time as clientID
        Cannot be used for Azure Managed Service Identity
        """
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_id", value)

    @property
    @pulumi.getter(name="tenantID")
    def tenant_id(self) -> Optional[pulumi.Input[str]]:
        """
        tenant ID of the managed identity, can not be used at the same time as resourceID
        """
        return pulumi.get(self, "tenant_id")

    @tenant_id.setter
    def tenant_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tenant_id", value)


if not MYPY:

    class ChallengeSpecSolverDns01AzureDNSManagedIdentityArgsDict(TypedDict):
        """
        Auth: Azure Workload Identity or Azure Managed Service Identity:
        Settings to enable Azure Workload Identity or Azure Managed Service Identity
        If set, ClientID, ClientSecret and TenantID must not be set.
        """

        client_id: NotRequired[pulumi.Input[str]]
        """
        client ID of the managed identity, can not be used at the same time as resourceID
        """
        resource_id: NotRequired[pulumi.Input[str]]
        """
        resource ID of the managed identity, can not be used at the same time as clientID
        Cannot be used for Azure Managed Service Identity
        """
        tenant_id: NotRequired[pulumi.Input[str]]
        """
        tenant ID of the managed identity, can not be used at the same time as resourceID
        """

elif False:
    ChallengeSpecSolverDns01AzureDNSManagedIdentityArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverDns01AzureDNSManagedIdentityArgs:
    def __init__(
        __self__,
        *,
        client_id: Optional[pulumi.Input[str]] = None,
        resource_id: Optional[pulumi.Input[str]] = None,
        tenant_id: Optional[pulumi.Input[str]] = None
    ):
        """
        Auth: Azure Workload Identity or Azure Managed Service Identity:
        Settings to enable Azure Workload Identity or Azure Managed Service Identity
        If set, ClientID, ClientSecret and TenantID must not be set.
        :param pulumi.Input[str] client_id: client ID of the managed identity, can not be used at the same time as resourceID
        :param pulumi.Input[str] resource_id: resource ID of the managed identity, can not be used at the same time as clientID
               Cannot be used for Azure Managed Service Identity
        :param pulumi.Input[str] tenant_id: tenant ID of the managed identity, can not be used at the same time as resourceID
        """
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if tenant_id is not None:
            pulumi.set(__self__, "tenant_id", tenant_id)

    @property
    @pulumi.getter(name="clientID")
    def client_id(self) -> Optional[pulumi.Input[str]]:
        """
        client ID of the managed identity, can not be used at the same time as resourceID
        """
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="resourceID")
    def resource_id(self) -> Optional[pulumi.Input[str]]:
        """
        resource ID of the managed identity, can not be used at the same time as clientID
        Cannot be used for Azure Managed Service Identity
        """
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_id", value)

    @property
    @pulumi.getter(name="tenantID")
    def tenant_id(self) -> Optional[pulumi.Input[str]]:
        """
        tenant ID of the managed identity, can not be used at the same time as resourceID
        """
        return pulumi.get(self, "tenant_id")

    @tenant_id.setter
    def tenant_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tenant_id", value)


if not MYPY:

    class ChallengeSpecSolverDns01AzureDNSPatchArgsDict(TypedDict):
        """
        Use the Microsoft Azure DNS API to manage DNS01 challenge records.
        """

        client_id: NotRequired[pulumi.Input[str]]
        """
        Auth: Azure Service Principal:
        The ClientID of the Azure Service Principal used to authenticate with Azure DNS.
        If set, ClientSecret and TenantID must also be set.
        """
        client_secret_secret_ref: NotRequired[
            pulumi.Input[
                "ChallengeSpecSolverDns01AzureDNSClientSecretSecretRefPatchArgsDict"
            ]
        ]
        environment: NotRequired[pulumi.Input[str]]
        """
        name of the Azure environment (default AzurePublicCloud)
        """
        hosted_zone_name: NotRequired[pulumi.Input[str]]
        """
        name of the DNS zone that should be used
        """
        managed_identity: NotRequired[
            pulumi.Input["ChallengeSpecSolverDns01AzureDNSManagedIdentityPatchArgsDict"]
        ]
        resource_group_name: NotRequired[pulumi.Input[str]]
        """
        resource group the DNS zone is located in
        """
        subscription_id: NotRequired[pulumi.Input[str]]
        """
        ID of the Azure subscription
        """
        tenant_id: NotRequired[pulumi.Input[str]]
        """
        Auth: Azure Service Principal:
        The TenantID of the Azure Service Principal used to authenticate with Azure DNS.
        If set, ClientID and ClientSecret must also be set.
        """

elif False:
    ChallengeSpecSolverDns01AzureDNSPatchArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class ChallengeSpecSolverDns01AzureDNSPatchArgs:
    def __init__(
        __self__,
        *,
        client_id: Optional[pulumi.Input[str]] = None,
        client_secret_secret_ref: Optional[
            pulumi.Input[
                "ChallengeSpecSolverDns01AzureDNSClientSecretSecretRefPatchArgs"
            ]
        ] = None,
        environment: Optional[pulumi.Input[str]] = None,
        hosted_zone_name: Optional[pulumi.Input[str]] = None,
        managed_identity: Optional[
            pulumi.Input["ChallengeSpecSolverDns01AzureDNSManagedIdentityPatchArgs"]
        ] = None,
        resource_group_name: Optional[pulumi.Input[str]] = None,
        subscription_id: Optional[pulumi.Input[str]] = None,
        tenant_id: Optional[pulumi.Input[str]] = None
    ):
        """
        Use the Microsoft Azure DNS API to manage DNS01 challenge records.
        :param pulumi.Input[str] client_id: Auth: Azure Service Principal:
               The ClientID of the Azure Service Principal used to authenticate with Azure DNS.
               If set, ClientSecret and TenantID must also be set.
        :param pulumi.Input[str] environment: name of the Azure environment (default AzurePublicCloud)
        :param pulumi.Input[str] hosted_zone_name: name of the DNS zone that should be used
        :param pulumi.Input[str] resource_group_name: resource group the DNS zone is located in
        :param pulumi.Input[str] subscription_id: ID of the Azure subscription
        :param pulumi.Input[str] tenant_id: Auth: Azure Service Principal:
               The TenantID of the Azure Service Principal used to authenticate with Azure DNS.
               If set, ClientID and ClientSecret must also be set.
        """
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret_secret_ref is not None:
            pulumi.set(__self__, "client_secret_secret_ref", client_secret_secret_ref)
        if environment is not None:
            pulumi.set(__self__, "environment", environment)
        if hosted_zone_name is not None:
            pulumi.set(__self__, "hosted_zone_name", hosted_zone_name)
        if managed_identity is not None:
            pulumi.set(__self__, "managed_identity", managed_identity)
        if resource_group_name is not None:
            pulumi.set(__self__, "resource_group_name", resource_group_name)
        if subscription_id is not None:
            pulumi.set(__self__, "subscription_id", subscription_id)
        if tenant_id is not None:
            pulumi.set(__self__, "tenant_id", tenant_id)

    @property
    @pulumi.getter(name="clientID")
    def client_id(self) -> Optional[pulumi.Input[str]]:
        """
        Auth: Azure Service Principal:
        The ClientID of the Azure Service Principal used to authenticate with Azure DNS.
        If set, ClientSecret and TenantID must also be set.
        """
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecretSecretRef")
    def client_secret_secret_ref(
        self,
    ) -> Optional[
        pulumi.Input["ChallengeSpecSolverDns01AzureDNSClientSecretSecretRefPatchArgs"]
    ]:
        return pulumi.get(self, "client_secret_secret_ref")

    @client_secret_secret_ref.setter
    def client_secret_secret_ref(
        self,
        value: Optional[
            pulumi.Input[
                "ChallengeSpecSolverDns01AzureDNSClientSecretSecretRefPatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "client_secret_secret_ref", value)

    @property
    @pulumi.getter
    def environment(self) -> Optional[pulumi.Input[str]]:
        """
        name of the Azure environment (default AzurePublicCloud)
        """
        return pulumi.get(self, "environment")

    @environment.setter
    def environment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "environment", value)

    @property
    @pulumi.getter(name="hostedZoneName")
    def hosted_zone_name(self) -> Optional[pulumi.Input[str]]:
        """
        name of the DNS zone that should be used
        """
        return pulumi.get(self, "hosted_zone_name")

    @hosted_zone_name.setter
    def hosted_zone_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hosted_zone_name", value)

    @property
    @pulumi.getter(name="managedIdentity")
    def managed_identity(
        self,
    ) -> Optional[
        pulumi.Input["ChallengeSpecSolverDns01AzureDNSManagedIdentityPatchArgs"]
    ]:
        return pulumi.get(self, "managed_identity")

    @managed_identity.setter
    def managed_identity(
        self,
        value: Optional[
            pulumi.Input["ChallengeSpecSolverDns01AzureDNSManagedIdentityPatchArgs"]
        ],
    ):
        pulumi.set(self, "managed_identity", value)

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> Optional[pulumi.Input[str]]:
        """
        resource group the DNS zone is located in
        """
        return pulumi.get(self, "resource_group_name")

    @resource_group_name.setter
    def resource_group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_group_name", value)

    @property
    @pulumi.getter(name="subscriptionID")
    def subscription_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the Azure subscription
        """
        return pulumi.get(self, "subscription_id")

    @subscription_id.setter
    def subscription_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subscription_id", value)

    @property
    @pulumi.getter(name="tenantID")
    def tenant_id(self) -> Optional[pulumi.Input[str]]:
        """
        Auth: Azure Service Principal:
        The TenantID of the Azure Service Principal used to authenticate with Azure DNS.
        If set, ClientID and ClientSecret must also be set.
        """
        return pulumi.get(self, "tenant_id")

    @tenant_id.setter
    def tenant_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tenant_id", value)


if not MYPY:

    class ChallengeSpecSolverDns01AzureDNSArgsDict(TypedDict):
        """
        Use the Microsoft Azure DNS API to manage DNS01 challenge records.
        """

        client_id: NotRequired[pulumi.Input[str]]
        """
        Auth: Azure Service Principal:
        The ClientID of the Azure Service Principal used to authenticate with Azure DNS.
        If set, ClientSecret and TenantID must also be set.
        """
        client_secret_secret_ref: NotRequired[
            pulumi.Input[
                "ChallengeSpecSolverDns01AzureDNSClientSecretSecretRefArgsDict"
            ]
        ]
        environment: NotRequired[pulumi.Input[str]]
        """
        name of the Azure environment (default AzurePublicCloud)
        """
        hosted_zone_name: NotRequired[pulumi.Input[str]]
        """
        name of the DNS zone that should be used
        """
        managed_identity: NotRequired[
            pulumi.Input["ChallengeSpecSolverDns01AzureDNSManagedIdentityArgsDict"]
        ]
        resource_group_name: NotRequired[pulumi.Input[str]]
        """
        resource group the DNS zone is located in
        """
        subscription_id: NotRequired[pulumi.Input[str]]
        """
        ID of the Azure subscription
        """
        tenant_id: NotRequired[pulumi.Input[str]]
        """
        Auth: Azure Service Principal:
        The TenantID of the Azure Service Principal used to authenticate with Azure DNS.
        If set, ClientID and ClientSecret must also be set.
        """

elif False:
    ChallengeSpecSolverDns01AzureDNSArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class ChallengeSpecSolverDns01AzureDNSArgs:
    def __init__(
        __self__,
        *,
        client_id: Optional[pulumi.Input[str]] = None,
        client_secret_secret_ref: Optional[
            pulumi.Input["ChallengeSpecSolverDns01AzureDNSClientSecretSecretRefArgs"]
        ] = None,
        environment: Optional[pulumi.Input[str]] = None,
        hosted_zone_name: Optional[pulumi.Input[str]] = None,
        managed_identity: Optional[
            pulumi.Input["ChallengeSpecSolverDns01AzureDNSManagedIdentityArgs"]
        ] = None,
        resource_group_name: Optional[pulumi.Input[str]] = None,
        subscription_id: Optional[pulumi.Input[str]] = None,
        tenant_id: Optional[pulumi.Input[str]] = None
    ):
        """
        Use the Microsoft Azure DNS API to manage DNS01 challenge records.
        :param pulumi.Input[str] client_id: Auth: Azure Service Principal:
               The ClientID of the Azure Service Principal used to authenticate with Azure DNS.
               If set, ClientSecret and TenantID must also be set.
        :param pulumi.Input[str] environment: name of the Azure environment (default AzurePublicCloud)
        :param pulumi.Input[str] hosted_zone_name: name of the DNS zone that should be used
        :param pulumi.Input[str] resource_group_name: resource group the DNS zone is located in
        :param pulumi.Input[str] subscription_id: ID of the Azure subscription
        :param pulumi.Input[str] tenant_id: Auth: Azure Service Principal:
               The TenantID of the Azure Service Principal used to authenticate with Azure DNS.
               If set, ClientID and ClientSecret must also be set.
        """
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret_secret_ref is not None:
            pulumi.set(__self__, "client_secret_secret_ref", client_secret_secret_ref)
        if environment is not None:
            pulumi.set(__self__, "environment", environment)
        if hosted_zone_name is not None:
            pulumi.set(__self__, "hosted_zone_name", hosted_zone_name)
        if managed_identity is not None:
            pulumi.set(__self__, "managed_identity", managed_identity)
        if resource_group_name is not None:
            pulumi.set(__self__, "resource_group_name", resource_group_name)
        if subscription_id is not None:
            pulumi.set(__self__, "subscription_id", subscription_id)
        if tenant_id is not None:
            pulumi.set(__self__, "tenant_id", tenant_id)

    @property
    @pulumi.getter(name="clientID")
    def client_id(self) -> Optional[pulumi.Input[str]]:
        """
        Auth: Azure Service Principal:
        The ClientID of the Azure Service Principal used to authenticate with Azure DNS.
        If set, ClientSecret and TenantID must also be set.
        """
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecretSecretRef")
    def client_secret_secret_ref(
        self,
    ) -> Optional[
        pulumi.Input["ChallengeSpecSolverDns01AzureDNSClientSecretSecretRefArgs"]
    ]:
        return pulumi.get(self, "client_secret_secret_ref")

    @client_secret_secret_ref.setter
    def client_secret_secret_ref(
        self,
        value: Optional[
            pulumi.Input["ChallengeSpecSolverDns01AzureDNSClientSecretSecretRefArgs"]
        ],
    ):
        pulumi.set(self, "client_secret_secret_ref", value)

    @property
    @pulumi.getter
    def environment(self) -> Optional[pulumi.Input[str]]:
        """
        name of the Azure environment (default AzurePublicCloud)
        """
        return pulumi.get(self, "environment")

    @environment.setter
    def environment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "environment", value)

    @property
    @pulumi.getter(name="hostedZoneName")
    def hosted_zone_name(self) -> Optional[pulumi.Input[str]]:
        """
        name of the DNS zone that should be used
        """
        return pulumi.get(self, "hosted_zone_name")

    @hosted_zone_name.setter
    def hosted_zone_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hosted_zone_name", value)

    @property
    @pulumi.getter(name="managedIdentity")
    def managed_identity(
        self,
    ) -> Optional[pulumi.Input["ChallengeSpecSolverDns01AzureDNSManagedIdentityArgs"]]:
        return pulumi.get(self, "managed_identity")

    @managed_identity.setter
    def managed_identity(
        self,
        value: Optional[
            pulumi.Input["ChallengeSpecSolverDns01AzureDNSManagedIdentityArgs"]
        ],
    ):
        pulumi.set(self, "managed_identity", value)

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> Optional[pulumi.Input[str]]:
        """
        resource group the DNS zone is located in
        """
        return pulumi.get(self, "resource_group_name")

    @resource_group_name.setter
    def resource_group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_group_name", value)

    @property
    @pulumi.getter(name="subscriptionID")
    def subscription_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the Azure subscription
        """
        return pulumi.get(self, "subscription_id")

    @subscription_id.setter
    def subscription_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subscription_id", value)

    @property
    @pulumi.getter(name="tenantID")
    def tenant_id(self) -> Optional[pulumi.Input[str]]:
        """
        Auth: Azure Service Principal:
        The TenantID of the Azure Service Principal used to authenticate with Azure DNS.
        If set, ClientID and ClientSecret must also be set.
        """
        return pulumi.get(self, "tenant_id")

    @tenant_id.setter
    def tenant_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tenant_id", value)


if not MYPY:

    class ChallengeSpecSolverDns01CloudDNSPatchArgsDict(TypedDict):
        """
        Use the Google Cloud DNS API to manage DNS01 challenge records.
        """

        hosted_zone_name: NotRequired[pulumi.Input[str]]
        """
        HostedZoneName is an optional field that tells cert-manager in which
        Cloud DNS zone the challenge record has to be created.
        If left empty cert-manager will automatically choose a zone.
        """
        project: NotRequired[pulumi.Input[str]]
        service_account_secret_ref: NotRequired[
            pulumi.Input[
                "ChallengeSpecSolverDns01CloudDNSServiceAccountSecretRefPatchArgsDict"
            ]
        ]

elif False:
    ChallengeSpecSolverDns01CloudDNSPatchArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class ChallengeSpecSolverDns01CloudDNSPatchArgs:
    def __init__(
        __self__,
        *,
        hosted_zone_name: Optional[pulumi.Input[str]] = None,
        project: Optional[pulumi.Input[str]] = None,
        service_account_secret_ref: Optional[
            pulumi.Input[
                "ChallengeSpecSolverDns01CloudDNSServiceAccountSecretRefPatchArgs"
            ]
        ] = None
    ):
        """
        Use the Google Cloud DNS API to manage DNS01 challenge records.
        :param pulumi.Input[str] hosted_zone_name: HostedZoneName is an optional field that tells cert-manager in which
               Cloud DNS zone the challenge record has to be created.
               If left empty cert-manager will automatically choose a zone.
        """
        if hosted_zone_name is not None:
            pulumi.set(__self__, "hosted_zone_name", hosted_zone_name)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if service_account_secret_ref is not None:
            pulumi.set(
                __self__, "service_account_secret_ref", service_account_secret_ref
            )

    @property
    @pulumi.getter(name="hostedZoneName")
    def hosted_zone_name(self) -> Optional[pulumi.Input[str]]:
        """
        HostedZoneName is an optional field that tells cert-manager in which
        Cloud DNS zone the challenge record has to be created.
        If left empty cert-manager will automatically choose a zone.
        """
        return pulumi.get(self, "hosted_zone_name")

    @hosted_zone_name.setter
    def hosted_zone_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hosted_zone_name", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter(name="serviceAccountSecretRef")
    def service_account_secret_ref(
        self,
    ) -> Optional[
        pulumi.Input["ChallengeSpecSolverDns01CloudDNSServiceAccountSecretRefPatchArgs"]
    ]:
        return pulumi.get(self, "service_account_secret_ref")

    @service_account_secret_ref.setter
    def service_account_secret_ref(
        self,
        value: Optional[
            pulumi.Input[
                "ChallengeSpecSolverDns01CloudDNSServiceAccountSecretRefPatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "service_account_secret_ref", value)


if not MYPY:

    class ChallengeSpecSolverDns01CloudDNSServiceAccountSecretRefPatchArgsDict(
        TypedDict
    ):
        """
        A reference to a specific 'key' within a Secret resource.
        In some instances, `key` is a required field.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """

elif False:
    ChallengeSpecSolverDns01CloudDNSServiceAccountSecretRefPatchArgsDict: TypeAlias = (
        Mapping[str, Any]
    )


@pulumi.input_type
class ChallengeSpecSolverDns01CloudDNSServiceAccountSecretRefPatchArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        name: Optional[pulumi.Input[str]] = None
    ):
        """
        A reference to a specific 'key' within a Secret resource.
        In some instances, `key` is a required field.
        :param pulumi.Input[str] key: The key of the entry in the Secret resource's `data` field to be used.
               Some instances of this field may be defaulted, in others it may be
               required.
        :param pulumi.Input[str] name: Name of the resource being referred to.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:

    class ChallengeSpecSolverDns01CloudDNSServiceAccountSecretRefArgsDict(TypedDict):
        """
        A reference to a specific 'key' within a Secret resource.
        In some instances, `key` is a required field.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """

elif False:
    ChallengeSpecSolverDns01CloudDNSServiceAccountSecretRefArgsDict: TypeAlias = (
        Mapping[str, Any]
    )


@pulumi.input_type
class ChallengeSpecSolverDns01CloudDNSServiceAccountSecretRefArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        name: Optional[pulumi.Input[str]] = None
    ):
        """
        A reference to a specific 'key' within a Secret resource.
        In some instances, `key` is a required field.
        :param pulumi.Input[str] key: The key of the entry in the Secret resource's `data` field to be used.
               Some instances of this field may be defaulted, in others it may be
               required.
        :param pulumi.Input[str] name: Name of the resource being referred to.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:

    class ChallengeSpecSolverDns01CloudDNSArgsDict(TypedDict):
        """
        Use the Google Cloud DNS API to manage DNS01 challenge records.
        """

        hosted_zone_name: NotRequired[pulumi.Input[str]]
        """
        HostedZoneName is an optional field that tells cert-manager in which
        Cloud DNS zone the challenge record has to be created.
        If left empty cert-manager will automatically choose a zone.
        """
        project: NotRequired[pulumi.Input[str]]
        service_account_secret_ref: NotRequired[
            pulumi.Input[
                "ChallengeSpecSolverDns01CloudDNSServiceAccountSecretRefArgsDict"
            ]
        ]

elif False:
    ChallengeSpecSolverDns01CloudDNSArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class ChallengeSpecSolverDns01CloudDNSArgs:
    def __init__(
        __self__,
        *,
        hosted_zone_name: Optional[pulumi.Input[str]] = None,
        project: Optional[pulumi.Input[str]] = None,
        service_account_secret_ref: Optional[
            pulumi.Input["ChallengeSpecSolverDns01CloudDNSServiceAccountSecretRefArgs"]
        ] = None
    ):
        """
        Use the Google Cloud DNS API to manage DNS01 challenge records.
        :param pulumi.Input[str] hosted_zone_name: HostedZoneName is an optional field that tells cert-manager in which
               Cloud DNS zone the challenge record has to be created.
               If left empty cert-manager will automatically choose a zone.
        """
        if hosted_zone_name is not None:
            pulumi.set(__self__, "hosted_zone_name", hosted_zone_name)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if service_account_secret_ref is not None:
            pulumi.set(
                __self__, "service_account_secret_ref", service_account_secret_ref
            )

    @property
    @pulumi.getter(name="hostedZoneName")
    def hosted_zone_name(self) -> Optional[pulumi.Input[str]]:
        """
        HostedZoneName is an optional field that tells cert-manager in which
        Cloud DNS zone the challenge record has to be created.
        If left empty cert-manager will automatically choose a zone.
        """
        return pulumi.get(self, "hosted_zone_name")

    @hosted_zone_name.setter
    def hosted_zone_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hosted_zone_name", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter(name="serviceAccountSecretRef")
    def service_account_secret_ref(
        self,
    ) -> Optional[
        pulumi.Input["ChallengeSpecSolverDns01CloudDNSServiceAccountSecretRefArgs"]
    ]:
        return pulumi.get(self, "service_account_secret_ref")

    @service_account_secret_ref.setter
    def service_account_secret_ref(
        self,
        value: Optional[
            pulumi.Input["ChallengeSpecSolverDns01CloudDNSServiceAccountSecretRefArgs"]
        ],
    ):
        pulumi.set(self, "service_account_secret_ref", value)


if not MYPY:

    class ChallengeSpecSolverDns01CloudflareApiKeySecretRefPatchArgsDict(TypedDict):
        """
        API key to use to authenticate with Cloudflare.
        Note: using an API token to authenticate is now the recommended method
        as it allows greater control of permissions.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """

elif False:
    ChallengeSpecSolverDns01CloudflareApiKeySecretRefPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverDns01CloudflareApiKeySecretRefPatchArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        name: Optional[pulumi.Input[str]] = None
    ):
        """
        API key to use to authenticate with Cloudflare.
        Note: using an API token to authenticate is now the recommended method
        as it allows greater control of permissions.
        :param pulumi.Input[str] key: The key of the entry in the Secret resource's `data` field to be used.
               Some instances of this field may be defaulted, in others it may be
               required.
        :param pulumi.Input[str] name: Name of the resource being referred to.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:

    class ChallengeSpecSolverDns01CloudflareApiKeySecretRefArgsDict(TypedDict):
        """
        API key to use to authenticate with Cloudflare.
        Note: using an API token to authenticate is now the recommended method
        as it allows greater control of permissions.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """

elif False:
    ChallengeSpecSolverDns01CloudflareApiKeySecretRefArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverDns01CloudflareApiKeySecretRefArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        name: Optional[pulumi.Input[str]] = None
    ):
        """
        API key to use to authenticate with Cloudflare.
        Note: using an API token to authenticate is now the recommended method
        as it allows greater control of permissions.
        :param pulumi.Input[str] key: The key of the entry in the Secret resource's `data` field to be used.
               Some instances of this field may be defaulted, in others it may be
               required.
        :param pulumi.Input[str] name: Name of the resource being referred to.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:

    class ChallengeSpecSolverDns01CloudflareApiTokenSecretRefPatchArgsDict(TypedDict):
        """
        API token used to authenticate with Cloudflare.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """

elif False:
    ChallengeSpecSolverDns01CloudflareApiTokenSecretRefPatchArgsDict: TypeAlias = (
        Mapping[str, Any]
    )


@pulumi.input_type
class ChallengeSpecSolverDns01CloudflareApiTokenSecretRefPatchArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        name: Optional[pulumi.Input[str]] = None
    ):
        """
        API token used to authenticate with Cloudflare.
        :param pulumi.Input[str] key: The key of the entry in the Secret resource's `data` field to be used.
               Some instances of this field may be defaulted, in others it may be
               required.
        :param pulumi.Input[str] name: Name of the resource being referred to.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:

    class ChallengeSpecSolverDns01CloudflareApiTokenSecretRefArgsDict(TypedDict):
        """
        API token used to authenticate with Cloudflare.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """

elif False:
    ChallengeSpecSolverDns01CloudflareApiTokenSecretRefArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverDns01CloudflareApiTokenSecretRefArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        name: Optional[pulumi.Input[str]] = None
    ):
        """
        API token used to authenticate with Cloudflare.
        :param pulumi.Input[str] key: The key of the entry in the Secret resource's `data` field to be used.
               Some instances of this field may be defaulted, in others it may be
               required.
        :param pulumi.Input[str] name: Name of the resource being referred to.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:

    class ChallengeSpecSolverDns01CloudflarePatchArgsDict(TypedDict):
        """
        Use the Cloudflare API to manage DNS01 challenge records.
        """

        api_key_secret_ref: NotRequired[
            pulumi.Input[
                "ChallengeSpecSolverDns01CloudflareApiKeySecretRefPatchArgsDict"
            ]
        ]
        api_token_secret_ref: NotRequired[
            pulumi.Input[
                "ChallengeSpecSolverDns01CloudflareApiTokenSecretRefPatchArgsDict"
            ]
        ]
        email: NotRequired[pulumi.Input[str]]
        """
        Email of the account, only required when using API key based authentication.
        """

elif False:
    ChallengeSpecSolverDns01CloudflarePatchArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class ChallengeSpecSolverDns01CloudflarePatchArgs:
    def __init__(
        __self__,
        *,
        api_key_secret_ref: Optional[
            pulumi.Input["ChallengeSpecSolverDns01CloudflareApiKeySecretRefPatchArgs"]
        ] = None,
        api_token_secret_ref: Optional[
            pulumi.Input["ChallengeSpecSolverDns01CloudflareApiTokenSecretRefPatchArgs"]
        ] = None,
        email: Optional[pulumi.Input[str]] = None
    ):
        """
        Use the Cloudflare API to manage DNS01 challenge records.
        :param pulumi.Input[str] email: Email of the account, only required when using API key based authentication.
        """
        if api_key_secret_ref is not None:
            pulumi.set(__self__, "api_key_secret_ref", api_key_secret_ref)
        if api_token_secret_ref is not None:
            pulumi.set(__self__, "api_token_secret_ref", api_token_secret_ref)
        if email is not None:
            pulumi.set(__self__, "email", email)

    @property
    @pulumi.getter(name="apiKeySecretRef")
    def api_key_secret_ref(
        self,
    ) -> Optional[
        pulumi.Input["ChallengeSpecSolverDns01CloudflareApiKeySecretRefPatchArgs"]
    ]:
        return pulumi.get(self, "api_key_secret_ref")

    @api_key_secret_ref.setter
    def api_key_secret_ref(
        self,
        value: Optional[
            pulumi.Input["ChallengeSpecSolverDns01CloudflareApiKeySecretRefPatchArgs"]
        ],
    ):
        pulumi.set(self, "api_key_secret_ref", value)

    @property
    @pulumi.getter(name="apiTokenSecretRef")
    def api_token_secret_ref(
        self,
    ) -> Optional[
        pulumi.Input["ChallengeSpecSolverDns01CloudflareApiTokenSecretRefPatchArgs"]
    ]:
        return pulumi.get(self, "api_token_secret_ref")

    @api_token_secret_ref.setter
    def api_token_secret_ref(
        self,
        value: Optional[
            pulumi.Input["ChallengeSpecSolverDns01CloudflareApiTokenSecretRefPatchArgs"]
        ],
    ):
        pulumi.set(self, "api_token_secret_ref", value)

    @property
    @pulumi.getter
    def email(self) -> Optional[pulumi.Input[str]]:
        """
        Email of the account, only required when using API key based authentication.
        """
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email", value)


if not MYPY:

    class ChallengeSpecSolverDns01CloudflareArgsDict(TypedDict):
        """
        Use the Cloudflare API to manage DNS01 challenge records.
        """

        api_key_secret_ref: NotRequired[
            pulumi.Input["ChallengeSpecSolverDns01CloudflareApiKeySecretRefArgsDict"]
        ]
        api_token_secret_ref: NotRequired[
            pulumi.Input["ChallengeSpecSolverDns01CloudflareApiTokenSecretRefArgsDict"]
        ]
        email: NotRequired[pulumi.Input[str]]
        """
        Email of the account, only required when using API key based authentication.
        """

elif False:
    ChallengeSpecSolverDns01CloudflareArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class ChallengeSpecSolverDns01CloudflareArgs:
    def __init__(
        __self__,
        *,
        api_key_secret_ref: Optional[
            pulumi.Input["ChallengeSpecSolverDns01CloudflareApiKeySecretRefArgs"]
        ] = None,
        api_token_secret_ref: Optional[
            pulumi.Input["ChallengeSpecSolverDns01CloudflareApiTokenSecretRefArgs"]
        ] = None,
        email: Optional[pulumi.Input[str]] = None
    ):
        """
        Use the Cloudflare API to manage DNS01 challenge records.
        :param pulumi.Input[str] email: Email of the account, only required when using API key based authentication.
        """
        if api_key_secret_ref is not None:
            pulumi.set(__self__, "api_key_secret_ref", api_key_secret_ref)
        if api_token_secret_ref is not None:
            pulumi.set(__self__, "api_token_secret_ref", api_token_secret_ref)
        if email is not None:
            pulumi.set(__self__, "email", email)

    @property
    @pulumi.getter(name="apiKeySecretRef")
    def api_key_secret_ref(
        self,
    ) -> Optional[
        pulumi.Input["ChallengeSpecSolverDns01CloudflareApiKeySecretRefArgs"]
    ]:
        return pulumi.get(self, "api_key_secret_ref")

    @api_key_secret_ref.setter
    def api_key_secret_ref(
        self,
        value: Optional[
            pulumi.Input["ChallengeSpecSolverDns01CloudflareApiKeySecretRefArgs"]
        ],
    ):
        pulumi.set(self, "api_key_secret_ref", value)

    @property
    @pulumi.getter(name="apiTokenSecretRef")
    def api_token_secret_ref(
        self,
    ) -> Optional[
        pulumi.Input["ChallengeSpecSolverDns01CloudflareApiTokenSecretRefArgs"]
    ]:
        return pulumi.get(self, "api_token_secret_ref")

    @api_token_secret_ref.setter
    def api_token_secret_ref(
        self,
        value: Optional[
            pulumi.Input["ChallengeSpecSolverDns01CloudflareApiTokenSecretRefArgs"]
        ],
    ):
        pulumi.set(self, "api_token_secret_ref", value)

    @property
    @pulumi.getter
    def email(self) -> Optional[pulumi.Input[str]]:
        """
        Email of the account, only required when using API key based authentication.
        """
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email", value)


if not MYPY:

    class ChallengeSpecSolverDns01DigitaloceanPatchArgsDict(TypedDict):
        """
        Use the DigitalOcean DNS API to manage DNS01 challenge records.
        """

        token_secret_ref: NotRequired[
            pulumi.Input[
                "ChallengeSpecSolverDns01DigitaloceanTokenSecretRefPatchArgsDict"
            ]
        ]

elif False:
    ChallengeSpecSolverDns01DigitaloceanPatchArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class ChallengeSpecSolverDns01DigitaloceanPatchArgs:
    def __init__(
        __self__,
        *,
        token_secret_ref: Optional[
            pulumi.Input["ChallengeSpecSolverDns01DigitaloceanTokenSecretRefPatchArgs"]
        ] = None
    ):
        """
        Use the DigitalOcean DNS API to manage DNS01 challenge records.
        """
        if token_secret_ref is not None:
            pulumi.set(__self__, "token_secret_ref", token_secret_ref)

    @property
    @pulumi.getter(name="tokenSecretRef")
    def token_secret_ref(
        self,
    ) -> Optional[
        pulumi.Input["ChallengeSpecSolverDns01DigitaloceanTokenSecretRefPatchArgs"]
    ]:
        return pulumi.get(self, "token_secret_ref")

    @token_secret_ref.setter
    def token_secret_ref(
        self,
        value: Optional[
            pulumi.Input["ChallengeSpecSolverDns01DigitaloceanTokenSecretRefPatchArgs"]
        ],
    ):
        pulumi.set(self, "token_secret_ref", value)


if not MYPY:

    class ChallengeSpecSolverDns01DigitaloceanTokenSecretRefPatchArgsDict(TypedDict):
        """
        A reference to a specific 'key' within a Secret resource.
        In some instances, `key` is a required field.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """

elif False:
    ChallengeSpecSolverDns01DigitaloceanTokenSecretRefPatchArgsDict: TypeAlias = (
        Mapping[str, Any]
    )


@pulumi.input_type
class ChallengeSpecSolverDns01DigitaloceanTokenSecretRefPatchArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        name: Optional[pulumi.Input[str]] = None
    ):
        """
        A reference to a specific 'key' within a Secret resource.
        In some instances, `key` is a required field.
        :param pulumi.Input[str] key: The key of the entry in the Secret resource's `data` field to be used.
               Some instances of this field may be defaulted, in others it may be
               required.
        :param pulumi.Input[str] name: Name of the resource being referred to.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:

    class ChallengeSpecSolverDns01DigitaloceanTokenSecretRefArgsDict(TypedDict):
        """
        A reference to a specific 'key' within a Secret resource.
        In some instances, `key` is a required field.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """

elif False:
    ChallengeSpecSolverDns01DigitaloceanTokenSecretRefArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverDns01DigitaloceanTokenSecretRefArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        name: Optional[pulumi.Input[str]] = None
    ):
        """
        A reference to a specific 'key' within a Secret resource.
        In some instances, `key` is a required field.
        :param pulumi.Input[str] key: The key of the entry in the Secret resource's `data` field to be used.
               Some instances of this field may be defaulted, in others it may be
               required.
        :param pulumi.Input[str] name: Name of the resource being referred to.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:

    class ChallengeSpecSolverDns01DigitaloceanArgsDict(TypedDict):
        """
        Use the DigitalOcean DNS API to manage DNS01 challenge records.
        """

        token_secret_ref: NotRequired[
            pulumi.Input["ChallengeSpecSolverDns01DigitaloceanTokenSecretRefArgsDict"]
        ]

elif False:
    ChallengeSpecSolverDns01DigitaloceanArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class ChallengeSpecSolverDns01DigitaloceanArgs:
    def __init__(
        __self__,
        *,
        token_secret_ref: Optional[
            pulumi.Input["ChallengeSpecSolverDns01DigitaloceanTokenSecretRefArgs"]
        ] = None
    ):
        """
        Use the DigitalOcean DNS API to manage DNS01 challenge records.
        """
        if token_secret_ref is not None:
            pulumi.set(__self__, "token_secret_ref", token_secret_ref)

    @property
    @pulumi.getter(name="tokenSecretRef")
    def token_secret_ref(
        self,
    ) -> Optional[
        pulumi.Input["ChallengeSpecSolverDns01DigitaloceanTokenSecretRefArgs"]
    ]:
        return pulumi.get(self, "token_secret_ref")

    @token_secret_ref.setter
    def token_secret_ref(
        self,
        value: Optional[
            pulumi.Input["ChallengeSpecSolverDns01DigitaloceanTokenSecretRefArgs"]
        ],
    ):
        pulumi.set(self, "token_secret_ref", value)


if not MYPY:

    class ChallengeSpecSolverDns01PatchArgsDict(TypedDict):
        """
        Configures cert-manager to attempt to complete authorizations by
        performing the DNS01 challenge flow.
        """

        acme_dns: NotRequired[
            pulumi.Input["ChallengeSpecSolverDns01AcmeDNSPatchArgsDict"]
        ]
        akamai: NotRequired[pulumi.Input["ChallengeSpecSolverDns01AkamaiPatchArgsDict"]]
        azure_dns: NotRequired[
            pulumi.Input["ChallengeSpecSolverDns01AzureDNSPatchArgsDict"]
        ]
        cloud_dns: NotRequired[
            pulumi.Input["ChallengeSpecSolverDns01CloudDNSPatchArgsDict"]
        ]
        cloudflare: NotRequired[
            pulumi.Input["ChallengeSpecSolverDns01CloudflarePatchArgsDict"]
        ]
        cname_strategy: NotRequired[pulumi.Input[str]]
        """
        CNAMEStrategy configures how the DNS01 provider should handle CNAME
        records when found in DNS zones.
        """
        digitalocean: NotRequired[
            pulumi.Input["ChallengeSpecSolverDns01DigitaloceanPatchArgsDict"]
        ]
        rfc2136: NotRequired[
            pulumi.Input["ChallengeSpecSolverDns01Rfc2136PatchArgsDict"]
        ]
        route53: NotRequired[
            pulumi.Input["ChallengeSpecSolverDns01Route53PatchArgsDict"]
        ]
        webhook: NotRequired[
            pulumi.Input["ChallengeSpecSolverDns01WebhookPatchArgsDict"]
        ]

elif False:
    ChallengeSpecSolverDns01PatchArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class ChallengeSpecSolverDns01PatchArgs:
    def __init__(
        __self__,
        *,
        acme_dns: Optional[
            pulumi.Input["ChallengeSpecSolverDns01AcmeDNSPatchArgs"]
        ] = None,
        akamai: Optional[
            pulumi.Input["ChallengeSpecSolverDns01AkamaiPatchArgs"]
        ] = None,
        azure_dns: Optional[
            pulumi.Input["ChallengeSpecSolverDns01AzureDNSPatchArgs"]
        ] = None,
        cloud_dns: Optional[
            pulumi.Input["ChallengeSpecSolverDns01CloudDNSPatchArgs"]
        ] = None,
        cloudflare: Optional[
            pulumi.Input["ChallengeSpecSolverDns01CloudflarePatchArgs"]
        ] = None,
        cname_strategy: Optional[pulumi.Input[str]] = None,
        digitalocean: Optional[
            pulumi.Input["ChallengeSpecSolverDns01DigitaloceanPatchArgs"]
        ] = None,
        rfc2136: Optional[
            pulumi.Input["ChallengeSpecSolverDns01Rfc2136PatchArgs"]
        ] = None,
        route53: Optional[
            pulumi.Input["ChallengeSpecSolverDns01Route53PatchArgs"]
        ] = None,
        webhook: Optional[
            pulumi.Input["ChallengeSpecSolverDns01WebhookPatchArgs"]
        ] = None
    ):
        """
        Configures cert-manager to attempt to complete authorizations by
        performing the DNS01 challenge flow.
        :param pulumi.Input[str] cname_strategy: CNAMEStrategy configures how the DNS01 provider should handle CNAME
               records when found in DNS zones.
        """
        if acme_dns is not None:
            pulumi.set(__self__, "acme_dns", acme_dns)
        if akamai is not None:
            pulumi.set(__self__, "akamai", akamai)
        if azure_dns is not None:
            pulumi.set(__self__, "azure_dns", azure_dns)
        if cloud_dns is not None:
            pulumi.set(__self__, "cloud_dns", cloud_dns)
        if cloudflare is not None:
            pulumi.set(__self__, "cloudflare", cloudflare)
        if cname_strategy is not None:
            pulumi.set(__self__, "cname_strategy", cname_strategy)
        if digitalocean is not None:
            pulumi.set(__self__, "digitalocean", digitalocean)
        if rfc2136 is not None:
            pulumi.set(__self__, "rfc2136", rfc2136)
        if route53 is not None:
            pulumi.set(__self__, "route53", route53)
        if webhook is not None:
            pulumi.set(__self__, "webhook", webhook)

    @property
    @pulumi.getter(name="acmeDNS")
    def acme_dns(
        self,
    ) -> Optional[pulumi.Input["ChallengeSpecSolverDns01AcmeDNSPatchArgs"]]:
        return pulumi.get(self, "acme_dns")

    @acme_dns.setter
    def acme_dns(
        self, value: Optional[pulumi.Input["ChallengeSpecSolverDns01AcmeDNSPatchArgs"]]
    ):
        pulumi.set(self, "acme_dns", value)

    @property
    @pulumi.getter
    def akamai(
        self,
    ) -> Optional[pulumi.Input["ChallengeSpecSolverDns01AkamaiPatchArgs"]]:
        return pulumi.get(self, "akamai")

    @akamai.setter
    def akamai(
        self, value: Optional[pulumi.Input["ChallengeSpecSolverDns01AkamaiPatchArgs"]]
    ):
        pulumi.set(self, "akamai", value)

    @property
    @pulumi.getter(name="azureDNS")
    def azure_dns(
        self,
    ) -> Optional[pulumi.Input["ChallengeSpecSolverDns01AzureDNSPatchArgs"]]:
        return pulumi.get(self, "azure_dns")

    @azure_dns.setter
    def azure_dns(
        self, value: Optional[pulumi.Input["ChallengeSpecSolverDns01AzureDNSPatchArgs"]]
    ):
        pulumi.set(self, "azure_dns", value)

    @property
    @pulumi.getter(name="cloudDNS")
    def cloud_dns(
        self,
    ) -> Optional[pulumi.Input["ChallengeSpecSolverDns01CloudDNSPatchArgs"]]:
        return pulumi.get(self, "cloud_dns")

    @cloud_dns.setter
    def cloud_dns(
        self, value: Optional[pulumi.Input["ChallengeSpecSolverDns01CloudDNSPatchArgs"]]
    ):
        pulumi.set(self, "cloud_dns", value)

    @property
    @pulumi.getter
    def cloudflare(
        self,
    ) -> Optional[pulumi.Input["ChallengeSpecSolverDns01CloudflarePatchArgs"]]:
        return pulumi.get(self, "cloudflare")

    @cloudflare.setter
    def cloudflare(
        self,
        value: Optional[pulumi.Input["ChallengeSpecSolverDns01CloudflarePatchArgs"]],
    ):
        pulumi.set(self, "cloudflare", value)

    @property
    @pulumi.getter(name="cnameStrategy")
    def cname_strategy(self) -> Optional[pulumi.Input[str]]:
        """
        CNAMEStrategy configures how the DNS01 provider should handle CNAME
        records when found in DNS zones.
        """
        return pulumi.get(self, "cname_strategy")

    @cname_strategy.setter
    def cname_strategy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cname_strategy", value)

    @property
    @pulumi.getter
    def digitalocean(
        self,
    ) -> Optional[pulumi.Input["ChallengeSpecSolverDns01DigitaloceanPatchArgs"]]:
        return pulumi.get(self, "digitalocean")

    @digitalocean.setter
    def digitalocean(
        self,
        value: Optional[pulumi.Input["ChallengeSpecSolverDns01DigitaloceanPatchArgs"]],
    ):
        pulumi.set(self, "digitalocean", value)

    @property
    @pulumi.getter
    def rfc2136(
        self,
    ) -> Optional[pulumi.Input["ChallengeSpecSolverDns01Rfc2136PatchArgs"]]:
        return pulumi.get(self, "rfc2136")

    @rfc2136.setter
    def rfc2136(
        self, value: Optional[pulumi.Input["ChallengeSpecSolverDns01Rfc2136PatchArgs"]]
    ):
        pulumi.set(self, "rfc2136", value)

    @property
    @pulumi.getter
    def route53(
        self,
    ) -> Optional[pulumi.Input["ChallengeSpecSolverDns01Route53PatchArgs"]]:
        return pulumi.get(self, "route53")

    @route53.setter
    def route53(
        self, value: Optional[pulumi.Input["ChallengeSpecSolverDns01Route53PatchArgs"]]
    ):
        pulumi.set(self, "route53", value)

    @property
    @pulumi.getter
    def webhook(
        self,
    ) -> Optional[pulumi.Input["ChallengeSpecSolverDns01WebhookPatchArgs"]]:
        return pulumi.get(self, "webhook")

    @webhook.setter
    def webhook(
        self, value: Optional[pulumi.Input["ChallengeSpecSolverDns01WebhookPatchArgs"]]
    ):
        pulumi.set(self, "webhook", value)


if not MYPY:

    class ChallengeSpecSolverDns01Rfc2136PatchArgsDict(TypedDict):
        """
        Use RFC2136 ("Dynamic Updates in the Domain Name System") (https://datatracker.ietf.org/doc/rfc2136/)
        to manage DNS01 challenge records.
        """

        nameserver: NotRequired[pulumi.Input[str]]
        """
        The IP address or hostname of an authoritative DNS server supporting
        RFC2136 in the form host:port. If the host is an IPv6 address it must be
        enclosed in square brackets (e.g [2001:db8::1]) ; port is optional.
        This field is required.
        """
        tsig_algorithm: NotRequired[pulumi.Input[str]]
        """
        The TSIG Algorithm configured in the DNS supporting RFC2136. Used only
        when ``tsigSecretSecretRef`` and ``tsigKeyName`` are defined.
        Supported values are (case-insensitive): ``HMACMD5`` (default),
        ``HMACSHA1``, ``HMACSHA256`` or ``HMACSHA512``.
        """
        tsig_key_name: NotRequired[pulumi.Input[str]]
        """
        The TSIG Key name configured in the DNS.
        If ``tsigSecretSecretRef`` is defined, this field is required.
        """
        tsig_secret_secret_ref: NotRequired[
            pulumi.Input[
                "ChallengeSpecSolverDns01Rfc2136TsigSecretSecretRefPatchArgsDict"
            ]
        ]

elif False:
    ChallengeSpecSolverDns01Rfc2136PatchArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class ChallengeSpecSolverDns01Rfc2136PatchArgs:
    def __init__(
        __self__,
        *,
        nameserver: Optional[pulumi.Input[str]] = None,
        tsig_algorithm: Optional[pulumi.Input[str]] = None,
        tsig_key_name: Optional[pulumi.Input[str]] = None,
        tsig_secret_secret_ref: Optional[
            pulumi.Input["ChallengeSpecSolverDns01Rfc2136TsigSecretSecretRefPatchArgs"]
        ] = None
    ):
        """
        Use RFC2136 ("Dynamic Updates in the Domain Name System") (https://datatracker.ietf.org/doc/rfc2136/)
        to manage DNS01 challenge records.
        :param pulumi.Input[str] nameserver: The IP address or hostname of an authoritative DNS server supporting
               RFC2136 in the form host:port. If the host is an IPv6 address it must be
               enclosed in square brackets (e.g [2001:db8::1]) ; port is optional.
               This field is required.
        :param pulumi.Input[str] tsig_algorithm: The TSIG Algorithm configured in the DNS supporting RFC2136. Used only
               when ``tsigSecretSecretRef`` and ``tsigKeyName`` are defined.
               Supported values are (case-insensitive): ``HMACMD5`` (default),
               ``HMACSHA1``, ``HMACSHA256`` or ``HMACSHA512``.
        :param pulumi.Input[str] tsig_key_name: The TSIG Key name configured in the DNS.
               If ``tsigSecretSecretRef`` is defined, this field is required.
        """
        if nameserver is not None:
            pulumi.set(__self__, "nameserver", nameserver)
        if tsig_algorithm is not None:
            pulumi.set(__self__, "tsig_algorithm", tsig_algorithm)
        if tsig_key_name is not None:
            pulumi.set(__self__, "tsig_key_name", tsig_key_name)
        if tsig_secret_secret_ref is not None:
            pulumi.set(__self__, "tsig_secret_secret_ref", tsig_secret_secret_ref)

    @property
    @pulumi.getter
    def nameserver(self) -> Optional[pulumi.Input[str]]:
        """
        The IP address or hostname of an authoritative DNS server supporting
        RFC2136 in the form host:port. If the host is an IPv6 address it must be
        enclosed in square brackets (e.g [2001:db8::1]) ; port is optional.
        This field is required.
        """
        return pulumi.get(self, "nameserver")

    @nameserver.setter
    def nameserver(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nameserver", value)

    @property
    @pulumi.getter(name="tsigAlgorithm")
    def tsig_algorithm(self) -> Optional[pulumi.Input[str]]:
        """
        The TSIG Algorithm configured in the DNS supporting RFC2136. Used only
        when ``tsigSecretSecretRef`` and ``tsigKeyName`` are defined.
        Supported values are (case-insensitive): ``HMACMD5`` (default),
        ``HMACSHA1``, ``HMACSHA256`` or ``HMACSHA512``.
        """
        return pulumi.get(self, "tsig_algorithm")

    @tsig_algorithm.setter
    def tsig_algorithm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tsig_algorithm", value)

    @property
    @pulumi.getter(name="tsigKeyName")
    def tsig_key_name(self) -> Optional[pulumi.Input[str]]:
        """
        The TSIG Key name configured in the DNS.
        If ``tsigSecretSecretRef`` is defined, this field is required.
        """
        return pulumi.get(self, "tsig_key_name")

    @tsig_key_name.setter
    def tsig_key_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tsig_key_name", value)

    @property
    @pulumi.getter(name="tsigSecretSecretRef")
    def tsig_secret_secret_ref(
        self,
    ) -> Optional[
        pulumi.Input["ChallengeSpecSolverDns01Rfc2136TsigSecretSecretRefPatchArgs"]
    ]:
        return pulumi.get(self, "tsig_secret_secret_ref")

    @tsig_secret_secret_ref.setter
    def tsig_secret_secret_ref(
        self,
        value: Optional[
            pulumi.Input["ChallengeSpecSolverDns01Rfc2136TsigSecretSecretRefPatchArgs"]
        ],
    ):
        pulumi.set(self, "tsig_secret_secret_ref", value)


if not MYPY:

    class ChallengeSpecSolverDns01Rfc2136TsigSecretSecretRefPatchArgsDict(TypedDict):
        """
        The name of the secret containing the TSIG value.
        If ``tsigKeyName`` is defined, this field is required.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """

elif False:
    ChallengeSpecSolverDns01Rfc2136TsigSecretSecretRefPatchArgsDict: TypeAlias = (
        Mapping[str, Any]
    )


@pulumi.input_type
class ChallengeSpecSolverDns01Rfc2136TsigSecretSecretRefPatchArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        name: Optional[pulumi.Input[str]] = None
    ):
        """
        The name of the secret containing the TSIG value.
        If ``tsigKeyName`` is defined, this field is required.
        :param pulumi.Input[str] key: The key of the entry in the Secret resource's `data` field to be used.
               Some instances of this field may be defaulted, in others it may be
               required.
        :param pulumi.Input[str] name: Name of the resource being referred to.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:

    class ChallengeSpecSolverDns01Rfc2136TsigSecretSecretRefArgsDict(TypedDict):
        """
        The name of the secret containing the TSIG value.
        If ``tsigKeyName`` is defined, this field is required.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """

elif False:
    ChallengeSpecSolverDns01Rfc2136TsigSecretSecretRefArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverDns01Rfc2136TsigSecretSecretRefArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        name: Optional[pulumi.Input[str]] = None
    ):
        """
        The name of the secret containing the TSIG value.
        If ``tsigKeyName`` is defined, this field is required.
        :param pulumi.Input[str] key: The key of the entry in the Secret resource's `data` field to be used.
               Some instances of this field may be defaulted, in others it may be
               required.
        :param pulumi.Input[str] name: Name of the resource being referred to.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:

    class ChallengeSpecSolverDns01Rfc2136ArgsDict(TypedDict):
        """
        Use RFC2136 ("Dynamic Updates in the Domain Name System") (https://datatracker.ietf.org/doc/rfc2136/)
        to manage DNS01 challenge records.
        """

        nameserver: NotRequired[pulumi.Input[str]]
        """
        The IP address or hostname of an authoritative DNS server supporting
        RFC2136 in the form host:port. If the host is an IPv6 address it must be
        enclosed in square brackets (e.g [2001:db8::1]) ; port is optional.
        This field is required.
        """
        tsig_algorithm: NotRequired[pulumi.Input[str]]
        """
        The TSIG Algorithm configured in the DNS supporting RFC2136. Used only
        when ``tsigSecretSecretRef`` and ``tsigKeyName`` are defined.
        Supported values are (case-insensitive): ``HMACMD5`` (default),
        ``HMACSHA1``, ``HMACSHA256`` or ``HMACSHA512``.
        """
        tsig_key_name: NotRequired[pulumi.Input[str]]
        """
        The TSIG Key name configured in the DNS.
        If ``tsigSecretSecretRef`` is defined, this field is required.
        """
        tsig_secret_secret_ref: NotRequired[
            pulumi.Input["ChallengeSpecSolverDns01Rfc2136TsigSecretSecretRefArgsDict"]
        ]

elif False:
    ChallengeSpecSolverDns01Rfc2136ArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class ChallengeSpecSolverDns01Rfc2136Args:
    def __init__(
        __self__,
        *,
        nameserver: Optional[pulumi.Input[str]] = None,
        tsig_algorithm: Optional[pulumi.Input[str]] = None,
        tsig_key_name: Optional[pulumi.Input[str]] = None,
        tsig_secret_secret_ref: Optional[
            pulumi.Input["ChallengeSpecSolverDns01Rfc2136TsigSecretSecretRefArgs"]
        ] = None
    ):
        """
        Use RFC2136 ("Dynamic Updates in the Domain Name System") (https://datatracker.ietf.org/doc/rfc2136/)
        to manage DNS01 challenge records.
        :param pulumi.Input[str] nameserver: The IP address or hostname of an authoritative DNS server supporting
               RFC2136 in the form host:port. If the host is an IPv6 address it must be
               enclosed in square brackets (e.g [2001:db8::1]) ; port is optional.
               This field is required.
        :param pulumi.Input[str] tsig_algorithm: The TSIG Algorithm configured in the DNS supporting RFC2136. Used only
               when ``tsigSecretSecretRef`` and ``tsigKeyName`` are defined.
               Supported values are (case-insensitive): ``HMACMD5`` (default),
               ``HMACSHA1``, ``HMACSHA256`` or ``HMACSHA512``.
        :param pulumi.Input[str] tsig_key_name: The TSIG Key name configured in the DNS.
               If ``tsigSecretSecretRef`` is defined, this field is required.
        """
        if nameserver is not None:
            pulumi.set(__self__, "nameserver", nameserver)
        if tsig_algorithm is not None:
            pulumi.set(__self__, "tsig_algorithm", tsig_algorithm)
        if tsig_key_name is not None:
            pulumi.set(__self__, "tsig_key_name", tsig_key_name)
        if tsig_secret_secret_ref is not None:
            pulumi.set(__self__, "tsig_secret_secret_ref", tsig_secret_secret_ref)

    @property
    @pulumi.getter
    def nameserver(self) -> Optional[pulumi.Input[str]]:
        """
        The IP address or hostname of an authoritative DNS server supporting
        RFC2136 in the form host:port. If the host is an IPv6 address it must be
        enclosed in square brackets (e.g [2001:db8::1]) ; port is optional.
        This field is required.
        """
        return pulumi.get(self, "nameserver")

    @nameserver.setter
    def nameserver(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nameserver", value)

    @property
    @pulumi.getter(name="tsigAlgorithm")
    def tsig_algorithm(self) -> Optional[pulumi.Input[str]]:
        """
        The TSIG Algorithm configured in the DNS supporting RFC2136. Used only
        when ``tsigSecretSecretRef`` and ``tsigKeyName`` are defined.
        Supported values are (case-insensitive): ``HMACMD5`` (default),
        ``HMACSHA1``, ``HMACSHA256`` or ``HMACSHA512``.
        """
        return pulumi.get(self, "tsig_algorithm")

    @tsig_algorithm.setter
    def tsig_algorithm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tsig_algorithm", value)

    @property
    @pulumi.getter(name="tsigKeyName")
    def tsig_key_name(self) -> Optional[pulumi.Input[str]]:
        """
        The TSIG Key name configured in the DNS.
        If ``tsigSecretSecretRef`` is defined, this field is required.
        """
        return pulumi.get(self, "tsig_key_name")

    @tsig_key_name.setter
    def tsig_key_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tsig_key_name", value)

    @property
    @pulumi.getter(name="tsigSecretSecretRef")
    def tsig_secret_secret_ref(
        self,
    ) -> Optional[
        pulumi.Input["ChallengeSpecSolverDns01Rfc2136TsigSecretSecretRefArgs"]
    ]:
        return pulumi.get(self, "tsig_secret_secret_ref")

    @tsig_secret_secret_ref.setter
    def tsig_secret_secret_ref(
        self,
        value: Optional[
            pulumi.Input["ChallengeSpecSolverDns01Rfc2136TsigSecretSecretRefArgs"]
        ],
    ):
        pulumi.set(self, "tsig_secret_secret_ref", value)


if not MYPY:

    class ChallengeSpecSolverDns01Route53AccessKeyIDSecretRefPatchArgsDict(TypedDict):
        """
        The SecretAccessKey is used for authentication. If set, pull the AWS
        access key ID from a key within a Kubernetes Secret.
        Cannot be set when AccessKeyID is set.
        If neither the Access Key nor Key ID are set, we fall-back to using env
        vars, shared credentials file or AWS Instance metadata,
        see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """

elif False:
    ChallengeSpecSolverDns01Route53AccessKeyIDSecretRefPatchArgsDict: TypeAlias = (
        Mapping[str, Any]
    )


@pulumi.input_type
class ChallengeSpecSolverDns01Route53AccessKeyIDSecretRefPatchArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        name: Optional[pulumi.Input[str]] = None
    ):
        """
        The SecretAccessKey is used for authentication. If set, pull the AWS
        access key ID from a key within a Kubernetes Secret.
        Cannot be set when AccessKeyID is set.
        If neither the Access Key nor Key ID are set, we fall-back to using env
        vars, shared credentials file or AWS Instance metadata,
        see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
        :param pulumi.Input[str] key: The key of the entry in the Secret resource's `data` field to be used.
               Some instances of this field may be defaulted, in others it may be
               required.
        :param pulumi.Input[str] name: Name of the resource being referred to.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:

    class ChallengeSpecSolverDns01Route53AccessKeyIDSecretRefArgsDict(TypedDict):
        """
        The SecretAccessKey is used for authentication. If set, pull the AWS
        access key ID from a key within a Kubernetes Secret.
        Cannot be set when AccessKeyID is set.
        If neither the Access Key nor Key ID are set, we fall-back to using env
        vars, shared credentials file or AWS Instance metadata,
        see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """

elif False:
    ChallengeSpecSolverDns01Route53AccessKeyIDSecretRefArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverDns01Route53AccessKeyIDSecretRefArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        name: Optional[pulumi.Input[str]] = None
    ):
        """
        The SecretAccessKey is used for authentication. If set, pull the AWS
        access key ID from a key within a Kubernetes Secret.
        Cannot be set when AccessKeyID is set.
        If neither the Access Key nor Key ID are set, we fall-back to using env
        vars, shared credentials file or AWS Instance metadata,
        see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
        :param pulumi.Input[str] key: The key of the entry in the Secret resource's `data` field to be used.
               Some instances of this field may be defaulted, in others it may be
               required.
        :param pulumi.Input[str] name: Name of the resource being referred to.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:

    class ChallengeSpecSolverDns01Route53AuthKubernetesPatchArgsDict(TypedDict):
        """
        Kubernetes authenticates with Route53 using AssumeRoleWithWebIdentity
        by passing a bound ServiceAccount token.
        """

        service_account_ref: NotRequired[
            pulumi.Input[
                "ChallengeSpecSolverDns01Route53AuthKubernetesServiceAccountRefPatchArgsDict"
            ]
        ]

elif False:
    ChallengeSpecSolverDns01Route53AuthKubernetesPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverDns01Route53AuthKubernetesPatchArgs:
    def __init__(
        __self__,
        *,
        service_account_ref: Optional[
            pulumi.Input[
                "ChallengeSpecSolverDns01Route53AuthKubernetesServiceAccountRefPatchArgs"
            ]
        ] = None
    ):
        """
        Kubernetes authenticates with Route53 using AssumeRoleWithWebIdentity
        by passing a bound ServiceAccount token.
        """
        if service_account_ref is not None:
            pulumi.set(__self__, "service_account_ref", service_account_ref)

    @property
    @pulumi.getter(name="serviceAccountRef")
    def service_account_ref(
        self,
    ) -> Optional[
        pulumi.Input[
            "ChallengeSpecSolverDns01Route53AuthKubernetesServiceAccountRefPatchArgs"
        ]
    ]:
        return pulumi.get(self, "service_account_ref")

    @service_account_ref.setter
    def service_account_ref(
        self,
        value: Optional[
            pulumi.Input[
                "ChallengeSpecSolverDns01Route53AuthKubernetesServiceAccountRefPatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "service_account_ref", value)


if not MYPY:

    class ChallengeSpecSolverDns01Route53AuthKubernetesServiceAccountRefPatchArgsDict(
        TypedDict
    ):
        """
        A reference to a service account that will be used to request a bound
        token (also known as "projected token"). To use this field, you must
        configure an RBAC rule to let cert-manager request a token.
        """

        audiences: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        TokenAudiences is an optional list of audiences to include in the
        token passed to AWS. The default token consisting of the issuer's namespace
        and name is always included.
        If unset the audience defaults to `sts.amazonaws.com`.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the ServiceAccount used to request a token.
        """

elif False:
    ChallengeSpecSolverDns01Route53AuthKubernetesServiceAccountRefPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverDns01Route53AuthKubernetesServiceAccountRefPatchArgs:
    def __init__(
        __self__,
        *,
        audiences: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        name: Optional[pulumi.Input[str]] = None
    ):
        """
        A reference to a service account that will be used to request a bound
        token (also known as "projected token"). To use this field, you must
        configure an RBAC rule to let cert-manager request a token.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] audiences: TokenAudiences is an optional list of audiences to include in the
               token passed to AWS. The default token consisting of the issuer's namespace
               and name is always included.
               If unset the audience defaults to `sts.amazonaws.com`.
        :param pulumi.Input[str] name: Name of the ServiceAccount used to request a token.
        """
        if audiences is not None:
            pulumi.set(__self__, "audiences", audiences)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def audiences(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        TokenAudiences is an optional list of audiences to include in the
        token passed to AWS. The default token consisting of the issuer's namespace
        and name is always included.
        If unset the audience defaults to `sts.amazonaws.com`.
        """
        return pulumi.get(self, "audiences")

    @audiences.setter
    def audiences(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "audiences", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the ServiceAccount used to request a token.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:

    class ChallengeSpecSolverDns01Route53AuthKubernetesServiceAccountRefArgsDict(
        TypedDict
    ):
        """
        A reference to a service account that will be used to request a bound
        token (also known as "projected token"). To use this field, you must
        configure an RBAC rule to let cert-manager request a token.
        """

        audiences: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        TokenAudiences is an optional list of audiences to include in the
        token passed to AWS. The default token consisting of the issuer's namespace
        and name is always included.
        If unset the audience defaults to `sts.amazonaws.com`.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the ServiceAccount used to request a token.
        """

elif False:
    ChallengeSpecSolverDns01Route53AuthKubernetesServiceAccountRefArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverDns01Route53AuthKubernetesServiceAccountRefArgs:
    def __init__(
        __self__,
        *,
        audiences: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        name: Optional[pulumi.Input[str]] = None
    ):
        """
        A reference to a service account that will be used to request a bound
        token (also known as "projected token"). To use this field, you must
        configure an RBAC rule to let cert-manager request a token.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] audiences: TokenAudiences is an optional list of audiences to include in the
               token passed to AWS. The default token consisting of the issuer's namespace
               and name is always included.
               If unset the audience defaults to `sts.amazonaws.com`.
        :param pulumi.Input[str] name: Name of the ServiceAccount used to request a token.
        """
        if audiences is not None:
            pulumi.set(__self__, "audiences", audiences)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def audiences(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        TokenAudiences is an optional list of audiences to include in the
        token passed to AWS. The default token consisting of the issuer's namespace
        and name is always included.
        If unset the audience defaults to `sts.amazonaws.com`.
        """
        return pulumi.get(self, "audiences")

    @audiences.setter
    def audiences(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "audiences", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the ServiceAccount used to request a token.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:

    class ChallengeSpecSolverDns01Route53AuthKubernetesArgsDict(TypedDict):
        """
        Kubernetes authenticates with Route53 using AssumeRoleWithWebIdentity
        by passing a bound ServiceAccount token.
        """

        service_account_ref: NotRequired[
            pulumi.Input[
                "ChallengeSpecSolverDns01Route53AuthKubernetesServiceAccountRefArgsDict"
            ]
        ]

elif False:
    ChallengeSpecSolverDns01Route53AuthKubernetesArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class ChallengeSpecSolverDns01Route53AuthKubernetesArgs:
    def __init__(
        __self__,
        *,
        service_account_ref: Optional[
            pulumi.Input[
                "ChallengeSpecSolverDns01Route53AuthKubernetesServiceAccountRefArgs"
            ]
        ] = None
    ):
        """
        Kubernetes authenticates with Route53 using AssumeRoleWithWebIdentity
        by passing a bound ServiceAccount token.
        """
        if service_account_ref is not None:
            pulumi.set(__self__, "service_account_ref", service_account_ref)

    @property
    @pulumi.getter(name="serviceAccountRef")
    def service_account_ref(
        self,
    ) -> Optional[
        pulumi.Input[
            "ChallengeSpecSolverDns01Route53AuthKubernetesServiceAccountRefArgs"
        ]
    ]:
        return pulumi.get(self, "service_account_ref")

    @service_account_ref.setter
    def service_account_ref(
        self,
        value: Optional[
            pulumi.Input[
                "ChallengeSpecSolverDns01Route53AuthKubernetesServiceAccountRefArgs"
            ]
        ],
    ):
        pulumi.set(self, "service_account_ref", value)


if not MYPY:

    class ChallengeSpecSolverDns01Route53AuthPatchArgsDict(TypedDict):
        """
        Auth configures how cert-manager authenticates.
        """

        kubernetes: NotRequired[
            pulumi.Input["ChallengeSpecSolverDns01Route53AuthKubernetesPatchArgsDict"]
        ]

elif False:
    ChallengeSpecSolverDns01Route53AuthPatchArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class ChallengeSpecSolverDns01Route53AuthPatchArgs:
    def __init__(
        __self__,
        *,
        kubernetes: Optional[
            pulumi.Input["ChallengeSpecSolverDns01Route53AuthKubernetesPatchArgs"]
        ] = None
    ):
        """
        Auth configures how cert-manager authenticates.
        """
        if kubernetes is not None:
            pulumi.set(__self__, "kubernetes", kubernetes)

    @property
    @pulumi.getter
    def kubernetes(
        self,
    ) -> Optional[
        pulumi.Input["ChallengeSpecSolverDns01Route53AuthKubernetesPatchArgs"]
    ]:
        return pulumi.get(self, "kubernetes")

    @kubernetes.setter
    def kubernetes(
        self,
        value: Optional[
            pulumi.Input["ChallengeSpecSolverDns01Route53AuthKubernetesPatchArgs"]
        ],
    ):
        pulumi.set(self, "kubernetes", value)


if not MYPY:

    class ChallengeSpecSolverDns01Route53AuthArgsDict(TypedDict):
        """
        Auth configures how cert-manager authenticates.
        """

        kubernetes: NotRequired[
            pulumi.Input["ChallengeSpecSolverDns01Route53AuthKubernetesArgsDict"]
        ]

elif False:
    ChallengeSpecSolverDns01Route53AuthArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class ChallengeSpecSolverDns01Route53AuthArgs:
    def __init__(
        __self__,
        *,
        kubernetes: Optional[
            pulumi.Input["ChallengeSpecSolverDns01Route53AuthKubernetesArgs"]
        ] = None
    ):
        """
        Auth configures how cert-manager authenticates.
        """
        if kubernetes is not None:
            pulumi.set(__self__, "kubernetes", kubernetes)

    @property
    @pulumi.getter
    def kubernetes(
        self,
    ) -> Optional[pulumi.Input["ChallengeSpecSolverDns01Route53AuthKubernetesArgs"]]:
        return pulumi.get(self, "kubernetes")

    @kubernetes.setter
    def kubernetes(
        self,
        value: Optional[
            pulumi.Input["ChallengeSpecSolverDns01Route53AuthKubernetesArgs"]
        ],
    ):
        pulumi.set(self, "kubernetes", value)


if not MYPY:

    class ChallengeSpecSolverDns01Route53PatchArgsDict(TypedDict):
        """
        Use the AWS Route53 API to manage DNS01 challenge records.
        """

        access_key_id: NotRequired[pulumi.Input[str]]
        """
        The AccessKeyID is used for authentication.
        Cannot be set when SecretAccessKeyID is set.
        If neither the Access Key nor Key ID are set, we fall-back to using env
        vars, shared credentials file or AWS Instance metadata,
        see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
        """
        access_key_id_secret_ref: NotRequired[
            pulumi.Input[
                "ChallengeSpecSolverDns01Route53AccessKeyIDSecretRefPatchArgsDict"
            ]
        ]
        auth: NotRequired[
            pulumi.Input["ChallengeSpecSolverDns01Route53AuthPatchArgsDict"]
        ]
        hosted_zone_id: NotRequired[pulumi.Input[str]]
        """
        If set, the provider will manage only this zone in Route53 and will not do a lookup using the route53:ListHostedZonesByName api call.
        """
        region: NotRequired[pulumi.Input[str]]
        """
        Override the AWS region.

        Route53 is a global service and does not have regional endpoints but the
        region specified here (or via environment variables) is used as a hint to
        help compute the correct AWS credential scope and partition when it
        connects to Route53. See:
        - [Amazon Route 53 endpoints and quotas](https://docs.aws.amazon.com/general/latest/gr/r53.html)
        - [Global services](https://docs.aws.amazon.com/whitepapers/latest/aws-fault-isolation-boundaries/global-services.html)

        If you omit this region field, cert-manager will use the region from
        AWS_REGION and AWS_DEFAULT_REGION environment variables, if they are set
        in the cert-manager controller Pod.

        The `region` field is not needed if you use [IAM Roles for Service Accounts (IRSA)](https://docs.aws.amazon.com/eks/latest/userguide/iam-roles-for-service-accounts.html).
        Instead an AWS_REGION environment variable is added to the cert-manager controller Pod by:
        [Amazon EKS Pod Identity Webhook](https://github.com/aws/amazon-eks-pod-identity-webhook).
        In this case this `region` field value is ignored.

        The `region` field is not needed if you use [EKS Pod Identities](https://docs.aws.amazon.com/eks/latest/userguide/pod-identities.html).
        Instead an AWS_REGION environment variable is added to the cert-manager controller Pod by:
        [Amazon EKS Pod Identity Agent](https://github.com/aws/eks-pod-identity-agent),
        In this case this `region` field value is ignored.
        """
        role: NotRequired[pulumi.Input[str]]
        """
        Role is a Role ARN which the Route53 provider will assume using either the explicit credentials AccessKeyID/SecretAccessKey
        or the inferred credentials from environment variables, shared credentials file or AWS Instance metadata
        """
        secret_access_key_secret_ref: NotRequired[
            pulumi.Input[
                "ChallengeSpecSolverDns01Route53SecretAccessKeySecretRefPatchArgsDict"
            ]
        ]

elif False:
    ChallengeSpecSolverDns01Route53PatchArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class ChallengeSpecSolverDns01Route53PatchArgs:
    def __init__(
        __self__,
        *,
        access_key_id: Optional[pulumi.Input[str]] = None,
        access_key_id_secret_ref: Optional[
            pulumi.Input["ChallengeSpecSolverDns01Route53AccessKeyIDSecretRefPatchArgs"]
        ] = None,
        auth: Optional[
            pulumi.Input["ChallengeSpecSolverDns01Route53AuthPatchArgs"]
        ] = None,
        hosted_zone_id: Optional[pulumi.Input[str]] = None,
        region: Optional[pulumi.Input[str]] = None,
        role: Optional[pulumi.Input[str]] = None,
        secret_access_key_secret_ref: Optional[
            pulumi.Input[
                "ChallengeSpecSolverDns01Route53SecretAccessKeySecretRefPatchArgs"
            ]
        ] = None
    ):
        """
        Use the AWS Route53 API to manage DNS01 challenge records.
        :param pulumi.Input[str] access_key_id: The AccessKeyID is used for authentication.
               Cannot be set when SecretAccessKeyID is set.
               If neither the Access Key nor Key ID are set, we fall-back to using env
               vars, shared credentials file or AWS Instance metadata,
               see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
        :param pulumi.Input[str] hosted_zone_id: If set, the provider will manage only this zone in Route53 and will not do a lookup using the route53:ListHostedZonesByName api call.
        :param pulumi.Input[str] region: Override the AWS region.

               Route53 is a global service and does not have regional endpoints but the
               region specified here (or via environment variables) is used as a hint to
               help compute the correct AWS credential scope and partition when it
               connects to Route53. See:
               - [Amazon Route 53 endpoints and quotas](https://docs.aws.amazon.com/general/latest/gr/r53.html)
               - [Global services](https://docs.aws.amazon.com/whitepapers/latest/aws-fault-isolation-boundaries/global-services.html)

               If you omit this region field, cert-manager will use the region from
               AWS_REGION and AWS_DEFAULT_REGION environment variables, if they are set
               in the cert-manager controller Pod.

               The `region` field is not needed if you use [IAM Roles for Service Accounts (IRSA)](https://docs.aws.amazon.com/eks/latest/userguide/iam-roles-for-service-accounts.html).
               Instead an AWS_REGION environment variable is added to the cert-manager controller Pod by:
               [Amazon EKS Pod Identity Webhook](https://github.com/aws/amazon-eks-pod-identity-webhook).
               In this case this `region` field value is ignored.

               The `region` field is not needed if you use [EKS Pod Identities](https://docs.aws.amazon.com/eks/latest/userguide/pod-identities.html).
               Instead an AWS_REGION environment variable is added to the cert-manager controller Pod by:
               [Amazon EKS Pod Identity Agent](https://github.com/aws/eks-pod-identity-agent),
               In this case this `region` field value is ignored.
        :param pulumi.Input[str] role: Role is a Role ARN which the Route53 provider will assume using either the explicit credentials AccessKeyID/SecretAccessKey
               or the inferred credentials from environment variables, shared credentials file or AWS Instance metadata
        """
        if access_key_id is not None:
            pulumi.set(__self__, "access_key_id", access_key_id)
        if access_key_id_secret_ref is not None:
            pulumi.set(__self__, "access_key_id_secret_ref", access_key_id_secret_ref)
        if auth is not None:
            pulumi.set(__self__, "auth", auth)
        if hosted_zone_id is not None:
            pulumi.set(__self__, "hosted_zone_id", hosted_zone_id)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if secret_access_key_secret_ref is not None:
            pulumi.set(
                __self__, "secret_access_key_secret_ref", secret_access_key_secret_ref
            )

    @property
    @pulumi.getter(name="accessKeyID")
    def access_key_id(self) -> Optional[pulumi.Input[str]]:
        """
        The AccessKeyID is used for authentication.
        Cannot be set when SecretAccessKeyID is set.
        If neither the Access Key nor Key ID are set, we fall-back to using env
        vars, shared credentials file or AWS Instance metadata,
        see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
        """
        return pulumi.get(self, "access_key_id")

    @access_key_id.setter
    def access_key_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_key_id", value)

    @property
    @pulumi.getter(name="accessKeyIDSecretRef")
    def access_key_id_secret_ref(
        self,
    ) -> Optional[
        pulumi.Input["ChallengeSpecSolverDns01Route53AccessKeyIDSecretRefPatchArgs"]
    ]:
        return pulumi.get(self, "access_key_id_secret_ref")

    @access_key_id_secret_ref.setter
    def access_key_id_secret_ref(
        self,
        value: Optional[
            pulumi.Input["ChallengeSpecSolverDns01Route53AccessKeyIDSecretRefPatchArgs"]
        ],
    ):
        pulumi.set(self, "access_key_id_secret_ref", value)

    @property
    @pulumi.getter
    def auth(
        self,
    ) -> Optional[pulumi.Input["ChallengeSpecSolverDns01Route53AuthPatchArgs"]]:
        return pulumi.get(self, "auth")

    @auth.setter
    def auth(
        self,
        value: Optional[pulumi.Input["ChallengeSpecSolverDns01Route53AuthPatchArgs"]],
    ):
        pulumi.set(self, "auth", value)

    @property
    @pulumi.getter(name="hostedZoneID")
    def hosted_zone_id(self) -> Optional[pulumi.Input[str]]:
        """
        If set, the provider will manage only this zone in Route53 and will not do a lookup using the route53:ListHostedZonesByName api call.
        """
        return pulumi.get(self, "hosted_zone_id")

    @hosted_zone_id.setter
    def hosted_zone_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hosted_zone_id", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        Override the AWS region.

        Route53 is a global service and does not have regional endpoints but the
        region specified here (or via environment variables) is used as a hint to
        help compute the correct AWS credential scope and partition when it
        connects to Route53. See:
        - [Amazon Route 53 endpoints and quotas](https://docs.aws.amazon.com/general/latest/gr/r53.html)
        - [Global services](https://docs.aws.amazon.com/whitepapers/latest/aws-fault-isolation-boundaries/global-services.html)

        If you omit this region field, cert-manager will use the region from
        AWS_REGION and AWS_DEFAULT_REGION environment variables, if they are set
        in the cert-manager controller Pod.

        The `region` field is not needed if you use [IAM Roles for Service Accounts (IRSA)](https://docs.aws.amazon.com/eks/latest/userguide/iam-roles-for-service-accounts.html).
        Instead an AWS_REGION environment variable is added to the cert-manager controller Pod by:
        [Amazon EKS Pod Identity Webhook](https://github.com/aws/amazon-eks-pod-identity-webhook).
        In this case this `region` field value is ignored.

        The `region` field is not needed if you use [EKS Pod Identities](https://docs.aws.amazon.com/eks/latest/userguide/pod-identities.html).
        Instead an AWS_REGION environment variable is added to the cert-manager controller Pod by:
        [Amazon EKS Pod Identity Agent](https://github.com/aws/eks-pod-identity-agent),
        In this case this `region` field value is ignored.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input[str]]:
        """
        Role is a Role ARN which the Route53 provider will assume using either the explicit credentials AccessKeyID/SecretAccessKey
        or the inferred credentials from environment variables, shared credentials file or AWS Instance metadata
        """
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role", value)

    @property
    @pulumi.getter(name="secretAccessKeySecretRef")
    def secret_access_key_secret_ref(
        self,
    ) -> Optional[
        pulumi.Input["ChallengeSpecSolverDns01Route53SecretAccessKeySecretRefPatchArgs"]
    ]:
        return pulumi.get(self, "secret_access_key_secret_ref")

    @secret_access_key_secret_ref.setter
    def secret_access_key_secret_ref(
        self,
        value: Optional[
            pulumi.Input[
                "ChallengeSpecSolverDns01Route53SecretAccessKeySecretRefPatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "secret_access_key_secret_ref", value)


if not MYPY:

    class ChallengeSpecSolverDns01Route53SecretAccessKeySecretRefPatchArgsDict(
        TypedDict
    ):
        """
        The SecretAccessKey is used for authentication.
        If neither the Access Key nor Key ID are set, we fall-back to using env
        vars, shared credentials file or AWS Instance metadata,
        see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """

elif False:
    ChallengeSpecSolverDns01Route53SecretAccessKeySecretRefPatchArgsDict: TypeAlias = (
        Mapping[str, Any]
    )


@pulumi.input_type
class ChallengeSpecSolverDns01Route53SecretAccessKeySecretRefPatchArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        name: Optional[pulumi.Input[str]] = None
    ):
        """
        The SecretAccessKey is used for authentication.
        If neither the Access Key nor Key ID are set, we fall-back to using env
        vars, shared credentials file or AWS Instance metadata,
        see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
        :param pulumi.Input[str] key: The key of the entry in the Secret resource's `data` field to be used.
               Some instances of this field may be defaulted, in others it may be
               required.
        :param pulumi.Input[str] name: Name of the resource being referred to.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:

    class ChallengeSpecSolverDns01Route53SecretAccessKeySecretRefArgsDict(TypedDict):
        """
        The SecretAccessKey is used for authentication.
        If neither the Access Key nor Key ID are set, we fall-back to using env
        vars, shared credentials file or AWS Instance metadata,
        see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """

elif False:
    ChallengeSpecSolverDns01Route53SecretAccessKeySecretRefArgsDict: TypeAlias = (
        Mapping[str, Any]
    )


@pulumi.input_type
class ChallengeSpecSolverDns01Route53SecretAccessKeySecretRefArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        name: Optional[pulumi.Input[str]] = None
    ):
        """
        The SecretAccessKey is used for authentication.
        If neither the Access Key nor Key ID are set, we fall-back to using env
        vars, shared credentials file or AWS Instance metadata,
        see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
        :param pulumi.Input[str] key: The key of the entry in the Secret resource's `data` field to be used.
               Some instances of this field may be defaulted, in others it may be
               required.
        :param pulumi.Input[str] name: Name of the resource being referred to.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:

    class ChallengeSpecSolverDns01Route53ArgsDict(TypedDict):
        """
        Use the AWS Route53 API to manage DNS01 challenge records.
        """

        access_key_id: NotRequired[pulumi.Input[str]]
        """
        The AccessKeyID is used for authentication.
        Cannot be set when SecretAccessKeyID is set.
        If neither the Access Key nor Key ID are set, we fall-back to using env
        vars, shared credentials file or AWS Instance metadata,
        see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
        """
        access_key_id_secret_ref: NotRequired[
            pulumi.Input["ChallengeSpecSolverDns01Route53AccessKeyIDSecretRefArgsDict"]
        ]
        auth: NotRequired[pulumi.Input["ChallengeSpecSolverDns01Route53AuthArgsDict"]]
        hosted_zone_id: NotRequired[pulumi.Input[str]]
        """
        If set, the provider will manage only this zone in Route53 and will not do a lookup using the route53:ListHostedZonesByName api call.
        """
        region: NotRequired[pulumi.Input[str]]
        """
        Override the AWS region.

        Route53 is a global service and does not have regional endpoints but the
        region specified here (or via environment variables) is used as a hint to
        help compute the correct AWS credential scope and partition when it
        connects to Route53. See:
        - [Amazon Route 53 endpoints and quotas](https://docs.aws.amazon.com/general/latest/gr/r53.html)
        - [Global services](https://docs.aws.amazon.com/whitepapers/latest/aws-fault-isolation-boundaries/global-services.html)

        If you omit this region field, cert-manager will use the region from
        AWS_REGION and AWS_DEFAULT_REGION environment variables, if they are set
        in the cert-manager controller Pod.

        The `region` field is not needed if you use [IAM Roles for Service Accounts (IRSA)](https://docs.aws.amazon.com/eks/latest/userguide/iam-roles-for-service-accounts.html).
        Instead an AWS_REGION environment variable is added to the cert-manager controller Pod by:
        [Amazon EKS Pod Identity Webhook](https://github.com/aws/amazon-eks-pod-identity-webhook).
        In this case this `region` field value is ignored.

        The `region` field is not needed if you use [EKS Pod Identities](https://docs.aws.amazon.com/eks/latest/userguide/pod-identities.html).
        Instead an AWS_REGION environment variable is added to the cert-manager controller Pod by:
        [Amazon EKS Pod Identity Agent](https://github.com/aws/eks-pod-identity-agent),
        In this case this `region` field value is ignored.
        """
        role: NotRequired[pulumi.Input[str]]
        """
        Role is a Role ARN which the Route53 provider will assume using either the explicit credentials AccessKeyID/SecretAccessKey
        or the inferred credentials from environment variables, shared credentials file or AWS Instance metadata
        """
        secret_access_key_secret_ref: NotRequired[
            pulumi.Input[
                "ChallengeSpecSolverDns01Route53SecretAccessKeySecretRefArgsDict"
            ]
        ]

elif False:
    ChallengeSpecSolverDns01Route53ArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class ChallengeSpecSolverDns01Route53Args:
    def __init__(
        __self__,
        *,
        access_key_id: Optional[pulumi.Input[str]] = None,
        access_key_id_secret_ref: Optional[
            pulumi.Input["ChallengeSpecSolverDns01Route53AccessKeyIDSecretRefArgs"]
        ] = None,
        auth: Optional[pulumi.Input["ChallengeSpecSolverDns01Route53AuthArgs"]] = None,
        hosted_zone_id: Optional[pulumi.Input[str]] = None,
        region: Optional[pulumi.Input[str]] = None,
        role: Optional[pulumi.Input[str]] = None,
        secret_access_key_secret_ref: Optional[
            pulumi.Input["ChallengeSpecSolverDns01Route53SecretAccessKeySecretRefArgs"]
        ] = None
    ):
        """
        Use the AWS Route53 API to manage DNS01 challenge records.
        :param pulumi.Input[str] access_key_id: The AccessKeyID is used for authentication.
               Cannot be set when SecretAccessKeyID is set.
               If neither the Access Key nor Key ID are set, we fall-back to using env
               vars, shared credentials file or AWS Instance metadata,
               see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
        :param pulumi.Input[str] hosted_zone_id: If set, the provider will manage only this zone in Route53 and will not do a lookup using the route53:ListHostedZonesByName api call.
        :param pulumi.Input[str] region: Override the AWS region.

               Route53 is a global service and does not have regional endpoints but the
               region specified here (or via environment variables) is used as a hint to
               help compute the correct AWS credential scope and partition when it
               connects to Route53. See:
               - [Amazon Route 53 endpoints and quotas](https://docs.aws.amazon.com/general/latest/gr/r53.html)
               - [Global services](https://docs.aws.amazon.com/whitepapers/latest/aws-fault-isolation-boundaries/global-services.html)

               If you omit this region field, cert-manager will use the region from
               AWS_REGION and AWS_DEFAULT_REGION environment variables, if they are set
               in the cert-manager controller Pod.

               The `region` field is not needed if you use [IAM Roles for Service Accounts (IRSA)](https://docs.aws.amazon.com/eks/latest/userguide/iam-roles-for-service-accounts.html).
               Instead an AWS_REGION environment variable is added to the cert-manager controller Pod by:
               [Amazon EKS Pod Identity Webhook](https://github.com/aws/amazon-eks-pod-identity-webhook).
               In this case this `region` field value is ignored.

               The `region` field is not needed if you use [EKS Pod Identities](https://docs.aws.amazon.com/eks/latest/userguide/pod-identities.html).
               Instead an AWS_REGION environment variable is added to the cert-manager controller Pod by:
               [Amazon EKS Pod Identity Agent](https://github.com/aws/eks-pod-identity-agent),
               In this case this `region` field value is ignored.
        :param pulumi.Input[str] role: Role is a Role ARN which the Route53 provider will assume using either the explicit credentials AccessKeyID/SecretAccessKey
               or the inferred credentials from environment variables, shared credentials file or AWS Instance metadata
        """
        if access_key_id is not None:
            pulumi.set(__self__, "access_key_id", access_key_id)
        if access_key_id_secret_ref is not None:
            pulumi.set(__self__, "access_key_id_secret_ref", access_key_id_secret_ref)
        if auth is not None:
            pulumi.set(__self__, "auth", auth)
        if hosted_zone_id is not None:
            pulumi.set(__self__, "hosted_zone_id", hosted_zone_id)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if secret_access_key_secret_ref is not None:
            pulumi.set(
                __self__, "secret_access_key_secret_ref", secret_access_key_secret_ref
            )

    @property
    @pulumi.getter(name="accessKeyID")
    def access_key_id(self) -> Optional[pulumi.Input[str]]:
        """
        The AccessKeyID is used for authentication.
        Cannot be set when SecretAccessKeyID is set.
        If neither the Access Key nor Key ID are set, we fall-back to using env
        vars, shared credentials file or AWS Instance metadata,
        see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
        """
        return pulumi.get(self, "access_key_id")

    @access_key_id.setter
    def access_key_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_key_id", value)

    @property
    @pulumi.getter(name="accessKeyIDSecretRef")
    def access_key_id_secret_ref(
        self,
    ) -> Optional[
        pulumi.Input["ChallengeSpecSolverDns01Route53AccessKeyIDSecretRefArgs"]
    ]:
        return pulumi.get(self, "access_key_id_secret_ref")

    @access_key_id_secret_ref.setter
    def access_key_id_secret_ref(
        self,
        value: Optional[
            pulumi.Input["ChallengeSpecSolverDns01Route53AccessKeyIDSecretRefArgs"]
        ],
    ):
        pulumi.set(self, "access_key_id_secret_ref", value)

    @property
    @pulumi.getter
    def auth(self) -> Optional[pulumi.Input["ChallengeSpecSolverDns01Route53AuthArgs"]]:
        return pulumi.get(self, "auth")

    @auth.setter
    def auth(
        self, value: Optional[pulumi.Input["ChallengeSpecSolverDns01Route53AuthArgs"]]
    ):
        pulumi.set(self, "auth", value)

    @property
    @pulumi.getter(name="hostedZoneID")
    def hosted_zone_id(self) -> Optional[pulumi.Input[str]]:
        """
        If set, the provider will manage only this zone in Route53 and will not do a lookup using the route53:ListHostedZonesByName api call.
        """
        return pulumi.get(self, "hosted_zone_id")

    @hosted_zone_id.setter
    def hosted_zone_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hosted_zone_id", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        Override the AWS region.

        Route53 is a global service and does not have regional endpoints but the
        region specified here (or via environment variables) is used as a hint to
        help compute the correct AWS credential scope and partition when it
        connects to Route53. See:
        - [Amazon Route 53 endpoints and quotas](https://docs.aws.amazon.com/general/latest/gr/r53.html)
        - [Global services](https://docs.aws.amazon.com/whitepapers/latest/aws-fault-isolation-boundaries/global-services.html)

        If you omit this region field, cert-manager will use the region from
        AWS_REGION and AWS_DEFAULT_REGION environment variables, if they are set
        in the cert-manager controller Pod.

        The `region` field is not needed if you use [IAM Roles for Service Accounts (IRSA)](https://docs.aws.amazon.com/eks/latest/userguide/iam-roles-for-service-accounts.html).
        Instead an AWS_REGION environment variable is added to the cert-manager controller Pod by:
        [Amazon EKS Pod Identity Webhook](https://github.com/aws/amazon-eks-pod-identity-webhook).
        In this case this `region` field value is ignored.

        The `region` field is not needed if you use [EKS Pod Identities](https://docs.aws.amazon.com/eks/latest/userguide/pod-identities.html).
        Instead an AWS_REGION environment variable is added to the cert-manager controller Pod by:
        [Amazon EKS Pod Identity Agent](https://github.com/aws/eks-pod-identity-agent),
        In this case this `region` field value is ignored.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input[str]]:
        """
        Role is a Role ARN which the Route53 provider will assume using either the explicit credentials AccessKeyID/SecretAccessKey
        or the inferred credentials from environment variables, shared credentials file or AWS Instance metadata
        """
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role", value)

    @property
    @pulumi.getter(name="secretAccessKeySecretRef")
    def secret_access_key_secret_ref(
        self,
    ) -> Optional[
        pulumi.Input["ChallengeSpecSolverDns01Route53SecretAccessKeySecretRefArgs"]
    ]:
        return pulumi.get(self, "secret_access_key_secret_ref")

    @secret_access_key_secret_ref.setter
    def secret_access_key_secret_ref(
        self,
        value: Optional[
            pulumi.Input["ChallengeSpecSolverDns01Route53SecretAccessKeySecretRefArgs"]
        ],
    ):
        pulumi.set(self, "secret_access_key_secret_ref", value)


if not MYPY:

    class ChallengeSpecSolverDns01WebhookPatchArgsDict(TypedDict):
        """
        Configure an external webhook based DNS01 challenge solver to manage
        DNS01 challenge records.
        """

        config: NotRequired[pulumi.Input[Mapping[str, Any]]]
        """
        Additional configuration that should be passed to the webhook apiserver
        when challenges are processed.
        This can contain arbitrary JSON data.
        Secret values should not be specified in this stanza.
        If secret values are needed (e.g. credentials for a DNS service), you
        should use a SecretKeySelector to reference a Secret resource.
        For details on the schema of this field, consult the webhook provider
        implementation's documentation.
        """
        group_name: NotRequired[pulumi.Input[str]]
        """
        The API group name that should be used when POSTing ChallengePayload
        resources to the webhook apiserver.
        This should be the same as the GroupName specified in the webhook
        provider implementation.
        """
        solver_name: NotRequired[pulumi.Input[str]]
        """
        The name of the solver to use, as defined in the webhook provider
        implementation.
        This will typically be the name of the provider, e.g. 'cloudflare'.
        """

elif False:
    ChallengeSpecSolverDns01WebhookPatchArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class ChallengeSpecSolverDns01WebhookPatchArgs:
    def __init__(
        __self__,
        *,
        config: Optional[pulumi.Input[Mapping[str, Any]]] = None,
        group_name: Optional[pulumi.Input[str]] = None,
        solver_name: Optional[pulumi.Input[str]] = None
    ):
        """
        Configure an external webhook based DNS01 challenge solver to manage
        DNS01 challenge records.
        :param pulumi.Input[Mapping[str, Any]] config: Additional configuration that should be passed to the webhook apiserver
               when challenges are processed.
               This can contain arbitrary JSON data.
               Secret values should not be specified in this stanza.
               If secret values are needed (e.g. credentials for a DNS service), you
               should use a SecretKeySelector to reference a Secret resource.
               For details on the schema of this field, consult the webhook provider
               implementation's documentation.
        :param pulumi.Input[str] group_name: The API group name that should be used when POSTing ChallengePayload
               resources to the webhook apiserver.
               This should be the same as the GroupName specified in the webhook
               provider implementation.
        :param pulumi.Input[str] solver_name: The name of the solver to use, as defined in the webhook provider
               implementation.
               This will typically be the name of the provider, e.g. 'cloudflare'.
        """
        if config is not None:
            pulumi.set(__self__, "config", config)
        if group_name is not None:
            pulumi.set(__self__, "group_name", group_name)
        if solver_name is not None:
            pulumi.set(__self__, "solver_name", solver_name)

    @property
    @pulumi.getter
    def config(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Additional configuration that should be passed to the webhook apiserver
        when challenges are processed.
        This can contain arbitrary JSON data.
        Secret values should not be specified in this stanza.
        If secret values are needed (e.g. credentials for a DNS service), you
        should use a SecretKeySelector to reference a Secret resource.
        For details on the schema of this field, consult the webhook provider
        implementation's documentation.
        """
        return pulumi.get(self, "config")

    @config.setter
    def config(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "config", value)

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> Optional[pulumi.Input[str]]:
        """
        The API group name that should be used when POSTing ChallengePayload
        resources to the webhook apiserver.
        This should be the same as the GroupName specified in the webhook
        provider implementation.
        """
        return pulumi.get(self, "group_name")

    @group_name.setter
    def group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_name", value)

    @property
    @pulumi.getter(name="solverName")
    def solver_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the solver to use, as defined in the webhook provider
        implementation.
        This will typically be the name of the provider, e.g. 'cloudflare'.
        """
        return pulumi.get(self, "solver_name")

    @solver_name.setter
    def solver_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "solver_name", value)


if not MYPY:

    class ChallengeSpecSolverDns01WebhookArgsDict(TypedDict):
        """
        Configure an external webhook based DNS01 challenge solver to manage
        DNS01 challenge records.
        """

        config: NotRequired[pulumi.Input[Mapping[str, Any]]]
        """
        Additional configuration that should be passed to the webhook apiserver
        when challenges are processed.
        This can contain arbitrary JSON data.
        Secret values should not be specified in this stanza.
        If secret values are needed (e.g. credentials for a DNS service), you
        should use a SecretKeySelector to reference a Secret resource.
        For details on the schema of this field, consult the webhook provider
        implementation's documentation.
        """
        group_name: NotRequired[pulumi.Input[str]]
        """
        The API group name that should be used when POSTing ChallengePayload
        resources to the webhook apiserver.
        This should be the same as the GroupName specified in the webhook
        provider implementation.
        """
        solver_name: NotRequired[pulumi.Input[str]]
        """
        The name of the solver to use, as defined in the webhook provider
        implementation.
        This will typically be the name of the provider, e.g. 'cloudflare'.
        """

elif False:
    ChallengeSpecSolverDns01WebhookArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class ChallengeSpecSolverDns01WebhookArgs:
    def __init__(
        __self__,
        *,
        config: Optional[pulumi.Input[Mapping[str, Any]]] = None,
        group_name: Optional[pulumi.Input[str]] = None,
        solver_name: Optional[pulumi.Input[str]] = None
    ):
        """
        Configure an external webhook based DNS01 challenge solver to manage
        DNS01 challenge records.
        :param pulumi.Input[Mapping[str, Any]] config: Additional configuration that should be passed to the webhook apiserver
               when challenges are processed.
               This can contain arbitrary JSON data.
               Secret values should not be specified in this stanza.
               If secret values are needed (e.g. credentials for a DNS service), you
               should use a SecretKeySelector to reference a Secret resource.
               For details on the schema of this field, consult the webhook provider
               implementation's documentation.
        :param pulumi.Input[str] group_name: The API group name that should be used when POSTing ChallengePayload
               resources to the webhook apiserver.
               This should be the same as the GroupName specified in the webhook
               provider implementation.
        :param pulumi.Input[str] solver_name: The name of the solver to use, as defined in the webhook provider
               implementation.
               This will typically be the name of the provider, e.g. 'cloudflare'.
        """
        if config is not None:
            pulumi.set(__self__, "config", config)
        if group_name is not None:
            pulumi.set(__self__, "group_name", group_name)
        if solver_name is not None:
            pulumi.set(__self__, "solver_name", solver_name)

    @property
    @pulumi.getter
    def config(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Additional configuration that should be passed to the webhook apiserver
        when challenges are processed.
        This can contain arbitrary JSON data.
        Secret values should not be specified in this stanza.
        If secret values are needed (e.g. credentials for a DNS service), you
        should use a SecretKeySelector to reference a Secret resource.
        For details on the schema of this field, consult the webhook provider
        implementation's documentation.
        """
        return pulumi.get(self, "config")

    @config.setter
    def config(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "config", value)

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> Optional[pulumi.Input[str]]:
        """
        The API group name that should be used when POSTing ChallengePayload
        resources to the webhook apiserver.
        This should be the same as the GroupName specified in the webhook
        provider implementation.
        """
        return pulumi.get(self, "group_name")

    @group_name.setter
    def group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_name", value)

    @property
    @pulumi.getter(name="solverName")
    def solver_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the solver to use, as defined in the webhook provider
        implementation.
        This will typically be the name of the provider, e.g. 'cloudflare'.
        """
        return pulumi.get(self, "solver_name")

    @solver_name.setter
    def solver_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "solver_name", value)


if not MYPY:

    class ChallengeSpecSolverDns01ArgsDict(TypedDict):
        """
        Configures cert-manager to attempt to complete authorizations by
        performing the DNS01 challenge flow.
        """

        acme_dns: NotRequired[pulumi.Input["ChallengeSpecSolverDns01AcmeDNSArgsDict"]]
        akamai: NotRequired[pulumi.Input["ChallengeSpecSolverDns01AkamaiArgsDict"]]
        azure_dns: NotRequired[pulumi.Input["ChallengeSpecSolverDns01AzureDNSArgsDict"]]
        cloud_dns: NotRequired[pulumi.Input["ChallengeSpecSolverDns01CloudDNSArgsDict"]]
        cloudflare: NotRequired[
            pulumi.Input["ChallengeSpecSolverDns01CloudflareArgsDict"]
        ]
        cname_strategy: NotRequired[pulumi.Input[str]]
        """
        CNAMEStrategy configures how the DNS01 provider should handle CNAME
        records when found in DNS zones.
        """
        digitalocean: NotRequired[
            pulumi.Input["ChallengeSpecSolverDns01DigitaloceanArgsDict"]
        ]
        rfc2136: NotRequired[pulumi.Input["ChallengeSpecSolverDns01Rfc2136ArgsDict"]]
        route53: NotRequired[pulumi.Input["ChallengeSpecSolverDns01Route53ArgsDict"]]
        webhook: NotRequired[pulumi.Input["ChallengeSpecSolverDns01WebhookArgsDict"]]

elif False:
    ChallengeSpecSolverDns01ArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class ChallengeSpecSolverDns01Args:
    def __init__(
        __self__,
        *,
        acme_dns: Optional[pulumi.Input["ChallengeSpecSolverDns01AcmeDNSArgs"]] = None,
        akamai: Optional[pulumi.Input["ChallengeSpecSolverDns01AkamaiArgs"]] = None,
        azure_dns: Optional[
            pulumi.Input["ChallengeSpecSolverDns01AzureDNSArgs"]
        ] = None,
        cloud_dns: Optional[
            pulumi.Input["ChallengeSpecSolverDns01CloudDNSArgs"]
        ] = None,
        cloudflare: Optional[
            pulumi.Input["ChallengeSpecSolverDns01CloudflareArgs"]
        ] = None,
        cname_strategy: Optional[pulumi.Input[str]] = None,
        digitalocean: Optional[
            pulumi.Input["ChallengeSpecSolverDns01DigitaloceanArgs"]
        ] = None,
        rfc2136: Optional[pulumi.Input["ChallengeSpecSolverDns01Rfc2136Args"]] = None,
        route53: Optional[pulumi.Input["ChallengeSpecSolverDns01Route53Args"]] = None,
        webhook: Optional[pulumi.Input["ChallengeSpecSolverDns01WebhookArgs"]] = None
    ):
        """
        Configures cert-manager to attempt to complete authorizations by
        performing the DNS01 challenge flow.
        :param pulumi.Input[str] cname_strategy: CNAMEStrategy configures how the DNS01 provider should handle CNAME
               records when found in DNS zones.
        """
        if acme_dns is not None:
            pulumi.set(__self__, "acme_dns", acme_dns)
        if akamai is not None:
            pulumi.set(__self__, "akamai", akamai)
        if azure_dns is not None:
            pulumi.set(__self__, "azure_dns", azure_dns)
        if cloud_dns is not None:
            pulumi.set(__self__, "cloud_dns", cloud_dns)
        if cloudflare is not None:
            pulumi.set(__self__, "cloudflare", cloudflare)
        if cname_strategy is not None:
            pulumi.set(__self__, "cname_strategy", cname_strategy)
        if digitalocean is not None:
            pulumi.set(__self__, "digitalocean", digitalocean)
        if rfc2136 is not None:
            pulumi.set(__self__, "rfc2136", rfc2136)
        if route53 is not None:
            pulumi.set(__self__, "route53", route53)
        if webhook is not None:
            pulumi.set(__self__, "webhook", webhook)

    @property
    @pulumi.getter(name="acmeDNS")
    def acme_dns(self) -> Optional[pulumi.Input["ChallengeSpecSolverDns01AcmeDNSArgs"]]:
        return pulumi.get(self, "acme_dns")

    @acme_dns.setter
    def acme_dns(
        self, value: Optional[pulumi.Input["ChallengeSpecSolverDns01AcmeDNSArgs"]]
    ):
        pulumi.set(self, "acme_dns", value)

    @property
    @pulumi.getter
    def akamai(self) -> Optional[pulumi.Input["ChallengeSpecSolverDns01AkamaiArgs"]]:
        return pulumi.get(self, "akamai")

    @akamai.setter
    def akamai(
        self, value: Optional[pulumi.Input["ChallengeSpecSolverDns01AkamaiArgs"]]
    ):
        pulumi.set(self, "akamai", value)

    @property
    @pulumi.getter(name="azureDNS")
    def azure_dns(
        self,
    ) -> Optional[pulumi.Input["ChallengeSpecSolverDns01AzureDNSArgs"]]:
        return pulumi.get(self, "azure_dns")

    @azure_dns.setter
    def azure_dns(
        self, value: Optional[pulumi.Input["ChallengeSpecSolverDns01AzureDNSArgs"]]
    ):
        pulumi.set(self, "azure_dns", value)

    @property
    @pulumi.getter(name="cloudDNS")
    def cloud_dns(
        self,
    ) -> Optional[pulumi.Input["ChallengeSpecSolverDns01CloudDNSArgs"]]:
        return pulumi.get(self, "cloud_dns")

    @cloud_dns.setter
    def cloud_dns(
        self, value: Optional[pulumi.Input["ChallengeSpecSolverDns01CloudDNSArgs"]]
    ):
        pulumi.set(self, "cloud_dns", value)

    @property
    @pulumi.getter
    def cloudflare(
        self,
    ) -> Optional[pulumi.Input["ChallengeSpecSolverDns01CloudflareArgs"]]:
        return pulumi.get(self, "cloudflare")

    @cloudflare.setter
    def cloudflare(
        self, value: Optional[pulumi.Input["ChallengeSpecSolverDns01CloudflareArgs"]]
    ):
        pulumi.set(self, "cloudflare", value)

    @property
    @pulumi.getter(name="cnameStrategy")
    def cname_strategy(self) -> Optional[pulumi.Input[str]]:
        """
        CNAMEStrategy configures how the DNS01 provider should handle CNAME
        records when found in DNS zones.
        """
        return pulumi.get(self, "cname_strategy")

    @cname_strategy.setter
    def cname_strategy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cname_strategy", value)

    @property
    @pulumi.getter
    def digitalocean(
        self,
    ) -> Optional[pulumi.Input["ChallengeSpecSolverDns01DigitaloceanArgs"]]:
        return pulumi.get(self, "digitalocean")

    @digitalocean.setter
    def digitalocean(
        self, value: Optional[pulumi.Input["ChallengeSpecSolverDns01DigitaloceanArgs"]]
    ):
        pulumi.set(self, "digitalocean", value)

    @property
    @pulumi.getter
    def rfc2136(self) -> Optional[pulumi.Input["ChallengeSpecSolverDns01Rfc2136Args"]]:
        return pulumi.get(self, "rfc2136")

    @rfc2136.setter
    def rfc2136(
        self, value: Optional[pulumi.Input["ChallengeSpecSolverDns01Rfc2136Args"]]
    ):
        pulumi.set(self, "rfc2136", value)

    @property
    @pulumi.getter
    def route53(self) -> Optional[pulumi.Input["ChallengeSpecSolverDns01Route53Args"]]:
        return pulumi.get(self, "route53")

    @route53.setter
    def route53(
        self, value: Optional[pulumi.Input["ChallengeSpecSolverDns01Route53Args"]]
    ):
        pulumi.set(self, "route53", value)

    @property
    @pulumi.getter
    def webhook(self) -> Optional[pulumi.Input["ChallengeSpecSolverDns01WebhookArgs"]]:
        return pulumi.get(self, "webhook")

    @webhook.setter
    def webhook(
        self, value: Optional[pulumi.Input["ChallengeSpecSolverDns01WebhookArgs"]]
    ):
        pulumi.set(self, "webhook", value)


if not MYPY:

    class ChallengeSpecSolverHttp01GatewayHTTPRouteParentRefsPatchArgsDict(TypedDict):
        """
        ParentReference identifies an API object (usually a Gateway) that can be considered
        a parent of this resource (usually a route). There are two kinds of parent resources
        with "Core" support:

        * Gateway (Gateway conformance profile)
        * Service (Mesh conformance profile, ClusterIP Services only)

        This API may be extended in the future to support additional kinds of parent
        resources.

        The API object must be valid in the cluster; the Group and Kind must
        be registered in the cluster for this reference to be valid.
        """

        group: NotRequired[pulumi.Input[str]]
        """
        Group is the group of the referent.
        When unspecified, "gateway.networking.k8s.io" is inferred.
        To set the core API group (such as for a "Service" kind referent),
        Group must be explicitly set to "" (empty string).

        Support: Core
        """
        kind: NotRequired[pulumi.Input[str]]
        """
        Kind is kind of the referent.

        There are two kinds of parent resources with "Core" support:

        * Gateway (Gateway conformance profile)
        * Service (Mesh conformance profile, ClusterIP Services only)

        Support for other resources is Implementation-Specific.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name is the name of the referent.

        Support: Core
        """
        namespace: NotRequired[pulumi.Input[str]]
        """
        Namespace is the namespace of the referent. When unspecified, this refers
        to the local namespace of the Route.

        Note that there are specific rules for ParentRefs which cross namespace
        boundaries. Cross-namespace references are only valid if they are explicitly
        allowed by something in the namespace they are referring to. For example:
        Gateway has the AllowedRoutes field, and ReferenceGrant provides a
        generic way to enable any other kind of cross-namespace reference.

        <gateway:experimental:description>
        ParentRefs from a Route to a Service in the same namespace are "producer"
        routes, which apply default routing rules to inbound connections from
        any namespace to the Service.

        ParentRefs from a Route to a Service in a different namespace are
        "consumer" routes, and these routing rules are only applied to outbound
        connections originating from the same namespace as the Route, for which
        the intended destination of the connections are a Service targeted as a
        ParentRef of the Route.
        </gateway:experimental:description>

        Support: Core
        """
        port: NotRequired[pulumi.Input[int]]
        """
        Port is the network port this Route targets. It can be interpreted
        differently based on the type of parent resource.

        When the parent resource is a Gateway, this targets all listeners
        listening on the specified port that also support this kind of Route(and
        select this Route). It's not recommended to set `Port` unless the
        networking behaviors specified in a Route must apply to a specific port
        as opposed to a listener(s) whose port(s) may be changed. When both Port
        and SectionName are specified, the name and port of the selected listener
        must match both specified values.

        <gateway:experimental:description>
        When the parent resource is a Service, this targets a specific port in the
        Service spec. When both Port (experimental) and SectionName are specified,
        the name and port of the selected port must match both specified values.
        </gateway:experimental:description>

        Implementations MAY choose to support other parent resources.
        Implementations supporting other types of parent resources MUST clearly
        document how/if Port is interpreted.

        For the purpose of status, an attachment is considered successful as
        long as the parent resource accepts it partially. For example, Gateway
        listeners can restrict which Routes can attach to them by Route kind,
        namespace, or hostname. If 1 of 2 Gateway listeners accept attachment
        from the referencing Route, the Route MUST be considered successfully
        attached. If no Gateway listeners accept attachment from this Route,
        the Route MUST be considered detached from the Gateway.

        Support: Extended
        """
        section_name: NotRequired[pulumi.Input[str]]
        """
        SectionName is the name of a section within the target resource. In the
        following resources, SectionName is interpreted as the following:

        * Gateway: Listener name. When both Port (experimental) and SectionName
        are specified, the name and port of the selected listener must match
        both specified values.
        * Service: Port name. When both Port (experimental) and SectionName
        are specified, the name and port of the selected listener must match
        both specified values.

        Implementations MAY choose to support attaching Routes to other resources.
        If that is the case, they MUST clearly document how SectionName is
        interpreted.

        When unspecified (empty string), this will reference the entire resource.
        For the purpose of status, an attachment is considered successful if at
        least one section in the parent resource accepts it. For example, Gateway
        listeners can restrict which Routes can attach to them by Route kind,
        namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from
        the referencing Route, the Route MUST be considered successfully
        attached. If no Gateway listeners accept attachment from this Route, the
        Route MUST be considered detached from the Gateway.

        Support: Core
        """

elif False:
    ChallengeSpecSolverHttp01GatewayHTTPRouteParentRefsPatchArgsDict: TypeAlias = (
        Mapping[str, Any]
    )


@pulumi.input_type
class ChallengeSpecSolverHttp01GatewayHTTPRouteParentRefsPatchArgs:
    def __init__(
        __self__,
        *,
        group: Optional[pulumi.Input[str]] = None,
        kind: Optional[pulumi.Input[str]] = None,
        name: Optional[pulumi.Input[str]] = None,
        namespace: Optional[pulumi.Input[str]] = None,
        port: Optional[pulumi.Input[int]] = None,
        section_name: Optional[pulumi.Input[str]] = None
    ):
        """
        ParentReference identifies an API object (usually a Gateway) that can be considered
        a parent of this resource (usually a route). There are two kinds of parent resources
        with "Core" support:

        * Gateway (Gateway conformance profile)
        * Service (Mesh conformance profile, ClusterIP Services only)

        This API may be extended in the future to support additional kinds of parent
        resources.

        The API object must be valid in the cluster; the Group and Kind must
        be registered in the cluster for this reference to be valid.
        :param pulumi.Input[str] group: Group is the group of the referent.
               When unspecified, "gateway.networking.k8s.io" is inferred.
               To set the core API group (such as for a "Service" kind referent),
               Group must be explicitly set to "" (empty string).

               Support: Core
        :param pulumi.Input[str] kind: Kind is kind of the referent.

               There are two kinds of parent resources with "Core" support:

               * Gateway (Gateway conformance profile)
               * Service (Mesh conformance profile, ClusterIP Services only)

               Support for other resources is Implementation-Specific.
        :param pulumi.Input[str] name: Name is the name of the referent.

               Support: Core
        :param pulumi.Input[str] namespace: Namespace is the namespace of the referent. When unspecified, this refers
               to the local namespace of the Route.

               Note that there are specific rules for ParentRefs which cross namespace
               boundaries. Cross-namespace references are only valid if they are explicitly
               allowed by something in the namespace they are referring to. For example:
               Gateway has the AllowedRoutes field, and ReferenceGrant provides a
               generic way to enable any other kind of cross-namespace reference.

               <gateway:experimental:description>
               ParentRefs from a Route to a Service in the same namespace are "producer"
               routes, which apply default routing rules to inbound connections from
               any namespace to the Service.

               ParentRefs from a Route to a Service in a different namespace are
               "consumer" routes, and these routing rules are only applied to outbound
               connections originating from the same namespace as the Route, for which
               the intended destination of the connections are a Service targeted as a
               ParentRef of the Route.
               </gateway:experimental:description>

               Support: Core
        :param pulumi.Input[int] port: Port is the network port this Route targets. It can be interpreted
               differently based on the type of parent resource.

               When the parent resource is a Gateway, this targets all listeners
               listening on the specified port that also support this kind of Route(and
               select this Route). It's not recommended to set `Port` unless the
               networking behaviors specified in a Route must apply to a specific port
               as opposed to a listener(s) whose port(s) may be changed. When both Port
               and SectionName are specified, the name and port of the selected listener
               must match both specified values.

               <gateway:experimental:description>
               When the parent resource is a Service, this targets a specific port in the
               Service spec. When both Port (experimental) and SectionName are specified,
               the name and port of the selected port must match both specified values.
               </gateway:experimental:description>

               Implementations MAY choose to support other parent resources.
               Implementations supporting other types of parent resources MUST clearly
               document how/if Port is interpreted.

               For the purpose of status, an attachment is considered successful as
               long as the parent resource accepts it partially. For example, Gateway
               listeners can restrict which Routes can attach to them by Route kind,
               namespace, or hostname. If 1 of 2 Gateway listeners accept attachment
               from the referencing Route, the Route MUST be considered successfully
               attached. If no Gateway listeners accept attachment from this Route,
               the Route MUST be considered detached from the Gateway.

               Support: Extended
        :param pulumi.Input[str] section_name: SectionName is the name of a section within the target resource. In the
               following resources, SectionName is interpreted as the following:

               * Gateway: Listener name. When both Port (experimental) and SectionName
               are specified, the name and port of the selected listener must match
               both specified values.
               * Service: Port name. When both Port (experimental) and SectionName
               are specified, the name and port of the selected listener must match
               both specified values.

               Implementations MAY choose to support attaching Routes to other resources.
               If that is the case, they MUST clearly document how SectionName is
               interpreted.

               When unspecified (empty string), this will reference the entire resource.
               For the purpose of status, an attachment is considered successful if at
               least one section in the parent resource accepts it. For example, Gateway
               listeners can restrict which Routes can attach to them by Route kind,
               namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from
               the referencing Route, the Route MUST be considered successfully
               attached. If no Gateway listeners accept attachment from this Route, the
               Route MUST be considered detached from the Gateway.

               Support: Core
        """
        if group is not None:
            pulumi.set(__self__, "group", group)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if section_name is not None:
            pulumi.set(__self__, "section_name", section_name)

    @property
    @pulumi.getter
    def group(self) -> Optional[pulumi.Input[str]]:
        """
        Group is the group of the referent.
        When unspecified, "gateway.networking.k8s.io" is inferred.
        To set the core API group (such as for a "Service" kind referent),
        Group must be explicitly set to "" (empty string).

        Support: Core
        """
        return pulumi.get(self, "group")

    @group.setter
    def group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group", value)

    @property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[str]]:
        """
        Kind is kind of the referent.

        There are two kinds of parent resources with "Core" support:

        * Gateway (Gateway conformance profile)
        * Service (Mesh conformance profile, ClusterIP Services only)

        Support for other resources is Implementation-Specific.
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name is the name of the referent.

        Support: Core
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        """
        Namespace is the namespace of the referent. When unspecified, this refers
        to the local namespace of the Route.

        Note that there are specific rules for ParentRefs which cross namespace
        boundaries. Cross-namespace references are only valid if they are explicitly
        allowed by something in the namespace they are referring to. For example:
        Gateway has the AllowedRoutes field, and ReferenceGrant provides a
        generic way to enable any other kind of cross-namespace reference.

        <gateway:experimental:description>
        ParentRefs from a Route to a Service in the same namespace are "producer"
        routes, which apply default routing rules to inbound connections from
        any namespace to the Service.

        ParentRefs from a Route to a Service in a different namespace are
        "consumer" routes, and these routing rules are only applied to outbound
        connections originating from the same namespace as the Route, for which
        the intended destination of the connections are a Service targeted as a
        ParentRef of the Route.
        </gateway:experimental:description>

        Support: Core
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        Port is the network port this Route targets. It can be interpreted
        differently based on the type of parent resource.

        When the parent resource is a Gateway, this targets all listeners
        listening on the specified port that also support this kind of Route(and
        select this Route). It's not recommended to set `Port` unless the
        networking behaviors specified in a Route must apply to a specific port
        as opposed to a listener(s) whose port(s) may be changed. When both Port
        and SectionName are specified, the name and port of the selected listener
        must match both specified values.

        <gateway:experimental:description>
        When the parent resource is a Service, this targets a specific port in the
        Service spec. When both Port (experimental) and SectionName are specified,
        the name and port of the selected port must match both specified values.
        </gateway:experimental:description>

        Implementations MAY choose to support other parent resources.
        Implementations supporting other types of parent resources MUST clearly
        document how/if Port is interpreted.

        For the purpose of status, an attachment is considered successful as
        long as the parent resource accepts it partially. For example, Gateway
        listeners can restrict which Routes can attach to them by Route kind,
        namespace, or hostname. If 1 of 2 Gateway listeners accept attachment
        from the referencing Route, the Route MUST be considered successfully
        attached. If no Gateway listeners accept attachment from this Route,
        the Route MUST be considered detached from the Gateway.

        Support: Extended
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="sectionName")
    def section_name(self) -> Optional[pulumi.Input[str]]:
        """
        SectionName is the name of a section within the target resource. In the
        following resources, SectionName is interpreted as the following:

        * Gateway: Listener name. When both Port (experimental) and SectionName
        are specified, the name and port of the selected listener must match
        both specified values.
        * Service: Port name. When both Port (experimental) and SectionName
        are specified, the name and port of the selected listener must match
        both specified values.

        Implementations MAY choose to support attaching Routes to other resources.
        If that is the case, they MUST clearly document how SectionName is
        interpreted.

        When unspecified (empty string), this will reference the entire resource.
        For the purpose of status, an attachment is considered successful if at
        least one section in the parent resource accepts it. For example, Gateway
        listeners can restrict which Routes can attach to them by Route kind,
        namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from
        the referencing Route, the Route MUST be considered successfully
        attached. If no Gateway listeners accept attachment from this Route, the
        Route MUST be considered detached from the Gateway.

        Support: Core
        """
        return pulumi.get(self, "section_name")

    @section_name.setter
    def section_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "section_name", value)


if not MYPY:

    class ChallengeSpecSolverHttp01GatewayHTTPRouteParentRefsArgsDict(TypedDict):
        """
        ParentReference identifies an API object (usually a Gateway) that can be considered
        a parent of this resource (usually a route). There are two kinds of parent resources
        with "Core" support:

        * Gateway (Gateway conformance profile)
        * Service (Mesh conformance profile, ClusterIP Services only)

        This API may be extended in the future to support additional kinds of parent
        resources.

        The API object must be valid in the cluster; the Group and Kind must
        be registered in the cluster for this reference to be valid.
        """

        group: NotRequired[pulumi.Input[str]]
        """
        Group is the group of the referent.
        When unspecified, "gateway.networking.k8s.io" is inferred.
        To set the core API group (such as for a "Service" kind referent),
        Group must be explicitly set to "" (empty string).

        Support: Core
        """
        kind: NotRequired[pulumi.Input[str]]
        """
        Kind is kind of the referent.

        There are two kinds of parent resources with "Core" support:

        * Gateway (Gateway conformance profile)
        * Service (Mesh conformance profile, ClusterIP Services only)

        Support for other resources is Implementation-Specific.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name is the name of the referent.

        Support: Core
        """
        namespace: NotRequired[pulumi.Input[str]]
        """
        Namespace is the namespace of the referent. When unspecified, this refers
        to the local namespace of the Route.

        Note that there are specific rules for ParentRefs which cross namespace
        boundaries. Cross-namespace references are only valid if they are explicitly
        allowed by something in the namespace they are referring to. For example:
        Gateway has the AllowedRoutes field, and ReferenceGrant provides a
        generic way to enable any other kind of cross-namespace reference.

        <gateway:experimental:description>
        ParentRefs from a Route to a Service in the same namespace are "producer"
        routes, which apply default routing rules to inbound connections from
        any namespace to the Service.

        ParentRefs from a Route to a Service in a different namespace are
        "consumer" routes, and these routing rules are only applied to outbound
        connections originating from the same namespace as the Route, for which
        the intended destination of the connections are a Service targeted as a
        ParentRef of the Route.
        </gateway:experimental:description>

        Support: Core
        """
        port: NotRequired[pulumi.Input[int]]
        """
        Port is the network port this Route targets. It can be interpreted
        differently based on the type of parent resource.

        When the parent resource is a Gateway, this targets all listeners
        listening on the specified port that also support this kind of Route(and
        select this Route). It's not recommended to set `Port` unless the
        networking behaviors specified in a Route must apply to a specific port
        as opposed to a listener(s) whose port(s) may be changed. When both Port
        and SectionName are specified, the name and port of the selected listener
        must match both specified values.

        <gateway:experimental:description>
        When the parent resource is a Service, this targets a specific port in the
        Service spec. When both Port (experimental) and SectionName are specified,
        the name and port of the selected port must match both specified values.
        </gateway:experimental:description>

        Implementations MAY choose to support other parent resources.
        Implementations supporting other types of parent resources MUST clearly
        document how/if Port is interpreted.

        For the purpose of status, an attachment is considered successful as
        long as the parent resource accepts it partially. For example, Gateway
        listeners can restrict which Routes can attach to them by Route kind,
        namespace, or hostname. If 1 of 2 Gateway listeners accept attachment
        from the referencing Route, the Route MUST be considered successfully
        attached. If no Gateway listeners accept attachment from this Route,
        the Route MUST be considered detached from the Gateway.

        Support: Extended
        """
        section_name: NotRequired[pulumi.Input[str]]
        """
        SectionName is the name of a section within the target resource. In the
        following resources, SectionName is interpreted as the following:

        * Gateway: Listener name. When both Port (experimental) and SectionName
        are specified, the name and port of the selected listener must match
        both specified values.
        * Service: Port name. When both Port (experimental) and SectionName
        are specified, the name and port of the selected listener must match
        both specified values.

        Implementations MAY choose to support attaching Routes to other resources.
        If that is the case, they MUST clearly document how SectionName is
        interpreted.

        When unspecified (empty string), this will reference the entire resource.
        For the purpose of status, an attachment is considered successful if at
        least one section in the parent resource accepts it. For example, Gateway
        listeners can restrict which Routes can attach to them by Route kind,
        namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from
        the referencing Route, the Route MUST be considered successfully
        attached. If no Gateway listeners accept attachment from this Route, the
        Route MUST be considered detached from the Gateway.

        Support: Core
        """

elif False:
    ChallengeSpecSolverHttp01GatewayHTTPRouteParentRefsArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01GatewayHTTPRouteParentRefsArgs:
    def __init__(
        __self__,
        *,
        group: Optional[pulumi.Input[str]] = None,
        kind: Optional[pulumi.Input[str]] = None,
        name: Optional[pulumi.Input[str]] = None,
        namespace: Optional[pulumi.Input[str]] = None,
        port: Optional[pulumi.Input[int]] = None,
        section_name: Optional[pulumi.Input[str]] = None
    ):
        """
        ParentReference identifies an API object (usually a Gateway) that can be considered
        a parent of this resource (usually a route). There are two kinds of parent resources
        with "Core" support:

        * Gateway (Gateway conformance profile)
        * Service (Mesh conformance profile, ClusterIP Services only)

        This API may be extended in the future to support additional kinds of parent
        resources.

        The API object must be valid in the cluster; the Group and Kind must
        be registered in the cluster for this reference to be valid.
        :param pulumi.Input[str] group: Group is the group of the referent.
               When unspecified, "gateway.networking.k8s.io" is inferred.
               To set the core API group (such as for a "Service" kind referent),
               Group must be explicitly set to "" (empty string).

               Support: Core
        :param pulumi.Input[str] kind: Kind is kind of the referent.

               There are two kinds of parent resources with "Core" support:

               * Gateway (Gateway conformance profile)
               * Service (Mesh conformance profile, ClusterIP Services only)

               Support for other resources is Implementation-Specific.
        :param pulumi.Input[str] name: Name is the name of the referent.

               Support: Core
        :param pulumi.Input[str] namespace: Namespace is the namespace of the referent. When unspecified, this refers
               to the local namespace of the Route.

               Note that there are specific rules for ParentRefs which cross namespace
               boundaries. Cross-namespace references are only valid if they are explicitly
               allowed by something in the namespace they are referring to. For example:
               Gateway has the AllowedRoutes field, and ReferenceGrant provides a
               generic way to enable any other kind of cross-namespace reference.

               <gateway:experimental:description>
               ParentRefs from a Route to a Service in the same namespace are "producer"
               routes, which apply default routing rules to inbound connections from
               any namespace to the Service.

               ParentRefs from a Route to a Service in a different namespace are
               "consumer" routes, and these routing rules are only applied to outbound
               connections originating from the same namespace as the Route, for which
               the intended destination of the connections are a Service targeted as a
               ParentRef of the Route.
               </gateway:experimental:description>

               Support: Core
        :param pulumi.Input[int] port: Port is the network port this Route targets. It can be interpreted
               differently based on the type of parent resource.

               When the parent resource is a Gateway, this targets all listeners
               listening on the specified port that also support this kind of Route(and
               select this Route). It's not recommended to set `Port` unless the
               networking behaviors specified in a Route must apply to a specific port
               as opposed to a listener(s) whose port(s) may be changed. When both Port
               and SectionName are specified, the name and port of the selected listener
               must match both specified values.

               <gateway:experimental:description>
               When the parent resource is a Service, this targets a specific port in the
               Service spec. When both Port (experimental) and SectionName are specified,
               the name and port of the selected port must match both specified values.
               </gateway:experimental:description>

               Implementations MAY choose to support other parent resources.
               Implementations supporting other types of parent resources MUST clearly
               document how/if Port is interpreted.

               For the purpose of status, an attachment is considered successful as
               long as the parent resource accepts it partially. For example, Gateway
               listeners can restrict which Routes can attach to them by Route kind,
               namespace, or hostname. If 1 of 2 Gateway listeners accept attachment
               from the referencing Route, the Route MUST be considered successfully
               attached. If no Gateway listeners accept attachment from this Route,
               the Route MUST be considered detached from the Gateway.

               Support: Extended
        :param pulumi.Input[str] section_name: SectionName is the name of a section within the target resource. In the
               following resources, SectionName is interpreted as the following:

               * Gateway: Listener name. When both Port (experimental) and SectionName
               are specified, the name and port of the selected listener must match
               both specified values.
               * Service: Port name. When both Port (experimental) and SectionName
               are specified, the name and port of the selected listener must match
               both specified values.

               Implementations MAY choose to support attaching Routes to other resources.
               If that is the case, they MUST clearly document how SectionName is
               interpreted.

               When unspecified (empty string), this will reference the entire resource.
               For the purpose of status, an attachment is considered successful if at
               least one section in the parent resource accepts it. For example, Gateway
               listeners can restrict which Routes can attach to them by Route kind,
               namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from
               the referencing Route, the Route MUST be considered successfully
               attached. If no Gateway listeners accept attachment from this Route, the
               Route MUST be considered detached from the Gateway.

               Support: Core
        """
        if group is not None:
            pulumi.set(__self__, "group", group)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if section_name is not None:
            pulumi.set(__self__, "section_name", section_name)

    @property
    @pulumi.getter
    def group(self) -> Optional[pulumi.Input[str]]:
        """
        Group is the group of the referent.
        When unspecified, "gateway.networking.k8s.io" is inferred.
        To set the core API group (such as for a "Service" kind referent),
        Group must be explicitly set to "" (empty string).

        Support: Core
        """
        return pulumi.get(self, "group")

    @group.setter
    def group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group", value)

    @property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[str]]:
        """
        Kind is kind of the referent.

        There are two kinds of parent resources with "Core" support:

        * Gateway (Gateway conformance profile)
        * Service (Mesh conformance profile, ClusterIP Services only)

        Support for other resources is Implementation-Specific.
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name is the name of the referent.

        Support: Core
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        """
        Namespace is the namespace of the referent. When unspecified, this refers
        to the local namespace of the Route.

        Note that there are specific rules for ParentRefs which cross namespace
        boundaries. Cross-namespace references are only valid if they are explicitly
        allowed by something in the namespace they are referring to. For example:
        Gateway has the AllowedRoutes field, and ReferenceGrant provides a
        generic way to enable any other kind of cross-namespace reference.

        <gateway:experimental:description>
        ParentRefs from a Route to a Service in the same namespace are "producer"
        routes, which apply default routing rules to inbound connections from
        any namespace to the Service.

        ParentRefs from a Route to a Service in a different namespace are
        "consumer" routes, and these routing rules are only applied to outbound
        connections originating from the same namespace as the Route, for which
        the intended destination of the connections are a Service targeted as a
        ParentRef of the Route.
        </gateway:experimental:description>

        Support: Core
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        Port is the network port this Route targets. It can be interpreted
        differently based on the type of parent resource.

        When the parent resource is a Gateway, this targets all listeners
        listening on the specified port that also support this kind of Route(and
        select this Route). It's not recommended to set `Port` unless the
        networking behaviors specified in a Route must apply to a specific port
        as opposed to a listener(s) whose port(s) may be changed. When both Port
        and SectionName are specified, the name and port of the selected listener
        must match both specified values.

        <gateway:experimental:description>
        When the parent resource is a Service, this targets a specific port in the
        Service spec. When both Port (experimental) and SectionName are specified,
        the name and port of the selected port must match both specified values.
        </gateway:experimental:description>

        Implementations MAY choose to support other parent resources.
        Implementations supporting other types of parent resources MUST clearly
        document how/if Port is interpreted.

        For the purpose of status, an attachment is considered successful as
        long as the parent resource accepts it partially. For example, Gateway
        listeners can restrict which Routes can attach to them by Route kind,
        namespace, or hostname. If 1 of 2 Gateway listeners accept attachment
        from the referencing Route, the Route MUST be considered successfully
        attached. If no Gateway listeners accept attachment from this Route,
        the Route MUST be considered detached from the Gateway.

        Support: Extended
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="sectionName")
    def section_name(self) -> Optional[pulumi.Input[str]]:
        """
        SectionName is the name of a section within the target resource. In the
        following resources, SectionName is interpreted as the following:

        * Gateway: Listener name. When both Port (experimental) and SectionName
        are specified, the name and port of the selected listener must match
        both specified values.
        * Service: Port name. When both Port (experimental) and SectionName
        are specified, the name and port of the selected listener must match
        both specified values.

        Implementations MAY choose to support attaching Routes to other resources.
        If that is the case, they MUST clearly document how SectionName is
        interpreted.

        When unspecified (empty string), this will reference the entire resource.
        For the purpose of status, an attachment is considered successful if at
        least one section in the parent resource accepts it. For example, Gateway
        listeners can restrict which Routes can attach to them by Route kind,
        namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from
        the referencing Route, the Route MUST be considered successfully
        attached. If no Gateway listeners accept attachment from this Route, the
        Route MUST be considered detached from the Gateway.

        Support: Core
        """
        return pulumi.get(self, "section_name")

    @section_name.setter
    def section_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "section_name", value)


if not MYPY:

    class ChallengeSpecSolverHttp01GatewayHTTPRoutePatchArgsDict(TypedDict):
        """
        The Gateway API is a sig-network community API that models service networking
        in Kubernetes (https://gateway-api.sigs.k8s.io/). The Gateway solver will
        create HTTPRoutes with the specified labels in the same namespace as the challenge.
        This solver is experimental, and fields / behaviour may change in the future.
        """

        labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Custom labels that will be applied to HTTPRoutes created by cert-manager
        while solving HTTP-01 challenges.
        """
        parent_refs: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01GatewayHTTPRouteParentRefsPatchArgsDict"
                    ]
                ]
            ]
        ]
        """
        When solving an HTTP-01 challenge, cert-manager creates an HTTPRoute.
        cert-manager needs to know which parentRefs should be used when creating
        the HTTPRoute. Usually, the parentRef references a Gateway. See:
        https://gateway-api.sigs.k8s.io/api-types/httproute/#attaching-to-gateways
        """
        pod_template: NotRequired[
            pulumi.Input[
                "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplatePatchArgsDict"
            ]
        ]
        service_type: NotRequired[pulumi.Input[str]]
        """
        Optional service type for Kubernetes solver service. Supported values
        are NodePort or ClusterIP. If unset, defaults to NodePort.
        """

elif False:
    ChallengeSpecSolverHttp01GatewayHTTPRoutePatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePatchArgs:
    def __init__(
        __self__,
        *,
        labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
        parent_refs: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01GatewayHTTPRouteParentRefsPatchArgs"
                    ]
                ]
            ]
        ] = None,
        pod_template: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplatePatchArgs"
            ]
        ] = None,
        service_type: Optional[pulumi.Input[str]] = None
    ):
        """
        The Gateway API is a sig-network community API that models service networking
        in Kubernetes (https://gateway-api.sigs.k8s.io/). The Gateway solver will
        create HTTPRoutes with the specified labels in the same namespace as the challenge.
        This solver is experimental, and fields / behaviour may change in the future.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: Custom labels that will be applied to HTTPRoutes created by cert-manager
               while solving HTTP-01 challenges.
        :param pulumi.Input[Sequence[pulumi.Input['ChallengeSpecSolverHttp01GatewayHTTPRouteParentRefsPatchArgs']]] parent_refs: When solving an HTTP-01 challenge, cert-manager creates an HTTPRoute.
               cert-manager needs to know which parentRefs should be used when creating
               the HTTPRoute. Usually, the parentRef references a Gateway. See:
               https://gateway-api.sigs.k8s.io/api-types/httproute/#attaching-to-gateways
        :param pulumi.Input[str] service_type: Optional service type for Kubernetes solver service. Supported values
               are NodePort or ClusterIP. If unset, defaults to NodePort.
        """
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if parent_refs is not None:
            pulumi.set(__self__, "parent_refs", parent_refs)
        if pod_template is not None:
            pulumi.set(__self__, "pod_template", pod_template)
        if service_type is not None:
            pulumi.set(__self__, "service_type", service_type)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Custom labels that will be applied to HTTPRoutes created by cert-manager
        while solving HTTP-01 challenges.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter(name="parentRefs")
    def parent_refs(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ChallengeSpecSolverHttp01GatewayHTTPRouteParentRefsPatchArgs"
                ]
            ]
        ]
    ]:
        """
        When solving an HTTP-01 challenge, cert-manager creates an HTTPRoute.
        cert-manager needs to know which parentRefs should be used when creating
        the HTTPRoute. Usually, the parentRef references a Gateway. See:
        https://gateway-api.sigs.k8s.io/api-types/httproute/#attaching-to-gateways
        """
        return pulumi.get(self, "parent_refs")

    @parent_refs.setter
    def parent_refs(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01GatewayHTTPRouteParentRefsPatchArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "parent_refs", value)

    @property
    @pulumi.getter(name="podTemplate")
    def pod_template(
        self,
    ) -> Optional[
        pulumi.Input["ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplatePatchArgs"]
    ]:
        return pulumi.get(self, "pod_template")

    @pod_template.setter
    def pod_template(
        self,
        value: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplatePatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "pod_template", value)

    @property
    @pulumi.getter(name="serviceType")
    def service_type(self) -> Optional[pulumi.Input[str]]:
        """
        Optional service type for Kubernetes solver service. Supported values
        are NodePort or ClusterIP. If unset, defaults to NodePort.
        """
        return pulumi.get(self, "service_type")

    @service_type.setter
    def service_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_type", value)


if not MYPY:

    class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateMetadataPatchArgsDict(
        TypedDict
    ):
        """
        ObjectMeta overrides for the pod used to solve HTTP01 challenges.
        Only the 'labels' and 'annotations' fields may be set.
        If labels or annotations overlap with in-built values, the values here
        will override the in-built values.
        """

        annotations: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Annotations that should be added to the created ACME HTTP01 solver pods.
        """
        labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Labels that should be added to the created ACME HTTP01 solver pods.
        """

elif False:
    ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateMetadataPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateMetadataPatchArgs:
    def __init__(
        __self__,
        *,
        annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
        labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None
    ):
        """
        ObjectMeta overrides for the pod used to solve HTTP01 challenges.
        Only the 'labels' and 'annotations' fields may be set.
        If labels or annotations overlap with in-built values, the values here
        will override the in-built values.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] annotations: Annotations that should be added to the created ACME HTTP01 solver pods.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: Labels that should be added to the created ACME HTTP01 solver pods.
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Annotations that should be added to the created ACME HTTP01 solver pods.
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(
        self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
    ):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Labels that should be added to the created ACME HTTP01 solver pods.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)


if not MYPY:

    class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateMetadataArgsDict(
        TypedDict
    ):
        """
        ObjectMeta overrides for the pod used to solve HTTP01 challenges.
        Only the 'labels' and 'annotations' fields may be set.
        If labels or annotations overlap with in-built values, the values here
        will override the in-built values.
        """

        annotations: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Annotations that should be added to the created ACME HTTP01 solver pods.
        """
        labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Labels that should be added to the created ACME HTTP01 solver pods.
        """

elif False:
    ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateMetadataArgsDict: TypeAlias = (
        Mapping[str, Any]
    )


@pulumi.input_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateMetadataArgs:
    def __init__(
        __self__,
        *,
        annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
        labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None
    ):
        """
        ObjectMeta overrides for the pod used to solve HTTP01 challenges.
        Only the 'labels' and 'annotations' fields may be set.
        If labels or annotations overlap with in-built values, the values here
        will override the in-built values.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] annotations: Annotations that should be added to the created ACME HTTP01 solver pods.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: Labels that should be added to the created ACME HTTP01 solver pods.
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Annotations that should be added to the created ACME HTTP01 solver pods.
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(
        self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
    ):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Labels that should be added to the created ACME HTTP01 solver pods.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)


if not MYPY:

    class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplatePatchArgsDict(TypedDict):
        """
        Optional pod template used to configure the ACME challenge solver pods
        used for HTTP01 challenges.
        """

        metadata: NotRequired[
            pulumi.Input[
                "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateMetadataPatchArgsDict"
            ]
        ]
        spec: NotRequired[
            pulumi.Input[
                "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecPatchArgsDict"
            ]
        ]

elif False:
    ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplatePatchArgsDict: TypeAlias = (
        Mapping[str, Any]
    )


@pulumi.input_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplatePatchArgs:
    def __init__(
        __self__,
        *,
        metadata: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateMetadataPatchArgs"
            ]
        ] = None,
        spec: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecPatchArgs"
            ]
        ] = None
    ):
        """
        Optional pod template used to configure the ACME challenge solver pods
        used for HTTP01 challenges.
        """
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if spec is not None:
            pulumi.set(__self__, "spec", spec)

    @property
    @pulumi.getter
    def metadata(
        self,
    ) -> Optional[
        pulumi.Input[
            "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateMetadataPatchArgs"
        ]
    ]:
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(
        self,
        value: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateMetadataPatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter
    def spec(
        self,
    ) -> Optional[
        pulumi.Input[
            "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecPatchArgs"
        ]
    ]:
        return pulumi.get(self, "spec")

    @spec.setter
    def spec(
        self,
        value: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecPatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "spec", value)


if not MYPY:

    class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPatchArgsDict(
        TypedDict
    ):
        """
        Describes node affinity scheduling rules for the pod.
        """

        preferred_during_scheduling_ignored_during_execution: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgsDict"
                    ]
                ]
            ]
        ]
        """
        The scheduler will prefer to schedule pods to nodes that satisfy
        the affinity expressions specified by this field, but it may choose
        a node that violates one or more of the expressions. The node that is
        most preferred is the one with the greatest sum of weights, i.e.
        for each node that meets all of the scheduling requirements (resource
        request, requiredDuringScheduling affinity expressions, etc.),
        compute a sum by iterating through the elements of this field and adding
        "weight" to the sum if the node matches the corresponding matchExpressions; the
        node(s) with the highest sum are the most preferred.
        """
        required_during_scheduling_ignored_during_execution: NotRequired[
            pulumi.Input[
                "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgsDict"
            ]
        ]

elif False:
    ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPatchArgs:
    def __init__(
        __self__,
        *,
        preferred_during_scheduling_ignored_during_execution: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgs"
                    ]
                ]
            ]
        ] = None,
        required_during_scheduling_ignored_during_execution: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgs"
            ]
        ] = None
    ):
        """
        Describes node affinity scheduling rules for the pod.
        :param pulumi.Input[Sequence[pulumi.Input['ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgs']]] preferred_during_scheduling_ignored_during_execution: The scheduler will prefer to schedule pods to nodes that satisfy
               the affinity expressions specified by this field, but it may choose
               a node that violates one or more of the expressions. The node that is
               most preferred is the one with the greatest sum of weights, i.e.
               for each node that meets all of the scheduling requirements (resource
               request, requiredDuringScheduling affinity expressions, etc.),
               compute a sum by iterating through the elements of this field and adding
               "weight" to the sum if the node matches the corresponding matchExpressions; the
               node(s) with the highest sum are the most preferred.
        """
        if preferred_during_scheduling_ignored_during_execution is not None:
            pulumi.set(
                __self__,
                "preferred_during_scheduling_ignored_during_execution",
                preferred_during_scheduling_ignored_during_execution,
            )
        if required_during_scheduling_ignored_during_execution is not None:
            pulumi.set(
                __self__,
                "required_during_scheduling_ignored_during_execution",
                required_during_scheduling_ignored_during_execution,
            )

    @property
    @pulumi.getter(name="preferredDuringSchedulingIgnoredDuringExecution")
    def preferred_during_scheduling_ignored_during_execution(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgs"
                ]
            ]
        ]
    ]:
        """
        The scheduler will prefer to schedule pods to nodes that satisfy
        the affinity expressions specified by this field, but it may choose
        a node that violates one or more of the expressions. The node that is
        most preferred is the one with the greatest sum of weights, i.e.
        for each node that meets all of the scheduling requirements (resource
        request, requiredDuringScheduling affinity expressions, etc.),
        compute a sum by iterating through the elements of this field and adding
        "weight" to the sum if the node matches the corresponding matchExpressions; the
        node(s) with the highest sum are the most preferred.
        """
        return pulumi.get(self, "preferred_during_scheduling_ignored_during_execution")

    @preferred_during_scheduling_ignored_during_execution.setter
    def preferred_during_scheduling_ignored_during_execution(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "preferred_during_scheduling_ignored_during_execution", value)

    @property
    @pulumi.getter(name="requiredDuringSchedulingIgnoredDuringExecution")
    def required_during_scheduling_ignored_during_execution(
        self,
    ) -> Optional[
        pulumi.Input[
            "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgs"
        ]
    ]:
        return pulumi.get(self, "required_during_scheduling_ignored_during_execution")

    @required_during_scheduling_ignored_during_execution.setter
    def required_during_scheduling_ignored_during_execution(
        self,
        value: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "required_during_scheduling_ignored_during_execution", value)


if not MYPY:

    class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgsDict(
        TypedDict
    ):
        """
        An empty preferred scheduling term matches all objects with implicit weight 0
        (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
        """

        preference: NotRequired[
            pulumi.Input[
                "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatchArgsDict"
            ]
        ]
        weight: NotRequired[pulumi.Input[int]]
        """
        Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
        """

elif False:
    ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgs:
    def __init__(
        __self__,
        *,
        preference: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatchArgs"
            ]
        ] = None,
        weight: Optional[pulumi.Input[int]] = None
    ):
        """
        An empty preferred scheduling term matches all objects with implicit weight 0
        (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
        :param pulumi.Input[int] weight: Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
        """
        if preference is not None:
            pulumi.set(__self__, "preference", preference)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def preference(
        self,
    ) -> Optional[
        pulumi.Input[
            "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatchArgs"
        ]
    ]:
        return pulumi.get(self, "preference")

    @preference.setter
    def preference(
        self,
        value: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "preference", value)

    @property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[int]]:
        """
        Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
        """
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "weight", value)


if not MYPY:

    class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatchArgsDict(
        TypedDict
    ):
        """
        A node selector requirement is a selector that contains values, a key, and an operator
        that relates the key and values.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        Represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        An array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. If the operator is Gt or Lt, the values
        array must have a single element, which will be interpreted as an integer.
        This array is replaced during a strategic merge patch.
        """

elif False:
    ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatchArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        operator: Optional[pulumi.Input[str]] = None,
        values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None
    ):
        """
        A node selector requirement is a selector that contains values, a key, and an operator
        that relates the key and values.
        :param pulumi.Input[str] key: The label key that the selector applies to.
        :param pulumi.Input[str] operator: Represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: An array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. If the operator is Gt or Lt, the values
               array must have a single element, which will be interpreted as an integer.
               This array is replaced during a strategic merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        Represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        An array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. If the operator is Gt or Lt, the values
        array must have a single element, which will be interpreted as an integer.
        This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:

    class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgsDict(
        TypedDict
    ):
        """
        A node selector requirement is a selector that contains values, a key, and an operator
        that relates the key and values.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        Represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        An array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. If the operator is Gt or Lt, the values
        array must have a single element, which will be interpreted as an integer.
        This array is replaced during a strategic merge patch.
        """

elif False:
    ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        operator: Optional[pulumi.Input[str]] = None,
        values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None
    ):
        """
        A node selector requirement is a selector that contains values, a key, and an operator
        that relates the key and values.
        :param pulumi.Input[str] key: The label key that the selector applies to.
        :param pulumi.Input[str] operator: Represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: An array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. If the operator is Gt or Lt, the values
               array must have a single element, which will be interpreted as an integer.
               This array is replaced during a strategic merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        Represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        An array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. If the operator is Gt or Lt, the values
        array must have a single element, which will be interpreted as an integer.
        This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:

    class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatchArgsDict(
        TypedDict
    ):
        """
        A node selector requirement is a selector that contains values, a key, and an operator
        that relates the key and values.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        Represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        An array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. If the operator is Gt or Lt, the values
        array must have a single element, which will be interpreted as an integer.
        This array is replaced during a strategic merge patch.
        """

elif False:
    ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatchArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        operator: Optional[pulumi.Input[str]] = None,
        values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None
    ):
        """
        A node selector requirement is a selector that contains values, a key, and an operator
        that relates the key and values.
        :param pulumi.Input[str] key: The label key that the selector applies to.
        :param pulumi.Input[str] operator: Represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: An array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. If the operator is Gt or Lt, the values
               array must have a single element, which will be interpreted as an integer.
               This array is replaced during a strategic merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        Represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        An array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. If the operator is Gt or Lt, the values
        array must have a single element, which will be interpreted as an integer.
        This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:

    class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgsDict(
        TypedDict
    ):
        """
        A node selector requirement is a selector that contains values, a key, and an operator
        that relates the key and values.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        Represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        An array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. If the operator is Gt or Lt, the values
        array must have a single element, which will be interpreted as an integer.
        This array is replaced during a strategic merge patch.
        """

elif False:
    ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        operator: Optional[pulumi.Input[str]] = None,
        values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None
    ):
        """
        A node selector requirement is a selector that contains values, a key, and an operator
        that relates the key and values.
        :param pulumi.Input[str] key: The label key that the selector applies to.
        :param pulumi.Input[str] operator: Represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: An array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. If the operator is Gt or Lt, the values
               array must have a single element, which will be interpreted as an integer.
               This array is replaced during a strategic merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        Represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        An array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. If the operator is Gt or Lt, the values
        array must have a single element, which will be interpreted as an integer.
        This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:

    class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatchArgsDict(
        TypedDict
    ):
        """
        A node selector term, associated with the corresponding weight.
        """

        match_expressions: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatchArgsDict"
                    ]
                ]
            ]
        ]
        """
        A list of node selector requirements by node's labels.
        """
        match_fields: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatchArgsDict"
                    ]
                ]
            ]
        ]
        """
        A list of node selector requirements by node's fields.
        """

elif False:
    ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatchArgs:
    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatchArgs"
                    ]
                ]
            ]
        ] = None,
        match_fields: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatchArgs"
                    ]
                ]
            ]
        ] = None
    ):
        """
        A node selector term, associated with the corresponding weight.
        :param pulumi.Input[Sequence[pulumi.Input['ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatchArgs']]] match_expressions: A list of node selector requirements by node's labels.
        :param pulumi.Input[Sequence[pulumi.Input['ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatchArgs']]] match_fields: A list of node selector requirements by node's fields.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_fields is not None:
            pulumi.set(__self__, "match_fields", match_fields)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatchArgs"
                ]
            ]
        ]
    ]:
        """
        A list of node selector requirements by node's labels.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatchArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchFields")
    def match_fields(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatchArgs"
                ]
            ]
        ]
    ]:
        """
        A list of node selector requirements by node's fields.
        """
        return pulumi.get(self, "match_fields")

    @match_fields.setter
    def match_fields(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatchArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "match_fields", value)


if not MYPY:

    class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgsDict(
        TypedDict
    ):
        """
        A node selector term, associated with the corresponding weight.
        """

        match_expressions: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgsDict"
                    ]
                ]
            ]
        ]
        """
        A list of node selector requirements by node's labels.
        """
        match_fields: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgsDict"
                    ]
                ]
            ]
        ]
        """
        A list of node selector requirements by node's fields.
        """

elif False:
    ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgs:
    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgs"
                    ]
                ]
            ]
        ] = None,
        match_fields: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgs"
                    ]
                ]
            ]
        ] = None
    ):
        """
        A node selector term, associated with the corresponding weight.
        :param pulumi.Input[Sequence[pulumi.Input['ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgs']]] match_expressions: A list of node selector requirements by node's labels.
        :param pulumi.Input[Sequence[pulumi.Input['ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgs']]] match_fields: A list of node selector requirements by node's fields.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_fields is not None:
            pulumi.set(__self__, "match_fields", match_fields)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgs"
                ]
            ]
        ]
    ]:
        """
        A list of node selector requirements by node's labels.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchFields")
    def match_fields(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgs"
                ]
            ]
        ]
    ]:
        """
        A list of node selector requirements by node's fields.
        """
        return pulumi.get(self, "match_fields")

    @match_fields.setter
    def match_fields(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "match_fields", value)


if not MYPY:

    class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgsDict(
        TypedDict
    ):
        """
        An empty preferred scheduling term matches all objects with implicit weight 0
        (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
        """

        preference: NotRequired[
            pulumi.Input[
                "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgsDict"
            ]
        ]
        weight: NotRequired[pulumi.Input[int]]
        """
        Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
        """

elif False:
    ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs:
    def __init__(
        __self__,
        *,
        preference: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgs"
            ]
        ] = None,
        weight: Optional[pulumi.Input[int]] = None
    ):
        """
        An empty preferred scheduling term matches all objects with implicit weight 0
        (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
        :param pulumi.Input[int] weight: Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
        """
        if preference is not None:
            pulumi.set(__self__, "preference", preference)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def preference(
        self,
    ) -> Optional[
        pulumi.Input[
            "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgs"
        ]
    ]:
        return pulumi.get(self, "preference")

    @preference.setter
    def preference(
        self,
        value: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgs"
            ]
        ],
    ):
        pulumi.set(self, "preference", value)

    @property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[int]]:
        """
        Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
        """
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "weight", value)


if not MYPY:

    class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatchArgsDict(
        TypedDict
    ):
        """
        A node selector requirement is a selector that contains values, a key, and an operator
        that relates the key and values.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        Represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        An array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. If the operator is Gt or Lt, the values
        array must have a single element, which will be interpreted as an integer.
        This array is replaced during a strategic merge patch.
        """

elif False:
    ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatchArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        operator: Optional[pulumi.Input[str]] = None,
        values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None
    ):
        """
        A node selector requirement is a selector that contains values, a key, and an operator
        that relates the key and values.
        :param pulumi.Input[str] key: The label key that the selector applies to.
        :param pulumi.Input[str] operator: Represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: An array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. If the operator is Gt or Lt, the values
               array must have a single element, which will be interpreted as an integer.
               This array is replaced during a strategic merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        Represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        An array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. If the operator is Gt or Lt, the values
        array must have a single element, which will be interpreted as an integer.
        This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:

    class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgsDict(
        TypedDict
    ):
        """
        A node selector requirement is a selector that contains values, a key, and an operator
        that relates the key and values.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        Represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        An array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. If the operator is Gt or Lt, the values
        array must have a single element, which will be interpreted as an integer.
        This array is replaced during a strategic merge patch.
        """

elif False:
    ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        operator: Optional[pulumi.Input[str]] = None,
        values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None
    ):
        """
        A node selector requirement is a selector that contains values, a key, and an operator
        that relates the key and values.
        :param pulumi.Input[str] key: The label key that the selector applies to.
        :param pulumi.Input[str] operator: Represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: An array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. If the operator is Gt or Lt, the values
               array must have a single element, which will be interpreted as an integer.
               This array is replaced during a strategic merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        Represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        An array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. If the operator is Gt or Lt, the values
        array must have a single element, which will be interpreted as an integer.
        This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:

    class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatchArgsDict(
        TypedDict
    ):
        """
        A node selector requirement is a selector that contains values, a key, and an operator
        that relates the key and values.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        Represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        An array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. If the operator is Gt or Lt, the values
        array must have a single element, which will be interpreted as an integer.
        This array is replaced during a strategic merge patch.
        """

elif False:
    ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatchArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        operator: Optional[pulumi.Input[str]] = None,
        values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None
    ):
        """
        A node selector requirement is a selector that contains values, a key, and an operator
        that relates the key and values.
        :param pulumi.Input[str] key: The label key that the selector applies to.
        :param pulumi.Input[str] operator: Represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: An array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. If the operator is Gt or Lt, the values
               array must have a single element, which will be interpreted as an integer.
               This array is replaced during a strategic merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        Represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        An array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. If the operator is Gt or Lt, the values
        array must have a single element, which will be interpreted as an integer.
        This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:

    class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgsDict(
        TypedDict
    ):
        """
        A node selector requirement is a selector that contains values, a key, and an operator
        that relates the key and values.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        Represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        An array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. If the operator is Gt or Lt, the values
        array must have a single element, which will be interpreted as an integer.
        This array is replaced during a strategic merge patch.
        """

elif False:
    ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        operator: Optional[pulumi.Input[str]] = None,
        values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None
    ):
        """
        A node selector requirement is a selector that contains values, a key, and an operator
        that relates the key and values.
        :param pulumi.Input[str] key: The label key that the selector applies to.
        :param pulumi.Input[str] operator: Represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: An array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. If the operator is Gt or Lt, the values
               array must have a single element, which will be interpreted as an integer.
               This array is replaced during a strategic merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        Represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        An array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. If the operator is Gt or Lt, the values
        array must have a single element, which will be interpreted as an integer.
        This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:

    class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatchArgsDict(
        TypedDict
    ):
        """
        A null or empty node selector term matches no objects. The requirements of
        them are ANDed.
        The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
        """

        match_expressions: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatchArgsDict"
                    ]
                ]
            ]
        ]
        """
        A list of node selector requirements by node's labels.
        """
        match_fields: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatchArgsDict"
                    ]
                ]
            ]
        ]
        """
        A list of node selector requirements by node's fields.
        """

elif False:
    ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatchArgs:
    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatchArgs"
                    ]
                ]
            ]
        ] = None,
        match_fields: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatchArgs"
                    ]
                ]
            ]
        ] = None
    ):
        """
        A null or empty node selector term matches no objects. The requirements of
        them are ANDed.
        The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
        :param pulumi.Input[Sequence[pulumi.Input['ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatchArgs']]] match_expressions: A list of node selector requirements by node's labels.
        :param pulumi.Input[Sequence[pulumi.Input['ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatchArgs']]] match_fields: A list of node selector requirements by node's fields.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_fields is not None:
            pulumi.set(__self__, "match_fields", match_fields)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatchArgs"
                ]
            ]
        ]
    ]:
        """
        A list of node selector requirements by node's labels.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatchArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchFields")
    def match_fields(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatchArgs"
                ]
            ]
        ]
    ]:
        """
        A list of node selector requirements by node's fields.
        """
        return pulumi.get(self, "match_fields")

    @match_fields.setter
    def match_fields(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatchArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "match_fields", value)


if not MYPY:

    class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgsDict(
        TypedDict
    ):
        """
        A null or empty node selector term matches no objects. The requirements of
        them are ANDed.
        The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
        """

        match_expressions: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgsDict"
                    ]
                ]
            ]
        ]
        """
        A list of node selector requirements by node's labels.
        """
        match_fields: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgsDict"
                    ]
                ]
            ]
        ]
        """
        A list of node selector requirements by node's fields.
        """

elif False:
    ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgs:
    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgs"
                    ]
                ]
            ]
        ] = None,
        match_fields: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgs"
                    ]
                ]
            ]
        ] = None
    ):
        """
        A null or empty node selector term matches no objects. The requirements of
        them are ANDed.
        The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
        :param pulumi.Input[Sequence[pulumi.Input['ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgs']]] match_expressions: A list of node selector requirements by node's labels.
        :param pulumi.Input[Sequence[pulumi.Input['ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgs']]] match_fields: A list of node selector requirements by node's fields.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_fields is not None:
            pulumi.set(__self__, "match_fields", match_fields)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgs"
                ]
            ]
        ]
    ]:
        """
        A list of node selector requirements by node's labels.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchFields")
    def match_fields(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgs"
                ]
            ]
        ]
    ]:
        """
        A list of node selector requirements by node's fields.
        """
        return pulumi.get(self, "match_fields")

    @match_fields.setter
    def match_fields(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "match_fields", value)


if not MYPY:

    class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgsDict(
        TypedDict
    ):
        """
        If the affinity requirements specified by this field are not met at
        scheduling time, the pod will not be scheduled onto the node.
        If the affinity requirements specified by this field cease to be met
        at some point during pod execution (e.g. due to an update), the system
        may or may not try to eventually evict the pod from its node.
        """

        node_selector_terms: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatchArgsDict"
                    ]
                ]
            ]
        ]
        """
        Required. A list of node selector terms. The terms are ORed.
        """

elif False:
    ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgs:
    def __init__(
        __self__,
        *,
        node_selector_terms: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatchArgs"
                    ]
                ]
            ]
        ] = None
    ):
        """
        If the affinity requirements specified by this field are not met at
        scheduling time, the pod will not be scheduled onto the node.
        If the affinity requirements specified by this field cease to be met
        at some point during pod execution (e.g. due to an update), the system
        may or may not try to eventually evict the pod from its node.
        :param pulumi.Input[Sequence[pulumi.Input['ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatchArgs']]] node_selector_terms: Required. A list of node selector terms. The terms are ORed.
        """
        if node_selector_terms is not None:
            pulumi.set(__self__, "node_selector_terms", node_selector_terms)

    @property
    @pulumi.getter(name="nodeSelectorTerms")
    def node_selector_terms(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatchArgs"
                ]
            ]
        ]
    ]:
        """
        Required. A list of node selector terms. The terms are ORed.
        """
        return pulumi.get(self, "node_selector_terms")

    @node_selector_terms.setter
    def node_selector_terms(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatchArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "node_selector_terms", value)


if not MYPY:

    class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgsDict(
        TypedDict
    ):
        """
        If the affinity requirements specified by this field are not met at
        scheduling time, the pod will not be scheduled onto the node.
        If the affinity requirements specified by this field cease to be met
        at some point during pod execution (e.g. due to an update), the system
        may or may not try to eventually evict the pod from its node.
        """

        node_selector_terms: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgsDict"
                    ]
                ]
            ]
        ]
        """
        Required. A list of node selector terms. The terms are ORed.
        """

elif False:
    ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs:
    def __init__(
        __self__,
        *,
        node_selector_terms: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgs"
                    ]
                ]
            ]
        ] = None
    ):
        """
        If the affinity requirements specified by this field are not met at
        scheduling time, the pod will not be scheduled onto the node.
        If the affinity requirements specified by this field cease to be met
        at some point during pod execution (e.g. due to an update), the system
        may or may not try to eventually evict the pod from its node.
        :param pulumi.Input[Sequence[pulumi.Input['ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgs']]] node_selector_terms: Required. A list of node selector terms. The terms are ORed.
        """
        if node_selector_terms is not None:
            pulumi.set(__self__, "node_selector_terms", node_selector_terms)

    @property
    @pulumi.getter(name="nodeSelectorTerms")
    def node_selector_terms(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgs"
                ]
            ]
        ]
    ]:
        """
        Required. A list of node selector terms. The terms are ORed.
        """
        return pulumi.get(self, "node_selector_terms")

    @node_selector_terms.setter
    def node_selector_terms(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "node_selector_terms", value)


if not MYPY:

    class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityArgsDict(
        TypedDict
    ):
        """
        Describes node affinity scheduling rules for the pod.
        """

        preferred_during_scheduling_ignored_during_execution: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgsDict"
                    ]
                ]
            ]
        ]
        """
        The scheduler will prefer to schedule pods to nodes that satisfy
        the affinity expressions specified by this field, but it may choose
        a node that violates one or more of the expressions. The node that is
        most preferred is the one with the greatest sum of weights, i.e.
        for each node that meets all of the scheduling requirements (resource
        request, requiredDuringScheduling affinity expressions, etc.),
        compute a sum by iterating through the elements of this field and adding
        "weight" to the sum if the node matches the corresponding matchExpressions; the
        node(s) with the highest sum are the most preferred.
        """
        required_during_scheduling_ignored_during_execution: NotRequired[
            pulumi.Input[
                "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgsDict"
            ]
        ]

elif False:
    ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityArgs:
    def __init__(
        __self__,
        *,
        preferred_during_scheduling_ignored_during_execution: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs"
                    ]
                ]
            ]
        ] = None,
        required_during_scheduling_ignored_during_execution: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs"
            ]
        ] = None
    ):
        """
        Describes node affinity scheduling rules for the pod.
        :param pulumi.Input[Sequence[pulumi.Input['ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs']]] preferred_during_scheduling_ignored_during_execution: The scheduler will prefer to schedule pods to nodes that satisfy
               the affinity expressions specified by this field, but it may choose
               a node that violates one or more of the expressions. The node that is
               most preferred is the one with the greatest sum of weights, i.e.
               for each node that meets all of the scheduling requirements (resource
               request, requiredDuringScheduling affinity expressions, etc.),
               compute a sum by iterating through the elements of this field and adding
               "weight" to the sum if the node matches the corresponding matchExpressions; the
               node(s) with the highest sum are the most preferred.
        """
        if preferred_during_scheduling_ignored_during_execution is not None:
            pulumi.set(
                __self__,
                "preferred_during_scheduling_ignored_during_execution",
                preferred_during_scheduling_ignored_during_execution,
            )
        if required_during_scheduling_ignored_during_execution is not None:
            pulumi.set(
                __self__,
                "required_during_scheduling_ignored_during_execution",
                required_during_scheduling_ignored_during_execution,
            )

    @property
    @pulumi.getter(name="preferredDuringSchedulingIgnoredDuringExecution")
    def preferred_during_scheduling_ignored_during_execution(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs"
                ]
            ]
        ]
    ]:
        """
        The scheduler will prefer to schedule pods to nodes that satisfy
        the affinity expressions specified by this field, but it may choose
        a node that violates one or more of the expressions. The node that is
        most preferred is the one with the greatest sum of weights, i.e.
        for each node that meets all of the scheduling requirements (resource
        request, requiredDuringScheduling affinity expressions, etc.),
        compute a sum by iterating through the elements of this field and adding
        "weight" to the sum if the node matches the corresponding matchExpressions; the
        node(s) with the highest sum are the most preferred.
        """
        return pulumi.get(self, "preferred_during_scheduling_ignored_during_execution")

    @preferred_during_scheduling_ignored_during_execution.setter
    def preferred_during_scheduling_ignored_during_execution(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "preferred_during_scheduling_ignored_during_execution", value)

    @property
    @pulumi.getter(name="requiredDuringSchedulingIgnoredDuringExecution")
    def required_during_scheduling_ignored_during_execution(
        self,
    ) -> Optional[
        pulumi.Input[
            "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs"
        ]
    ]:
        return pulumi.get(self, "required_during_scheduling_ignored_during_execution")

    @required_during_scheduling_ignored_during_execution.setter
    def required_during_scheduling_ignored_during_execution(
        self,
        value: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs"
            ]
        ],
    ):
        pulumi.set(self, "required_during_scheduling_ignored_during_execution", value)


if not MYPY:

    class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPatchArgsDict(
        TypedDict
    ):
        """
        If specified, the pod's scheduling constraints
        """

        node_affinity: NotRequired[
            pulumi.Input[
                "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPatchArgsDict"
            ]
        ]
        pod_affinity: NotRequired[
            pulumi.Input[
                "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPatchArgsDict"
            ]
        ]
        pod_anti_affinity: NotRequired[
            pulumi.Input[
                "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPatchArgsDict"
            ]
        ]

elif False:
    ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPatchArgs:
    def __init__(
        __self__,
        *,
        node_affinity: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPatchArgs"
            ]
        ] = None,
        pod_affinity: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPatchArgs"
            ]
        ] = None,
        pod_anti_affinity: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPatchArgs"
            ]
        ] = None
    ):
        """
        If specified, the pod's scheduling constraints
        """
        if node_affinity is not None:
            pulumi.set(__self__, "node_affinity", node_affinity)
        if pod_affinity is not None:
            pulumi.set(__self__, "pod_affinity", pod_affinity)
        if pod_anti_affinity is not None:
            pulumi.set(__self__, "pod_anti_affinity", pod_anti_affinity)

    @property
    @pulumi.getter(name="nodeAffinity")
    def node_affinity(
        self,
    ) -> Optional[
        pulumi.Input[
            "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPatchArgs"
        ]
    ]:
        return pulumi.get(self, "node_affinity")

    @node_affinity.setter
    def node_affinity(
        self,
        value: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "node_affinity", value)

    @property
    @pulumi.getter(name="podAffinity")
    def pod_affinity(
        self,
    ) -> Optional[
        pulumi.Input[
            "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPatchArgs"
        ]
    ]:
        return pulumi.get(self, "pod_affinity")

    @pod_affinity.setter
    def pod_affinity(
        self,
        value: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "pod_affinity", value)

    @property
    @pulumi.getter(name="podAntiAffinity")
    def pod_anti_affinity(
        self,
    ) -> Optional[
        pulumi.Input[
            "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPatchArgs"
        ]
    ]:
        return pulumi.get(self, "pod_anti_affinity")

    @pod_anti_affinity.setter
    def pod_anti_affinity(
        self,
        value: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "pod_anti_affinity", value)


if not MYPY:

    class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPatchArgsDict(
        TypedDict
    ):
        """
        Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
        """

        preferred_during_scheduling_ignored_during_execution: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgsDict"
                    ]
                ]
            ]
        ]
        """
        The scheduler will prefer to schedule pods to nodes that satisfy
        the affinity expressions specified by this field, but it may choose
        a node that violates one or more of the expressions. The node that is
        most preferred is the one with the greatest sum of weights, i.e.
        for each node that meets all of the scheduling requirements (resource
        request, requiredDuringScheduling affinity expressions, etc.),
        compute a sum by iterating through the elements of this field and adding
        "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
        node(s) with the highest sum are the most preferred.
        """
        required_during_scheduling_ignored_during_execution: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgsDict"
                    ]
                ]
            ]
        ]
        """
        If the affinity requirements specified by this field are not met at
        scheduling time, the pod will not be scheduled onto the node.
        If the affinity requirements specified by this field cease to be met
        at some point during pod execution (e.g. due to a pod label update), the
        system may or may not try to eventually evict the pod from its node.
        When there are multiple elements, the lists of nodes corresponding to each
        podAffinityTerm are intersected, i.e. all terms must be satisfied.
        """

elif False:
    ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPatchArgs:
    def __init__(
        __self__,
        *,
        preferred_during_scheduling_ignored_during_execution: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgs"
                    ]
                ]
            ]
        ] = None,
        required_during_scheduling_ignored_during_execution: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgs"
                    ]
                ]
            ]
        ] = None
    ):
        """
        Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
        :param pulumi.Input[Sequence[pulumi.Input['ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgs']]] preferred_during_scheduling_ignored_during_execution: The scheduler will prefer to schedule pods to nodes that satisfy
               the affinity expressions specified by this field, but it may choose
               a node that violates one or more of the expressions. The node that is
               most preferred is the one with the greatest sum of weights, i.e.
               for each node that meets all of the scheduling requirements (resource
               request, requiredDuringScheduling affinity expressions, etc.),
               compute a sum by iterating through the elements of this field and adding
               "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
               node(s) with the highest sum are the most preferred.
        :param pulumi.Input[Sequence[pulumi.Input['ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgs']]] required_during_scheduling_ignored_during_execution: If the affinity requirements specified by this field are not met at
               scheduling time, the pod will not be scheduled onto the node.
               If the affinity requirements specified by this field cease to be met
               at some point during pod execution (e.g. due to a pod label update), the
               system may or may not try to eventually evict the pod from its node.
               When there are multiple elements, the lists of nodes corresponding to each
               podAffinityTerm are intersected, i.e. all terms must be satisfied.
        """
        if preferred_during_scheduling_ignored_during_execution is not None:
            pulumi.set(
                __self__,
                "preferred_during_scheduling_ignored_during_execution",
                preferred_during_scheduling_ignored_during_execution,
            )
        if required_during_scheduling_ignored_during_execution is not None:
            pulumi.set(
                __self__,
                "required_during_scheduling_ignored_during_execution",
                required_during_scheduling_ignored_during_execution,
            )

    @property
    @pulumi.getter(name="preferredDuringSchedulingIgnoredDuringExecution")
    def preferred_during_scheduling_ignored_during_execution(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgs"
                ]
            ]
        ]
    ]:
        """
        The scheduler will prefer to schedule pods to nodes that satisfy
        the affinity expressions specified by this field, but it may choose
        a node that violates one or more of the expressions. The node that is
        most preferred is the one with the greatest sum of weights, i.e.
        for each node that meets all of the scheduling requirements (resource
        request, requiredDuringScheduling affinity expressions, etc.),
        compute a sum by iterating through the elements of this field and adding
        "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
        node(s) with the highest sum are the most preferred.
        """
        return pulumi.get(self, "preferred_during_scheduling_ignored_during_execution")

    @preferred_during_scheduling_ignored_during_execution.setter
    def preferred_during_scheduling_ignored_during_execution(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "preferred_during_scheduling_ignored_during_execution", value)

    @property
    @pulumi.getter(name="requiredDuringSchedulingIgnoredDuringExecution")
    def required_during_scheduling_ignored_during_execution(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgs"
                ]
            ]
        ]
    ]:
        """
        If the affinity requirements specified by this field are not met at
        scheduling time, the pod will not be scheduled onto the node.
        If the affinity requirements specified by this field cease to be met
        at some point during pod execution (e.g. due to a pod label update), the
        system may or may not try to eventually evict the pod from its node.
        When there are multiple elements, the lists of nodes corresponding to each
        podAffinityTerm are intersected, i.e. all terms must be satisfied.
        """
        return pulumi.get(self, "required_during_scheduling_ignored_during_execution")

    @required_during_scheduling_ignored_during_execution.setter
    def required_during_scheduling_ignored_during_execution(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "required_during_scheduling_ignored_during_execution", value)


if not MYPY:

    class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgsDict(
        TypedDict
    ):
        """
        The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
        """

        pod_affinity_term: NotRequired[
            pulumi.Input[
                "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchArgsDict"
            ]
        ]
        weight: NotRequired[pulumi.Input[int]]
        """
        weight associated with matching the corresponding podAffinityTerm,
        in the range 1-100.
        """

elif False:
    ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgs:
    def __init__(
        __self__,
        *,
        pod_affinity_term: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchArgs"
            ]
        ] = None,
        weight: Optional[pulumi.Input[int]] = None
    ):
        """
        The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
        :param pulumi.Input[int] weight: weight associated with matching the corresponding podAffinityTerm,
               in the range 1-100.
        """
        if pod_affinity_term is not None:
            pulumi.set(__self__, "pod_affinity_term", pod_affinity_term)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter(name="podAffinityTerm")
    def pod_affinity_term(
        self,
    ) -> Optional[
        pulumi.Input[
            "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchArgs"
        ]
    ]:
        return pulumi.get(self, "pod_affinity_term")

    @pod_affinity_term.setter
    def pod_affinity_term(
        self,
        value: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "pod_affinity_term", value)

    @property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[int]]:
        """
        weight associated with matching the corresponding podAffinityTerm,
        in the range 1-100.
        """
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "weight", value)


if not MYPY:

    class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArgsDict(
        TypedDict
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        key is the label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """

elif False:
    ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        operator: Optional[pulumi.Input[str]] = None,
        values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        :param pulumi.Input[str] key: key is the label key that the selector applies to.
        :param pulumi.Input[str] operator: operator represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists and DoesNotExist.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: values is an array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. This array is replaced during a strategic
               merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:

    class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgsDict(
        TypedDict
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        key is the label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """

elif False:
    ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        operator: Optional[pulumi.Input[str]] = None,
        values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        :param pulumi.Input[str] key: key is the label key that the selector applies to.
        :param pulumi.Input[str] operator: operator represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists and DoesNotExist.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: values is an array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. This array is replaced during a strategic
               merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:

    class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchArgsDict(
        TypedDict
    ):
        """
        A label query over a set of resources, in this case pods.
        If it's null, this PodAffinityTerm matches with no Pods.
        """

        match_expressions: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArgsDict"
                    ]
                ]
            ]
        ]
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        match_labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """

elif False:
    ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchArgs:
    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArgs"
                    ]
                ]
            ]
        ] = None,
        match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None
    ):
        """
        A label query over a set of resources, in this case pods.
        If it's null, this PodAffinityTerm matches with no Pods.
        :param pulumi.Input[Sequence[pulumi.Input['ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArgs']]] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
               map is equivalent to an element of matchExpressions, whose key field is "key", the
               operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArgs"
                ]
            ]
        ]
    ]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(
        self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
    ):
        pulumi.set(self, "match_labels", value)


if not MYPY:

    class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgsDict(
        TypedDict
    ):
        """
        A label query over a set of resources, in this case pods.
        If it's null, this PodAffinityTerm matches with no Pods.
        """

        match_expressions: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgsDict"
                    ]
                ]
            ]
        ]
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        match_labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """

elif False:
    ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs:
    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs"
                    ]
                ]
            ]
        ] = None,
        match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None
    ):
        """
        A label query over a set of resources, in this case pods.
        If it's null, this PodAffinityTerm matches with no Pods.
        :param pulumi.Input[Sequence[pulumi.Input['ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs']]] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
               map is equivalent to an element of matchExpressions, whose key field is "key", the
               operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs"
                ]
            ]
        ]
    ]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(
        self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
    ):
        pulumi.set(self, "match_labels", value)


if not MYPY:

    class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArgsDict(
        TypedDict
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        key is the label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """

elif False:
    ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        operator: Optional[pulumi.Input[str]] = None,
        values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        :param pulumi.Input[str] key: key is the label key that the selector applies to.
        :param pulumi.Input[str] operator: operator represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists and DoesNotExist.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: values is an array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. This array is replaced during a strategic
               merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:

    class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgsDict(
        TypedDict
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        key is the label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """

elif False:
    ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        operator: Optional[pulumi.Input[str]] = None,
        values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        :param pulumi.Input[str] key: key is the label key that the selector applies to.
        :param pulumi.Input[str] operator: operator represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists and DoesNotExist.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: values is an array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. This array is replaced during a strategic
               merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:

    class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchArgsDict(
        TypedDict
    ):
        """
        A label query over the set of namespaces that the term applies to.
        The term is applied to the union of the namespaces selected by this field
        and the ones listed in the namespaces field.
        null selector and null or empty namespaces list means "this pod's namespace".
        An empty selector ({}) matches all namespaces.
        """

        match_expressions: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArgsDict"
                    ]
                ]
            ]
        ]
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        match_labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """

elif False:
    ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchArgs:
    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArgs"
                    ]
                ]
            ]
        ] = None,
        match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None
    ):
        """
        A label query over the set of namespaces that the term applies to.
        The term is applied to the union of the namespaces selected by this field
        and the ones listed in the namespaces field.
        null selector and null or empty namespaces list means "this pod's namespace".
        An empty selector ({}) matches all namespaces.
        :param pulumi.Input[Sequence[pulumi.Input['ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArgs']]] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
               map is equivalent to an element of matchExpressions, whose key field is "key", the
               operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArgs"
                ]
            ]
        ]
    ]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(
        self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
    ):
        pulumi.set(self, "match_labels", value)


if not MYPY:

    class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgsDict(
        TypedDict
    ):
        """
        A label query over the set of namespaces that the term applies to.
        The term is applied to the union of the namespaces selected by this field
        and the ones listed in the namespaces field.
        null selector and null or empty namespaces list means "this pod's namespace".
        An empty selector ({}) matches all namespaces.
        """

        match_expressions: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgsDict"
                    ]
                ]
            ]
        ]
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        match_labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """

elif False:
    ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs:
    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs"
                    ]
                ]
            ]
        ] = None,
        match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None
    ):
        """
        A label query over the set of namespaces that the term applies to.
        The term is applied to the union of the namespaces selected by this field
        and the ones listed in the namespaces field.
        null selector and null or empty namespaces list means "this pod's namespace".
        An empty selector ({}) matches all namespaces.
        :param pulumi.Input[Sequence[pulumi.Input['ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs']]] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
               map is equivalent to an element of matchExpressions, whose key field is "key", the
               operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs"
                ]
            ]
        ]
    ]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(
        self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
    ):
        pulumi.set(self, "match_labels", value)


if not MYPY:

    class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchArgsDict(
        TypedDict
    ):
        """
        Required. A pod affinity term, associated with the corresponding weight.
        """

        label_selector: NotRequired[
            pulumi.Input[
                "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchArgsDict"
            ]
        ]
        match_label_keys: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        MatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both matchLabelKeys and labelSelector.
        Also, matchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        mismatch_label_keys: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        MismatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
        Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        namespace_selector: NotRequired[
            pulumi.Input[
                "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchArgsDict"
            ]
        ]
        namespaces: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        namespaces specifies a static list of namespace names that the term applies to.
        The term is applied to the union of the namespaces listed in this field
        and the ones selected by namespaceSelector.
        null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        """
        topology_key: NotRequired[pulumi.Input[str]]
        """
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
        the labelSelector in the specified namespaces, where co-located is defined as running on a node
        whose value of the label with key topologyKey matches that of any node on which any of the
        selected pods is running.
        Empty topologyKey is not allowed.
        """

elif False:
    ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchArgs:
    def __init__(
        __self__,
        *,
        label_selector: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchArgs"
            ]
        ] = None,
        match_label_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        mismatch_label_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        namespace_selector: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchArgs"
            ]
        ] = None,
        namespaces: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        topology_key: Optional[pulumi.Input[str]] = None
    ):
        """
        Required. A pod affinity term, associated with the corresponding weight.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] match_label_keys: MatchLabelKeys is a set of pod label keys to select which pods will
               be taken into consideration. The keys are used to lookup values from the
               incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
               to select the group of existing pods which pods will be taken into consideration
               for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
               pod labels will be ignored. The default value is empty.
               The same key is forbidden to exist in both matchLabelKeys and labelSelector.
               Also, matchLabelKeys cannot be set when labelSelector isn't set.
               This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] mismatch_label_keys: MismatchLabelKeys is a set of pod label keys to select which pods will
               be taken into consideration. The keys are used to lookup values from the
               incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
               to select the group of existing pods which pods will be taken into consideration
               for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
               pod labels will be ignored. The default value is empty.
               The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
               Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
               This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] namespaces: namespaces specifies a static list of namespace names that the term applies to.
               The term is applied to the union of the namespaces listed in this field
               and the ones selected by namespaceSelector.
               null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        :param pulumi.Input[str] topology_key: This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
               the labelSelector in the specified namespaces, where co-located is defined as running on a node
               whose value of the label with key topologyKey matches that of any node on which any of the
               selected pods is running.
               Empty topologyKey is not allowed.
        """
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if match_label_keys is not None:
            pulumi.set(__self__, "match_label_keys", match_label_keys)
        if mismatch_label_keys is not None:
            pulumi.set(__self__, "mismatch_label_keys", mismatch_label_keys)
        if namespace_selector is not None:
            pulumi.set(__self__, "namespace_selector", namespace_selector)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)
        if topology_key is not None:
            pulumi.set(__self__, "topology_key", topology_key)

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(
        self,
    ) -> Optional[
        pulumi.Input[
            "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchArgs"
        ]
    ]:
        return pulumi.get(self, "label_selector")

    @label_selector.setter
    def label_selector(
        self,
        value: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "label_selector", value)

    @property
    @pulumi.getter(name="matchLabelKeys")
    def match_label_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        MatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both matchLabelKeys and labelSelector.
        Also, matchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        return pulumi.get(self, "match_label_keys")

    @match_label_keys.setter
    def match_label_keys(
        self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]
    ):
        pulumi.set(self, "match_label_keys", value)

    @property
    @pulumi.getter(name="mismatchLabelKeys")
    def mismatch_label_keys(
        self,
    ) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        MismatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
        Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        return pulumi.get(self, "mismatch_label_keys")

    @mismatch_label_keys.setter
    def mismatch_label_keys(
        self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]
    ):
        pulumi.set(self, "mismatch_label_keys", value)

    @property
    @pulumi.getter(name="namespaceSelector")
    def namespace_selector(
        self,
    ) -> Optional[
        pulumi.Input[
            "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchArgs"
        ]
    ]:
        return pulumi.get(self, "namespace_selector")

    @namespace_selector.setter
    def namespace_selector(
        self,
        value: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "namespace_selector", value)

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        namespaces specifies a static list of namespace names that the term applies to.
        The term is applied to the union of the namespaces listed in this field
        and the ones selected by namespaceSelector.
        null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        """
        return pulumi.get(self, "namespaces")

    @namespaces.setter
    def namespaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "namespaces", value)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> Optional[pulumi.Input[str]]:
        """
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
        the labelSelector in the specified namespaces, where co-located is defined as running on a node
        whose value of the label with key topologyKey matches that of any node on which any of the
        selected pods is running.
        Empty topologyKey is not allowed.
        """
        return pulumi.get(self, "topology_key")

    @topology_key.setter
    def topology_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topology_key", value)


if not MYPY:

    class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgsDict(
        TypedDict
    ):
        """
        Required. A pod affinity term, associated with the corresponding weight.
        """

        label_selector: NotRequired[
            pulumi.Input[
                "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgsDict"
            ]
        ]
        match_label_keys: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        MatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both matchLabelKeys and labelSelector.
        Also, matchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        mismatch_label_keys: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        MismatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
        Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        namespace_selector: NotRequired[
            pulumi.Input[
                "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgsDict"
            ]
        ]
        namespaces: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        namespaces specifies a static list of namespace names that the term applies to.
        The term is applied to the union of the namespaces listed in this field
        and the ones selected by namespaceSelector.
        null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        """
        topology_key: NotRequired[pulumi.Input[str]]
        """
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
        the labelSelector in the specified namespaces, where co-located is defined as running on a node
        whose value of the label with key topologyKey matches that of any node on which any of the
        selected pods is running.
        Empty topologyKey is not allowed.
        """

elif False:
    ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs:
    def __init__(
        __self__,
        *,
        label_selector: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs"
            ]
        ] = None,
        match_label_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        mismatch_label_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        namespace_selector: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs"
            ]
        ] = None,
        namespaces: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        topology_key: Optional[pulumi.Input[str]] = None
    ):
        """
        Required. A pod affinity term, associated with the corresponding weight.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] match_label_keys: MatchLabelKeys is a set of pod label keys to select which pods will
               be taken into consideration. The keys are used to lookup values from the
               incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
               to select the group of existing pods which pods will be taken into consideration
               for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
               pod labels will be ignored. The default value is empty.
               The same key is forbidden to exist in both matchLabelKeys and labelSelector.
               Also, matchLabelKeys cannot be set when labelSelector isn't set.
               This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] mismatch_label_keys: MismatchLabelKeys is a set of pod label keys to select which pods will
               be taken into consideration. The keys are used to lookup values from the
               incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
               to select the group of existing pods which pods will be taken into consideration
               for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
               pod labels will be ignored. The default value is empty.
               The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
               Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
               This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] namespaces: namespaces specifies a static list of namespace names that the term applies to.
               The term is applied to the union of the namespaces listed in this field
               and the ones selected by namespaceSelector.
               null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        :param pulumi.Input[str] topology_key: This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
               the labelSelector in the specified namespaces, where co-located is defined as running on a node
               whose value of the label with key topologyKey matches that of any node on which any of the
               selected pods is running.
               Empty topologyKey is not allowed.
        """
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if match_label_keys is not None:
            pulumi.set(__self__, "match_label_keys", match_label_keys)
        if mismatch_label_keys is not None:
            pulumi.set(__self__, "mismatch_label_keys", mismatch_label_keys)
        if namespace_selector is not None:
            pulumi.set(__self__, "namespace_selector", namespace_selector)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)
        if topology_key is not None:
            pulumi.set(__self__, "topology_key", topology_key)

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(
        self,
    ) -> Optional[
        pulumi.Input[
            "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs"
        ]
    ]:
        return pulumi.get(self, "label_selector")

    @label_selector.setter
    def label_selector(
        self,
        value: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs"
            ]
        ],
    ):
        pulumi.set(self, "label_selector", value)

    @property
    @pulumi.getter(name="matchLabelKeys")
    def match_label_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        MatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both matchLabelKeys and labelSelector.
        Also, matchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        return pulumi.get(self, "match_label_keys")

    @match_label_keys.setter
    def match_label_keys(
        self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]
    ):
        pulumi.set(self, "match_label_keys", value)

    @property
    @pulumi.getter(name="mismatchLabelKeys")
    def mismatch_label_keys(
        self,
    ) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        MismatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
        Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        return pulumi.get(self, "mismatch_label_keys")

    @mismatch_label_keys.setter
    def mismatch_label_keys(
        self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]
    ):
        pulumi.set(self, "mismatch_label_keys", value)

    @property
    @pulumi.getter(name="namespaceSelector")
    def namespace_selector(
        self,
    ) -> Optional[
        pulumi.Input[
            "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs"
        ]
    ]:
        return pulumi.get(self, "namespace_selector")

    @namespace_selector.setter
    def namespace_selector(
        self,
        value: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs"
            ]
        ],
    ):
        pulumi.set(self, "namespace_selector", value)

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        namespaces specifies a static list of namespace names that the term applies to.
        The term is applied to the union of the namespaces listed in this field
        and the ones selected by namespaceSelector.
        null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        """
        return pulumi.get(self, "namespaces")

    @namespaces.setter
    def namespaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "namespaces", value)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> Optional[pulumi.Input[str]]:
        """
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
        the labelSelector in the specified namespaces, where co-located is defined as running on a node
        whose value of the label with key topologyKey matches that of any node on which any of the
        selected pods is running.
        Empty topologyKey is not allowed.
        """
        return pulumi.get(self, "topology_key")

    @topology_key.setter
    def topology_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topology_key", value)


if not MYPY:

    class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgsDict(
        TypedDict
    ):
        """
        The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
        """

        pod_affinity_term: NotRequired[
            pulumi.Input[
                "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgsDict"
            ]
        ]
        weight: NotRequired[pulumi.Input[int]]
        """
        weight associated with matching the corresponding podAffinityTerm,
        in the range 1-100.
        """

elif False:
    ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs:
    def __init__(
        __self__,
        *,
        pod_affinity_term: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs"
            ]
        ] = None,
        weight: Optional[pulumi.Input[int]] = None
    ):
        """
        The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
        :param pulumi.Input[int] weight: weight associated with matching the corresponding podAffinityTerm,
               in the range 1-100.
        """
        if pod_affinity_term is not None:
            pulumi.set(__self__, "pod_affinity_term", pod_affinity_term)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter(name="podAffinityTerm")
    def pod_affinity_term(
        self,
    ) -> Optional[
        pulumi.Input[
            "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs"
        ]
    ]:
        return pulumi.get(self, "pod_affinity_term")

    @pod_affinity_term.setter
    def pod_affinity_term(
        self,
        value: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs"
            ]
        ],
    ):
        pulumi.set(self, "pod_affinity_term", value)

    @property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[int]]:
        """
        weight associated with matching the corresponding podAffinityTerm,
        in the range 1-100.
        """
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "weight", value)


if not MYPY:

    class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArgsDict(
        TypedDict
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        key is the label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """

elif False:
    ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        operator: Optional[pulumi.Input[str]] = None,
        values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        :param pulumi.Input[str] key: key is the label key that the selector applies to.
        :param pulumi.Input[str] operator: operator represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists and DoesNotExist.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: values is an array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. This array is replaced during a strategic
               merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:

    class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgsDict(
        TypedDict
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        key is the label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """

elif False:
    ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        operator: Optional[pulumi.Input[str]] = None,
        values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        :param pulumi.Input[str] key: key is the label key that the selector applies to.
        :param pulumi.Input[str] operator: operator represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists and DoesNotExist.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: values is an array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. This array is replaced during a strategic
               merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:

    class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchArgsDict(
        TypedDict
    ):
        """
        A label query over a set of resources, in this case pods.
        If it's null, this PodAffinityTerm matches with no Pods.
        """

        match_expressions: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArgsDict"
                    ]
                ]
            ]
        ]
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        match_labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """

elif False:
    ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchArgs:
    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArgs"
                    ]
                ]
            ]
        ] = None,
        match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None
    ):
        """
        A label query over a set of resources, in this case pods.
        If it's null, this PodAffinityTerm matches with no Pods.
        :param pulumi.Input[Sequence[pulumi.Input['ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArgs']]] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
               map is equivalent to an element of matchExpressions, whose key field is "key", the
               operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArgs"
                ]
            ]
        ]
    ]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(
        self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
    ):
        pulumi.set(self, "match_labels", value)


if not MYPY:

    class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgsDict(
        TypedDict
    ):
        """
        A label query over a set of resources, in this case pods.
        If it's null, this PodAffinityTerm matches with no Pods.
        """

        match_expressions: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgsDict"
                    ]
                ]
            ]
        ]
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        match_labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """

elif False:
    ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs:
    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs"
                    ]
                ]
            ]
        ] = None,
        match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None
    ):
        """
        A label query over a set of resources, in this case pods.
        If it's null, this PodAffinityTerm matches with no Pods.
        :param pulumi.Input[Sequence[pulumi.Input['ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs']]] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
               map is equivalent to an element of matchExpressions, whose key field is "key", the
               operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs"
                ]
            ]
        ]
    ]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(
        self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
    ):
        pulumi.set(self, "match_labels", value)


if not MYPY:

    class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArgsDict(
        TypedDict
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        key is the label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """

elif False:
    ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        operator: Optional[pulumi.Input[str]] = None,
        values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        :param pulumi.Input[str] key: key is the label key that the selector applies to.
        :param pulumi.Input[str] operator: operator represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists and DoesNotExist.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: values is an array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. This array is replaced during a strategic
               merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:

    class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgsDict(
        TypedDict
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        key is the label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """

elif False:
    ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        operator: Optional[pulumi.Input[str]] = None,
        values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        :param pulumi.Input[str] key: key is the label key that the selector applies to.
        :param pulumi.Input[str] operator: operator represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists and DoesNotExist.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: values is an array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. This array is replaced during a strategic
               merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:

    class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchArgsDict(
        TypedDict
    ):
        """
        A label query over the set of namespaces that the term applies to.
        The term is applied to the union of the namespaces selected by this field
        and the ones listed in the namespaces field.
        null selector and null or empty namespaces list means "this pod's namespace".
        An empty selector ({}) matches all namespaces.
        """

        match_expressions: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArgsDict"
                    ]
                ]
            ]
        ]
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        match_labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """

elif False:
    ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchArgs:
    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArgs"
                    ]
                ]
            ]
        ] = None,
        match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None
    ):
        """
        A label query over the set of namespaces that the term applies to.
        The term is applied to the union of the namespaces selected by this field
        and the ones listed in the namespaces field.
        null selector and null or empty namespaces list means "this pod's namespace".
        An empty selector ({}) matches all namespaces.
        :param pulumi.Input[Sequence[pulumi.Input['ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArgs']]] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
               map is equivalent to an element of matchExpressions, whose key field is "key", the
               operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArgs"
                ]
            ]
        ]
    ]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(
        self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
    ):
        pulumi.set(self, "match_labels", value)


if not MYPY:

    class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgsDict(
        TypedDict
    ):
        """
        A label query over the set of namespaces that the term applies to.
        The term is applied to the union of the namespaces selected by this field
        and the ones listed in the namespaces field.
        null selector and null or empty namespaces list means "this pod's namespace".
        An empty selector ({}) matches all namespaces.
        """

        match_expressions: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgsDict"
                    ]
                ]
            ]
        ]
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        match_labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """

elif False:
    ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs:
    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs"
                    ]
                ]
            ]
        ] = None,
        match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None
    ):
        """
        A label query over the set of namespaces that the term applies to.
        The term is applied to the union of the namespaces selected by this field
        and the ones listed in the namespaces field.
        null selector and null or empty namespaces list means "this pod's namespace".
        An empty selector ({}) matches all namespaces.
        :param pulumi.Input[Sequence[pulumi.Input['ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs']]] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
               map is equivalent to an element of matchExpressions, whose key field is "key", the
               operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs"
                ]
            ]
        ]
    ]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(
        self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
    ):
        pulumi.set(self, "match_labels", value)


if not MYPY:

    class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgsDict(
        TypedDict
    ):
        """
        Defines a set of pods (namely those matching the labelSelector
        relative to the given namespace(s)) that this pod should be
        co-located (affinity) or not co-located (anti-affinity) with,
        where co-located is defined as running on a node whose value of
        the label with key <topologyKey> matches that of any node on which
        a pod of the set of pods is running
        """

        label_selector: NotRequired[
            pulumi.Input[
                "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchArgsDict"
            ]
        ]
        match_label_keys: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        MatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both matchLabelKeys and labelSelector.
        Also, matchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        mismatch_label_keys: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        MismatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
        Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        namespace_selector: NotRequired[
            pulumi.Input[
                "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchArgsDict"
            ]
        ]
        namespaces: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        namespaces specifies a static list of namespace names that the term applies to.
        The term is applied to the union of the namespaces listed in this field
        and the ones selected by namespaceSelector.
        null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        """
        topology_key: NotRequired[pulumi.Input[str]]
        """
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
        the labelSelector in the specified namespaces, where co-located is defined as running on a node
        whose value of the label with key topologyKey matches that of any node on which any of the
        selected pods is running.
        Empty topologyKey is not allowed.
        """

elif False:
    ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgs:
    def __init__(
        __self__,
        *,
        label_selector: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchArgs"
            ]
        ] = None,
        match_label_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        mismatch_label_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        namespace_selector: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchArgs"
            ]
        ] = None,
        namespaces: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        topology_key: Optional[pulumi.Input[str]] = None
    ):
        """
        Defines a set of pods (namely those matching the labelSelector
        relative to the given namespace(s)) that this pod should be
        co-located (affinity) or not co-located (anti-affinity) with,
        where co-located is defined as running on a node whose value of
        the label with key <topologyKey> matches that of any node on which
        a pod of the set of pods is running
        :param pulumi.Input[Sequence[pulumi.Input[str]]] match_label_keys: MatchLabelKeys is a set of pod label keys to select which pods will
               be taken into consideration. The keys are used to lookup values from the
               incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
               to select the group of existing pods which pods will be taken into consideration
               for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
               pod labels will be ignored. The default value is empty.
               The same key is forbidden to exist in both matchLabelKeys and labelSelector.
               Also, matchLabelKeys cannot be set when labelSelector isn't set.
               This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] mismatch_label_keys: MismatchLabelKeys is a set of pod label keys to select which pods will
               be taken into consideration. The keys are used to lookup values from the
               incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
               to select the group of existing pods which pods will be taken into consideration
               for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
               pod labels will be ignored. The default value is empty.
               The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
               Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
               This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] namespaces: namespaces specifies a static list of namespace names that the term applies to.
               The term is applied to the union of the namespaces listed in this field
               and the ones selected by namespaceSelector.
               null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        :param pulumi.Input[str] topology_key: This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
               the labelSelector in the specified namespaces, where co-located is defined as running on a node
               whose value of the label with key topologyKey matches that of any node on which any of the
               selected pods is running.
               Empty topologyKey is not allowed.
        """
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if match_label_keys is not None:
            pulumi.set(__self__, "match_label_keys", match_label_keys)
        if mismatch_label_keys is not None:
            pulumi.set(__self__, "mismatch_label_keys", mismatch_label_keys)
        if namespace_selector is not None:
            pulumi.set(__self__, "namespace_selector", namespace_selector)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)
        if topology_key is not None:
            pulumi.set(__self__, "topology_key", topology_key)

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(
        self,
    ) -> Optional[
        pulumi.Input[
            "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchArgs"
        ]
    ]:
        return pulumi.get(self, "label_selector")

    @label_selector.setter
    def label_selector(
        self,
        value: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "label_selector", value)

    @property
    @pulumi.getter(name="matchLabelKeys")
    def match_label_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        MatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both matchLabelKeys and labelSelector.
        Also, matchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        return pulumi.get(self, "match_label_keys")

    @match_label_keys.setter
    def match_label_keys(
        self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]
    ):
        pulumi.set(self, "match_label_keys", value)

    @property
    @pulumi.getter(name="mismatchLabelKeys")
    def mismatch_label_keys(
        self,
    ) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        MismatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
        Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        return pulumi.get(self, "mismatch_label_keys")

    @mismatch_label_keys.setter
    def mismatch_label_keys(
        self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]
    ):
        pulumi.set(self, "mismatch_label_keys", value)

    @property
    @pulumi.getter(name="namespaceSelector")
    def namespace_selector(
        self,
    ) -> Optional[
        pulumi.Input[
            "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchArgs"
        ]
    ]:
        return pulumi.get(self, "namespace_selector")

    @namespace_selector.setter
    def namespace_selector(
        self,
        value: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "namespace_selector", value)

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        namespaces specifies a static list of namespace names that the term applies to.
        The term is applied to the union of the namespaces listed in this field
        and the ones selected by namespaceSelector.
        null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        """
        return pulumi.get(self, "namespaces")

    @namespaces.setter
    def namespaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "namespaces", value)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> Optional[pulumi.Input[str]]:
        """
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
        the labelSelector in the specified namespaces, where co-located is defined as running on a node
        whose value of the label with key topologyKey matches that of any node on which any of the
        selected pods is running.
        Empty topologyKey is not allowed.
        """
        return pulumi.get(self, "topology_key")

    @topology_key.setter
    def topology_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topology_key", value)


if not MYPY:

    class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgsDict(
        TypedDict
    ):
        """
        Defines a set of pods (namely those matching the labelSelector
        relative to the given namespace(s)) that this pod should be
        co-located (affinity) or not co-located (anti-affinity) with,
        where co-located is defined as running on a node whose value of
        the label with key <topologyKey> matches that of any node on which
        a pod of the set of pods is running
        """

        label_selector: NotRequired[
            pulumi.Input[
                "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgsDict"
            ]
        ]
        match_label_keys: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        MatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both matchLabelKeys and labelSelector.
        Also, matchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        mismatch_label_keys: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        MismatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
        Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        namespace_selector: NotRequired[
            pulumi.Input[
                "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgsDict"
            ]
        ]
        namespaces: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        namespaces specifies a static list of namespace names that the term applies to.
        The term is applied to the union of the namespaces listed in this field
        and the ones selected by namespaceSelector.
        null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        """
        topology_key: NotRequired[pulumi.Input[str]]
        """
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
        the labelSelector in the specified namespaces, where co-located is defined as running on a node
        whose value of the label with key topologyKey matches that of any node on which any of the
        selected pods is running.
        Empty topologyKey is not allowed.
        """

elif False:
    ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs:
    def __init__(
        __self__,
        *,
        label_selector: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs"
            ]
        ] = None,
        match_label_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        mismatch_label_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        namespace_selector: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs"
            ]
        ] = None,
        namespaces: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        topology_key: Optional[pulumi.Input[str]] = None
    ):
        """
        Defines a set of pods (namely those matching the labelSelector
        relative to the given namespace(s)) that this pod should be
        co-located (affinity) or not co-located (anti-affinity) with,
        where co-located is defined as running on a node whose value of
        the label with key <topologyKey> matches that of any node on which
        a pod of the set of pods is running
        :param pulumi.Input[Sequence[pulumi.Input[str]]] match_label_keys: MatchLabelKeys is a set of pod label keys to select which pods will
               be taken into consideration. The keys are used to lookup values from the
               incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
               to select the group of existing pods which pods will be taken into consideration
               for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
               pod labels will be ignored. The default value is empty.
               The same key is forbidden to exist in both matchLabelKeys and labelSelector.
               Also, matchLabelKeys cannot be set when labelSelector isn't set.
               This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] mismatch_label_keys: MismatchLabelKeys is a set of pod label keys to select which pods will
               be taken into consideration. The keys are used to lookup values from the
               incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
               to select the group of existing pods which pods will be taken into consideration
               for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
               pod labels will be ignored. The default value is empty.
               The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
               Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
               This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] namespaces: namespaces specifies a static list of namespace names that the term applies to.
               The term is applied to the union of the namespaces listed in this field
               and the ones selected by namespaceSelector.
               null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        :param pulumi.Input[str] topology_key: This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
               the labelSelector in the specified namespaces, where co-located is defined as running on a node
               whose value of the label with key topologyKey matches that of any node on which any of the
               selected pods is running.
               Empty topologyKey is not allowed.
        """
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if match_label_keys is not None:
            pulumi.set(__self__, "match_label_keys", match_label_keys)
        if mismatch_label_keys is not None:
            pulumi.set(__self__, "mismatch_label_keys", mismatch_label_keys)
        if namespace_selector is not None:
            pulumi.set(__self__, "namespace_selector", namespace_selector)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)
        if topology_key is not None:
            pulumi.set(__self__, "topology_key", topology_key)

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(
        self,
    ) -> Optional[
        pulumi.Input[
            "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs"
        ]
    ]:
        return pulumi.get(self, "label_selector")

    @label_selector.setter
    def label_selector(
        self,
        value: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs"
            ]
        ],
    ):
        pulumi.set(self, "label_selector", value)

    @property
    @pulumi.getter(name="matchLabelKeys")
    def match_label_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        MatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both matchLabelKeys and labelSelector.
        Also, matchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        return pulumi.get(self, "match_label_keys")

    @match_label_keys.setter
    def match_label_keys(
        self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]
    ):
        pulumi.set(self, "match_label_keys", value)

    @property
    @pulumi.getter(name="mismatchLabelKeys")
    def mismatch_label_keys(
        self,
    ) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        MismatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
        Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        return pulumi.get(self, "mismatch_label_keys")

    @mismatch_label_keys.setter
    def mismatch_label_keys(
        self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]
    ):
        pulumi.set(self, "mismatch_label_keys", value)

    @property
    @pulumi.getter(name="namespaceSelector")
    def namespace_selector(
        self,
    ) -> Optional[
        pulumi.Input[
            "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs"
        ]
    ]:
        return pulumi.get(self, "namespace_selector")

    @namespace_selector.setter
    def namespace_selector(
        self,
        value: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs"
            ]
        ],
    ):
        pulumi.set(self, "namespace_selector", value)

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        namespaces specifies a static list of namespace names that the term applies to.
        The term is applied to the union of the namespaces listed in this field
        and the ones selected by namespaceSelector.
        null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        """
        return pulumi.get(self, "namespaces")

    @namespaces.setter
    def namespaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "namespaces", value)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> Optional[pulumi.Input[str]]:
        """
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
        the labelSelector in the specified namespaces, where co-located is defined as running on a node
        whose value of the label with key topologyKey matches that of any node on which any of the
        selected pods is running.
        Empty topologyKey is not allowed.
        """
        return pulumi.get(self, "topology_key")

    @topology_key.setter
    def topology_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topology_key", value)


if not MYPY:

    class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityArgsDict(
        TypedDict
    ):
        """
        Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
        """

        preferred_during_scheduling_ignored_during_execution: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgsDict"
                    ]
                ]
            ]
        ]
        """
        The scheduler will prefer to schedule pods to nodes that satisfy
        the affinity expressions specified by this field, but it may choose
        a node that violates one or more of the expressions. The node that is
        most preferred is the one with the greatest sum of weights, i.e.
        for each node that meets all of the scheduling requirements (resource
        request, requiredDuringScheduling affinity expressions, etc.),
        compute a sum by iterating through the elements of this field and adding
        "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
        node(s) with the highest sum are the most preferred.
        """
        required_during_scheduling_ignored_during_execution: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgsDict"
                    ]
                ]
            ]
        ]
        """
        If the affinity requirements specified by this field are not met at
        scheduling time, the pod will not be scheduled onto the node.
        If the affinity requirements specified by this field cease to be met
        at some point during pod execution (e.g. due to a pod label update), the
        system may or may not try to eventually evict the pod from its node.
        When there are multiple elements, the lists of nodes corresponding to each
        podAffinityTerm are intersected, i.e. all terms must be satisfied.
        """

elif False:
    ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityArgs:
    def __init__(
        __self__,
        *,
        preferred_during_scheduling_ignored_during_execution: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs"
                    ]
                ]
            ]
        ] = None,
        required_during_scheduling_ignored_during_execution: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs"
                    ]
                ]
            ]
        ] = None
    ):
        """
        Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
        :param pulumi.Input[Sequence[pulumi.Input['ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs']]] preferred_during_scheduling_ignored_during_execution: The scheduler will prefer to schedule pods to nodes that satisfy
               the affinity expressions specified by this field, but it may choose
               a node that violates one or more of the expressions. The node that is
               most preferred is the one with the greatest sum of weights, i.e.
               for each node that meets all of the scheduling requirements (resource
               request, requiredDuringScheduling affinity expressions, etc.),
               compute a sum by iterating through the elements of this field and adding
               "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
               node(s) with the highest sum are the most preferred.
        :param pulumi.Input[Sequence[pulumi.Input['ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs']]] required_during_scheduling_ignored_during_execution: If the affinity requirements specified by this field are not met at
               scheduling time, the pod will not be scheduled onto the node.
               If the affinity requirements specified by this field cease to be met
               at some point during pod execution (e.g. due to a pod label update), the
               system may or may not try to eventually evict the pod from its node.
               When there are multiple elements, the lists of nodes corresponding to each
               podAffinityTerm are intersected, i.e. all terms must be satisfied.
        """
        if preferred_during_scheduling_ignored_during_execution is not None:
            pulumi.set(
                __self__,
                "preferred_during_scheduling_ignored_during_execution",
                preferred_during_scheduling_ignored_during_execution,
            )
        if required_during_scheduling_ignored_during_execution is not None:
            pulumi.set(
                __self__,
                "required_during_scheduling_ignored_during_execution",
                required_during_scheduling_ignored_during_execution,
            )

    @property
    @pulumi.getter(name="preferredDuringSchedulingIgnoredDuringExecution")
    def preferred_during_scheduling_ignored_during_execution(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs"
                ]
            ]
        ]
    ]:
        """
        The scheduler will prefer to schedule pods to nodes that satisfy
        the affinity expressions specified by this field, but it may choose
        a node that violates one or more of the expressions. The node that is
        most preferred is the one with the greatest sum of weights, i.e.
        for each node that meets all of the scheduling requirements (resource
        request, requiredDuringScheduling affinity expressions, etc.),
        compute a sum by iterating through the elements of this field and adding
        "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
        node(s) with the highest sum are the most preferred.
        """
        return pulumi.get(self, "preferred_during_scheduling_ignored_during_execution")

    @preferred_during_scheduling_ignored_during_execution.setter
    def preferred_during_scheduling_ignored_during_execution(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "preferred_during_scheduling_ignored_during_execution", value)

    @property
    @pulumi.getter(name="requiredDuringSchedulingIgnoredDuringExecution")
    def required_during_scheduling_ignored_during_execution(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs"
                ]
            ]
        ]
    ]:
        """
        If the affinity requirements specified by this field are not met at
        scheduling time, the pod will not be scheduled onto the node.
        If the affinity requirements specified by this field cease to be met
        at some point during pod execution (e.g. due to a pod label update), the
        system may or may not try to eventually evict the pod from its node.
        When there are multiple elements, the lists of nodes corresponding to each
        podAffinityTerm are intersected, i.e. all terms must be satisfied.
        """
        return pulumi.get(self, "required_during_scheduling_ignored_during_execution")

    @required_during_scheduling_ignored_during_execution.setter
    def required_during_scheduling_ignored_during_execution(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "required_during_scheduling_ignored_during_execution", value)


if not MYPY:

    class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPatchArgsDict(
        TypedDict
    ):
        """
        Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
        """

        preferred_during_scheduling_ignored_during_execution: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgsDict"
                    ]
                ]
            ]
        ]
        """
        The scheduler will prefer to schedule pods to nodes that satisfy
        the anti-affinity expressions specified by this field, but it may choose
        a node that violates one or more of the expressions. The node that is
        most preferred is the one with the greatest sum of weights, i.e.
        for each node that meets all of the scheduling requirements (resource
        request, requiredDuringScheduling anti-affinity expressions, etc.),
        compute a sum by iterating through the elements of this field and adding
        "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
        node(s) with the highest sum are the most preferred.
        """
        required_during_scheduling_ignored_during_execution: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgsDict"
                    ]
                ]
            ]
        ]
        """
        If the anti-affinity requirements specified by this field are not met at
        scheduling time, the pod will not be scheduled onto the node.
        If the anti-affinity requirements specified by this field cease to be met
        at some point during pod execution (e.g. due to a pod label update), the
        system may or may not try to eventually evict the pod from its node.
        When there are multiple elements, the lists of nodes corresponding to each
        podAffinityTerm are intersected, i.e. all terms must be satisfied.
        """

elif False:
    ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPatchArgs:
    def __init__(
        __self__,
        *,
        preferred_during_scheduling_ignored_during_execution: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgs"
                    ]
                ]
            ]
        ] = None,
        required_during_scheduling_ignored_during_execution: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgs"
                    ]
                ]
            ]
        ] = None
    ):
        """
        Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
        :param pulumi.Input[Sequence[pulumi.Input['ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgs']]] preferred_during_scheduling_ignored_during_execution: The scheduler will prefer to schedule pods to nodes that satisfy
               the anti-affinity expressions specified by this field, but it may choose
               a node that violates one or more of the expressions. The node that is
               most preferred is the one with the greatest sum of weights, i.e.
               for each node that meets all of the scheduling requirements (resource
               request, requiredDuringScheduling anti-affinity expressions, etc.),
               compute a sum by iterating through the elements of this field and adding
               "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
               node(s) with the highest sum are the most preferred.
        :param pulumi.Input[Sequence[pulumi.Input['ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgs']]] required_during_scheduling_ignored_during_execution: If the anti-affinity requirements specified by this field are not met at
               scheduling time, the pod will not be scheduled onto the node.
               If the anti-affinity requirements specified by this field cease to be met
               at some point during pod execution (e.g. due to a pod label update), the
               system may or may not try to eventually evict the pod from its node.
               When there are multiple elements, the lists of nodes corresponding to each
               podAffinityTerm are intersected, i.e. all terms must be satisfied.
        """
        if preferred_during_scheduling_ignored_during_execution is not None:
            pulumi.set(
                __self__,
                "preferred_during_scheduling_ignored_during_execution",
                preferred_during_scheduling_ignored_during_execution,
            )
        if required_during_scheduling_ignored_during_execution is not None:
            pulumi.set(
                __self__,
                "required_during_scheduling_ignored_during_execution",
                required_during_scheduling_ignored_during_execution,
            )

    @property
    @pulumi.getter(name="preferredDuringSchedulingIgnoredDuringExecution")
    def preferred_during_scheduling_ignored_during_execution(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgs"
                ]
            ]
        ]
    ]:
        """
        The scheduler will prefer to schedule pods to nodes that satisfy
        the anti-affinity expressions specified by this field, but it may choose
        a node that violates one or more of the expressions. The node that is
        most preferred is the one with the greatest sum of weights, i.e.
        for each node that meets all of the scheduling requirements (resource
        request, requiredDuringScheduling anti-affinity expressions, etc.),
        compute a sum by iterating through the elements of this field and adding
        "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
        node(s) with the highest sum are the most preferred.
        """
        return pulumi.get(self, "preferred_during_scheduling_ignored_during_execution")

    @preferred_during_scheduling_ignored_during_execution.setter
    def preferred_during_scheduling_ignored_during_execution(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "preferred_during_scheduling_ignored_during_execution", value)

    @property
    @pulumi.getter(name="requiredDuringSchedulingIgnoredDuringExecution")
    def required_during_scheduling_ignored_during_execution(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgs"
                ]
            ]
        ]
    ]:
        """
        If the anti-affinity requirements specified by this field are not met at
        scheduling time, the pod will not be scheduled onto the node.
        If the anti-affinity requirements specified by this field cease to be met
        at some point during pod execution (e.g. due to a pod label update), the
        system may or may not try to eventually evict the pod from its node.
        When there are multiple elements, the lists of nodes corresponding to each
        podAffinityTerm are intersected, i.e. all terms must be satisfied.
        """
        return pulumi.get(self, "required_during_scheduling_ignored_during_execution")

    @required_during_scheduling_ignored_during_execution.setter
    def required_during_scheduling_ignored_during_execution(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "required_during_scheduling_ignored_during_execution", value)


if not MYPY:

    class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgsDict(
        TypedDict
    ):
        """
        The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
        """

        pod_affinity_term: NotRequired[
            pulumi.Input[
                "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchArgsDict"
            ]
        ]
        weight: NotRequired[pulumi.Input[int]]
        """
        weight associated with matching the corresponding podAffinityTerm,
        in the range 1-100.
        """

elif False:
    ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgs:
    def __init__(
        __self__,
        *,
        pod_affinity_term: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchArgs"
            ]
        ] = None,
        weight: Optional[pulumi.Input[int]] = None
    ):
        """
        The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
        :param pulumi.Input[int] weight: weight associated with matching the corresponding podAffinityTerm,
               in the range 1-100.
        """
        if pod_affinity_term is not None:
            pulumi.set(__self__, "pod_affinity_term", pod_affinity_term)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter(name="podAffinityTerm")
    def pod_affinity_term(
        self,
    ) -> Optional[
        pulumi.Input[
            "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchArgs"
        ]
    ]:
        return pulumi.get(self, "pod_affinity_term")

    @pod_affinity_term.setter
    def pod_affinity_term(
        self,
        value: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "pod_affinity_term", value)

    @property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[int]]:
        """
        weight associated with matching the corresponding podAffinityTerm,
        in the range 1-100.
        """
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "weight", value)


if not MYPY:

    class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArgsDict(
        TypedDict
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        key is the label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """

elif False:
    ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        operator: Optional[pulumi.Input[str]] = None,
        values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        :param pulumi.Input[str] key: key is the label key that the selector applies to.
        :param pulumi.Input[str] operator: operator represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists and DoesNotExist.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: values is an array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. This array is replaced during a strategic
               merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:

    class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgsDict(
        TypedDict
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        key is the label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """

elif False:
    ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        operator: Optional[pulumi.Input[str]] = None,
        values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        :param pulumi.Input[str] key: key is the label key that the selector applies to.
        :param pulumi.Input[str] operator: operator represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists and DoesNotExist.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: values is an array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. This array is replaced during a strategic
               merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:

    class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchArgsDict(
        TypedDict
    ):
        """
        A label query over a set of resources, in this case pods.
        If it's null, this PodAffinityTerm matches with no Pods.
        """

        match_expressions: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArgsDict"
                    ]
                ]
            ]
        ]
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        match_labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """

elif False:
    ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchArgs:
    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArgs"
                    ]
                ]
            ]
        ] = None,
        match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None
    ):
        """
        A label query over a set of resources, in this case pods.
        If it's null, this PodAffinityTerm matches with no Pods.
        :param pulumi.Input[Sequence[pulumi.Input['ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArgs']]] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
               map is equivalent to an element of matchExpressions, whose key field is "key", the
               operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArgs"
                ]
            ]
        ]
    ]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(
        self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
    ):
        pulumi.set(self, "match_labels", value)


if not MYPY:

    class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgsDict(
        TypedDict
    ):
        """
        A label query over a set of resources, in this case pods.
        If it's null, this PodAffinityTerm matches with no Pods.
        """

        match_expressions: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgsDict"
                    ]
                ]
            ]
        ]
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        match_labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """

elif False:
    ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs:
    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs"
                    ]
                ]
            ]
        ] = None,
        match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None
    ):
        """
        A label query over a set of resources, in this case pods.
        If it's null, this PodAffinityTerm matches with no Pods.
        :param pulumi.Input[Sequence[pulumi.Input['ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs']]] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
               map is equivalent to an element of matchExpressions, whose key field is "key", the
               operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs"
                ]
            ]
        ]
    ]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(
        self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
    ):
        pulumi.set(self, "match_labels", value)


if not MYPY:

    class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArgsDict(
        TypedDict
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        key is the label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """

elif False:
    ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        operator: Optional[pulumi.Input[str]] = None,
        values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        :param pulumi.Input[str] key: key is the label key that the selector applies to.
        :param pulumi.Input[str] operator: operator represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists and DoesNotExist.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: values is an array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. This array is replaced during a strategic
               merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:

    class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgsDict(
        TypedDict
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        key is the label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """

elif False:
    ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        operator: Optional[pulumi.Input[str]] = None,
        values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        :param pulumi.Input[str] key: key is the label key that the selector applies to.
        :param pulumi.Input[str] operator: operator represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists and DoesNotExist.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: values is an array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. This array is replaced during a strategic
               merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:

    class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchArgsDict(
        TypedDict
    ):
        """
        A label query over the set of namespaces that the term applies to.
        The term is applied to the union of the namespaces selected by this field
        and the ones listed in the namespaces field.
        null selector and null or empty namespaces list means "this pod's namespace".
        An empty selector ({}) matches all namespaces.
        """

        match_expressions: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArgsDict"
                    ]
                ]
            ]
        ]
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        match_labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """

elif False:
    ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchArgs:
    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArgs"
                    ]
                ]
            ]
        ] = None,
        match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None
    ):
        """
        A label query over the set of namespaces that the term applies to.
        The term is applied to the union of the namespaces selected by this field
        and the ones listed in the namespaces field.
        null selector and null or empty namespaces list means "this pod's namespace".
        An empty selector ({}) matches all namespaces.
        :param pulumi.Input[Sequence[pulumi.Input['ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArgs']]] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
               map is equivalent to an element of matchExpressions, whose key field is "key", the
               operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArgs"
                ]
            ]
        ]
    ]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(
        self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
    ):
        pulumi.set(self, "match_labels", value)


if not MYPY:

    class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgsDict(
        TypedDict
    ):
        """
        A label query over the set of namespaces that the term applies to.
        The term is applied to the union of the namespaces selected by this field
        and the ones listed in the namespaces field.
        null selector and null or empty namespaces list means "this pod's namespace".
        An empty selector ({}) matches all namespaces.
        """

        match_expressions: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgsDict"
                    ]
                ]
            ]
        ]
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        match_labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """

elif False:
    ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs:
    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs"
                    ]
                ]
            ]
        ] = None,
        match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None
    ):
        """
        A label query over the set of namespaces that the term applies to.
        The term is applied to the union of the namespaces selected by this field
        and the ones listed in the namespaces field.
        null selector and null or empty namespaces list means "this pod's namespace".
        An empty selector ({}) matches all namespaces.
        :param pulumi.Input[Sequence[pulumi.Input['ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs']]] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
               map is equivalent to an element of matchExpressions, whose key field is "key", the
               operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs"
                ]
            ]
        ]
    ]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(
        self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
    ):
        pulumi.set(self, "match_labels", value)


if not MYPY:

    class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchArgsDict(
        TypedDict
    ):
        """
        Required. A pod affinity term, associated with the corresponding weight.
        """

        label_selector: NotRequired[
            pulumi.Input[
                "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchArgsDict"
            ]
        ]
        match_label_keys: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        MatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both matchLabelKeys and labelSelector.
        Also, matchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        mismatch_label_keys: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        MismatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
        Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        namespace_selector: NotRequired[
            pulumi.Input[
                "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchArgsDict"
            ]
        ]
        namespaces: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        namespaces specifies a static list of namespace names that the term applies to.
        The term is applied to the union of the namespaces listed in this field
        and the ones selected by namespaceSelector.
        null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        """
        topology_key: NotRequired[pulumi.Input[str]]
        """
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
        the labelSelector in the specified namespaces, where co-located is defined as running on a node
        whose value of the label with key topologyKey matches that of any node on which any of the
        selected pods is running.
        Empty topologyKey is not allowed.
        """

elif False:
    ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchArgs:
    def __init__(
        __self__,
        *,
        label_selector: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchArgs"
            ]
        ] = None,
        match_label_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        mismatch_label_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        namespace_selector: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchArgs"
            ]
        ] = None,
        namespaces: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        topology_key: Optional[pulumi.Input[str]] = None
    ):
        """
        Required. A pod affinity term, associated with the corresponding weight.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] match_label_keys: MatchLabelKeys is a set of pod label keys to select which pods will
               be taken into consideration. The keys are used to lookup values from the
               incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
               to select the group of existing pods which pods will be taken into consideration
               for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
               pod labels will be ignored. The default value is empty.
               The same key is forbidden to exist in both matchLabelKeys and labelSelector.
               Also, matchLabelKeys cannot be set when labelSelector isn't set.
               This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] mismatch_label_keys: MismatchLabelKeys is a set of pod label keys to select which pods will
               be taken into consideration. The keys are used to lookup values from the
               incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
               to select the group of existing pods which pods will be taken into consideration
               for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
               pod labels will be ignored. The default value is empty.
               The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
               Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
               This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] namespaces: namespaces specifies a static list of namespace names that the term applies to.
               The term is applied to the union of the namespaces listed in this field
               and the ones selected by namespaceSelector.
               null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        :param pulumi.Input[str] topology_key: This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
               the labelSelector in the specified namespaces, where co-located is defined as running on a node
               whose value of the label with key topologyKey matches that of any node on which any of the
               selected pods is running.
               Empty topologyKey is not allowed.
        """
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if match_label_keys is not None:
            pulumi.set(__self__, "match_label_keys", match_label_keys)
        if mismatch_label_keys is not None:
            pulumi.set(__self__, "mismatch_label_keys", mismatch_label_keys)
        if namespace_selector is not None:
            pulumi.set(__self__, "namespace_selector", namespace_selector)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)
        if topology_key is not None:
            pulumi.set(__self__, "topology_key", topology_key)

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(
        self,
    ) -> Optional[
        pulumi.Input[
            "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchArgs"
        ]
    ]:
        return pulumi.get(self, "label_selector")

    @label_selector.setter
    def label_selector(
        self,
        value: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "label_selector", value)

    @property
    @pulumi.getter(name="matchLabelKeys")
    def match_label_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        MatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both matchLabelKeys and labelSelector.
        Also, matchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        return pulumi.get(self, "match_label_keys")

    @match_label_keys.setter
    def match_label_keys(
        self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]
    ):
        pulumi.set(self, "match_label_keys", value)

    @property
    @pulumi.getter(name="mismatchLabelKeys")
    def mismatch_label_keys(
        self,
    ) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        MismatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
        Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        return pulumi.get(self, "mismatch_label_keys")

    @mismatch_label_keys.setter
    def mismatch_label_keys(
        self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]
    ):
        pulumi.set(self, "mismatch_label_keys", value)

    @property
    @pulumi.getter(name="namespaceSelector")
    def namespace_selector(
        self,
    ) -> Optional[
        pulumi.Input[
            "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchArgs"
        ]
    ]:
        return pulumi.get(self, "namespace_selector")

    @namespace_selector.setter
    def namespace_selector(
        self,
        value: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "namespace_selector", value)

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        namespaces specifies a static list of namespace names that the term applies to.
        The term is applied to the union of the namespaces listed in this field
        and the ones selected by namespaceSelector.
        null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        """
        return pulumi.get(self, "namespaces")

    @namespaces.setter
    def namespaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "namespaces", value)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> Optional[pulumi.Input[str]]:
        """
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
        the labelSelector in the specified namespaces, where co-located is defined as running on a node
        whose value of the label with key topologyKey matches that of any node on which any of the
        selected pods is running.
        Empty topologyKey is not allowed.
        """
        return pulumi.get(self, "topology_key")

    @topology_key.setter
    def topology_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topology_key", value)


if not MYPY:

    class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgsDict(
        TypedDict
    ):
        """
        Required. A pod affinity term, associated with the corresponding weight.
        """

        label_selector: NotRequired[
            pulumi.Input[
                "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgsDict"
            ]
        ]
        match_label_keys: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        MatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both matchLabelKeys and labelSelector.
        Also, matchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        mismatch_label_keys: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        MismatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
        Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        namespace_selector: NotRequired[
            pulumi.Input[
                "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgsDict"
            ]
        ]
        namespaces: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        namespaces specifies a static list of namespace names that the term applies to.
        The term is applied to the union of the namespaces listed in this field
        and the ones selected by namespaceSelector.
        null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        """
        topology_key: NotRequired[pulumi.Input[str]]
        """
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
        the labelSelector in the specified namespaces, where co-located is defined as running on a node
        whose value of the label with key topologyKey matches that of any node on which any of the
        selected pods is running.
        Empty topologyKey is not allowed.
        """

elif False:
    ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs:
    def __init__(
        __self__,
        *,
        label_selector: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs"
            ]
        ] = None,
        match_label_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        mismatch_label_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        namespace_selector: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs"
            ]
        ] = None,
        namespaces: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        topology_key: Optional[pulumi.Input[str]] = None
    ):
        """
        Required. A pod affinity term, associated with the corresponding weight.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] match_label_keys: MatchLabelKeys is a set of pod label keys to select which pods will
               be taken into consideration. The keys are used to lookup values from the
               incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
               to select the group of existing pods which pods will be taken into consideration
               for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
               pod labels will be ignored. The default value is empty.
               The same key is forbidden to exist in both matchLabelKeys and labelSelector.
               Also, matchLabelKeys cannot be set when labelSelector isn't set.
               This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] mismatch_label_keys: MismatchLabelKeys is a set of pod label keys to select which pods will
               be taken into consideration. The keys are used to lookup values from the
               incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
               to select the group of existing pods which pods will be taken into consideration
               for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
               pod labels will be ignored. The default value is empty.
               The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
               Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
               This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] namespaces: namespaces specifies a static list of namespace names that the term applies to.
               The term is applied to the union of the namespaces listed in this field
               and the ones selected by namespaceSelector.
               null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        :param pulumi.Input[str] topology_key: This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
               the labelSelector in the specified namespaces, where co-located is defined as running on a node
               whose value of the label with key topologyKey matches that of any node on which any of the
               selected pods is running.
               Empty topologyKey is not allowed.
        """
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if match_label_keys is not None:
            pulumi.set(__self__, "match_label_keys", match_label_keys)
        if mismatch_label_keys is not None:
            pulumi.set(__self__, "mismatch_label_keys", mismatch_label_keys)
        if namespace_selector is not None:
            pulumi.set(__self__, "namespace_selector", namespace_selector)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)
        if topology_key is not None:
            pulumi.set(__self__, "topology_key", topology_key)

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(
        self,
    ) -> Optional[
        pulumi.Input[
            "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs"
        ]
    ]:
        return pulumi.get(self, "label_selector")

    @label_selector.setter
    def label_selector(
        self,
        value: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs"
            ]
        ],
    ):
        pulumi.set(self, "label_selector", value)

    @property
    @pulumi.getter(name="matchLabelKeys")
    def match_label_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        MatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both matchLabelKeys and labelSelector.
        Also, matchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        return pulumi.get(self, "match_label_keys")

    @match_label_keys.setter
    def match_label_keys(
        self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]
    ):
        pulumi.set(self, "match_label_keys", value)

    @property
    @pulumi.getter(name="mismatchLabelKeys")
    def mismatch_label_keys(
        self,
    ) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        MismatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
        Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        return pulumi.get(self, "mismatch_label_keys")

    @mismatch_label_keys.setter
    def mismatch_label_keys(
        self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]
    ):
        pulumi.set(self, "mismatch_label_keys", value)

    @property
    @pulumi.getter(name="namespaceSelector")
    def namespace_selector(
        self,
    ) -> Optional[
        pulumi.Input[
            "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs"
        ]
    ]:
        return pulumi.get(self, "namespace_selector")

    @namespace_selector.setter
    def namespace_selector(
        self,
        value: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs"
            ]
        ],
    ):
        pulumi.set(self, "namespace_selector", value)

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        namespaces specifies a static list of namespace names that the term applies to.
        The term is applied to the union of the namespaces listed in this field
        and the ones selected by namespaceSelector.
        null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        """
        return pulumi.get(self, "namespaces")

    @namespaces.setter
    def namespaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "namespaces", value)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> Optional[pulumi.Input[str]]:
        """
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
        the labelSelector in the specified namespaces, where co-located is defined as running on a node
        whose value of the label with key topologyKey matches that of any node on which any of the
        selected pods is running.
        Empty topologyKey is not allowed.
        """
        return pulumi.get(self, "topology_key")

    @topology_key.setter
    def topology_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topology_key", value)


if not MYPY:

    class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgsDict(
        TypedDict
    ):
        """
        The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
        """

        pod_affinity_term: NotRequired[
            pulumi.Input[
                "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgsDict"
            ]
        ]
        weight: NotRequired[pulumi.Input[int]]
        """
        weight associated with matching the corresponding podAffinityTerm,
        in the range 1-100.
        """

elif False:
    ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs:
    def __init__(
        __self__,
        *,
        pod_affinity_term: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs"
            ]
        ] = None,
        weight: Optional[pulumi.Input[int]] = None
    ):
        """
        The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
        :param pulumi.Input[int] weight: weight associated with matching the corresponding podAffinityTerm,
               in the range 1-100.
        """
        if pod_affinity_term is not None:
            pulumi.set(__self__, "pod_affinity_term", pod_affinity_term)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter(name="podAffinityTerm")
    def pod_affinity_term(
        self,
    ) -> Optional[
        pulumi.Input[
            "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs"
        ]
    ]:
        return pulumi.get(self, "pod_affinity_term")

    @pod_affinity_term.setter
    def pod_affinity_term(
        self,
        value: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs"
            ]
        ],
    ):
        pulumi.set(self, "pod_affinity_term", value)

    @property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[int]]:
        """
        weight associated with matching the corresponding podAffinityTerm,
        in the range 1-100.
        """
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "weight", value)


if not MYPY:

    class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArgsDict(
        TypedDict
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        key is the label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """

elif False:
    ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        operator: Optional[pulumi.Input[str]] = None,
        values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        :param pulumi.Input[str] key: key is the label key that the selector applies to.
        :param pulumi.Input[str] operator: operator represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists and DoesNotExist.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: values is an array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. This array is replaced during a strategic
               merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:

    class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgsDict(
        TypedDict
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        key is the label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """

elif False:
    ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        operator: Optional[pulumi.Input[str]] = None,
        values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        :param pulumi.Input[str] key: key is the label key that the selector applies to.
        :param pulumi.Input[str] operator: operator represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists and DoesNotExist.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: values is an array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. This array is replaced during a strategic
               merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:

    class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchArgsDict(
        TypedDict
    ):
        """
        A label query over a set of resources, in this case pods.
        If it's null, this PodAffinityTerm matches with no Pods.
        """

        match_expressions: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArgsDict"
                    ]
                ]
            ]
        ]
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        match_labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """

elif False:
    ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchArgs:
    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArgs"
                    ]
                ]
            ]
        ] = None,
        match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None
    ):
        """
        A label query over a set of resources, in this case pods.
        If it's null, this PodAffinityTerm matches with no Pods.
        :param pulumi.Input[Sequence[pulumi.Input['ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArgs']]] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
               map is equivalent to an element of matchExpressions, whose key field is "key", the
               operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArgs"
                ]
            ]
        ]
    ]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(
        self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
    ):
        pulumi.set(self, "match_labels", value)


if not MYPY:

    class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgsDict(
        TypedDict
    ):
        """
        A label query over a set of resources, in this case pods.
        If it's null, this PodAffinityTerm matches with no Pods.
        """

        match_expressions: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgsDict"
                    ]
                ]
            ]
        ]
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        match_labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """

elif False:
    ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs:
    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs"
                    ]
                ]
            ]
        ] = None,
        match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None
    ):
        """
        A label query over a set of resources, in this case pods.
        If it's null, this PodAffinityTerm matches with no Pods.
        :param pulumi.Input[Sequence[pulumi.Input['ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs']]] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
               map is equivalent to an element of matchExpressions, whose key field is "key", the
               operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs"
                ]
            ]
        ]
    ]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(
        self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
    ):
        pulumi.set(self, "match_labels", value)


if not MYPY:

    class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArgsDict(
        TypedDict
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        key is the label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """

elif False:
    ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        operator: Optional[pulumi.Input[str]] = None,
        values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        :param pulumi.Input[str] key: key is the label key that the selector applies to.
        :param pulumi.Input[str] operator: operator represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists and DoesNotExist.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: values is an array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. This array is replaced during a strategic
               merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:

    class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgsDict(
        TypedDict
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        key is the label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """

elif False:
    ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        operator: Optional[pulumi.Input[str]] = None,
        values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        :param pulumi.Input[str] key: key is the label key that the selector applies to.
        :param pulumi.Input[str] operator: operator represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists and DoesNotExist.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: values is an array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. This array is replaced during a strategic
               merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:

    class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchArgsDict(
        TypedDict
    ):
        """
        A label query over the set of namespaces that the term applies to.
        The term is applied to the union of the namespaces selected by this field
        and the ones listed in the namespaces field.
        null selector and null or empty namespaces list means "this pod's namespace".
        An empty selector ({}) matches all namespaces.
        """

        match_expressions: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArgsDict"
                    ]
                ]
            ]
        ]
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        match_labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """

elif False:
    ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchArgs:
    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArgs"
                    ]
                ]
            ]
        ] = None,
        match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None
    ):
        """
        A label query over the set of namespaces that the term applies to.
        The term is applied to the union of the namespaces selected by this field
        and the ones listed in the namespaces field.
        null selector and null or empty namespaces list means "this pod's namespace".
        An empty selector ({}) matches all namespaces.
        :param pulumi.Input[Sequence[pulumi.Input['ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArgs']]] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
               map is equivalent to an element of matchExpressions, whose key field is "key", the
               operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArgs"
                ]
            ]
        ]
    ]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(
        self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
    ):
        pulumi.set(self, "match_labels", value)


if not MYPY:

    class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgsDict(
        TypedDict
    ):
        """
        A label query over the set of namespaces that the term applies to.
        The term is applied to the union of the namespaces selected by this field
        and the ones listed in the namespaces field.
        null selector and null or empty namespaces list means "this pod's namespace".
        An empty selector ({}) matches all namespaces.
        """

        match_expressions: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgsDict"
                    ]
                ]
            ]
        ]
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        match_labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """

elif False:
    ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs:
    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs"
                    ]
                ]
            ]
        ] = None,
        match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None
    ):
        """
        A label query over the set of namespaces that the term applies to.
        The term is applied to the union of the namespaces selected by this field
        and the ones listed in the namespaces field.
        null selector and null or empty namespaces list means "this pod's namespace".
        An empty selector ({}) matches all namespaces.
        :param pulumi.Input[Sequence[pulumi.Input['ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs']]] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
               map is equivalent to an element of matchExpressions, whose key field is "key", the
               operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs"
                ]
            ]
        ]
    ]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(
        self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
    ):
        pulumi.set(self, "match_labels", value)


if not MYPY:

    class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgsDict(
        TypedDict
    ):
        """
        Defines a set of pods (namely those matching the labelSelector
        relative to the given namespace(s)) that this pod should be
        co-located (affinity) or not co-located (anti-affinity) with,
        where co-located is defined as running on a node whose value of
        the label with key <topologyKey> matches that of any node on which
        a pod of the set of pods is running
        """

        label_selector: NotRequired[
            pulumi.Input[
                "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchArgsDict"
            ]
        ]
        match_label_keys: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        MatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both matchLabelKeys and labelSelector.
        Also, matchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        mismatch_label_keys: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        MismatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
        Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        namespace_selector: NotRequired[
            pulumi.Input[
                "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchArgsDict"
            ]
        ]
        namespaces: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        namespaces specifies a static list of namespace names that the term applies to.
        The term is applied to the union of the namespaces listed in this field
        and the ones selected by namespaceSelector.
        null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        """
        topology_key: NotRequired[pulumi.Input[str]]
        """
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
        the labelSelector in the specified namespaces, where co-located is defined as running on a node
        whose value of the label with key topologyKey matches that of any node on which any of the
        selected pods is running.
        Empty topologyKey is not allowed.
        """

elif False:
    ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgs:
    def __init__(
        __self__,
        *,
        label_selector: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchArgs"
            ]
        ] = None,
        match_label_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        mismatch_label_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        namespace_selector: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchArgs"
            ]
        ] = None,
        namespaces: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        topology_key: Optional[pulumi.Input[str]] = None
    ):
        """
        Defines a set of pods (namely those matching the labelSelector
        relative to the given namespace(s)) that this pod should be
        co-located (affinity) or not co-located (anti-affinity) with,
        where co-located is defined as running on a node whose value of
        the label with key <topologyKey> matches that of any node on which
        a pod of the set of pods is running
        :param pulumi.Input[Sequence[pulumi.Input[str]]] match_label_keys: MatchLabelKeys is a set of pod label keys to select which pods will
               be taken into consideration. The keys are used to lookup values from the
               incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
               to select the group of existing pods which pods will be taken into consideration
               for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
               pod labels will be ignored. The default value is empty.
               The same key is forbidden to exist in both matchLabelKeys and labelSelector.
               Also, matchLabelKeys cannot be set when labelSelector isn't set.
               This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] mismatch_label_keys: MismatchLabelKeys is a set of pod label keys to select which pods will
               be taken into consideration. The keys are used to lookup values from the
               incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
               to select the group of existing pods which pods will be taken into consideration
               for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
               pod labels will be ignored. The default value is empty.
               The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
               Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
               This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] namespaces: namespaces specifies a static list of namespace names that the term applies to.
               The term is applied to the union of the namespaces listed in this field
               and the ones selected by namespaceSelector.
               null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        :param pulumi.Input[str] topology_key: This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
               the labelSelector in the specified namespaces, where co-located is defined as running on a node
               whose value of the label with key topologyKey matches that of any node on which any of the
               selected pods is running.
               Empty topologyKey is not allowed.
        """
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if match_label_keys is not None:
            pulumi.set(__self__, "match_label_keys", match_label_keys)
        if mismatch_label_keys is not None:
            pulumi.set(__self__, "mismatch_label_keys", mismatch_label_keys)
        if namespace_selector is not None:
            pulumi.set(__self__, "namespace_selector", namespace_selector)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)
        if topology_key is not None:
            pulumi.set(__self__, "topology_key", topology_key)

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(
        self,
    ) -> Optional[
        pulumi.Input[
            "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchArgs"
        ]
    ]:
        return pulumi.get(self, "label_selector")

    @label_selector.setter
    def label_selector(
        self,
        value: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "label_selector", value)

    @property
    @pulumi.getter(name="matchLabelKeys")
    def match_label_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        MatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both matchLabelKeys and labelSelector.
        Also, matchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        return pulumi.get(self, "match_label_keys")

    @match_label_keys.setter
    def match_label_keys(
        self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]
    ):
        pulumi.set(self, "match_label_keys", value)

    @property
    @pulumi.getter(name="mismatchLabelKeys")
    def mismatch_label_keys(
        self,
    ) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        MismatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
        Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        return pulumi.get(self, "mismatch_label_keys")

    @mismatch_label_keys.setter
    def mismatch_label_keys(
        self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]
    ):
        pulumi.set(self, "mismatch_label_keys", value)

    @property
    @pulumi.getter(name="namespaceSelector")
    def namespace_selector(
        self,
    ) -> Optional[
        pulumi.Input[
            "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchArgs"
        ]
    ]:
        return pulumi.get(self, "namespace_selector")

    @namespace_selector.setter
    def namespace_selector(
        self,
        value: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "namespace_selector", value)

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        namespaces specifies a static list of namespace names that the term applies to.
        The term is applied to the union of the namespaces listed in this field
        and the ones selected by namespaceSelector.
        null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        """
        return pulumi.get(self, "namespaces")

    @namespaces.setter
    def namespaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "namespaces", value)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> Optional[pulumi.Input[str]]:
        """
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
        the labelSelector in the specified namespaces, where co-located is defined as running on a node
        whose value of the label with key topologyKey matches that of any node on which any of the
        selected pods is running.
        Empty topologyKey is not allowed.
        """
        return pulumi.get(self, "topology_key")

    @topology_key.setter
    def topology_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topology_key", value)


if not MYPY:

    class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgsDict(
        TypedDict
    ):
        """
        Defines a set of pods (namely those matching the labelSelector
        relative to the given namespace(s)) that this pod should be
        co-located (affinity) or not co-located (anti-affinity) with,
        where co-located is defined as running on a node whose value of
        the label with key <topologyKey> matches that of any node on which
        a pod of the set of pods is running
        """

        label_selector: NotRequired[
            pulumi.Input[
                "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgsDict"
            ]
        ]
        match_label_keys: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        MatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both matchLabelKeys and labelSelector.
        Also, matchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        mismatch_label_keys: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        MismatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
        Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        namespace_selector: NotRequired[
            pulumi.Input[
                "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgsDict"
            ]
        ]
        namespaces: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        namespaces specifies a static list of namespace names that the term applies to.
        The term is applied to the union of the namespaces listed in this field
        and the ones selected by namespaceSelector.
        null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        """
        topology_key: NotRequired[pulumi.Input[str]]
        """
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
        the labelSelector in the specified namespaces, where co-located is defined as running on a node
        whose value of the label with key topologyKey matches that of any node on which any of the
        selected pods is running.
        Empty topologyKey is not allowed.
        """

elif False:
    ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs:
    def __init__(
        __self__,
        *,
        label_selector: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs"
            ]
        ] = None,
        match_label_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        mismatch_label_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        namespace_selector: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs"
            ]
        ] = None,
        namespaces: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        topology_key: Optional[pulumi.Input[str]] = None
    ):
        """
        Defines a set of pods (namely those matching the labelSelector
        relative to the given namespace(s)) that this pod should be
        co-located (affinity) or not co-located (anti-affinity) with,
        where co-located is defined as running on a node whose value of
        the label with key <topologyKey> matches that of any node on which
        a pod of the set of pods is running
        :param pulumi.Input[Sequence[pulumi.Input[str]]] match_label_keys: MatchLabelKeys is a set of pod label keys to select which pods will
               be taken into consideration. The keys are used to lookup values from the
               incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
               to select the group of existing pods which pods will be taken into consideration
               for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
               pod labels will be ignored. The default value is empty.
               The same key is forbidden to exist in both matchLabelKeys and labelSelector.
               Also, matchLabelKeys cannot be set when labelSelector isn't set.
               This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] mismatch_label_keys: MismatchLabelKeys is a set of pod label keys to select which pods will
               be taken into consideration. The keys are used to lookup values from the
               incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
               to select the group of existing pods which pods will be taken into consideration
               for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
               pod labels will be ignored. The default value is empty.
               The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
               Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
               This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] namespaces: namespaces specifies a static list of namespace names that the term applies to.
               The term is applied to the union of the namespaces listed in this field
               and the ones selected by namespaceSelector.
               null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        :param pulumi.Input[str] topology_key: This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
               the labelSelector in the specified namespaces, where co-located is defined as running on a node
               whose value of the label with key topologyKey matches that of any node on which any of the
               selected pods is running.
               Empty topologyKey is not allowed.
        """
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if match_label_keys is not None:
            pulumi.set(__self__, "match_label_keys", match_label_keys)
        if mismatch_label_keys is not None:
            pulumi.set(__self__, "mismatch_label_keys", mismatch_label_keys)
        if namespace_selector is not None:
            pulumi.set(__self__, "namespace_selector", namespace_selector)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)
        if topology_key is not None:
            pulumi.set(__self__, "topology_key", topology_key)

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(
        self,
    ) -> Optional[
        pulumi.Input[
            "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs"
        ]
    ]:
        return pulumi.get(self, "label_selector")

    @label_selector.setter
    def label_selector(
        self,
        value: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs"
            ]
        ],
    ):
        pulumi.set(self, "label_selector", value)

    @property
    @pulumi.getter(name="matchLabelKeys")
    def match_label_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        MatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both matchLabelKeys and labelSelector.
        Also, matchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        return pulumi.get(self, "match_label_keys")

    @match_label_keys.setter
    def match_label_keys(
        self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]
    ):
        pulumi.set(self, "match_label_keys", value)

    @property
    @pulumi.getter(name="mismatchLabelKeys")
    def mismatch_label_keys(
        self,
    ) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        MismatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
        Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        return pulumi.get(self, "mismatch_label_keys")

    @mismatch_label_keys.setter
    def mismatch_label_keys(
        self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]
    ):
        pulumi.set(self, "mismatch_label_keys", value)

    @property
    @pulumi.getter(name="namespaceSelector")
    def namespace_selector(
        self,
    ) -> Optional[
        pulumi.Input[
            "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs"
        ]
    ]:
        return pulumi.get(self, "namespace_selector")

    @namespace_selector.setter
    def namespace_selector(
        self,
        value: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs"
            ]
        ],
    ):
        pulumi.set(self, "namespace_selector", value)

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        namespaces specifies a static list of namespace names that the term applies to.
        The term is applied to the union of the namespaces listed in this field
        and the ones selected by namespaceSelector.
        null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        """
        return pulumi.get(self, "namespaces")

    @namespaces.setter
    def namespaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "namespaces", value)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> Optional[pulumi.Input[str]]:
        """
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
        the labelSelector in the specified namespaces, where co-located is defined as running on a node
        whose value of the label with key topologyKey matches that of any node on which any of the
        selected pods is running.
        Empty topologyKey is not allowed.
        """
        return pulumi.get(self, "topology_key")

    @topology_key.setter
    def topology_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topology_key", value)


if not MYPY:

    class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityArgsDict(
        TypedDict
    ):
        """
        Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
        """

        preferred_during_scheduling_ignored_during_execution: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgsDict"
                    ]
                ]
            ]
        ]
        """
        The scheduler will prefer to schedule pods to nodes that satisfy
        the anti-affinity expressions specified by this field, but it may choose
        a node that violates one or more of the expressions. The node that is
        most preferred is the one with the greatest sum of weights, i.e.
        for each node that meets all of the scheduling requirements (resource
        request, requiredDuringScheduling anti-affinity expressions, etc.),
        compute a sum by iterating through the elements of this field and adding
        "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
        node(s) with the highest sum are the most preferred.
        """
        required_during_scheduling_ignored_during_execution: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgsDict"
                    ]
                ]
            ]
        ]
        """
        If the anti-affinity requirements specified by this field are not met at
        scheduling time, the pod will not be scheduled onto the node.
        If the anti-affinity requirements specified by this field cease to be met
        at some point during pod execution (e.g. due to a pod label update), the
        system may or may not try to eventually evict the pod from its node.
        When there are multiple elements, the lists of nodes corresponding to each
        podAffinityTerm are intersected, i.e. all terms must be satisfied.
        """

elif False:
    ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityArgs:
    def __init__(
        __self__,
        *,
        preferred_during_scheduling_ignored_during_execution: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs"
                    ]
                ]
            ]
        ] = None,
        required_during_scheduling_ignored_during_execution: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs"
                    ]
                ]
            ]
        ] = None
    ):
        """
        Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
        :param pulumi.Input[Sequence[pulumi.Input['ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs']]] preferred_during_scheduling_ignored_during_execution: The scheduler will prefer to schedule pods to nodes that satisfy
               the anti-affinity expressions specified by this field, but it may choose
               a node that violates one or more of the expressions. The node that is
               most preferred is the one with the greatest sum of weights, i.e.
               for each node that meets all of the scheduling requirements (resource
               request, requiredDuringScheduling anti-affinity expressions, etc.),
               compute a sum by iterating through the elements of this field and adding
               "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
               node(s) with the highest sum are the most preferred.
        :param pulumi.Input[Sequence[pulumi.Input['ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs']]] required_during_scheduling_ignored_during_execution: If the anti-affinity requirements specified by this field are not met at
               scheduling time, the pod will not be scheduled onto the node.
               If the anti-affinity requirements specified by this field cease to be met
               at some point during pod execution (e.g. due to a pod label update), the
               system may or may not try to eventually evict the pod from its node.
               When there are multiple elements, the lists of nodes corresponding to each
               podAffinityTerm are intersected, i.e. all terms must be satisfied.
        """
        if preferred_during_scheduling_ignored_during_execution is not None:
            pulumi.set(
                __self__,
                "preferred_during_scheduling_ignored_during_execution",
                preferred_during_scheduling_ignored_during_execution,
            )
        if required_during_scheduling_ignored_during_execution is not None:
            pulumi.set(
                __self__,
                "required_during_scheduling_ignored_during_execution",
                required_during_scheduling_ignored_during_execution,
            )

    @property
    @pulumi.getter(name="preferredDuringSchedulingIgnoredDuringExecution")
    def preferred_during_scheduling_ignored_during_execution(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs"
                ]
            ]
        ]
    ]:
        """
        The scheduler will prefer to schedule pods to nodes that satisfy
        the anti-affinity expressions specified by this field, but it may choose
        a node that violates one or more of the expressions. The node that is
        most preferred is the one with the greatest sum of weights, i.e.
        for each node that meets all of the scheduling requirements (resource
        request, requiredDuringScheduling anti-affinity expressions, etc.),
        compute a sum by iterating through the elements of this field and adding
        "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
        node(s) with the highest sum are the most preferred.
        """
        return pulumi.get(self, "preferred_during_scheduling_ignored_during_execution")

    @preferred_during_scheduling_ignored_during_execution.setter
    def preferred_during_scheduling_ignored_during_execution(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "preferred_during_scheduling_ignored_during_execution", value)

    @property
    @pulumi.getter(name="requiredDuringSchedulingIgnoredDuringExecution")
    def required_during_scheduling_ignored_during_execution(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs"
                ]
            ]
        ]
    ]:
        """
        If the anti-affinity requirements specified by this field are not met at
        scheduling time, the pod will not be scheduled onto the node.
        If the anti-affinity requirements specified by this field cease to be met
        at some point during pod execution (e.g. due to a pod label update), the
        system may or may not try to eventually evict the pod from its node.
        When there are multiple elements, the lists of nodes corresponding to each
        podAffinityTerm are intersected, i.e. all terms must be satisfied.
        """
        return pulumi.get(self, "required_during_scheduling_ignored_during_execution")

    @required_during_scheduling_ignored_during_execution.setter
    def required_during_scheduling_ignored_during_execution(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "required_during_scheduling_ignored_during_execution", value)


if not MYPY:

    class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityArgsDict(
        TypedDict
    ):
        """
        If specified, the pod's scheduling constraints
        """

        node_affinity: NotRequired[
            pulumi.Input[
                "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityArgsDict"
            ]
        ]
        pod_affinity: NotRequired[
            pulumi.Input[
                "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityArgsDict"
            ]
        ]
        pod_anti_affinity: NotRequired[
            pulumi.Input[
                "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityArgsDict"
            ]
        ]

elif False:
    ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityArgs:
    def __init__(
        __self__,
        *,
        node_affinity: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityArgs"
            ]
        ] = None,
        pod_affinity: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityArgs"
            ]
        ] = None,
        pod_anti_affinity: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityArgs"
            ]
        ] = None
    ):
        """
        If specified, the pod's scheduling constraints
        """
        if node_affinity is not None:
            pulumi.set(__self__, "node_affinity", node_affinity)
        if pod_affinity is not None:
            pulumi.set(__self__, "pod_affinity", pod_affinity)
        if pod_anti_affinity is not None:
            pulumi.set(__self__, "pod_anti_affinity", pod_anti_affinity)

    @property
    @pulumi.getter(name="nodeAffinity")
    def node_affinity(
        self,
    ) -> Optional[
        pulumi.Input[
            "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityArgs"
        ]
    ]:
        return pulumi.get(self, "node_affinity")

    @node_affinity.setter
    def node_affinity(
        self,
        value: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityArgs"
            ]
        ],
    ):
        pulumi.set(self, "node_affinity", value)

    @property
    @pulumi.getter(name="podAffinity")
    def pod_affinity(
        self,
    ) -> Optional[
        pulumi.Input[
            "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityArgs"
        ]
    ]:
        return pulumi.get(self, "pod_affinity")

    @pod_affinity.setter
    def pod_affinity(
        self,
        value: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityArgs"
            ]
        ],
    ):
        pulumi.set(self, "pod_affinity", value)

    @property
    @pulumi.getter(name="podAntiAffinity")
    def pod_anti_affinity(
        self,
    ) -> Optional[
        pulumi.Input[
            "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityArgs"
        ]
    ]:
        return pulumi.get(self, "pod_anti_affinity")

    @pod_anti_affinity.setter
    def pod_anti_affinity(
        self,
        value: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityArgs"
            ]
        ],
    ):
        pulumi.set(self, "pod_anti_affinity", value)


if not MYPY:

    class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecImagePullSecretsPatchArgsDict(
        TypedDict
    ):
        """
        LocalObjectReference contains enough information to let you locate the
        referenced object inside the same namespace.
        """

        name: NotRequired[pulumi.Input[str]]
        """
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """

elif False:
    ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecImagePullSecretsPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecImagePullSecretsPatchArgs:
    def __init__(__self__, *, name: Optional[pulumi.Input[str]] = None):
        """
        LocalObjectReference contains enough information to let you locate the
        referenced object inside the same namespace.
        :param pulumi.Input[str] name: Name of the referent.
               This field is effectively required, but due to backwards compatibility is
               allowed to be empty. Instances of this type with an empty value here are
               almost certainly wrong.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:

    class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecImagePullSecretsArgsDict(
        TypedDict
    ):
        """
        LocalObjectReference contains enough information to let you locate the
        referenced object inside the same namespace.
        """

        name: NotRequired[pulumi.Input[str]]
        """
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """

elif False:
    ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecImagePullSecretsArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecImagePullSecretsArgs:
    def __init__(__self__, *, name: Optional[pulumi.Input[str]] = None):
        """
        LocalObjectReference contains enough information to let you locate the
        referenced object inside the same namespace.
        :param pulumi.Input[str] name: Name of the referent.
               This field is effectively required, but due to backwards compatibility is
               allowed to be empty. Instances of this type with an empty value here are
               almost certainly wrong.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:

    class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecPatchArgsDict(
        TypedDict
    ):
        """
        PodSpec defines overrides for the HTTP01 challenge solver pod.
        Check ACMEChallengeSolverHTTP01IngressPodSpec to find out currently supported fields.
        All other fields will be ignored.
        """

        affinity: NotRequired[
            pulumi.Input[
                "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPatchArgsDict"
            ]
        ]
        image_pull_secrets: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecImagePullSecretsPatchArgsDict"
                    ]
                ]
            ]
        ]
        """
        If specified, the pod's imagePullSecrets
        """
        node_selector: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        NodeSelector is a selector which must be true for the pod to fit on a node.
        Selector which must match a node's labels for the pod to be scheduled on that node.
        More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
        """
        priority_class_name: NotRequired[pulumi.Input[str]]
        """
        If specified, the pod's priorityClassName.
        """
        security_context: NotRequired[
            pulumi.Input[
                "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextPatchArgsDict"
            ]
        ]
        service_account_name: NotRequired[pulumi.Input[str]]
        """
        If specified, the pod's service account
        """
        tolerations: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecTolerationsPatchArgsDict"
                    ]
                ]
            ]
        ]
        """
        If specified, the pod's tolerations.
        """

elif False:
    ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecPatchArgsDict: TypeAlias = (
        Mapping[str, Any]
    )


@pulumi.input_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecPatchArgs:
    def __init__(
        __self__,
        *,
        affinity: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPatchArgs"
            ]
        ] = None,
        image_pull_secrets: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecImagePullSecretsPatchArgs"
                    ]
                ]
            ]
        ] = None,
        node_selector: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
        priority_class_name: Optional[pulumi.Input[str]] = None,
        security_context: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextPatchArgs"
            ]
        ] = None,
        service_account_name: Optional[pulumi.Input[str]] = None,
        tolerations: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecTolerationsPatchArgs"
                    ]
                ]
            ]
        ] = None
    ):
        """
        PodSpec defines overrides for the HTTP01 challenge solver pod.
        Check ACMEChallengeSolverHTTP01IngressPodSpec to find out currently supported fields.
        All other fields will be ignored.
        :param pulumi.Input[Sequence[pulumi.Input['ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecImagePullSecretsPatchArgs']]] image_pull_secrets: If specified, the pod's imagePullSecrets
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] node_selector: NodeSelector is a selector which must be true for the pod to fit on a node.
               Selector which must match a node's labels for the pod to be scheduled on that node.
               More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
        :param pulumi.Input[str] priority_class_name: If specified, the pod's priorityClassName.
        :param pulumi.Input[str] service_account_name: If specified, the pod's service account
        :param pulumi.Input[Sequence[pulumi.Input['ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecTolerationsPatchArgs']]] tolerations: If specified, the pod's tolerations.
        """
        if affinity is not None:
            pulumi.set(__self__, "affinity", affinity)
        if image_pull_secrets is not None:
            pulumi.set(__self__, "image_pull_secrets", image_pull_secrets)
        if node_selector is not None:
            pulumi.set(__self__, "node_selector", node_selector)
        if priority_class_name is not None:
            pulumi.set(__self__, "priority_class_name", priority_class_name)
        if security_context is not None:
            pulumi.set(__self__, "security_context", security_context)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tolerations is not None:
            pulumi.set(__self__, "tolerations", tolerations)

    @property
    @pulumi.getter
    def affinity(
        self,
    ) -> Optional[
        pulumi.Input[
            "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPatchArgs"
        ]
    ]:
        return pulumi.get(self, "affinity")

    @affinity.setter
    def affinity(
        self,
        value: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "affinity", value)

    @property
    @pulumi.getter(name="imagePullSecrets")
    def image_pull_secrets(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecImagePullSecretsPatchArgs"
                ]
            ]
        ]
    ]:
        """
        If specified, the pod's imagePullSecrets
        """
        return pulumi.get(self, "image_pull_secrets")

    @image_pull_secrets.setter
    def image_pull_secrets(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecImagePullSecretsPatchArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "image_pull_secrets", value)

    @property
    @pulumi.getter(name="nodeSelector")
    def node_selector(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        NodeSelector is a selector which must be true for the pod to fit on a node.
        Selector which must match a node's labels for the pod to be scheduled on that node.
        More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
        """
        return pulumi.get(self, "node_selector")

    @node_selector.setter
    def node_selector(
        self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
    ):
        pulumi.set(self, "node_selector", value)

    @property
    @pulumi.getter(name="priorityClassName")
    def priority_class_name(self) -> Optional[pulumi.Input[str]]:
        """
        If specified, the pod's priorityClassName.
        """
        return pulumi.get(self, "priority_class_name")

    @priority_class_name.setter
    def priority_class_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "priority_class_name", value)

    @property
    @pulumi.getter(name="securityContext")
    def security_context(
        self,
    ) -> Optional[
        pulumi.Input[
            "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextPatchArgs"
        ]
    ]:
        return pulumi.get(self, "security_context")

    @security_context.setter
    def security_context(
        self,
        value: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextPatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "security_context", value)

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[pulumi.Input[str]]:
        """
        If specified, the pod's service account
        """
        return pulumi.get(self, "service_account_name")

    @service_account_name.setter
    def service_account_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account_name", value)

    @property
    @pulumi.getter
    def tolerations(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecTolerationsPatchArgs"
                ]
            ]
        ]
    ]:
        """
        If specified, the pod's tolerations.
        """
        return pulumi.get(self, "tolerations")

    @tolerations.setter
    def tolerations(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecTolerationsPatchArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "tolerations", value)


if not MYPY:

    class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextPatchArgsDict(
        TypedDict
    ):
        """
        If specified, the pod's security context
        """

        fs_group: NotRequired[pulumi.Input[int]]
        """
        A special supplemental group that applies to all containers in a pod.
        Some volume types allow the Kubelet to change the ownership of that volume
        to be owned by the pod:

        1. The owning GID will be the FSGroup
        2. The setgid bit is set (new files created in the volume will be owned by FSGroup)
        3. The permission bits are OR'd with rw-rw----

        If unset, the Kubelet will not modify the ownership and permissions of any volume.
        Note that this field cannot be set when spec.os.name is windows.
        """
        fs_group_change_policy: NotRequired[pulumi.Input[str]]
        """
        fsGroupChangePolicy defines behavior of changing ownership and permission of the volume
        before being exposed inside Pod. This field will only apply to
        volume types which support fsGroup based ownership(and permissions).
        It will have no effect on ephemeral volume types such as: secret, configmaps
        and emptydir.
        Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used.
        Note that this field cannot be set when spec.os.name is windows.
        """
        run_as_group: NotRequired[pulumi.Input[int]]
        """
        The GID to run the entrypoint of the container process.
        Uses runtime default if unset.
        May also be set in SecurityContext.  If set in both SecurityContext and
        PodSecurityContext, the value specified in SecurityContext takes precedence
        for that container.
        Note that this field cannot be set when spec.os.name is windows.
        """
        run_as_non_root: NotRequired[pulumi.Input[bool]]
        """
        Indicates that the container must run as a non-root user.
        If true, the Kubelet will validate the image at runtime to ensure that it
        does not run as UID 0 (root) and fail to start the container if it does.
        If unset or false, no such validation will be performed.
        May also be set in SecurityContext.  If set in both SecurityContext and
        PodSecurityContext, the value specified in SecurityContext takes precedence.
        """
        run_as_user: NotRequired[pulumi.Input[int]]
        """
        The UID to run the entrypoint of the container process.
        Defaults to user specified in image metadata if unspecified.
        May also be set in SecurityContext.  If set in both SecurityContext and
        PodSecurityContext, the value specified in SecurityContext takes precedence
        for that container.
        Note that this field cannot be set when spec.os.name is windows.
        """
        se_linux_options: NotRequired[
            pulumi.Input[
                "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSeLinuxOptionsPatchArgsDict"
            ]
        ]
        seccomp_profile: NotRequired[
            pulumi.Input[
                "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSeccompProfilePatchArgsDict"
            ]
        ]
        supplemental_groups: NotRequired[pulumi.Input[Sequence[pulumi.Input[int]]]]
        """
        A list of groups applied to the first process run in each container, in addition
        to the container's primary GID, the fsGroup (if specified), and group memberships
        defined in the container image for the uid of the container process. If unspecified,
        no additional groups are added to any container. Note that group memberships
        defined in the container image for the uid of the container process are still effective,
        even if they are not included in this list.
        Note that this field cannot be set when spec.os.name is windows.
        """
        sysctls: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSysctlsPatchArgsDict"
                    ]
                ]
            ]
        ]
        """
        Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported
        sysctls (by the container runtime) might fail to launch.
        Note that this field cannot be set when spec.os.name is windows.
        """

elif False:
    ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextPatchArgs:
    def __init__(
        __self__,
        *,
        fs_group: Optional[pulumi.Input[int]] = None,
        fs_group_change_policy: Optional[pulumi.Input[str]] = None,
        run_as_group: Optional[pulumi.Input[int]] = None,
        run_as_non_root: Optional[pulumi.Input[bool]] = None,
        run_as_user: Optional[pulumi.Input[int]] = None,
        se_linux_options: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSeLinuxOptionsPatchArgs"
            ]
        ] = None,
        seccomp_profile: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSeccompProfilePatchArgs"
            ]
        ] = None,
        supplemental_groups: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
        sysctls: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSysctlsPatchArgs"
                    ]
                ]
            ]
        ] = None
    ):
        """
        If specified, the pod's security context
        :param pulumi.Input[int] fs_group: A special supplemental group that applies to all containers in a pod.
               Some volume types allow the Kubelet to change the ownership of that volume
               to be owned by the pod:

               1. The owning GID will be the FSGroup
               2. The setgid bit is set (new files created in the volume will be owned by FSGroup)
               3. The permission bits are OR'd with rw-rw----

               If unset, the Kubelet will not modify the ownership and permissions of any volume.
               Note that this field cannot be set when spec.os.name is windows.
        :param pulumi.Input[str] fs_group_change_policy: fsGroupChangePolicy defines behavior of changing ownership and permission of the volume
               before being exposed inside Pod. This field will only apply to
               volume types which support fsGroup based ownership(and permissions).
               It will have no effect on ephemeral volume types such as: secret, configmaps
               and emptydir.
               Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used.
               Note that this field cannot be set when spec.os.name is windows.
        :param pulumi.Input[int] run_as_group: The GID to run the entrypoint of the container process.
               Uses runtime default if unset.
               May also be set in SecurityContext.  If set in both SecurityContext and
               PodSecurityContext, the value specified in SecurityContext takes precedence
               for that container.
               Note that this field cannot be set when spec.os.name is windows.
        :param pulumi.Input[bool] run_as_non_root: Indicates that the container must run as a non-root user.
               If true, the Kubelet will validate the image at runtime to ensure that it
               does not run as UID 0 (root) and fail to start the container if it does.
               If unset or false, no such validation will be performed.
               May also be set in SecurityContext.  If set in both SecurityContext and
               PodSecurityContext, the value specified in SecurityContext takes precedence.
        :param pulumi.Input[int] run_as_user: The UID to run the entrypoint of the container process.
               Defaults to user specified in image metadata if unspecified.
               May also be set in SecurityContext.  If set in both SecurityContext and
               PodSecurityContext, the value specified in SecurityContext takes precedence
               for that container.
               Note that this field cannot be set when spec.os.name is windows.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] supplemental_groups: A list of groups applied to the first process run in each container, in addition
               to the container's primary GID, the fsGroup (if specified), and group memberships
               defined in the container image for the uid of the container process. If unspecified,
               no additional groups are added to any container. Note that group memberships
               defined in the container image for the uid of the container process are still effective,
               even if they are not included in this list.
               Note that this field cannot be set when spec.os.name is windows.
        :param pulumi.Input[Sequence[pulumi.Input['ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSysctlsPatchArgs']]] sysctls: Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported
               sysctls (by the container runtime) might fail to launch.
               Note that this field cannot be set when spec.os.name is windows.
        """
        if fs_group is not None:
            pulumi.set(__self__, "fs_group", fs_group)
        if fs_group_change_policy is not None:
            pulumi.set(__self__, "fs_group_change_policy", fs_group_change_policy)
        if run_as_group is not None:
            pulumi.set(__self__, "run_as_group", run_as_group)
        if run_as_non_root is not None:
            pulumi.set(__self__, "run_as_non_root", run_as_non_root)
        if run_as_user is not None:
            pulumi.set(__self__, "run_as_user", run_as_user)
        if se_linux_options is not None:
            pulumi.set(__self__, "se_linux_options", se_linux_options)
        if seccomp_profile is not None:
            pulumi.set(__self__, "seccomp_profile", seccomp_profile)
        if supplemental_groups is not None:
            pulumi.set(__self__, "supplemental_groups", supplemental_groups)
        if sysctls is not None:
            pulumi.set(__self__, "sysctls", sysctls)

    @property
    @pulumi.getter(name="fsGroup")
    def fs_group(self) -> Optional[pulumi.Input[int]]:
        """
        A special supplemental group that applies to all containers in a pod.
        Some volume types allow the Kubelet to change the ownership of that volume
        to be owned by the pod:

        1. The owning GID will be the FSGroup
        2. The setgid bit is set (new files created in the volume will be owned by FSGroup)
        3. The permission bits are OR'd with rw-rw----

        If unset, the Kubelet will not modify the ownership and permissions of any volume.
        Note that this field cannot be set when spec.os.name is windows.
        """
        return pulumi.get(self, "fs_group")

    @fs_group.setter
    def fs_group(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fs_group", value)

    @property
    @pulumi.getter(name="fsGroupChangePolicy")
    def fs_group_change_policy(self) -> Optional[pulumi.Input[str]]:
        """
        fsGroupChangePolicy defines behavior of changing ownership and permission of the volume
        before being exposed inside Pod. This field will only apply to
        volume types which support fsGroup based ownership(and permissions).
        It will have no effect on ephemeral volume types such as: secret, configmaps
        and emptydir.
        Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used.
        Note that this field cannot be set when spec.os.name is windows.
        """
        return pulumi.get(self, "fs_group_change_policy")

    @fs_group_change_policy.setter
    def fs_group_change_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fs_group_change_policy", value)

    @property
    @pulumi.getter(name="runAsGroup")
    def run_as_group(self) -> Optional[pulumi.Input[int]]:
        """
        The GID to run the entrypoint of the container process.
        Uses runtime default if unset.
        May also be set in SecurityContext.  If set in both SecurityContext and
        PodSecurityContext, the value specified in SecurityContext takes precedence
        for that container.
        Note that this field cannot be set when spec.os.name is windows.
        """
        return pulumi.get(self, "run_as_group")

    @run_as_group.setter
    def run_as_group(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "run_as_group", value)

    @property
    @pulumi.getter(name="runAsNonRoot")
    def run_as_non_root(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates that the container must run as a non-root user.
        If true, the Kubelet will validate the image at runtime to ensure that it
        does not run as UID 0 (root) and fail to start the container if it does.
        If unset or false, no such validation will be performed.
        May also be set in SecurityContext.  If set in both SecurityContext and
        PodSecurityContext, the value specified in SecurityContext takes precedence.
        """
        return pulumi.get(self, "run_as_non_root")

    @run_as_non_root.setter
    def run_as_non_root(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "run_as_non_root", value)

    @property
    @pulumi.getter(name="runAsUser")
    def run_as_user(self) -> Optional[pulumi.Input[int]]:
        """
        The UID to run the entrypoint of the container process.
        Defaults to user specified in image metadata if unspecified.
        May also be set in SecurityContext.  If set in both SecurityContext and
        PodSecurityContext, the value specified in SecurityContext takes precedence
        for that container.
        Note that this field cannot be set when spec.os.name is windows.
        """
        return pulumi.get(self, "run_as_user")

    @run_as_user.setter
    def run_as_user(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "run_as_user", value)

    @property
    @pulumi.getter(name="seLinuxOptions")
    def se_linux_options(
        self,
    ) -> Optional[
        pulumi.Input[
            "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSeLinuxOptionsPatchArgs"
        ]
    ]:
        return pulumi.get(self, "se_linux_options")

    @se_linux_options.setter
    def se_linux_options(
        self,
        value: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSeLinuxOptionsPatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "se_linux_options", value)

    @property
    @pulumi.getter(name="seccompProfile")
    def seccomp_profile(
        self,
    ) -> Optional[
        pulumi.Input[
            "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSeccompProfilePatchArgs"
        ]
    ]:
        return pulumi.get(self, "seccomp_profile")

    @seccomp_profile.setter
    def seccomp_profile(
        self,
        value: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSeccompProfilePatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "seccomp_profile", value)

    @property
    @pulumi.getter(name="supplementalGroups")
    def supplemental_groups(
        self,
    ) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        A list of groups applied to the first process run in each container, in addition
        to the container's primary GID, the fsGroup (if specified), and group memberships
        defined in the container image for the uid of the container process. If unspecified,
        no additional groups are added to any container. Note that group memberships
        defined in the container image for the uid of the container process are still effective,
        even if they are not included in this list.
        Note that this field cannot be set when spec.os.name is windows.
        """
        return pulumi.get(self, "supplemental_groups")

    @supplemental_groups.setter
    def supplemental_groups(
        self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]
    ):
        pulumi.set(self, "supplemental_groups", value)

    @property
    @pulumi.getter
    def sysctls(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSysctlsPatchArgs"
                ]
            ]
        ]
    ]:
        """
        Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported
        sysctls (by the container runtime) might fail to launch.
        Note that this field cannot be set when spec.os.name is windows.
        """
        return pulumi.get(self, "sysctls")

    @sysctls.setter
    def sysctls(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSysctlsPatchArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "sysctls", value)


if not MYPY:

    class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSeLinuxOptionsPatchArgsDict(
        TypedDict
    ):
        """
        The SELinux context to be applied to all containers.
        If unspecified, the container runtime will allocate a random SELinux context for each
        container.  May also be set in SecurityContext.  If set in
        both SecurityContext and PodSecurityContext, the value specified in SecurityContext
        takes precedence for that container.
        Note that this field cannot be set when spec.os.name is windows.
        """

        level: NotRequired[pulumi.Input[str]]
        """
        Level is SELinux level label that applies to the container.
        """
        role: NotRequired[pulumi.Input[str]]
        """
        Role is a SELinux role label that applies to the container.
        """
        type: NotRequired[pulumi.Input[str]]
        """
        Type is a SELinux type label that applies to the container.
        """
        user: NotRequired[pulumi.Input[str]]
        """
        User is a SELinux user label that applies to the container.
        """

elif False:
    ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSeLinuxOptionsPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSeLinuxOptionsPatchArgs:
    def __init__(
        __self__,
        *,
        level: Optional[pulumi.Input[str]] = None,
        role: Optional[pulumi.Input[str]] = None,
        type: Optional[pulumi.Input[str]] = None,
        user: Optional[pulumi.Input[str]] = None
    ):
        """
        The SELinux context to be applied to all containers.
        If unspecified, the container runtime will allocate a random SELinux context for each
        container.  May also be set in SecurityContext.  If set in
        both SecurityContext and PodSecurityContext, the value specified in SecurityContext
        takes precedence for that container.
        Note that this field cannot be set when spec.os.name is windows.
        :param pulumi.Input[str] level: Level is SELinux level label that applies to the container.
        :param pulumi.Input[str] role: Role is a SELinux role label that applies to the container.
        :param pulumi.Input[str] type: Type is a SELinux type label that applies to the container.
        :param pulumi.Input[str] user: User is a SELinux user label that applies to the container.
        """
        if level is not None:
            pulumi.set(__self__, "level", level)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        """
        Level is SELinux level label that applies to the container.
        """
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input[str]]:
        """
        Role is a SELinux role label that applies to the container.
        """
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Type is a SELinux type label that applies to the container.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def user(self) -> Optional[pulumi.Input[str]]:
        """
        User is a SELinux user label that applies to the container.
        """
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user", value)


if not MYPY:

    class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSeLinuxOptionsArgsDict(
        TypedDict
    ):
        """
        The SELinux context to be applied to all containers.
        If unspecified, the container runtime will allocate a random SELinux context for each
        container.  May also be set in SecurityContext.  If set in
        both SecurityContext and PodSecurityContext, the value specified in SecurityContext
        takes precedence for that container.
        Note that this field cannot be set when spec.os.name is windows.
        """

        level: NotRequired[pulumi.Input[str]]
        """
        Level is SELinux level label that applies to the container.
        """
        role: NotRequired[pulumi.Input[str]]
        """
        Role is a SELinux role label that applies to the container.
        """
        type: NotRequired[pulumi.Input[str]]
        """
        Type is a SELinux type label that applies to the container.
        """
        user: NotRequired[pulumi.Input[str]]
        """
        User is a SELinux user label that applies to the container.
        """

elif False:
    ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSeLinuxOptionsArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSeLinuxOptionsArgs:
    def __init__(
        __self__,
        *,
        level: Optional[pulumi.Input[str]] = None,
        role: Optional[pulumi.Input[str]] = None,
        type: Optional[pulumi.Input[str]] = None,
        user: Optional[pulumi.Input[str]] = None
    ):
        """
        The SELinux context to be applied to all containers.
        If unspecified, the container runtime will allocate a random SELinux context for each
        container.  May also be set in SecurityContext.  If set in
        both SecurityContext and PodSecurityContext, the value specified in SecurityContext
        takes precedence for that container.
        Note that this field cannot be set when spec.os.name is windows.
        :param pulumi.Input[str] level: Level is SELinux level label that applies to the container.
        :param pulumi.Input[str] role: Role is a SELinux role label that applies to the container.
        :param pulumi.Input[str] type: Type is a SELinux type label that applies to the container.
        :param pulumi.Input[str] user: User is a SELinux user label that applies to the container.
        """
        if level is not None:
            pulumi.set(__self__, "level", level)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        """
        Level is SELinux level label that applies to the container.
        """
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input[str]]:
        """
        Role is a SELinux role label that applies to the container.
        """
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Type is a SELinux type label that applies to the container.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def user(self) -> Optional[pulumi.Input[str]]:
        """
        User is a SELinux user label that applies to the container.
        """
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user", value)


if not MYPY:

    class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSeccompProfilePatchArgsDict(
        TypedDict
    ):
        """
        The seccomp options to use by the containers in this pod.
        Note that this field cannot be set when spec.os.name is windows.
        """

        localhost_profile: NotRequired[pulumi.Input[str]]
        """
        localhostProfile indicates a profile defined in a file on the node should be used.
        The profile must be preconfigured on the node to work.
        Must be a descending path, relative to the kubelet's configured seccomp profile location.
        Must be set if type is "Localhost". Must NOT be set for any other type.
        """
        type: NotRequired[pulumi.Input[str]]
        """
        type indicates which kind of seccomp profile will be applied.
        Valid options are:

        Localhost - a profile defined in a file on the node should be used.
        RuntimeDefault - the container runtime default profile should be used.
        Unconfined - no profile should be applied.
        """

elif False:
    ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSeccompProfilePatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSeccompProfilePatchArgs:
    def __init__(
        __self__,
        *,
        localhost_profile: Optional[pulumi.Input[str]] = None,
        type: Optional[pulumi.Input[str]] = None
    ):
        """
        The seccomp options to use by the containers in this pod.
        Note that this field cannot be set when spec.os.name is windows.
        :param pulumi.Input[str] localhost_profile: localhostProfile indicates a profile defined in a file on the node should be used.
               The profile must be preconfigured on the node to work.
               Must be a descending path, relative to the kubelet's configured seccomp profile location.
               Must be set if type is "Localhost". Must NOT be set for any other type.
        :param pulumi.Input[str] type: type indicates which kind of seccomp profile will be applied.
               Valid options are:

               Localhost - a profile defined in a file on the node should be used.
               RuntimeDefault - the container runtime default profile should be used.
               Unconfined - no profile should be applied.
        """
        if localhost_profile is not None:
            pulumi.set(__self__, "localhost_profile", localhost_profile)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="localhostProfile")
    def localhost_profile(self) -> Optional[pulumi.Input[str]]:
        """
        localhostProfile indicates a profile defined in a file on the node should be used.
        The profile must be preconfigured on the node to work.
        Must be a descending path, relative to the kubelet's configured seccomp profile location.
        Must be set if type is "Localhost". Must NOT be set for any other type.
        """
        return pulumi.get(self, "localhost_profile")

    @localhost_profile.setter
    def localhost_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "localhost_profile", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        type indicates which kind of seccomp profile will be applied.
        Valid options are:

        Localhost - a profile defined in a file on the node should be used.
        RuntimeDefault - the container runtime default profile should be used.
        Unconfined - no profile should be applied.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


if not MYPY:

    class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSeccompProfileArgsDict(
        TypedDict
    ):
        """
        The seccomp options to use by the containers in this pod.
        Note that this field cannot be set when spec.os.name is windows.
        """

        localhost_profile: NotRequired[pulumi.Input[str]]
        """
        localhostProfile indicates a profile defined in a file on the node should be used.
        The profile must be preconfigured on the node to work.
        Must be a descending path, relative to the kubelet's configured seccomp profile location.
        Must be set if type is "Localhost". Must NOT be set for any other type.
        """
        type: NotRequired[pulumi.Input[str]]
        """
        type indicates which kind of seccomp profile will be applied.
        Valid options are:

        Localhost - a profile defined in a file on the node should be used.
        RuntimeDefault - the container runtime default profile should be used.
        Unconfined - no profile should be applied.
        """

elif False:
    ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSeccompProfileArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSeccompProfileArgs:
    def __init__(
        __self__,
        *,
        localhost_profile: Optional[pulumi.Input[str]] = None,
        type: Optional[pulumi.Input[str]] = None
    ):
        """
        The seccomp options to use by the containers in this pod.
        Note that this field cannot be set when spec.os.name is windows.
        :param pulumi.Input[str] localhost_profile: localhostProfile indicates a profile defined in a file on the node should be used.
               The profile must be preconfigured on the node to work.
               Must be a descending path, relative to the kubelet's configured seccomp profile location.
               Must be set if type is "Localhost". Must NOT be set for any other type.
        :param pulumi.Input[str] type: type indicates which kind of seccomp profile will be applied.
               Valid options are:

               Localhost - a profile defined in a file on the node should be used.
               RuntimeDefault - the container runtime default profile should be used.
               Unconfined - no profile should be applied.
        """
        if localhost_profile is not None:
            pulumi.set(__self__, "localhost_profile", localhost_profile)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="localhostProfile")
    def localhost_profile(self) -> Optional[pulumi.Input[str]]:
        """
        localhostProfile indicates a profile defined in a file on the node should be used.
        The profile must be preconfigured on the node to work.
        Must be a descending path, relative to the kubelet's configured seccomp profile location.
        Must be set if type is "Localhost". Must NOT be set for any other type.
        """
        return pulumi.get(self, "localhost_profile")

    @localhost_profile.setter
    def localhost_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "localhost_profile", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        type indicates which kind of seccomp profile will be applied.
        Valid options are:

        Localhost - a profile defined in a file on the node should be used.
        RuntimeDefault - the container runtime default profile should be used.
        Unconfined - no profile should be applied.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


if not MYPY:

    class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSysctlsPatchArgsDict(
        TypedDict
    ):
        """
        Sysctl defines a kernel parameter to be set
        """

        name: NotRequired[pulumi.Input[str]]
        """
        Name of a property to set
        """
        value: NotRequired[pulumi.Input[str]]
        """
        Value of a property to set
        """

elif False:
    ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSysctlsPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSysctlsPatchArgs:
    def __init__(
        __self__,
        *,
        name: Optional[pulumi.Input[str]] = None,
        value: Optional[pulumi.Input[str]] = None
    ):
        """
        Sysctl defines a kernel parameter to be set
        :param pulumi.Input[str] name: Name of a property to set
        :param pulumi.Input[str] value: Value of a property to set
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of a property to set
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Value of a property to set
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:

    class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSysctlsArgsDict(
        TypedDict
    ):
        """
        Sysctl defines a kernel parameter to be set
        """

        name: NotRequired[pulumi.Input[str]]
        """
        Name of a property to set
        """
        value: NotRequired[pulumi.Input[str]]
        """
        Value of a property to set
        """

elif False:
    ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSysctlsArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSysctlsArgs:
    def __init__(
        __self__,
        *,
        name: Optional[pulumi.Input[str]] = None,
        value: Optional[pulumi.Input[str]] = None
    ):
        """
        Sysctl defines a kernel parameter to be set
        :param pulumi.Input[str] name: Name of a property to set
        :param pulumi.Input[str] value: Value of a property to set
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of a property to set
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Value of a property to set
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:

    class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextArgsDict(
        TypedDict
    ):
        """
        If specified, the pod's security context
        """

        fs_group: NotRequired[pulumi.Input[int]]
        """
        A special supplemental group that applies to all containers in a pod.
        Some volume types allow the Kubelet to change the ownership of that volume
        to be owned by the pod:

        1. The owning GID will be the FSGroup
        2. The setgid bit is set (new files created in the volume will be owned by FSGroup)
        3. The permission bits are OR'd with rw-rw----

        If unset, the Kubelet will not modify the ownership and permissions of any volume.
        Note that this field cannot be set when spec.os.name is windows.
        """
        fs_group_change_policy: NotRequired[pulumi.Input[str]]
        """
        fsGroupChangePolicy defines behavior of changing ownership and permission of the volume
        before being exposed inside Pod. This field will only apply to
        volume types which support fsGroup based ownership(and permissions).
        It will have no effect on ephemeral volume types such as: secret, configmaps
        and emptydir.
        Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used.
        Note that this field cannot be set when spec.os.name is windows.
        """
        run_as_group: NotRequired[pulumi.Input[int]]
        """
        The GID to run the entrypoint of the container process.
        Uses runtime default if unset.
        May also be set in SecurityContext.  If set in both SecurityContext and
        PodSecurityContext, the value specified in SecurityContext takes precedence
        for that container.
        Note that this field cannot be set when spec.os.name is windows.
        """
        run_as_non_root: NotRequired[pulumi.Input[bool]]
        """
        Indicates that the container must run as a non-root user.
        If true, the Kubelet will validate the image at runtime to ensure that it
        does not run as UID 0 (root) and fail to start the container if it does.
        If unset or false, no such validation will be performed.
        May also be set in SecurityContext.  If set in both SecurityContext and
        PodSecurityContext, the value specified in SecurityContext takes precedence.
        """
        run_as_user: NotRequired[pulumi.Input[int]]
        """
        The UID to run the entrypoint of the container process.
        Defaults to user specified in image metadata if unspecified.
        May also be set in SecurityContext.  If set in both SecurityContext and
        PodSecurityContext, the value specified in SecurityContext takes precedence
        for that container.
        Note that this field cannot be set when spec.os.name is windows.
        """
        se_linux_options: NotRequired[
            pulumi.Input[
                "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSeLinuxOptionsArgsDict"
            ]
        ]
        seccomp_profile: NotRequired[
            pulumi.Input[
                "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSeccompProfileArgsDict"
            ]
        ]
        supplemental_groups: NotRequired[pulumi.Input[Sequence[pulumi.Input[int]]]]
        """
        A list of groups applied to the first process run in each container, in addition
        to the container's primary GID, the fsGroup (if specified), and group memberships
        defined in the container image for the uid of the container process. If unspecified,
        no additional groups are added to any container. Note that group memberships
        defined in the container image for the uid of the container process are still effective,
        even if they are not included in this list.
        Note that this field cannot be set when spec.os.name is windows.
        """
        sysctls: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSysctlsArgsDict"
                    ]
                ]
            ]
        ]
        """
        Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported
        sysctls (by the container runtime) might fail to launch.
        Note that this field cannot be set when spec.os.name is windows.
        """

elif False:
    ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextArgs:
    def __init__(
        __self__,
        *,
        fs_group: Optional[pulumi.Input[int]] = None,
        fs_group_change_policy: Optional[pulumi.Input[str]] = None,
        run_as_group: Optional[pulumi.Input[int]] = None,
        run_as_non_root: Optional[pulumi.Input[bool]] = None,
        run_as_user: Optional[pulumi.Input[int]] = None,
        se_linux_options: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSeLinuxOptionsArgs"
            ]
        ] = None,
        seccomp_profile: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSeccompProfileArgs"
            ]
        ] = None,
        supplemental_groups: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
        sysctls: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSysctlsArgs"
                    ]
                ]
            ]
        ] = None
    ):
        """
        If specified, the pod's security context
        :param pulumi.Input[int] fs_group: A special supplemental group that applies to all containers in a pod.
               Some volume types allow the Kubelet to change the ownership of that volume
               to be owned by the pod:

               1. The owning GID will be the FSGroup
               2. The setgid bit is set (new files created in the volume will be owned by FSGroup)
               3. The permission bits are OR'd with rw-rw----

               If unset, the Kubelet will not modify the ownership and permissions of any volume.
               Note that this field cannot be set when spec.os.name is windows.
        :param pulumi.Input[str] fs_group_change_policy: fsGroupChangePolicy defines behavior of changing ownership and permission of the volume
               before being exposed inside Pod. This field will only apply to
               volume types which support fsGroup based ownership(and permissions).
               It will have no effect on ephemeral volume types such as: secret, configmaps
               and emptydir.
               Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used.
               Note that this field cannot be set when spec.os.name is windows.
        :param pulumi.Input[int] run_as_group: The GID to run the entrypoint of the container process.
               Uses runtime default if unset.
               May also be set in SecurityContext.  If set in both SecurityContext and
               PodSecurityContext, the value specified in SecurityContext takes precedence
               for that container.
               Note that this field cannot be set when spec.os.name is windows.
        :param pulumi.Input[bool] run_as_non_root: Indicates that the container must run as a non-root user.
               If true, the Kubelet will validate the image at runtime to ensure that it
               does not run as UID 0 (root) and fail to start the container if it does.
               If unset or false, no such validation will be performed.
               May also be set in SecurityContext.  If set in both SecurityContext and
               PodSecurityContext, the value specified in SecurityContext takes precedence.
        :param pulumi.Input[int] run_as_user: The UID to run the entrypoint of the container process.
               Defaults to user specified in image metadata if unspecified.
               May also be set in SecurityContext.  If set in both SecurityContext and
               PodSecurityContext, the value specified in SecurityContext takes precedence
               for that container.
               Note that this field cannot be set when spec.os.name is windows.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] supplemental_groups: A list of groups applied to the first process run in each container, in addition
               to the container's primary GID, the fsGroup (if specified), and group memberships
               defined in the container image for the uid of the container process. If unspecified,
               no additional groups are added to any container. Note that group memberships
               defined in the container image for the uid of the container process are still effective,
               even if they are not included in this list.
               Note that this field cannot be set when spec.os.name is windows.
        :param pulumi.Input[Sequence[pulumi.Input['ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSysctlsArgs']]] sysctls: Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported
               sysctls (by the container runtime) might fail to launch.
               Note that this field cannot be set when spec.os.name is windows.
        """
        if fs_group is not None:
            pulumi.set(__self__, "fs_group", fs_group)
        if fs_group_change_policy is not None:
            pulumi.set(__self__, "fs_group_change_policy", fs_group_change_policy)
        if run_as_group is not None:
            pulumi.set(__self__, "run_as_group", run_as_group)
        if run_as_non_root is not None:
            pulumi.set(__self__, "run_as_non_root", run_as_non_root)
        if run_as_user is not None:
            pulumi.set(__self__, "run_as_user", run_as_user)
        if se_linux_options is not None:
            pulumi.set(__self__, "se_linux_options", se_linux_options)
        if seccomp_profile is not None:
            pulumi.set(__self__, "seccomp_profile", seccomp_profile)
        if supplemental_groups is not None:
            pulumi.set(__self__, "supplemental_groups", supplemental_groups)
        if sysctls is not None:
            pulumi.set(__self__, "sysctls", sysctls)

    @property
    @pulumi.getter(name="fsGroup")
    def fs_group(self) -> Optional[pulumi.Input[int]]:
        """
        A special supplemental group that applies to all containers in a pod.
        Some volume types allow the Kubelet to change the ownership of that volume
        to be owned by the pod:

        1. The owning GID will be the FSGroup
        2. The setgid bit is set (new files created in the volume will be owned by FSGroup)
        3. The permission bits are OR'd with rw-rw----

        If unset, the Kubelet will not modify the ownership and permissions of any volume.
        Note that this field cannot be set when spec.os.name is windows.
        """
        return pulumi.get(self, "fs_group")

    @fs_group.setter
    def fs_group(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fs_group", value)

    @property
    @pulumi.getter(name="fsGroupChangePolicy")
    def fs_group_change_policy(self) -> Optional[pulumi.Input[str]]:
        """
        fsGroupChangePolicy defines behavior of changing ownership and permission of the volume
        before being exposed inside Pod. This field will only apply to
        volume types which support fsGroup based ownership(and permissions).
        It will have no effect on ephemeral volume types such as: secret, configmaps
        and emptydir.
        Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used.
        Note that this field cannot be set when spec.os.name is windows.
        """
        return pulumi.get(self, "fs_group_change_policy")

    @fs_group_change_policy.setter
    def fs_group_change_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fs_group_change_policy", value)

    @property
    @pulumi.getter(name="runAsGroup")
    def run_as_group(self) -> Optional[pulumi.Input[int]]:
        """
        The GID to run the entrypoint of the container process.
        Uses runtime default if unset.
        May also be set in SecurityContext.  If set in both SecurityContext and
        PodSecurityContext, the value specified in SecurityContext takes precedence
        for that container.
        Note that this field cannot be set when spec.os.name is windows.
        """
        return pulumi.get(self, "run_as_group")

    @run_as_group.setter
    def run_as_group(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "run_as_group", value)

    @property
    @pulumi.getter(name="runAsNonRoot")
    def run_as_non_root(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates that the container must run as a non-root user.
        If true, the Kubelet will validate the image at runtime to ensure that it
        does not run as UID 0 (root) and fail to start the container if it does.
        If unset or false, no such validation will be performed.
        May also be set in SecurityContext.  If set in both SecurityContext and
        PodSecurityContext, the value specified in SecurityContext takes precedence.
        """
        return pulumi.get(self, "run_as_non_root")

    @run_as_non_root.setter
    def run_as_non_root(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "run_as_non_root", value)

    @property
    @pulumi.getter(name="runAsUser")
    def run_as_user(self) -> Optional[pulumi.Input[int]]:
        """
        The UID to run the entrypoint of the container process.
        Defaults to user specified in image metadata if unspecified.
        May also be set in SecurityContext.  If set in both SecurityContext and
        PodSecurityContext, the value specified in SecurityContext takes precedence
        for that container.
        Note that this field cannot be set when spec.os.name is windows.
        """
        return pulumi.get(self, "run_as_user")

    @run_as_user.setter
    def run_as_user(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "run_as_user", value)

    @property
    @pulumi.getter(name="seLinuxOptions")
    def se_linux_options(
        self,
    ) -> Optional[
        pulumi.Input[
            "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSeLinuxOptionsArgs"
        ]
    ]:
        return pulumi.get(self, "se_linux_options")

    @se_linux_options.setter
    def se_linux_options(
        self,
        value: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSeLinuxOptionsArgs"
            ]
        ],
    ):
        pulumi.set(self, "se_linux_options", value)

    @property
    @pulumi.getter(name="seccompProfile")
    def seccomp_profile(
        self,
    ) -> Optional[
        pulumi.Input[
            "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSeccompProfileArgs"
        ]
    ]:
        return pulumi.get(self, "seccomp_profile")

    @seccomp_profile.setter
    def seccomp_profile(
        self,
        value: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSeccompProfileArgs"
            ]
        ],
    ):
        pulumi.set(self, "seccomp_profile", value)

    @property
    @pulumi.getter(name="supplementalGroups")
    def supplemental_groups(
        self,
    ) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        A list of groups applied to the first process run in each container, in addition
        to the container's primary GID, the fsGroup (if specified), and group memberships
        defined in the container image for the uid of the container process. If unspecified,
        no additional groups are added to any container. Note that group memberships
        defined in the container image for the uid of the container process are still effective,
        even if they are not included in this list.
        Note that this field cannot be set when spec.os.name is windows.
        """
        return pulumi.get(self, "supplemental_groups")

    @supplemental_groups.setter
    def supplemental_groups(
        self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]
    ):
        pulumi.set(self, "supplemental_groups", value)

    @property
    @pulumi.getter
    def sysctls(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSysctlsArgs"
                ]
            ]
        ]
    ]:
        """
        Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported
        sysctls (by the container runtime) might fail to launch.
        Note that this field cannot be set when spec.os.name is windows.
        """
        return pulumi.get(self, "sysctls")

    @sysctls.setter
    def sysctls(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSysctlsArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "sysctls", value)


if not MYPY:

    class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecTolerationsPatchArgsDict(
        TypedDict
    ):
        """
        The pod this Toleration is attached to tolerates any taint that matches
        the triple <key,value,effect> using the matching operator <operator>.
        """

        effect: NotRequired[pulumi.Input[str]]
        """
        Effect indicates the taint effect to match. Empty means match all taint effects.
        When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
        """
        key: NotRequired[pulumi.Input[str]]
        """
        Key is the taint key that the toleration applies to. Empty means match all taint keys.
        If the key is empty, operator must be Exists; this combination means to match all values and all keys.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        Operator represents a key's relationship to the value.
        Valid operators are Exists and Equal. Defaults to Equal.
        Exists is equivalent to wildcard for value, so that a pod can
        tolerate all taints of a particular category.
        """
        toleration_seconds: NotRequired[pulumi.Input[int]]
        """
        TolerationSeconds represents the period of time the toleration (which must be
        of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,
        it is not set, which means tolerate the taint forever (do not evict). Zero and
        negative values will be treated as 0 (evict immediately) by the system.
        """
        value: NotRequired[pulumi.Input[str]]
        """
        Value is the taint value the toleration matches to.
        If the operator is Exists, the value should be empty, otherwise just a regular string.
        """

elif False:
    ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecTolerationsPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecTolerationsPatchArgs:
    def __init__(
        __self__,
        *,
        effect: Optional[pulumi.Input[str]] = None,
        key: Optional[pulumi.Input[str]] = None,
        operator: Optional[pulumi.Input[str]] = None,
        toleration_seconds: Optional[pulumi.Input[int]] = None,
        value: Optional[pulumi.Input[str]] = None
    ):
        """
        The pod this Toleration is attached to tolerates any taint that matches
        the triple <key,value,effect> using the matching operator <operator>.
        :param pulumi.Input[str] effect: Effect indicates the taint effect to match. Empty means match all taint effects.
               When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
        :param pulumi.Input[str] key: Key is the taint key that the toleration applies to. Empty means match all taint keys.
               If the key is empty, operator must be Exists; this combination means to match all values and all keys.
        :param pulumi.Input[str] operator: Operator represents a key's relationship to the value.
               Valid operators are Exists and Equal. Defaults to Equal.
               Exists is equivalent to wildcard for value, so that a pod can
               tolerate all taints of a particular category.
        :param pulumi.Input[int] toleration_seconds: TolerationSeconds represents the period of time the toleration (which must be
               of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,
               it is not set, which means tolerate the taint forever (do not evict). Zero and
               negative values will be treated as 0 (evict immediately) by the system.
        :param pulumi.Input[str] value: Value is the taint value the toleration matches to.
               If the operator is Exists, the value should be empty, otherwise just a regular string.
        """
        if effect is not None:
            pulumi.set(__self__, "effect", effect)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if toleration_seconds is not None:
            pulumi.set(__self__, "toleration_seconds", toleration_seconds)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def effect(self) -> Optional[pulumi.Input[str]]:
        """
        Effect indicates the taint effect to match. Empty means match all taint effects.
        When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
        """
        return pulumi.get(self, "effect")

    @effect.setter
    def effect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "effect", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        Key is the taint key that the toleration applies to. Empty means match all taint keys.
        If the key is empty, operator must be Exists; this combination means to match all values and all keys.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        Operator represents a key's relationship to the value.
        Valid operators are Exists and Equal. Defaults to Equal.
        Exists is equivalent to wildcard for value, so that a pod can
        tolerate all taints of a particular category.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter(name="tolerationSeconds")
    def toleration_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        TolerationSeconds represents the period of time the toleration (which must be
        of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,
        it is not set, which means tolerate the taint forever (do not evict). Zero and
        negative values will be treated as 0 (evict immediately) by the system.
        """
        return pulumi.get(self, "toleration_seconds")

    @toleration_seconds.setter
    def toleration_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "toleration_seconds", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Value is the taint value the toleration matches to.
        If the operator is Exists, the value should be empty, otherwise just a regular string.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:

    class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecTolerationsArgsDict(
        TypedDict
    ):
        """
        The pod this Toleration is attached to tolerates any taint that matches
        the triple <key,value,effect> using the matching operator <operator>.
        """

        effect: NotRequired[pulumi.Input[str]]
        """
        Effect indicates the taint effect to match. Empty means match all taint effects.
        When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
        """
        key: NotRequired[pulumi.Input[str]]
        """
        Key is the taint key that the toleration applies to. Empty means match all taint keys.
        If the key is empty, operator must be Exists; this combination means to match all values and all keys.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        Operator represents a key's relationship to the value.
        Valid operators are Exists and Equal. Defaults to Equal.
        Exists is equivalent to wildcard for value, so that a pod can
        tolerate all taints of a particular category.
        """
        toleration_seconds: NotRequired[pulumi.Input[int]]
        """
        TolerationSeconds represents the period of time the toleration (which must be
        of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,
        it is not set, which means tolerate the taint forever (do not evict). Zero and
        negative values will be treated as 0 (evict immediately) by the system.
        """
        value: NotRequired[pulumi.Input[str]]
        """
        Value is the taint value the toleration matches to.
        If the operator is Exists, the value should be empty, otherwise just a regular string.
        """

elif False:
    ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecTolerationsArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecTolerationsArgs:
    def __init__(
        __self__,
        *,
        effect: Optional[pulumi.Input[str]] = None,
        key: Optional[pulumi.Input[str]] = None,
        operator: Optional[pulumi.Input[str]] = None,
        toleration_seconds: Optional[pulumi.Input[int]] = None,
        value: Optional[pulumi.Input[str]] = None
    ):
        """
        The pod this Toleration is attached to tolerates any taint that matches
        the triple <key,value,effect> using the matching operator <operator>.
        :param pulumi.Input[str] effect: Effect indicates the taint effect to match. Empty means match all taint effects.
               When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
        :param pulumi.Input[str] key: Key is the taint key that the toleration applies to. Empty means match all taint keys.
               If the key is empty, operator must be Exists; this combination means to match all values and all keys.
        :param pulumi.Input[str] operator: Operator represents a key's relationship to the value.
               Valid operators are Exists and Equal. Defaults to Equal.
               Exists is equivalent to wildcard for value, so that a pod can
               tolerate all taints of a particular category.
        :param pulumi.Input[int] toleration_seconds: TolerationSeconds represents the period of time the toleration (which must be
               of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,
               it is not set, which means tolerate the taint forever (do not evict). Zero and
               negative values will be treated as 0 (evict immediately) by the system.
        :param pulumi.Input[str] value: Value is the taint value the toleration matches to.
               If the operator is Exists, the value should be empty, otherwise just a regular string.
        """
        if effect is not None:
            pulumi.set(__self__, "effect", effect)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if toleration_seconds is not None:
            pulumi.set(__self__, "toleration_seconds", toleration_seconds)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def effect(self) -> Optional[pulumi.Input[str]]:
        """
        Effect indicates the taint effect to match. Empty means match all taint effects.
        When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
        """
        return pulumi.get(self, "effect")

    @effect.setter
    def effect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "effect", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        Key is the taint key that the toleration applies to. Empty means match all taint keys.
        If the key is empty, operator must be Exists; this combination means to match all values and all keys.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        Operator represents a key's relationship to the value.
        Valid operators are Exists and Equal. Defaults to Equal.
        Exists is equivalent to wildcard for value, so that a pod can
        tolerate all taints of a particular category.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter(name="tolerationSeconds")
    def toleration_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        TolerationSeconds represents the period of time the toleration (which must be
        of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,
        it is not set, which means tolerate the taint forever (do not evict). Zero and
        negative values will be treated as 0 (evict immediately) by the system.
        """
        return pulumi.get(self, "toleration_seconds")

    @toleration_seconds.setter
    def toleration_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "toleration_seconds", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Value is the taint value the toleration matches to.
        If the operator is Exists, the value should be empty, otherwise just a regular string.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:

    class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecArgsDict(TypedDict):
        """
        PodSpec defines overrides for the HTTP01 challenge solver pod.
        Check ACMEChallengeSolverHTTP01IngressPodSpec to find out currently supported fields.
        All other fields will be ignored.
        """

        affinity: NotRequired[
            pulumi.Input[
                "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityArgsDict"
            ]
        ]
        image_pull_secrets: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecImagePullSecretsArgsDict"
                    ]
                ]
            ]
        ]
        """
        If specified, the pod's imagePullSecrets
        """
        node_selector: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        NodeSelector is a selector which must be true for the pod to fit on a node.
        Selector which must match a node's labels for the pod to be scheduled on that node.
        More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
        """
        priority_class_name: NotRequired[pulumi.Input[str]]
        """
        If specified, the pod's priorityClassName.
        """
        security_context: NotRequired[
            pulumi.Input[
                "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextArgsDict"
            ]
        ]
        service_account_name: NotRequired[pulumi.Input[str]]
        """
        If specified, the pod's service account
        """
        tolerations: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecTolerationsArgsDict"
                    ]
                ]
            ]
        ]
        """
        If specified, the pod's tolerations.
        """

elif False:
    ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecArgsDict: TypeAlias = (
        Mapping[str, Any]
    )


@pulumi.input_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecArgs:
    def __init__(
        __self__,
        *,
        affinity: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityArgs"
            ]
        ] = None,
        image_pull_secrets: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecImagePullSecretsArgs"
                    ]
                ]
            ]
        ] = None,
        node_selector: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
        priority_class_name: Optional[pulumi.Input[str]] = None,
        security_context: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextArgs"
            ]
        ] = None,
        service_account_name: Optional[pulumi.Input[str]] = None,
        tolerations: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecTolerationsArgs"
                    ]
                ]
            ]
        ] = None
    ):
        """
        PodSpec defines overrides for the HTTP01 challenge solver pod.
        Check ACMEChallengeSolverHTTP01IngressPodSpec to find out currently supported fields.
        All other fields will be ignored.
        :param pulumi.Input[Sequence[pulumi.Input['ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecImagePullSecretsArgs']]] image_pull_secrets: If specified, the pod's imagePullSecrets
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] node_selector: NodeSelector is a selector which must be true for the pod to fit on a node.
               Selector which must match a node's labels for the pod to be scheduled on that node.
               More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
        :param pulumi.Input[str] priority_class_name: If specified, the pod's priorityClassName.
        :param pulumi.Input[str] service_account_name: If specified, the pod's service account
        :param pulumi.Input[Sequence[pulumi.Input['ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecTolerationsArgs']]] tolerations: If specified, the pod's tolerations.
        """
        if affinity is not None:
            pulumi.set(__self__, "affinity", affinity)
        if image_pull_secrets is not None:
            pulumi.set(__self__, "image_pull_secrets", image_pull_secrets)
        if node_selector is not None:
            pulumi.set(__self__, "node_selector", node_selector)
        if priority_class_name is not None:
            pulumi.set(__self__, "priority_class_name", priority_class_name)
        if security_context is not None:
            pulumi.set(__self__, "security_context", security_context)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tolerations is not None:
            pulumi.set(__self__, "tolerations", tolerations)

    @property
    @pulumi.getter
    def affinity(
        self,
    ) -> Optional[
        pulumi.Input[
            "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityArgs"
        ]
    ]:
        return pulumi.get(self, "affinity")

    @affinity.setter
    def affinity(
        self,
        value: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityArgs"
            ]
        ],
    ):
        pulumi.set(self, "affinity", value)

    @property
    @pulumi.getter(name="imagePullSecrets")
    def image_pull_secrets(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecImagePullSecretsArgs"
                ]
            ]
        ]
    ]:
        """
        If specified, the pod's imagePullSecrets
        """
        return pulumi.get(self, "image_pull_secrets")

    @image_pull_secrets.setter
    def image_pull_secrets(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecImagePullSecretsArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "image_pull_secrets", value)

    @property
    @pulumi.getter(name="nodeSelector")
    def node_selector(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        NodeSelector is a selector which must be true for the pod to fit on a node.
        Selector which must match a node's labels for the pod to be scheduled on that node.
        More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
        """
        return pulumi.get(self, "node_selector")

    @node_selector.setter
    def node_selector(
        self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
    ):
        pulumi.set(self, "node_selector", value)

    @property
    @pulumi.getter(name="priorityClassName")
    def priority_class_name(self) -> Optional[pulumi.Input[str]]:
        """
        If specified, the pod's priorityClassName.
        """
        return pulumi.get(self, "priority_class_name")

    @priority_class_name.setter
    def priority_class_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "priority_class_name", value)

    @property
    @pulumi.getter(name="securityContext")
    def security_context(
        self,
    ) -> Optional[
        pulumi.Input[
            "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextArgs"
        ]
    ]:
        return pulumi.get(self, "security_context")

    @security_context.setter
    def security_context(
        self,
        value: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextArgs"
            ]
        ],
    ):
        pulumi.set(self, "security_context", value)

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[pulumi.Input[str]]:
        """
        If specified, the pod's service account
        """
        return pulumi.get(self, "service_account_name")

    @service_account_name.setter
    def service_account_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account_name", value)

    @property
    @pulumi.getter
    def tolerations(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecTolerationsArgs"
                ]
            ]
        ]
    ]:
        """
        If specified, the pod's tolerations.
        """
        return pulumi.get(self, "tolerations")

    @tolerations.setter
    def tolerations(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecTolerationsArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "tolerations", value)


if not MYPY:

    class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateArgsDict(TypedDict):
        """
        Optional pod template used to configure the ACME challenge solver pods
        used for HTTP01 challenges.
        """

        metadata: NotRequired[
            pulumi.Input[
                "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateMetadataArgsDict"
            ]
        ]
        spec: NotRequired[
            pulumi.Input[
                "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecArgsDict"
            ]
        ]

elif False:
    ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateArgs:
    def __init__(
        __self__,
        *,
        metadata: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateMetadataArgs"
            ]
        ] = None,
        spec: Optional[
            pulumi.Input["ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecArgs"]
        ] = None
    ):
        """
        Optional pod template used to configure the ACME challenge solver pods
        used for HTTP01 challenges.
        """
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if spec is not None:
            pulumi.set(__self__, "spec", spec)

    @property
    @pulumi.getter
    def metadata(
        self,
    ) -> Optional[
        pulumi.Input["ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateMetadataArgs"]
    ]:
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(
        self,
        value: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateMetadataArgs"
            ]
        ],
    ):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter
    def spec(
        self,
    ) -> Optional[
        pulumi.Input["ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecArgs"]
    ]:
        return pulumi.get(self, "spec")

    @spec.setter
    def spec(
        self,
        value: Optional[
            pulumi.Input["ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecArgs"]
        ],
    ):
        pulumi.set(self, "spec", value)


if not MYPY:

    class ChallengeSpecSolverHttp01GatewayHTTPRouteArgsDict(TypedDict):
        """
        The Gateway API is a sig-network community API that models service networking
        in Kubernetes (https://gateway-api.sigs.k8s.io/). The Gateway solver will
        create HTTPRoutes with the specified labels in the same namespace as the challenge.
        This solver is experimental, and fields / behaviour may change in the future.
        """

        labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Custom labels that will be applied to HTTPRoutes created by cert-manager
        while solving HTTP-01 challenges.
        """
        parent_refs: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01GatewayHTTPRouteParentRefsArgsDict"
                    ]
                ]
            ]
        ]
        """
        When solving an HTTP-01 challenge, cert-manager creates an HTTPRoute.
        cert-manager needs to know which parentRefs should be used when creating
        the HTTPRoute. Usually, the parentRef references a Gateway. See:
        https://gateway-api.sigs.k8s.io/api-types/httproute/#attaching-to-gateways
        """
        pod_template: NotRequired[
            pulumi.Input["ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateArgsDict"]
        ]
        service_type: NotRequired[pulumi.Input[str]]
        """
        Optional service type for Kubernetes solver service. Supported values
        are NodePort or ClusterIP. If unset, defaults to NodePort.
        """

elif False:
    ChallengeSpecSolverHttp01GatewayHTTPRouteArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class ChallengeSpecSolverHttp01GatewayHTTPRouteArgs:
    def __init__(
        __self__,
        *,
        labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
        parent_refs: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01GatewayHTTPRouteParentRefsArgs"
                    ]
                ]
            ]
        ] = None,
        pod_template: Optional[
            pulumi.Input["ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateArgs"]
        ] = None,
        service_type: Optional[pulumi.Input[str]] = None
    ):
        """
        The Gateway API is a sig-network community API that models service networking
        in Kubernetes (https://gateway-api.sigs.k8s.io/). The Gateway solver will
        create HTTPRoutes with the specified labels in the same namespace as the challenge.
        This solver is experimental, and fields / behaviour may change in the future.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: Custom labels that will be applied to HTTPRoutes created by cert-manager
               while solving HTTP-01 challenges.
        :param pulumi.Input[Sequence[pulumi.Input['ChallengeSpecSolverHttp01GatewayHTTPRouteParentRefsArgs']]] parent_refs: When solving an HTTP-01 challenge, cert-manager creates an HTTPRoute.
               cert-manager needs to know which parentRefs should be used when creating
               the HTTPRoute. Usually, the parentRef references a Gateway. See:
               https://gateway-api.sigs.k8s.io/api-types/httproute/#attaching-to-gateways
        :param pulumi.Input[str] service_type: Optional service type for Kubernetes solver service. Supported values
               are NodePort or ClusterIP. If unset, defaults to NodePort.
        """
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if parent_refs is not None:
            pulumi.set(__self__, "parent_refs", parent_refs)
        if pod_template is not None:
            pulumi.set(__self__, "pod_template", pod_template)
        if service_type is not None:
            pulumi.set(__self__, "service_type", service_type)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Custom labels that will be applied to HTTPRoutes created by cert-manager
        while solving HTTP-01 challenges.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter(name="parentRefs")
    def parent_refs(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input["ChallengeSpecSolverHttp01GatewayHTTPRouteParentRefsArgs"]
            ]
        ]
    ]:
        """
        When solving an HTTP-01 challenge, cert-manager creates an HTTPRoute.
        cert-manager needs to know which parentRefs should be used when creating
        the HTTPRoute. Usually, the parentRef references a Gateway. See:
        https://gateway-api.sigs.k8s.io/api-types/httproute/#attaching-to-gateways
        """
        return pulumi.get(self, "parent_refs")

    @parent_refs.setter
    def parent_refs(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01GatewayHTTPRouteParentRefsArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "parent_refs", value)

    @property
    @pulumi.getter(name="podTemplate")
    def pod_template(
        self,
    ) -> Optional[
        pulumi.Input["ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateArgs"]
    ]:
        return pulumi.get(self, "pod_template")

    @pod_template.setter
    def pod_template(
        self,
        value: Optional[
            pulumi.Input["ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateArgs"]
        ],
    ):
        pulumi.set(self, "pod_template", value)

    @property
    @pulumi.getter(name="serviceType")
    def service_type(self) -> Optional[pulumi.Input[str]]:
        """
        Optional service type for Kubernetes solver service. Supported values
        are NodePort or ClusterIP. If unset, defaults to NodePort.
        """
        return pulumi.get(self, "service_type")

    @service_type.setter
    def service_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_type", value)


if not MYPY:

    class ChallengeSpecSolverHttp01IngressIngressTemplateMetadataPatchArgsDict(
        TypedDict
    ):
        """
        ObjectMeta overrides for the ingress used to solve HTTP01 challenges.
        Only the 'labels' and 'annotations' fields may be set.
        If labels or annotations overlap with in-built values, the values here
        will override the in-built values.
        """

        annotations: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Annotations that should be added to the created ACME HTTP01 solver ingress.
        """
        labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Labels that should be added to the created ACME HTTP01 solver ingress.
        """

elif False:
    ChallengeSpecSolverHttp01IngressIngressTemplateMetadataPatchArgsDict: TypeAlias = (
        Mapping[str, Any]
    )


@pulumi.input_type
class ChallengeSpecSolverHttp01IngressIngressTemplateMetadataPatchArgs:
    def __init__(
        __self__,
        *,
        annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
        labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None
    ):
        """
        ObjectMeta overrides for the ingress used to solve HTTP01 challenges.
        Only the 'labels' and 'annotations' fields may be set.
        If labels or annotations overlap with in-built values, the values here
        will override the in-built values.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] annotations: Annotations that should be added to the created ACME HTTP01 solver ingress.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: Labels that should be added to the created ACME HTTP01 solver ingress.
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Annotations that should be added to the created ACME HTTP01 solver ingress.
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(
        self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
    ):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Labels that should be added to the created ACME HTTP01 solver ingress.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)


if not MYPY:

    class ChallengeSpecSolverHttp01IngressIngressTemplateMetadataArgsDict(TypedDict):
        """
        ObjectMeta overrides for the ingress used to solve HTTP01 challenges.
        Only the 'labels' and 'annotations' fields may be set.
        If labels or annotations overlap with in-built values, the values here
        will override the in-built values.
        """

        annotations: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Annotations that should be added to the created ACME HTTP01 solver ingress.
        """
        labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Labels that should be added to the created ACME HTTP01 solver ingress.
        """

elif False:
    ChallengeSpecSolverHttp01IngressIngressTemplateMetadataArgsDict: TypeAlias = (
        Mapping[str, Any]
    )


@pulumi.input_type
class ChallengeSpecSolverHttp01IngressIngressTemplateMetadataArgs:
    def __init__(
        __self__,
        *,
        annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
        labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None
    ):
        """
        ObjectMeta overrides for the ingress used to solve HTTP01 challenges.
        Only the 'labels' and 'annotations' fields may be set.
        If labels or annotations overlap with in-built values, the values here
        will override the in-built values.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] annotations: Annotations that should be added to the created ACME HTTP01 solver ingress.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: Labels that should be added to the created ACME HTTP01 solver ingress.
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Annotations that should be added to the created ACME HTTP01 solver ingress.
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(
        self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
    ):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Labels that should be added to the created ACME HTTP01 solver ingress.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)


if not MYPY:

    class ChallengeSpecSolverHttp01IngressIngressTemplatePatchArgsDict(TypedDict):
        """
        Optional ingress template used to configure the ACME challenge solver
        ingress used for HTTP01 challenges.
        """

        metadata: NotRequired[
            pulumi.Input[
                "ChallengeSpecSolverHttp01IngressIngressTemplateMetadataPatchArgsDict"
            ]
        ]

elif False:
    ChallengeSpecSolverHttp01IngressIngressTemplatePatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01IngressIngressTemplatePatchArgs:
    def __init__(
        __self__,
        *,
        metadata: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01IngressIngressTemplateMetadataPatchArgs"
            ]
        ] = None
    ):
        """
        Optional ingress template used to configure the ACME challenge solver
        ingress used for HTTP01 challenges.
        """
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)

    @property
    @pulumi.getter
    def metadata(
        self,
    ) -> Optional[
        pulumi.Input["ChallengeSpecSolverHttp01IngressIngressTemplateMetadataPatchArgs"]
    ]:
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(
        self,
        value: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01IngressIngressTemplateMetadataPatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "metadata", value)


if not MYPY:

    class ChallengeSpecSolverHttp01IngressIngressTemplateArgsDict(TypedDict):
        """
        Optional ingress template used to configure the ACME challenge solver
        ingress used for HTTP01 challenges.
        """

        metadata: NotRequired[
            pulumi.Input[
                "ChallengeSpecSolverHttp01IngressIngressTemplateMetadataArgsDict"
            ]
        ]

elif False:
    ChallengeSpecSolverHttp01IngressIngressTemplateArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01IngressIngressTemplateArgs:
    def __init__(
        __self__,
        *,
        metadata: Optional[
            pulumi.Input["ChallengeSpecSolverHttp01IngressIngressTemplateMetadataArgs"]
        ] = None
    ):
        """
        Optional ingress template used to configure the ACME challenge solver
        ingress used for HTTP01 challenges.
        """
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)

    @property
    @pulumi.getter
    def metadata(
        self,
    ) -> Optional[
        pulumi.Input["ChallengeSpecSolverHttp01IngressIngressTemplateMetadataArgs"]
    ]:
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(
        self,
        value: Optional[
            pulumi.Input["ChallengeSpecSolverHttp01IngressIngressTemplateMetadataArgs"]
        ],
    ):
        pulumi.set(self, "metadata", value)


if not MYPY:

    class ChallengeSpecSolverHttp01IngressPatchArgsDict(TypedDict):
        """
        The ingress based HTTP01 challenge solver will solve challenges by
        creating or modifying Ingress resources in order to route requests for
        '/.well-known/acme-challenge/XYZ' to 'challenge solver' pods that are
        provisioned by cert-manager for each Challenge to be completed.
        """

        class_: NotRequired[pulumi.Input[str]]
        """
        This field configures the annotation `kubernetes.io/ingress.class` when
        creating Ingress resources to solve ACME challenges that use this
        challenge solver. Only one of `class`, `name` or `ingressClassName` may
        be specified.
        """
        ingress_class_name: NotRequired[pulumi.Input[str]]
        """
        This field configures the field `ingressClassName` on the created Ingress
        resources used to solve ACME challenges that use this challenge solver.
        This is the recommended way of configuring the ingress class. Only one of
        `class`, `name` or `ingressClassName` may be specified.
        """
        ingress_template: NotRequired[
            pulumi.Input["ChallengeSpecSolverHttp01IngressIngressTemplatePatchArgsDict"]
        ]
        name: NotRequired[pulumi.Input[str]]
        """
        The name of the ingress resource that should have ACME challenge solving
        routes inserted into it in order to solve HTTP01 challenges.
        This is typically used in conjunction with ingress controllers like
        ingress-gce, which maintains a 1:1 mapping between external IPs and
        ingress resources. Only one of `class`, `name` or `ingressClassName` may
        be specified.
        """
        pod_template: NotRequired[
            pulumi.Input["ChallengeSpecSolverHttp01IngressPodTemplatePatchArgsDict"]
        ]
        service_type: NotRequired[pulumi.Input[str]]
        """
        Optional service type for Kubernetes solver service. Supported values
        are NodePort or ClusterIP. If unset, defaults to NodePort.
        """

elif False:
    ChallengeSpecSolverHttp01IngressPatchArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class ChallengeSpecSolverHttp01IngressPatchArgs:
    def __init__(
        __self__,
        *,
        class_: Optional[pulumi.Input[str]] = None,
        ingress_class_name: Optional[pulumi.Input[str]] = None,
        ingress_template: Optional[
            pulumi.Input["ChallengeSpecSolverHttp01IngressIngressTemplatePatchArgs"]
        ] = None,
        name: Optional[pulumi.Input[str]] = None,
        pod_template: Optional[
            pulumi.Input["ChallengeSpecSolverHttp01IngressPodTemplatePatchArgs"]
        ] = None,
        service_type: Optional[pulumi.Input[str]] = None
    ):
        """
        The ingress based HTTP01 challenge solver will solve challenges by
        creating or modifying Ingress resources in order to route requests for
        '/.well-known/acme-challenge/XYZ' to 'challenge solver' pods that are
        provisioned by cert-manager for each Challenge to be completed.
        :param pulumi.Input[str] class_: This field configures the annotation `kubernetes.io/ingress.class` when
               creating Ingress resources to solve ACME challenges that use this
               challenge solver. Only one of `class`, `name` or `ingressClassName` may
               be specified.
        :param pulumi.Input[str] ingress_class_name: This field configures the field `ingressClassName` on the created Ingress
               resources used to solve ACME challenges that use this challenge solver.
               This is the recommended way of configuring the ingress class. Only one of
               `class`, `name` or `ingressClassName` may be specified.
        :param pulumi.Input[str] name: The name of the ingress resource that should have ACME challenge solving
               routes inserted into it in order to solve HTTP01 challenges.
               This is typically used in conjunction with ingress controllers like
               ingress-gce, which maintains a 1:1 mapping between external IPs and
               ingress resources. Only one of `class`, `name` or `ingressClassName` may
               be specified.
        :param pulumi.Input[str] service_type: Optional service type for Kubernetes solver service. Supported values
               are NodePort or ClusterIP. If unset, defaults to NodePort.
        """
        if class_ is not None:
            pulumi.set(__self__, "class_", class_)
        if ingress_class_name is not None:
            pulumi.set(__self__, "ingress_class_name", ingress_class_name)
        if ingress_template is not None:
            pulumi.set(__self__, "ingress_template", ingress_template)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if pod_template is not None:
            pulumi.set(__self__, "pod_template", pod_template)
        if service_type is not None:
            pulumi.set(__self__, "service_type", service_type)

    @property
    @pulumi.getter(name="class")
    def class_(self) -> Optional[pulumi.Input[str]]:
        """
        This field configures the annotation `kubernetes.io/ingress.class` when
        creating Ingress resources to solve ACME challenges that use this
        challenge solver. Only one of `class`, `name` or `ingressClassName` may
        be specified.
        """
        return pulumi.get(self, "class_")

    @class_.setter
    def class_(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "class_", value)

    @property
    @pulumi.getter(name="ingressClassName")
    def ingress_class_name(self) -> Optional[pulumi.Input[str]]:
        """
        This field configures the field `ingressClassName` on the created Ingress
        resources used to solve ACME challenges that use this challenge solver.
        This is the recommended way of configuring the ingress class. Only one of
        `class`, `name` or `ingressClassName` may be specified.
        """
        return pulumi.get(self, "ingress_class_name")

    @ingress_class_name.setter
    def ingress_class_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ingress_class_name", value)

    @property
    @pulumi.getter(name="ingressTemplate")
    def ingress_template(
        self,
    ) -> Optional[
        pulumi.Input["ChallengeSpecSolverHttp01IngressIngressTemplatePatchArgs"]
    ]:
        return pulumi.get(self, "ingress_template")

    @ingress_template.setter
    def ingress_template(
        self,
        value: Optional[
            pulumi.Input["ChallengeSpecSolverHttp01IngressIngressTemplatePatchArgs"]
        ],
    ):
        pulumi.set(self, "ingress_template", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the ingress resource that should have ACME challenge solving
        routes inserted into it in order to solve HTTP01 challenges.
        This is typically used in conjunction with ingress controllers like
        ingress-gce, which maintains a 1:1 mapping between external IPs and
        ingress resources. Only one of `class`, `name` or `ingressClassName` may
        be specified.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="podTemplate")
    def pod_template(
        self,
    ) -> Optional[pulumi.Input["ChallengeSpecSolverHttp01IngressPodTemplatePatchArgs"]]:
        return pulumi.get(self, "pod_template")

    @pod_template.setter
    def pod_template(
        self,
        value: Optional[
            pulumi.Input["ChallengeSpecSolverHttp01IngressPodTemplatePatchArgs"]
        ],
    ):
        pulumi.set(self, "pod_template", value)

    @property
    @pulumi.getter(name="serviceType")
    def service_type(self) -> Optional[pulumi.Input[str]]:
        """
        Optional service type for Kubernetes solver service. Supported values
        are NodePort or ClusterIP. If unset, defaults to NodePort.
        """
        return pulumi.get(self, "service_type")

    @service_type.setter
    def service_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_type", value)


if not MYPY:

    class ChallengeSpecSolverHttp01IngressPodTemplateMetadataPatchArgsDict(TypedDict):
        """
        ObjectMeta overrides for the pod used to solve HTTP01 challenges.
        Only the 'labels' and 'annotations' fields may be set.
        If labels or annotations overlap with in-built values, the values here
        will override the in-built values.
        """

        annotations: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Annotations that should be added to the created ACME HTTP01 solver pods.
        """
        labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Labels that should be added to the created ACME HTTP01 solver pods.
        """

elif False:
    ChallengeSpecSolverHttp01IngressPodTemplateMetadataPatchArgsDict: TypeAlias = (
        Mapping[str, Any]
    )


@pulumi.input_type
class ChallengeSpecSolverHttp01IngressPodTemplateMetadataPatchArgs:
    def __init__(
        __self__,
        *,
        annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
        labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None
    ):
        """
        ObjectMeta overrides for the pod used to solve HTTP01 challenges.
        Only the 'labels' and 'annotations' fields may be set.
        If labels or annotations overlap with in-built values, the values here
        will override the in-built values.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] annotations: Annotations that should be added to the created ACME HTTP01 solver pods.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: Labels that should be added to the created ACME HTTP01 solver pods.
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Annotations that should be added to the created ACME HTTP01 solver pods.
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(
        self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
    ):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Labels that should be added to the created ACME HTTP01 solver pods.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)


if not MYPY:

    class ChallengeSpecSolverHttp01IngressPodTemplateMetadataArgsDict(TypedDict):
        """
        ObjectMeta overrides for the pod used to solve HTTP01 challenges.
        Only the 'labels' and 'annotations' fields may be set.
        If labels or annotations overlap with in-built values, the values here
        will override the in-built values.
        """

        annotations: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Annotations that should be added to the created ACME HTTP01 solver pods.
        """
        labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Labels that should be added to the created ACME HTTP01 solver pods.
        """

elif False:
    ChallengeSpecSolverHttp01IngressPodTemplateMetadataArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01IngressPodTemplateMetadataArgs:
    def __init__(
        __self__,
        *,
        annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
        labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None
    ):
        """
        ObjectMeta overrides for the pod used to solve HTTP01 challenges.
        Only the 'labels' and 'annotations' fields may be set.
        If labels or annotations overlap with in-built values, the values here
        will override the in-built values.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] annotations: Annotations that should be added to the created ACME HTTP01 solver pods.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: Labels that should be added to the created ACME HTTP01 solver pods.
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Annotations that should be added to the created ACME HTTP01 solver pods.
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(
        self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
    ):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Labels that should be added to the created ACME HTTP01 solver pods.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)


if not MYPY:

    class ChallengeSpecSolverHttp01IngressPodTemplatePatchArgsDict(TypedDict):
        """
        Optional pod template used to configure the ACME challenge solver pods
        used for HTTP01 challenges.
        """

        metadata: NotRequired[
            pulumi.Input[
                "ChallengeSpecSolverHttp01IngressPodTemplateMetadataPatchArgsDict"
            ]
        ]
        spec: NotRequired[
            pulumi.Input["ChallengeSpecSolverHttp01IngressPodTemplateSpecPatchArgsDict"]
        ]

elif False:
    ChallengeSpecSolverHttp01IngressPodTemplatePatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01IngressPodTemplatePatchArgs:
    def __init__(
        __self__,
        *,
        metadata: Optional[
            pulumi.Input["ChallengeSpecSolverHttp01IngressPodTemplateMetadataPatchArgs"]
        ] = None,
        spec: Optional[
            pulumi.Input["ChallengeSpecSolverHttp01IngressPodTemplateSpecPatchArgs"]
        ] = None
    ):
        """
        Optional pod template used to configure the ACME challenge solver pods
        used for HTTP01 challenges.
        """
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if spec is not None:
            pulumi.set(__self__, "spec", spec)

    @property
    @pulumi.getter
    def metadata(
        self,
    ) -> Optional[
        pulumi.Input["ChallengeSpecSolverHttp01IngressPodTemplateMetadataPatchArgs"]
    ]:
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(
        self,
        value: Optional[
            pulumi.Input["ChallengeSpecSolverHttp01IngressPodTemplateMetadataPatchArgs"]
        ],
    ):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter
    def spec(
        self,
    ) -> Optional[
        pulumi.Input["ChallengeSpecSolverHttp01IngressPodTemplateSpecPatchArgs"]
    ]:
        return pulumi.get(self, "spec")

    @spec.setter
    def spec(
        self,
        value: Optional[
            pulumi.Input["ChallengeSpecSolverHttp01IngressPodTemplateSpecPatchArgs"]
        ],
    ):
        pulumi.set(self, "spec", value)


if not MYPY:

    class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPatchArgsDict(
        TypedDict
    ):
        """
        Describes node affinity scheduling rules for the pod.
        """

        preferred_during_scheduling_ignored_during_execution: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgsDict"
                    ]
                ]
            ]
        ]
        """
        The scheduler will prefer to schedule pods to nodes that satisfy
        the affinity expressions specified by this field, but it may choose
        a node that violates one or more of the expressions. The node that is
        most preferred is the one with the greatest sum of weights, i.e.
        for each node that meets all of the scheduling requirements (resource
        request, requiredDuringScheduling affinity expressions, etc.),
        compute a sum by iterating through the elements of this field and adding
        "weight" to the sum if the node matches the corresponding matchExpressions; the
        node(s) with the highest sum are the most preferred.
        """
        required_during_scheduling_ignored_during_execution: NotRequired[
            pulumi.Input[
                "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgsDict"
            ]
        ]

elif False:
    ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPatchArgs:
    def __init__(
        __self__,
        *,
        preferred_during_scheduling_ignored_during_execution: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgs"
                    ]
                ]
            ]
        ] = None,
        required_during_scheduling_ignored_during_execution: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgs"
            ]
        ] = None
    ):
        """
        Describes node affinity scheduling rules for the pod.
        :param pulumi.Input[Sequence[pulumi.Input['ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgs']]] preferred_during_scheduling_ignored_during_execution: The scheduler will prefer to schedule pods to nodes that satisfy
               the affinity expressions specified by this field, but it may choose
               a node that violates one or more of the expressions. The node that is
               most preferred is the one with the greatest sum of weights, i.e.
               for each node that meets all of the scheduling requirements (resource
               request, requiredDuringScheduling affinity expressions, etc.),
               compute a sum by iterating through the elements of this field and adding
               "weight" to the sum if the node matches the corresponding matchExpressions; the
               node(s) with the highest sum are the most preferred.
        """
        if preferred_during_scheduling_ignored_during_execution is not None:
            pulumi.set(
                __self__,
                "preferred_during_scheduling_ignored_during_execution",
                preferred_during_scheduling_ignored_during_execution,
            )
        if required_during_scheduling_ignored_during_execution is not None:
            pulumi.set(
                __self__,
                "required_during_scheduling_ignored_during_execution",
                required_during_scheduling_ignored_during_execution,
            )

    @property
    @pulumi.getter(name="preferredDuringSchedulingIgnoredDuringExecution")
    def preferred_during_scheduling_ignored_during_execution(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgs"
                ]
            ]
        ]
    ]:
        """
        The scheduler will prefer to schedule pods to nodes that satisfy
        the affinity expressions specified by this field, but it may choose
        a node that violates one or more of the expressions. The node that is
        most preferred is the one with the greatest sum of weights, i.e.
        for each node that meets all of the scheduling requirements (resource
        request, requiredDuringScheduling affinity expressions, etc.),
        compute a sum by iterating through the elements of this field and adding
        "weight" to the sum if the node matches the corresponding matchExpressions; the
        node(s) with the highest sum are the most preferred.
        """
        return pulumi.get(self, "preferred_during_scheduling_ignored_during_execution")

    @preferred_during_scheduling_ignored_during_execution.setter
    def preferred_during_scheduling_ignored_during_execution(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "preferred_during_scheduling_ignored_during_execution", value)

    @property
    @pulumi.getter(name="requiredDuringSchedulingIgnoredDuringExecution")
    def required_during_scheduling_ignored_during_execution(
        self,
    ) -> Optional[
        pulumi.Input[
            "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgs"
        ]
    ]:
        return pulumi.get(self, "required_during_scheduling_ignored_during_execution")

    @required_during_scheduling_ignored_during_execution.setter
    def required_during_scheduling_ignored_during_execution(
        self,
        value: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "required_during_scheduling_ignored_during_execution", value)


if not MYPY:

    class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgsDict(
        TypedDict
    ):
        """
        An empty preferred scheduling term matches all objects with implicit weight 0
        (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
        """

        preference: NotRequired[
            pulumi.Input[
                "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatchArgsDict"
            ]
        ]
        weight: NotRequired[pulumi.Input[int]]
        """
        Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
        """

elif False:
    ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgs:
    def __init__(
        __self__,
        *,
        preference: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatchArgs"
            ]
        ] = None,
        weight: Optional[pulumi.Input[int]] = None
    ):
        """
        An empty preferred scheduling term matches all objects with implicit weight 0
        (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
        :param pulumi.Input[int] weight: Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
        """
        if preference is not None:
            pulumi.set(__self__, "preference", preference)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def preference(
        self,
    ) -> Optional[
        pulumi.Input[
            "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatchArgs"
        ]
    ]:
        return pulumi.get(self, "preference")

    @preference.setter
    def preference(
        self,
        value: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "preference", value)

    @property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[int]]:
        """
        Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
        """
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "weight", value)


if not MYPY:

    class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatchArgsDict(
        TypedDict
    ):
        """
        A node selector requirement is a selector that contains values, a key, and an operator
        that relates the key and values.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        Represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        An array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. If the operator is Gt or Lt, the values
        array must have a single element, which will be interpreted as an integer.
        This array is replaced during a strategic merge patch.
        """

elif False:
    ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatchArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        operator: Optional[pulumi.Input[str]] = None,
        values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None
    ):
        """
        A node selector requirement is a selector that contains values, a key, and an operator
        that relates the key and values.
        :param pulumi.Input[str] key: The label key that the selector applies to.
        :param pulumi.Input[str] operator: Represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: An array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. If the operator is Gt or Lt, the values
               array must have a single element, which will be interpreted as an integer.
               This array is replaced during a strategic merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        Represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        An array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. If the operator is Gt or Lt, the values
        array must have a single element, which will be interpreted as an integer.
        This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:

    class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgsDict(
        TypedDict
    ):
        """
        A node selector requirement is a selector that contains values, a key, and an operator
        that relates the key and values.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        Represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        An array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. If the operator is Gt or Lt, the values
        array must have a single element, which will be interpreted as an integer.
        This array is replaced during a strategic merge patch.
        """

elif False:
    ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        operator: Optional[pulumi.Input[str]] = None,
        values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None
    ):
        """
        A node selector requirement is a selector that contains values, a key, and an operator
        that relates the key and values.
        :param pulumi.Input[str] key: The label key that the selector applies to.
        :param pulumi.Input[str] operator: Represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: An array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. If the operator is Gt or Lt, the values
               array must have a single element, which will be interpreted as an integer.
               This array is replaced during a strategic merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        Represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        An array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. If the operator is Gt or Lt, the values
        array must have a single element, which will be interpreted as an integer.
        This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:

    class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatchArgsDict(
        TypedDict
    ):
        """
        A node selector requirement is a selector that contains values, a key, and an operator
        that relates the key and values.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        Represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        An array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. If the operator is Gt or Lt, the values
        array must have a single element, which will be interpreted as an integer.
        This array is replaced during a strategic merge patch.
        """

elif False:
    ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatchArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        operator: Optional[pulumi.Input[str]] = None,
        values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None
    ):
        """
        A node selector requirement is a selector that contains values, a key, and an operator
        that relates the key and values.
        :param pulumi.Input[str] key: The label key that the selector applies to.
        :param pulumi.Input[str] operator: Represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: An array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. If the operator is Gt or Lt, the values
               array must have a single element, which will be interpreted as an integer.
               This array is replaced during a strategic merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        Represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        An array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. If the operator is Gt or Lt, the values
        array must have a single element, which will be interpreted as an integer.
        This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:

    class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgsDict(
        TypedDict
    ):
        """
        A node selector requirement is a selector that contains values, a key, and an operator
        that relates the key and values.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        Represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        An array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. If the operator is Gt or Lt, the values
        array must have a single element, which will be interpreted as an integer.
        This array is replaced during a strategic merge patch.
        """

elif False:
    ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        operator: Optional[pulumi.Input[str]] = None,
        values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None
    ):
        """
        A node selector requirement is a selector that contains values, a key, and an operator
        that relates the key and values.
        :param pulumi.Input[str] key: The label key that the selector applies to.
        :param pulumi.Input[str] operator: Represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: An array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. If the operator is Gt or Lt, the values
               array must have a single element, which will be interpreted as an integer.
               This array is replaced during a strategic merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        Represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        An array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. If the operator is Gt or Lt, the values
        array must have a single element, which will be interpreted as an integer.
        This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:

    class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatchArgsDict(
        TypedDict
    ):
        """
        A node selector term, associated with the corresponding weight.
        """

        match_expressions: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatchArgsDict"
                    ]
                ]
            ]
        ]
        """
        A list of node selector requirements by node's labels.
        """
        match_fields: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatchArgsDict"
                    ]
                ]
            ]
        ]
        """
        A list of node selector requirements by node's fields.
        """

elif False:
    ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatchArgs:
    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatchArgs"
                    ]
                ]
            ]
        ] = None,
        match_fields: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatchArgs"
                    ]
                ]
            ]
        ] = None
    ):
        """
        A node selector term, associated with the corresponding weight.
        :param pulumi.Input[Sequence[pulumi.Input['ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatchArgs']]] match_expressions: A list of node selector requirements by node's labels.
        :param pulumi.Input[Sequence[pulumi.Input['ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatchArgs']]] match_fields: A list of node selector requirements by node's fields.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_fields is not None:
            pulumi.set(__self__, "match_fields", match_fields)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatchArgs"
                ]
            ]
        ]
    ]:
        """
        A list of node selector requirements by node's labels.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatchArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchFields")
    def match_fields(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatchArgs"
                ]
            ]
        ]
    ]:
        """
        A list of node selector requirements by node's fields.
        """
        return pulumi.get(self, "match_fields")

    @match_fields.setter
    def match_fields(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatchArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "match_fields", value)


if not MYPY:

    class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgsDict(
        TypedDict
    ):
        """
        A node selector term, associated with the corresponding weight.
        """

        match_expressions: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgsDict"
                    ]
                ]
            ]
        ]
        """
        A list of node selector requirements by node's labels.
        """
        match_fields: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgsDict"
                    ]
                ]
            ]
        ]
        """
        A list of node selector requirements by node's fields.
        """

elif False:
    ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgs:
    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgs"
                    ]
                ]
            ]
        ] = None,
        match_fields: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgs"
                    ]
                ]
            ]
        ] = None
    ):
        """
        A node selector term, associated with the corresponding weight.
        :param pulumi.Input[Sequence[pulumi.Input['ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgs']]] match_expressions: A list of node selector requirements by node's labels.
        :param pulumi.Input[Sequence[pulumi.Input['ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgs']]] match_fields: A list of node selector requirements by node's fields.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_fields is not None:
            pulumi.set(__self__, "match_fields", match_fields)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgs"
                ]
            ]
        ]
    ]:
        """
        A list of node selector requirements by node's labels.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchFields")
    def match_fields(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgs"
                ]
            ]
        ]
    ]:
        """
        A list of node selector requirements by node's fields.
        """
        return pulumi.get(self, "match_fields")

    @match_fields.setter
    def match_fields(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "match_fields", value)


if not MYPY:

    class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgsDict(
        TypedDict
    ):
        """
        An empty preferred scheduling term matches all objects with implicit weight 0
        (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
        """

        preference: NotRequired[
            pulumi.Input[
                "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgsDict"
            ]
        ]
        weight: NotRequired[pulumi.Input[int]]
        """
        Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
        """

elif False:
    ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs:
    def __init__(
        __self__,
        *,
        preference: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgs"
            ]
        ] = None,
        weight: Optional[pulumi.Input[int]] = None
    ):
        """
        An empty preferred scheduling term matches all objects with implicit weight 0
        (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
        :param pulumi.Input[int] weight: Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
        """
        if preference is not None:
            pulumi.set(__self__, "preference", preference)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def preference(
        self,
    ) -> Optional[
        pulumi.Input[
            "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgs"
        ]
    ]:
        return pulumi.get(self, "preference")

    @preference.setter
    def preference(
        self,
        value: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgs"
            ]
        ],
    ):
        pulumi.set(self, "preference", value)

    @property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[int]]:
        """
        Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
        """
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "weight", value)


if not MYPY:

    class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatchArgsDict(
        TypedDict
    ):
        """
        A node selector requirement is a selector that contains values, a key, and an operator
        that relates the key and values.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        Represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        An array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. If the operator is Gt or Lt, the values
        array must have a single element, which will be interpreted as an integer.
        This array is replaced during a strategic merge patch.
        """

elif False:
    ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatchArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        operator: Optional[pulumi.Input[str]] = None,
        values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None
    ):
        """
        A node selector requirement is a selector that contains values, a key, and an operator
        that relates the key and values.
        :param pulumi.Input[str] key: The label key that the selector applies to.
        :param pulumi.Input[str] operator: Represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: An array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. If the operator is Gt or Lt, the values
               array must have a single element, which will be interpreted as an integer.
               This array is replaced during a strategic merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        Represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        An array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. If the operator is Gt or Lt, the values
        array must have a single element, which will be interpreted as an integer.
        This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:

    class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgsDict(
        TypedDict
    ):
        """
        A node selector requirement is a selector that contains values, a key, and an operator
        that relates the key and values.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        Represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        An array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. If the operator is Gt or Lt, the values
        array must have a single element, which will be interpreted as an integer.
        This array is replaced during a strategic merge patch.
        """

elif False:
    ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        operator: Optional[pulumi.Input[str]] = None,
        values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None
    ):
        """
        A node selector requirement is a selector that contains values, a key, and an operator
        that relates the key and values.
        :param pulumi.Input[str] key: The label key that the selector applies to.
        :param pulumi.Input[str] operator: Represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: An array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. If the operator is Gt or Lt, the values
               array must have a single element, which will be interpreted as an integer.
               This array is replaced during a strategic merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        Represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        An array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. If the operator is Gt or Lt, the values
        array must have a single element, which will be interpreted as an integer.
        This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:

    class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatchArgsDict(
        TypedDict
    ):
        """
        A node selector requirement is a selector that contains values, a key, and an operator
        that relates the key and values.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        Represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        An array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. If the operator is Gt or Lt, the values
        array must have a single element, which will be interpreted as an integer.
        This array is replaced during a strategic merge patch.
        """

elif False:
    ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatchArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        operator: Optional[pulumi.Input[str]] = None,
        values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None
    ):
        """
        A node selector requirement is a selector that contains values, a key, and an operator
        that relates the key and values.
        :param pulumi.Input[str] key: The label key that the selector applies to.
        :param pulumi.Input[str] operator: Represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: An array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. If the operator is Gt or Lt, the values
               array must have a single element, which will be interpreted as an integer.
               This array is replaced during a strategic merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        Represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        An array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. If the operator is Gt or Lt, the values
        array must have a single element, which will be interpreted as an integer.
        This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:

    class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgsDict(
        TypedDict
    ):
        """
        A node selector requirement is a selector that contains values, a key, and an operator
        that relates the key and values.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        Represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        An array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. If the operator is Gt or Lt, the values
        array must have a single element, which will be interpreted as an integer.
        This array is replaced during a strategic merge patch.
        """

elif False:
    ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        operator: Optional[pulumi.Input[str]] = None,
        values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None
    ):
        """
        A node selector requirement is a selector that contains values, a key, and an operator
        that relates the key and values.
        :param pulumi.Input[str] key: The label key that the selector applies to.
        :param pulumi.Input[str] operator: Represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: An array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. If the operator is Gt or Lt, the values
               array must have a single element, which will be interpreted as an integer.
               This array is replaced during a strategic merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        Represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        An array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. If the operator is Gt or Lt, the values
        array must have a single element, which will be interpreted as an integer.
        This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:

    class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatchArgsDict(
        TypedDict
    ):
        """
        A null or empty node selector term matches no objects. The requirements of
        them are ANDed.
        The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
        """

        match_expressions: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatchArgsDict"
                    ]
                ]
            ]
        ]
        """
        A list of node selector requirements by node's labels.
        """
        match_fields: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatchArgsDict"
                    ]
                ]
            ]
        ]
        """
        A list of node selector requirements by node's fields.
        """

elif False:
    ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatchArgs:
    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatchArgs"
                    ]
                ]
            ]
        ] = None,
        match_fields: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatchArgs"
                    ]
                ]
            ]
        ] = None
    ):
        """
        A null or empty node selector term matches no objects. The requirements of
        them are ANDed.
        The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
        :param pulumi.Input[Sequence[pulumi.Input['ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatchArgs']]] match_expressions: A list of node selector requirements by node's labels.
        :param pulumi.Input[Sequence[pulumi.Input['ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatchArgs']]] match_fields: A list of node selector requirements by node's fields.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_fields is not None:
            pulumi.set(__self__, "match_fields", match_fields)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatchArgs"
                ]
            ]
        ]
    ]:
        """
        A list of node selector requirements by node's labels.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatchArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchFields")
    def match_fields(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatchArgs"
                ]
            ]
        ]
    ]:
        """
        A list of node selector requirements by node's fields.
        """
        return pulumi.get(self, "match_fields")

    @match_fields.setter
    def match_fields(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatchArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "match_fields", value)


if not MYPY:

    class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgsDict(
        TypedDict
    ):
        """
        A null or empty node selector term matches no objects. The requirements of
        them are ANDed.
        The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
        """

        match_expressions: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgsDict"
                    ]
                ]
            ]
        ]
        """
        A list of node selector requirements by node's labels.
        """
        match_fields: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgsDict"
                    ]
                ]
            ]
        ]
        """
        A list of node selector requirements by node's fields.
        """

elif False:
    ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgs:
    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgs"
                    ]
                ]
            ]
        ] = None,
        match_fields: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgs"
                    ]
                ]
            ]
        ] = None
    ):
        """
        A null or empty node selector term matches no objects. The requirements of
        them are ANDed.
        The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
        :param pulumi.Input[Sequence[pulumi.Input['ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgs']]] match_expressions: A list of node selector requirements by node's labels.
        :param pulumi.Input[Sequence[pulumi.Input['ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgs']]] match_fields: A list of node selector requirements by node's fields.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_fields is not None:
            pulumi.set(__self__, "match_fields", match_fields)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgs"
                ]
            ]
        ]
    ]:
        """
        A list of node selector requirements by node's labels.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchFields")
    def match_fields(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgs"
                ]
            ]
        ]
    ]:
        """
        A list of node selector requirements by node's fields.
        """
        return pulumi.get(self, "match_fields")

    @match_fields.setter
    def match_fields(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "match_fields", value)


if not MYPY:

    class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgsDict(
        TypedDict
    ):
        """
        If the affinity requirements specified by this field are not met at
        scheduling time, the pod will not be scheduled onto the node.
        If the affinity requirements specified by this field cease to be met
        at some point during pod execution (e.g. due to an update), the system
        may or may not try to eventually evict the pod from its node.
        """

        node_selector_terms: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatchArgsDict"
                    ]
                ]
            ]
        ]
        """
        Required. A list of node selector terms. The terms are ORed.
        """

elif False:
    ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgs:
    def __init__(
        __self__,
        *,
        node_selector_terms: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatchArgs"
                    ]
                ]
            ]
        ] = None
    ):
        """
        If the affinity requirements specified by this field are not met at
        scheduling time, the pod will not be scheduled onto the node.
        If the affinity requirements specified by this field cease to be met
        at some point during pod execution (e.g. due to an update), the system
        may or may not try to eventually evict the pod from its node.
        :param pulumi.Input[Sequence[pulumi.Input['ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatchArgs']]] node_selector_terms: Required. A list of node selector terms. The terms are ORed.
        """
        if node_selector_terms is not None:
            pulumi.set(__self__, "node_selector_terms", node_selector_terms)

    @property
    @pulumi.getter(name="nodeSelectorTerms")
    def node_selector_terms(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatchArgs"
                ]
            ]
        ]
    ]:
        """
        Required. A list of node selector terms. The terms are ORed.
        """
        return pulumi.get(self, "node_selector_terms")

    @node_selector_terms.setter
    def node_selector_terms(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatchArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "node_selector_terms", value)


if not MYPY:

    class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgsDict(
        TypedDict
    ):
        """
        If the affinity requirements specified by this field are not met at
        scheduling time, the pod will not be scheduled onto the node.
        If the affinity requirements specified by this field cease to be met
        at some point during pod execution (e.g. due to an update), the system
        may or may not try to eventually evict the pod from its node.
        """

        node_selector_terms: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgsDict"
                    ]
                ]
            ]
        ]
        """
        Required. A list of node selector terms. The terms are ORed.
        """

elif False:
    ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs:
    def __init__(
        __self__,
        *,
        node_selector_terms: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgs"
                    ]
                ]
            ]
        ] = None
    ):
        """
        If the affinity requirements specified by this field are not met at
        scheduling time, the pod will not be scheduled onto the node.
        If the affinity requirements specified by this field cease to be met
        at some point during pod execution (e.g. due to an update), the system
        may or may not try to eventually evict the pod from its node.
        :param pulumi.Input[Sequence[pulumi.Input['ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgs']]] node_selector_terms: Required. A list of node selector terms. The terms are ORed.
        """
        if node_selector_terms is not None:
            pulumi.set(__self__, "node_selector_terms", node_selector_terms)

    @property
    @pulumi.getter(name="nodeSelectorTerms")
    def node_selector_terms(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgs"
                ]
            ]
        ]
    ]:
        """
        Required. A list of node selector terms. The terms are ORed.
        """
        return pulumi.get(self, "node_selector_terms")

    @node_selector_terms.setter
    def node_selector_terms(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "node_selector_terms", value)


if not MYPY:

    class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityArgsDict(
        TypedDict
    ):
        """
        Describes node affinity scheduling rules for the pod.
        """

        preferred_during_scheduling_ignored_during_execution: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgsDict"
                    ]
                ]
            ]
        ]
        """
        The scheduler will prefer to schedule pods to nodes that satisfy
        the affinity expressions specified by this field, but it may choose
        a node that violates one or more of the expressions. The node that is
        most preferred is the one with the greatest sum of weights, i.e.
        for each node that meets all of the scheduling requirements (resource
        request, requiredDuringScheduling affinity expressions, etc.),
        compute a sum by iterating through the elements of this field and adding
        "weight" to the sum if the node matches the corresponding matchExpressions; the
        node(s) with the highest sum are the most preferred.
        """
        required_during_scheduling_ignored_during_execution: NotRequired[
            pulumi.Input[
                "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgsDict"
            ]
        ]

elif False:
    ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityArgs:
    def __init__(
        __self__,
        *,
        preferred_during_scheduling_ignored_during_execution: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs"
                    ]
                ]
            ]
        ] = None,
        required_during_scheduling_ignored_during_execution: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs"
            ]
        ] = None
    ):
        """
        Describes node affinity scheduling rules for the pod.
        :param pulumi.Input[Sequence[pulumi.Input['ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs']]] preferred_during_scheduling_ignored_during_execution: The scheduler will prefer to schedule pods to nodes that satisfy
               the affinity expressions specified by this field, but it may choose
               a node that violates one or more of the expressions. The node that is
               most preferred is the one with the greatest sum of weights, i.e.
               for each node that meets all of the scheduling requirements (resource
               request, requiredDuringScheduling affinity expressions, etc.),
               compute a sum by iterating through the elements of this field and adding
               "weight" to the sum if the node matches the corresponding matchExpressions; the
               node(s) with the highest sum are the most preferred.
        """
        if preferred_during_scheduling_ignored_during_execution is not None:
            pulumi.set(
                __self__,
                "preferred_during_scheduling_ignored_during_execution",
                preferred_during_scheduling_ignored_during_execution,
            )
        if required_during_scheduling_ignored_during_execution is not None:
            pulumi.set(
                __self__,
                "required_during_scheduling_ignored_during_execution",
                required_during_scheduling_ignored_during_execution,
            )

    @property
    @pulumi.getter(name="preferredDuringSchedulingIgnoredDuringExecution")
    def preferred_during_scheduling_ignored_during_execution(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs"
                ]
            ]
        ]
    ]:
        """
        The scheduler will prefer to schedule pods to nodes that satisfy
        the affinity expressions specified by this field, but it may choose
        a node that violates one or more of the expressions. The node that is
        most preferred is the one with the greatest sum of weights, i.e.
        for each node that meets all of the scheduling requirements (resource
        request, requiredDuringScheduling affinity expressions, etc.),
        compute a sum by iterating through the elements of this field and adding
        "weight" to the sum if the node matches the corresponding matchExpressions; the
        node(s) with the highest sum are the most preferred.
        """
        return pulumi.get(self, "preferred_during_scheduling_ignored_during_execution")

    @preferred_during_scheduling_ignored_during_execution.setter
    def preferred_during_scheduling_ignored_during_execution(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "preferred_during_scheduling_ignored_during_execution", value)

    @property
    @pulumi.getter(name="requiredDuringSchedulingIgnoredDuringExecution")
    def required_during_scheduling_ignored_during_execution(
        self,
    ) -> Optional[
        pulumi.Input[
            "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs"
        ]
    ]:
        return pulumi.get(self, "required_during_scheduling_ignored_during_execution")

    @required_during_scheduling_ignored_during_execution.setter
    def required_during_scheduling_ignored_during_execution(
        self,
        value: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs"
            ]
        ],
    ):
        pulumi.set(self, "required_during_scheduling_ignored_during_execution", value)


if not MYPY:

    class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPatchArgsDict(
        TypedDict
    ):
        """
        If specified, the pod's scheduling constraints
        """

        node_affinity: NotRequired[
            pulumi.Input[
                "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPatchArgsDict"
            ]
        ]
        pod_affinity: NotRequired[
            pulumi.Input[
                "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPatchArgsDict"
            ]
        ]
        pod_anti_affinity: NotRequired[
            pulumi.Input[
                "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPatchArgsDict"
            ]
        ]

elif False:
    ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPatchArgsDict: TypeAlias = (
        Mapping[str, Any]
    )


@pulumi.input_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPatchArgs:
    def __init__(
        __self__,
        *,
        node_affinity: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPatchArgs"
            ]
        ] = None,
        pod_affinity: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPatchArgs"
            ]
        ] = None,
        pod_anti_affinity: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPatchArgs"
            ]
        ] = None
    ):
        """
        If specified, the pod's scheduling constraints
        """
        if node_affinity is not None:
            pulumi.set(__self__, "node_affinity", node_affinity)
        if pod_affinity is not None:
            pulumi.set(__self__, "pod_affinity", pod_affinity)
        if pod_anti_affinity is not None:
            pulumi.set(__self__, "pod_anti_affinity", pod_anti_affinity)

    @property
    @pulumi.getter(name="nodeAffinity")
    def node_affinity(
        self,
    ) -> Optional[
        pulumi.Input[
            "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPatchArgs"
        ]
    ]:
        return pulumi.get(self, "node_affinity")

    @node_affinity.setter
    def node_affinity(
        self,
        value: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "node_affinity", value)

    @property
    @pulumi.getter(name="podAffinity")
    def pod_affinity(
        self,
    ) -> Optional[
        pulumi.Input[
            "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPatchArgs"
        ]
    ]:
        return pulumi.get(self, "pod_affinity")

    @pod_affinity.setter
    def pod_affinity(
        self,
        value: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "pod_affinity", value)

    @property
    @pulumi.getter(name="podAntiAffinity")
    def pod_anti_affinity(
        self,
    ) -> Optional[
        pulumi.Input[
            "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPatchArgs"
        ]
    ]:
        return pulumi.get(self, "pod_anti_affinity")

    @pod_anti_affinity.setter
    def pod_anti_affinity(
        self,
        value: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "pod_anti_affinity", value)


if not MYPY:

    class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPatchArgsDict(
        TypedDict
    ):
        """
        Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
        """

        preferred_during_scheduling_ignored_during_execution: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgsDict"
                    ]
                ]
            ]
        ]
        """
        The scheduler will prefer to schedule pods to nodes that satisfy
        the affinity expressions specified by this field, but it may choose
        a node that violates one or more of the expressions. The node that is
        most preferred is the one with the greatest sum of weights, i.e.
        for each node that meets all of the scheduling requirements (resource
        request, requiredDuringScheduling affinity expressions, etc.),
        compute a sum by iterating through the elements of this field and adding
        "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
        node(s) with the highest sum are the most preferred.
        """
        required_during_scheduling_ignored_during_execution: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgsDict"
                    ]
                ]
            ]
        ]
        """
        If the affinity requirements specified by this field are not met at
        scheduling time, the pod will not be scheduled onto the node.
        If the affinity requirements specified by this field cease to be met
        at some point during pod execution (e.g. due to a pod label update), the
        system may or may not try to eventually evict the pod from its node.
        When there are multiple elements, the lists of nodes corresponding to each
        podAffinityTerm are intersected, i.e. all terms must be satisfied.
        """

elif False:
    ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPatchArgs:
    def __init__(
        __self__,
        *,
        preferred_during_scheduling_ignored_during_execution: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgs"
                    ]
                ]
            ]
        ] = None,
        required_during_scheduling_ignored_during_execution: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgs"
                    ]
                ]
            ]
        ] = None
    ):
        """
        Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
        :param pulumi.Input[Sequence[pulumi.Input['ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgs']]] preferred_during_scheduling_ignored_during_execution: The scheduler will prefer to schedule pods to nodes that satisfy
               the affinity expressions specified by this field, but it may choose
               a node that violates one or more of the expressions. The node that is
               most preferred is the one with the greatest sum of weights, i.e.
               for each node that meets all of the scheduling requirements (resource
               request, requiredDuringScheduling affinity expressions, etc.),
               compute a sum by iterating through the elements of this field and adding
               "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
               node(s) with the highest sum are the most preferred.
        :param pulumi.Input[Sequence[pulumi.Input['ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgs']]] required_during_scheduling_ignored_during_execution: If the affinity requirements specified by this field are not met at
               scheduling time, the pod will not be scheduled onto the node.
               If the affinity requirements specified by this field cease to be met
               at some point during pod execution (e.g. due to a pod label update), the
               system may or may not try to eventually evict the pod from its node.
               When there are multiple elements, the lists of nodes corresponding to each
               podAffinityTerm are intersected, i.e. all terms must be satisfied.
        """
        if preferred_during_scheduling_ignored_during_execution is not None:
            pulumi.set(
                __self__,
                "preferred_during_scheduling_ignored_during_execution",
                preferred_during_scheduling_ignored_during_execution,
            )
        if required_during_scheduling_ignored_during_execution is not None:
            pulumi.set(
                __self__,
                "required_during_scheduling_ignored_during_execution",
                required_during_scheduling_ignored_during_execution,
            )

    @property
    @pulumi.getter(name="preferredDuringSchedulingIgnoredDuringExecution")
    def preferred_during_scheduling_ignored_during_execution(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgs"
                ]
            ]
        ]
    ]:
        """
        The scheduler will prefer to schedule pods to nodes that satisfy
        the affinity expressions specified by this field, but it may choose
        a node that violates one or more of the expressions. The node that is
        most preferred is the one with the greatest sum of weights, i.e.
        for each node that meets all of the scheduling requirements (resource
        request, requiredDuringScheduling affinity expressions, etc.),
        compute a sum by iterating through the elements of this field and adding
        "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
        node(s) with the highest sum are the most preferred.
        """
        return pulumi.get(self, "preferred_during_scheduling_ignored_during_execution")

    @preferred_during_scheduling_ignored_during_execution.setter
    def preferred_during_scheduling_ignored_during_execution(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "preferred_during_scheduling_ignored_during_execution", value)

    @property
    @pulumi.getter(name="requiredDuringSchedulingIgnoredDuringExecution")
    def required_during_scheduling_ignored_during_execution(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgs"
                ]
            ]
        ]
    ]:
        """
        If the affinity requirements specified by this field are not met at
        scheduling time, the pod will not be scheduled onto the node.
        If the affinity requirements specified by this field cease to be met
        at some point during pod execution (e.g. due to a pod label update), the
        system may or may not try to eventually evict the pod from its node.
        When there are multiple elements, the lists of nodes corresponding to each
        podAffinityTerm are intersected, i.e. all terms must be satisfied.
        """
        return pulumi.get(self, "required_during_scheduling_ignored_during_execution")

    @required_during_scheduling_ignored_during_execution.setter
    def required_during_scheduling_ignored_during_execution(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "required_during_scheduling_ignored_during_execution", value)


if not MYPY:

    class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgsDict(
        TypedDict
    ):
        """
        The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
        """

        pod_affinity_term: NotRequired[
            pulumi.Input[
                "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchArgsDict"
            ]
        ]
        weight: NotRequired[pulumi.Input[int]]
        """
        weight associated with matching the corresponding podAffinityTerm,
        in the range 1-100.
        """

elif False:
    ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgs:
    def __init__(
        __self__,
        *,
        pod_affinity_term: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchArgs"
            ]
        ] = None,
        weight: Optional[pulumi.Input[int]] = None
    ):
        """
        The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
        :param pulumi.Input[int] weight: weight associated with matching the corresponding podAffinityTerm,
               in the range 1-100.
        """
        if pod_affinity_term is not None:
            pulumi.set(__self__, "pod_affinity_term", pod_affinity_term)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter(name="podAffinityTerm")
    def pod_affinity_term(
        self,
    ) -> Optional[
        pulumi.Input[
            "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchArgs"
        ]
    ]:
        return pulumi.get(self, "pod_affinity_term")

    @pod_affinity_term.setter
    def pod_affinity_term(
        self,
        value: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "pod_affinity_term", value)

    @property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[int]]:
        """
        weight associated with matching the corresponding podAffinityTerm,
        in the range 1-100.
        """
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "weight", value)


if not MYPY:

    class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArgsDict(
        TypedDict
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        key is the label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """

elif False:
    ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        operator: Optional[pulumi.Input[str]] = None,
        values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        :param pulumi.Input[str] key: key is the label key that the selector applies to.
        :param pulumi.Input[str] operator: operator represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists and DoesNotExist.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: values is an array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. This array is replaced during a strategic
               merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:

    class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgsDict(
        TypedDict
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        key is the label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """

elif False:
    ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        operator: Optional[pulumi.Input[str]] = None,
        values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        :param pulumi.Input[str] key: key is the label key that the selector applies to.
        :param pulumi.Input[str] operator: operator represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists and DoesNotExist.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: values is an array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. This array is replaced during a strategic
               merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:

    class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchArgsDict(
        TypedDict
    ):
        """
        A label query over a set of resources, in this case pods.
        If it's null, this PodAffinityTerm matches with no Pods.
        """

        match_expressions: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArgsDict"
                    ]
                ]
            ]
        ]
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        match_labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """

elif False:
    ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchArgs:
    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArgs"
                    ]
                ]
            ]
        ] = None,
        match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None
    ):
        """
        A label query over a set of resources, in this case pods.
        If it's null, this PodAffinityTerm matches with no Pods.
        :param pulumi.Input[Sequence[pulumi.Input['ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArgs']]] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
               map is equivalent to an element of matchExpressions, whose key field is "key", the
               operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArgs"
                ]
            ]
        ]
    ]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(
        self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
    ):
        pulumi.set(self, "match_labels", value)


if not MYPY:

    class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgsDict(
        TypedDict
    ):
        """
        A label query over a set of resources, in this case pods.
        If it's null, this PodAffinityTerm matches with no Pods.
        """

        match_expressions: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgsDict"
                    ]
                ]
            ]
        ]
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        match_labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """

elif False:
    ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs:
    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs"
                    ]
                ]
            ]
        ] = None,
        match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None
    ):
        """
        A label query over a set of resources, in this case pods.
        If it's null, this PodAffinityTerm matches with no Pods.
        :param pulumi.Input[Sequence[pulumi.Input['ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs']]] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
               map is equivalent to an element of matchExpressions, whose key field is "key", the
               operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs"
                ]
            ]
        ]
    ]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(
        self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
    ):
        pulumi.set(self, "match_labels", value)


if not MYPY:

    class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArgsDict(
        TypedDict
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        key is the label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """

elif False:
    ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        operator: Optional[pulumi.Input[str]] = None,
        values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        :param pulumi.Input[str] key: key is the label key that the selector applies to.
        :param pulumi.Input[str] operator: operator represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists and DoesNotExist.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: values is an array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. This array is replaced during a strategic
               merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:

    class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgsDict(
        TypedDict
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        key is the label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """

elif False:
    ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        operator: Optional[pulumi.Input[str]] = None,
        values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        :param pulumi.Input[str] key: key is the label key that the selector applies to.
        :param pulumi.Input[str] operator: operator represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists and DoesNotExist.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: values is an array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. This array is replaced during a strategic
               merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:

    class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchArgsDict(
        TypedDict
    ):
        """
        A label query over the set of namespaces that the term applies to.
        The term is applied to the union of the namespaces selected by this field
        and the ones listed in the namespaces field.
        null selector and null or empty namespaces list means "this pod's namespace".
        An empty selector ({}) matches all namespaces.
        """

        match_expressions: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArgsDict"
                    ]
                ]
            ]
        ]
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        match_labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """

elif False:
    ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchArgs:
    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArgs"
                    ]
                ]
            ]
        ] = None,
        match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None
    ):
        """
        A label query over the set of namespaces that the term applies to.
        The term is applied to the union of the namespaces selected by this field
        and the ones listed in the namespaces field.
        null selector and null or empty namespaces list means "this pod's namespace".
        An empty selector ({}) matches all namespaces.
        :param pulumi.Input[Sequence[pulumi.Input['ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArgs']]] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
               map is equivalent to an element of matchExpressions, whose key field is "key", the
               operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArgs"
                ]
            ]
        ]
    ]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(
        self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
    ):
        pulumi.set(self, "match_labels", value)


if not MYPY:

    class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgsDict(
        TypedDict
    ):
        """
        A label query over the set of namespaces that the term applies to.
        The term is applied to the union of the namespaces selected by this field
        and the ones listed in the namespaces field.
        null selector and null or empty namespaces list means "this pod's namespace".
        An empty selector ({}) matches all namespaces.
        """

        match_expressions: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgsDict"
                    ]
                ]
            ]
        ]
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        match_labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """

elif False:
    ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs:
    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs"
                    ]
                ]
            ]
        ] = None,
        match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None
    ):
        """
        A label query over the set of namespaces that the term applies to.
        The term is applied to the union of the namespaces selected by this field
        and the ones listed in the namespaces field.
        null selector and null or empty namespaces list means "this pod's namespace".
        An empty selector ({}) matches all namespaces.
        :param pulumi.Input[Sequence[pulumi.Input['ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs']]] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
               map is equivalent to an element of matchExpressions, whose key field is "key", the
               operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs"
                ]
            ]
        ]
    ]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(
        self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
    ):
        pulumi.set(self, "match_labels", value)


if not MYPY:

    class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchArgsDict(
        TypedDict
    ):
        """
        Required. A pod affinity term, associated with the corresponding weight.
        """

        label_selector: NotRequired[
            pulumi.Input[
                "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchArgsDict"
            ]
        ]
        match_label_keys: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        MatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both matchLabelKeys and labelSelector.
        Also, matchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        mismatch_label_keys: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        MismatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
        Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        namespace_selector: NotRequired[
            pulumi.Input[
                "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchArgsDict"
            ]
        ]
        namespaces: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        namespaces specifies a static list of namespace names that the term applies to.
        The term is applied to the union of the namespaces listed in this field
        and the ones selected by namespaceSelector.
        null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        """
        topology_key: NotRequired[pulumi.Input[str]]
        """
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
        the labelSelector in the specified namespaces, where co-located is defined as running on a node
        whose value of the label with key topologyKey matches that of any node on which any of the
        selected pods is running.
        Empty topologyKey is not allowed.
        """

elif False:
    ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchArgs:
    def __init__(
        __self__,
        *,
        label_selector: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchArgs"
            ]
        ] = None,
        match_label_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        mismatch_label_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        namespace_selector: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchArgs"
            ]
        ] = None,
        namespaces: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        topology_key: Optional[pulumi.Input[str]] = None
    ):
        """
        Required. A pod affinity term, associated with the corresponding weight.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] match_label_keys: MatchLabelKeys is a set of pod label keys to select which pods will
               be taken into consideration. The keys are used to lookup values from the
               incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
               to select the group of existing pods which pods will be taken into consideration
               for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
               pod labels will be ignored. The default value is empty.
               The same key is forbidden to exist in both matchLabelKeys and labelSelector.
               Also, matchLabelKeys cannot be set when labelSelector isn't set.
               This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] mismatch_label_keys: MismatchLabelKeys is a set of pod label keys to select which pods will
               be taken into consideration. The keys are used to lookup values from the
               incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
               to select the group of existing pods which pods will be taken into consideration
               for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
               pod labels will be ignored. The default value is empty.
               The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
               Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
               This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] namespaces: namespaces specifies a static list of namespace names that the term applies to.
               The term is applied to the union of the namespaces listed in this field
               and the ones selected by namespaceSelector.
               null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        :param pulumi.Input[str] topology_key: This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
               the labelSelector in the specified namespaces, where co-located is defined as running on a node
               whose value of the label with key topologyKey matches that of any node on which any of the
               selected pods is running.
               Empty topologyKey is not allowed.
        """
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if match_label_keys is not None:
            pulumi.set(__self__, "match_label_keys", match_label_keys)
        if mismatch_label_keys is not None:
            pulumi.set(__self__, "mismatch_label_keys", mismatch_label_keys)
        if namespace_selector is not None:
            pulumi.set(__self__, "namespace_selector", namespace_selector)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)
        if topology_key is not None:
            pulumi.set(__self__, "topology_key", topology_key)

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(
        self,
    ) -> Optional[
        pulumi.Input[
            "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchArgs"
        ]
    ]:
        return pulumi.get(self, "label_selector")

    @label_selector.setter
    def label_selector(
        self,
        value: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "label_selector", value)

    @property
    @pulumi.getter(name="matchLabelKeys")
    def match_label_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        MatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both matchLabelKeys and labelSelector.
        Also, matchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        return pulumi.get(self, "match_label_keys")

    @match_label_keys.setter
    def match_label_keys(
        self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]
    ):
        pulumi.set(self, "match_label_keys", value)

    @property
    @pulumi.getter(name="mismatchLabelKeys")
    def mismatch_label_keys(
        self,
    ) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        MismatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
        Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        return pulumi.get(self, "mismatch_label_keys")

    @mismatch_label_keys.setter
    def mismatch_label_keys(
        self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]
    ):
        pulumi.set(self, "mismatch_label_keys", value)

    @property
    @pulumi.getter(name="namespaceSelector")
    def namespace_selector(
        self,
    ) -> Optional[
        pulumi.Input[
            "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchArgs"
        ]
    ]:
        return pulumi.get(self, "namespace_selector")

    @namespace_selector.setter
    def namespace_selector(
        self,
        value: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "namespace_selector", value)

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        namespaces specifies a static list of namespace names that the term applies to.
        The term is applied to the union of the namespaces listed in this field
        and the ones selected by namespaceSelector.
        null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        """
        return pulumi.get(self, "namespaces")

    @namespaces.setter
    def namespaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "namespaces", value)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> Optional[pulumi.Input[str]]:
        """
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
        the labelSelector in the specified namespaces, where co-located is defined as running on a node
        whose value of the label with key topologyKey matches that of any node on which any of the
        selected pods is running.
        Empty topologyKey is not allowed.
        """
        return pulumi.get(self, "topology_key")

    @topology_key.setter
    def topology_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topology_key", value)


if not MYPY:

    class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgsDict(
        TypedDict
    ):
        """
        Required. A pod affinity term, associated with the corresponding weight.
        """

        label_selector: NotRequired[
            pulumi.Input[
                "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgsDict"
            ]
        ]
        match_label_keys: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        MatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both matchLabelKeys and labelSelector.
        Also, matchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        mismatch_label_keys: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        MismatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
        Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        namespace_selector: NotRequired[
            pulumi.Input[
                "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgsDict"
            ]
        ]
        namespaces: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        namespaces specifies a static list of namespace names that the term applies to.
        The term is applied to the union of the namespaces listed in this field
        and the ones selected by namespaceSelector.
        null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        """
        topology_key: NotRequired[pulumi.Input[str]]
        """
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
        the labelSelector in the specified namespaces, where co-located is defined as running on a node
        whose value of the label with key topologyKey matches that of any node on which any of the
        selected pods is running.
        Empty topologyKey is not allowed.
        """

elif False:
    ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs:
    def __init__(
        __self__,
        *,
        label_selector: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs"
            ]
        ] = None,
        match_label_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        mismatch_label_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        namespace_selector: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs"
            ]
        ] = None,
        namespaces: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        topology_key: Optional[pulumi.Input[str]] = None
    ):
        """
        Required. A pod affinity term, associated with the corresponding weight.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] match_label_keys: MatchLabelKeys is a set of pod label keys to select which pods will
               be taken into consideration. The keys are used to lookup values from the
               incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
               to select the group of existing pods which pods will be taken into consideration
               for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
               pod labels will be ignored. The default value is empty.
               The same key is forbidden to exist in both matchLabelKeys and labelSelector.
               Also, matchLabelKeys cannot be set when labelSelector isn't set.
               This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] mismatch_label_keys: MismatchLabelKeys is a set of pod label keys to select which pods will
               be taken into consideration. The keys are used to lookup values from the
               incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
               to select the group of existing pods which pods will be taken into consideration
               for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
               pod labels will be ignored. The default value is empty.
               The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
               Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
               This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] namespaces: namespaces specifies a static list of namespace names that the term applies to.
               The term is applied to the union of the namespaces listed in this field
               and the ones selected by namespaceSelector.
               null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        :param pulumi.Input[str] topology_key: This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
               the labelSelector in the specified namespaces, where co-located is defined as running on a node
               whose value of the label with key topologyKey matches that of any node on which any of the
               selected pods is running.
               Empty topologyKey is not allowed.
        """
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if match_label_keys is not None:
            pulumi.set(__self__, "match_label_keys", match_label_keys)
        if mismatch_label_keys is not None:
            pulumi.set(__self__, "mismatch_label_keys", mismatch_label_keys)
        if namespace_selector is not None:
            pulumi.set(__self__, "namespace_selector", namespace_selector)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)
        if topology_key is not None:
            pulumi.set(__self__, "topology_key", topology_key)

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(
        self,
    ) -> Optional[
        pulumi.Input[
            "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs"
        ]
    ]:
        return pulumi.get(self, "label_selector")

    @label_selector.setter
    def label_selector(
        self,
        value: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs"
            ]
        ],
    ):
        pulumi.set(self, "label_selector", value)

    @property
    @pulumi.getter(name="matchLabelKeys")
    def match_label_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        MatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both matchLabelKeys and labelSelector.
        Also, matchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        return pulumi.get(self, "match_label_keys")

    @match_label_keys.setter
    def match_label_keys(
        self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]
    ):
        pulumi.set(self, "match_label_keys", value)

    @property
    @pulumi.getter(name="mismatchLabelKeys")
    def mismatch_label_keys(
        self,
    ) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        MismatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
        Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        return pulumi.get(self, "mismatch_label_keys")

    @mismatch_label_keys.setter
    def mismatch_label_keys(
        self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]
    ):
        pulumi.set(self, "mismatch_label_keys", value)

    @property
    @pulumi.getter(name="namespaceSelector")
    def namespace_selector(
        self,
    ) -> Optional[
        pulumi.Input[
            "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs"
        ]
    ]:
        return pulumi.get(self, "namespace_selector")

    @namespace_selector.setter
    def namespace_selector(
        self,
        value: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs"
            ]
        ],
    ):
        pulumi.set(self, "namespace_selector", value)

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        namespaces specifies a static list of namespace names that the term applies to.
        The term is applied to the union of the namespaces listed in this field
        and the ones selected by namespaceSelector.
        null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        """
        return pulumi.get(self, "namespaces")

    @namespaces.setter
    def namespaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "namespaces", value)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> Optional[pulumi.Input[str]]:
        """
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
        the labelSelector in the specified namespaces, where co-located is defined as running on a node
        whose value of the label with key topologyKey matches that of any node on which any of the
        selected pods is running.
        Empty topologyKey is not allowed.
        """
        return pulumi.get(self, "topology_key")

    @topology_key.setter
    def topology_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topology_key", value)


if not MYPY:

    class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgsDict(
        TypedDict
    ):
        """
        The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
        """

        pod_affinity_term: NotRequired[
            pulumi.Input[
                "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgsDict"
            ]
        ]
        weight: NotRequired[pulumi.Input[int]]
        """
        weight associated with matching the corresponding podAffinityTerm,
        in the range 1-100.
        """

elif False:
    ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs:
    def __init__(
        __self__,
        *,
        pod_affinity_term: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs"
            ]
        ] = None,
        weight: Optional[pulumi.Input[int]] = None
    ):
        """
        The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
        :param pulumi.Input[int] weight: weight associated with matching the corresponding podAffinityTerm,
               in the range 1-100.
        """
        if pod_affinity_term is not None:
            pulumi.set(__self__, "pod_affinity_term", pod_affinity_term)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter(name="podAffinityTerm")
    def pod_affinity_term(
        self,
    ) -> Optional[
        pulumi.Input[
            "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs"
        ]
    ]:
        return pulumi.get(self, "pod_affinity_term")

    @pod_affinity_term.setter
    def pod_affinity_term(
        self,
        value: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs"
            ]
        ],
    ):
        pulumi.set(self, "pod_affinity_term", value)

    @property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[int]]:
        """
        weight associated with matching the corresponding podAffinityTerm,
        in the range 1-100.
        """
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "weight", value)


if not MYPY:

    class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArgsDict(
        TypedDict
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        key is the label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """

elif False:
    ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        operator: Optional[pulumi.Input[str]] = None,
        values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        :param pulumi.Input[str] key: key is the label key that the selector applies to.
        :param pulumi.Input[str] operator: operator represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists and DoesNotExist.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: values is an array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. This array is replaced during a strategic
               merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:

    class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgsDict(
        TypedDict
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        key is the label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """

elif False:
    ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        operator: Optional[pulumi.Input[str]] = None,
        values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        :param pulumi.Input[str] key: key is the label key that the selector applies to.
        :param pulumi.Input[str] operator: operator represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists and DoesNotExist.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: values is an array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. This array is replaced during a strategic
               merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:

    class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchArgsDict(
        TypedDict
    ):
        """
        A label query over a set of resources, in this case pods.
        If it's null, this PodAffinityTerm matches with no Pods.
        """

        match_expressions: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArgsDict"
                    ]
                ]
            ]
        ]
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        match_labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """

elif False:
    ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchArgs:
    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArgs"
                    ]
                ]
            ]
        ] = None,
        match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None
    ):
        """
        A label query over a set of resources, in this case pods.
        If it's null, this PodAffinityTerm matches with no Pods.
        :param pulumi.Input[Sequence[pulumi.Input['ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArgs']]] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
               map is equivalent to an element of matchExpressions, whose key field is "key", the
               operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArgs"
                ]
            ]
        ]
    ]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(
        self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
    ):
        pulumi.set(self, "match_labels", value)


if not MYPY:

    class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgsDict(
        TypedDict
    ):
        """
        A label query over a set of resources, in this case pods.
        If it's null, this PodAffinityTerm matches with no Pods.
        """

        match_expressions: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgsDict"
                    ]
                ]
            ]
        ]
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        match_labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """

elif False:
    ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs:
    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs"
                    ]
                ]
            ]
        ] = None,
        match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None
    ):
        """
        A label query over a set of resources, in this case pods.
        If it's null, this PodAffinityTerm matches with no Pods.
        :param pulumi.Input[Sequence[pulumi.Input['ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs']]] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
               map is equivalent to an element of matchExpressions, whose key field is "key", the
               operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs"
                ]
            ]
        ]
    ]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(
        self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
    ):
        pulumi.set(self, "match_labels", value)


if not MYPY:

    class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArgsDict(
        TypedDict
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        key is the label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """

elif False:
    ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        operator: Optional[pulumi.Input[str]] = None,
        values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        :param pulumi.Input[str] key: key is the label key that the selector applies to.
        :param pulumi.Input[str] operator: operator represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists and DoesNotExist.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: values is an array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. This array is replaced during a strategic
               merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:

    class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgsDict(
        TypedDict
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        key is the label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """

elif False:
    ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        operator: Optional[pulumi.Input[str]] = None,
        values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        :param pulumi.Input[str] key: key is the label key that the selector applies to.
        :param pulumi.Input[str] operator: operator represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists and DoesNotExist.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: values is an array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. This array is replaced during a strategic
               merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:

    class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchArgsDict(
        TypedDict
    ):
        """
        A label query over the set of namespaces that the term applies to.
        The term is applied to the union of the namespaces selected by this field
        and the ones listed in the namespaces field.
        null selector and null or empty namespaces list means "this pod's namespace".
        An empty selector ({}) matches all namespaces.
        """

        match_expressions: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArgsDict"
                    ]
                ]
            ]
        ]
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        match_labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """

elif False:
    ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchArgs:
    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArgs"
                    ]
                ]
            ]
        ] = None,
        match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None
    ):
        """
        A label query over the set of namespaces that the term applies to.
        The term is applied to the union of the namespaces selected by this field
        and the ones listed in the namespaces field.
        null selector and null or empty namespaces list means "this pod's namespace".
        An empty selector ({}) matches all namespaces.
        :param pulumi.Input[Sequence[pulumi.Input['ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArgs']]] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
               map is equivalent to an element of matchExpressions, whose key field is "key", the
               operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArgs"
                ]
            ]
        ]
    ]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(
        self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
    ):
        pulumi.set(self, "match_labels", value)


if not MYPY:

    class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgsDict(
        TypedDict
    ):
        """
        A label query over the set of namespaces that the term applies to.
        The term is applied to the union of the namespaces selected by this field
        and the ones listed in the namespaces field.
        null selector and null or empty namespaces list means "this pod's namespace".
        An empty selector ({}) matches all namespaces.
        """

        match_expressions: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgsDict"
                    ]
                ]
            ]
        ]
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        match_labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """

elif False:
    ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs:
    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs"
                    ]
                ]
            ]
        ] = None,
        match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None
    ):
        """
        A label query over the set of namespaces that the term applies to.
        The term is applied to the union of the namespaces selected by this field
        and the ones listed in the namespaces field.
        null selector and null or empty namespaces list means "this pod's namespace".
        An empty selector ({}) matches all namespaces.
        :param pulumi.Input[Sequence[pulumi.Input['ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs']]] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
               map is equivalent to an element of matchExpressions, whose key field is "key", the
               operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs"
                ]
            ]
        ]
    ]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(
        self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
    ):
        pulumi.set(self, "match_labels", value)


if not MYPY:

    class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgsDict(
        TypedDict
    ):
        """
        Defines a set of pods (namely those matching the labelSelector
        relative to the given namespace(s)) that this pod should be
        co-located (affinity) or not co-located (anti-affinity) with,
        where co-located is defined as running on a node whose value of
        the label with key <topologyKey> matches that of any node on which
        a pod of the set of pods is running
        """

        label_selector: NotRequired[
            pulumi.Input[
                "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchArgsDict"
            ]
        ]
        match_label_keys: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        MatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both matchLabelKeys and labelSelector.
        Also, matchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        mismatch_label_keys: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        MismatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
        Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        namespace_selector: NotRequired[
            pulumi.Input[
                "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchArgsDict"
            ]
        ]
        namespaces: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        namespaces specifies a static list of namespace names that the term applies to.
        The term is applied to the union of the namespaces listed in this field
        and the ones selected by namespaceSelector.
        null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        """
        topology_key: NotRequired[pulumi.Input[str]]
        """
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
        the labelSelector in the specified namespaces, where co-located is defined as running on a node
        whose value of the label with key topologyKey matches that of any node on which any of the
        selected pods is running.
        Empty topologyKey is not allowed.
        """

elif False:
    ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgs:
    def __init__(
        __self__,
        *,
        label_selector: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchArgs"
            ]
        ] = None,
        match_label_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        mismatch_label_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        namespace_selector: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchArgs"
            ]
        ] = None,
        namespaces: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        topology_key: Optional[pulumi.Input[str]] = None
    ):
        """
        Defines a set of pods (namely those matching the labelSelector
        relative to the given namespace(s)) that this pod should be
        co-located (affinity) or not co-located (anti-affinity) with,
        where co-located is defined as running on a node whose value of
        the label with key <topologyKey> matches that of any node on which
        a pod of the set of pods is running
        :param pulumi.Input[Sequence[pulumi.Input[str]]] match_label_keys: MatchLabelKeys is a set of pod label keys to select which pods will
               be taken into consideration. The keys are used to lookup values from the
               incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
               to select the group of existing pods which pods will be taken into consideration
               for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
               pod labels will be ignored. The default value is empty.
               The same key is forbidden to exist in both matchLabelKeys and labelSelector.
               Also, matchLabelKeys cannot be set when labelSelector isn't set.
               This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] mismatch_label_keys: MismatchLabelKeys is a set of pod label keys to select which pods will
               be taken into consideration. The keys are used to lookup values from the
               incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
               to select the group of existing pods which pods will be taken into consideration
               for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
               pod labels will be ignored. The default value is empty.
               The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
               Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
               This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] namespaces: namespaces specifies a static list of namespace names that the term applies to.
               The term is applied to the union of the namespaces listed in this field
               and the ones selected by namespaceSelector.
               null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        :param pulumi.Input[str] topology_key: This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
               the labelSelector in the specified namespaces, where co-located is defined as running on a node
               whose value of the label with key topologyKey matches that of any node on which any of the
               selected pods is running.
               Empty topologyKey is not allowed.
        """
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if match_label_keys is not None:
            pulumi.set(__self__, "match_label_keys", match_label_keys)
        if mismatch_label_keys is not None:
            pulumi.set(__self__, "mismatch_label_keys", mismatch_label_keys)
        if namespace_selector is not None:
            pulumi.set(__self__, "namespace_selector", namespace_selector)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)
        if topology_key is not None:
            pulumi.set(__self__, "topology_key", topology_key)

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(
        self,
    ) -> Optional[
        pulumi.Input[
            "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchArgs"
        ]
    ]:
        return pulumi.get(self, "label_selector")

    @label_selector.setter
    def label_selector(
        self,
        value: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "label_selector", value)

    @property
    @pulumi.getter(name="matchLabelKeys")
    def match_label_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        MatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both matchLabelKeys and labelSelector.
        Also, matchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        return pulumi.get(self, "match_label_keys")

    @match_label_keys.setter
    def match_label_keys(
        self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]
    ):
        pulumi.set(self, "match_label_keys", value)

    @property
    @pulumi.getter(name="mismatchLabelKeys")
    def mismatch_label_keys(
        self,
    ) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        MismatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
        Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        return pulumi.get(self, "mismatch_label_keys")

    @mismatch_label_keys.setter
    def mismatch_label_keys(
        self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]
    ):
        pulumi.set(self, "mismatch_label_keys", value)

    @property
    @pulumi.getter(name="namespaceSelector")
    def namespace_selector(
        self,
    ) -> Optional[
        pulumi.Input[
            "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchArgs"
        ]
    ]:
        return pulumi.get(self, "namespace_selector")

    @namespace_selector.setter
    def namespace_selector(
        self,
        value: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "namespace_selector", value)

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        namespaces specifies a static list of namespace names that the term applies to.
        The term is applied to the union of the namespaces listed in this field
        and the ones selected by namespaceSelector.
        null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        """
        return pulumi.get(self, "namespaces")

    @namespaces.setter
    def namespaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "namespaces", value)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> Optional[pulumi.Input[str]]:
        """
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
        the labelSelector in the specified namespaces, where co-located is defined as running on a node
        whose value of the label with key topologyKey matches that of any node on which any of the
        selected pods is running.
        Empty topologyKey is not allowed.
        """
        return pulumi.get(self, "topology_key")

    @topology_key.setter
    def topology_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topology_key", value)


if not MYPY:

    class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgsDict(
        TypedDict
    ):
        """
        Defines a set of pods (namely those matching the labelSelector
        relative to the given namespace(s)) that this pod should be
        co-located (affinity) or not co-located (anti-affinity) with,
        where co-located is defined as running on a node whose value of
        the label with key <topologyKey> matches that of any node on which
        a pod of the set of pods is running
        """

        label_selector: NotRequired[
            pulumi.Input[
                "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgsDict"
            ]
        ]
        match_label_keys: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        MatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both matchLabelKeys and labelSelector.
        Also, matchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        mismatch_label_keys: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        MismatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
        Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        namespace_selector: NotRequired[
            pulumi.Input[
                "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgsDict"
            ]
        ]
        namespaces: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        namespaces specifies a static list of namespace names that the term applies to.
        The term is applied to the union of the namespaces listed in this field
        and the ones selected by namespaceSelector.
        null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        """
        topology_key: NotRequired[pulumi.Input[str]]
        """
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
        the labelSelector in the specified namespaces, where co-located is defined as running on a node
        whose value of the label with key topologyKey matches that of any node on which any of the
        selected pods is running.
        Empty topologyKey is not allowed.
        """

elif False:
    ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs:
    def __init__(
        __self__,
        *,
        label_selector: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs"
            ]
        ] = None,
        match_label_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        mismatch_label_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        namespace_selector: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs"
            ]
        ] = None,
        namespaces: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        topology_key: Optional[pulumi.Input[str]] = None
    ):
        """
        Defines a set of pods (namely those matching the labelSelector
        relative to the given namespace(s)) that this pod should be
        co-located (affinity) or not co-located (anti-affinity) with,
        where co-located is defined as running on a node whose value of
        the label with key <topologyKey> matches that of any node on which
        a pod of the set of pods is running
        :param pulumi.Input[Sequence[pulumi.Input[str]]] match_label_keys: MatchLabelKeys is a set of pod label keys to select which pods will
               be taken into consideration. The keys are used to lookup values from the
               incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
               to select the group of existing pods which pods will be taken into consideration
               for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
               pod labels will be ignored. The default value is empty.
               The same key is forbidden to exist in both matchLabelKeys and labelSelector.
               Also, matchLabelKeys cannot be set when labelSelector isn't set.
               This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] mismatch_label_keys: MismatchLabelKeys is a set of pod label keys to select which pods will
               be taken into consideration. The keys are used to lookup values from the
               incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
               to select the group of existing pods which pods will be taken into consideration
               for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
               pod labels will be ignored. The default value is empty.
               The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
               Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
               This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] namespaces: namespaces specifies a static list of namespace names that the term applies to.
               The term is applied to the union of the namespaces listed in this field
               and the ones selected by namespaceSelector.
               null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        :param pulumi.Input[str] topology_key: This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
               the labelSelector in the specified namespaces, where co-located is defined as running on a node
               whose value of the label with key topologyKey matches that of any node on which any of the
               selected pods is running.
               Empty topologyKey is not allowed.
        """
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if match_label_keys is not None:
            pulumi.set(__self__, "match_label_keys", match_label_keys)
        if mismatch_label_keys is not None:
            pulumi.set(__self__, "mismatch_label_keys", mismatch_label_keys)
        if namespace_selector is not None:
            pulumi.set(__self__, "namespace_selector", namespace_selector)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)
        if topology_key is not None:
            pulumi.set(__self__, "topology_key", topology_key)

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(
        self,
    ) -> Optional[
        pulumi.Input[
            "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs"
        ]
    ]:
        return pulumi.get(self, "label_selector")

    @label_selector.setter
    def label_selector(
        self,
        value: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs"
            ]
        ],
    ):
        pulumi.set(self, "label_selector", value)

    @property
    @pulumi.getter(name="matchLabelKeys")
    def match_label_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        MatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both matchLabelKeys and labelSelector.
        Also, matchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        return pulumi.get(self, "match_label_keys")

    @match_label_keys.setter
    def match_label_keys(
        self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]
    ):
        pulumi.set(self, "match_label_keys", value)

    @property
    @pulumi.getter(name="mismatchLabelKeys")
    def mismatch_label_keys(
        self,
    ) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        MismatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
        Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        return pulumi.get(self, "mismatch_label_keys")

    @mismatch_label_keys.setter
    def mismatch_label_keys(
        self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]
    ):
        pulumi.set(self, "mismatch_label_keys", value)

    @property
    @pulumi.getter(name="namespaceSelector")
    def namespace_selector(
        self,
    ) -> Optional[
        pulumi.Input[
            "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs"
        ]
    ]:
        return pulumi.get(self, "namespace_selector")

    @namespace_selector.setter
    def namespace_selector(
        self,
        value: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs"
            ]
        ],
    ):
        pulumi.set(self, "namespace_selector", value)

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        namespaces specifies a static list of namespace names that the term applies to.
        The term is applied to the union of the namespaces listed in this field
        and the ones selected by namespaceSelector.
        null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        """
        return pulumi.get(self, "namespaces")

    @namespaces.setter
    def namespaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "namespaces", value)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> Optional[pulumi.Input[str]]:
        """
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
        the labelSelector in the specified namespaces, where co-located is defined as running on a node
        whose value of the label with key topologyKey matches that of any node on which any of the
        selected pods is running.
        Empty topologyKey is not allowed.
        """
        return pulumi.get(self, "topology_key")

    @topology_key.setter
    def topology_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topology_key", value)


if not MYPY:

    class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityArgsDict(
        TypedDict
    ):
        """
        Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
        """

        preferred_during_scheduling_ignored_during_execution: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgsDict"
                    ]
                ]
            ]
        ]
        """
        The scheduler will prefer to schedule pods to nodes that satisfy
        the affinity expressions specified by this field, but it may choose
        a node that violates one or more of the expressions. The node that is
        most preferred is the one with the greatest sum of weights, i.e.
        for each node that meets all of the scheduling requirements (resource
        request, requiredDuringScheduling affinity expressions, etc.),
        compute a sum by iterating through the elements of this field and adding
        "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
        node(s) with the highest sum are the most preferred.
        """
        required_during_scheduling_ignored_during_execution: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgsDict"
                    ]
                ]
            ]
        ]
        """
        If the affinity requirements specified by this field are not met at
        scheduling time, the pod will not be scheduled onto the node.
        If the affinity requirements specified by this field cease to be met
        at some point during pod execution (e.g. due to a pod label update), the
        system may or may not try to eventually evict the pod from its node.
        When there are multiple elements, the lists of nodes corresponding to each
        podAffinityTerm are intersected, i.e. all terms must be satisfied.
        """

elif False:
    ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityArgs:
    def __init__(
        __self__,
        *,
        preferred_during_scheduling_ignored_during_execution: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs"
                    ]
                ]
            ]
        ] = None,
        required_during_scheduling_ignored_during_execution: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs"
                    ]
                ]
            ]
        ] = None
    ):
        """
        Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
        :param pulumi.Input[Sequence[pulumi.Input['ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs']]] preferred_during_scheduling_ignored_during_execution: The scheduler will prefer to schedule pods to nodes that satisfy
               the affinity expressions specified by this field, but it may choose
               a node that violates one or more of the expressions. The node that is
               most preferred is the one with the greatest sum of weights, i.e.
               for each node that meets all of the scheduling requirements (resource
               request, requiredDuringScheduling affinity expressions, etc.),
               compute a sum by iterating through the elements of this field and adding
               "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
               node(s) with the highest sum are the most preferred.
        :param pulumi.Input[Sequence[pulumi.Input['ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs']]] required_during_scheduling_ignored_during_execution: If the affinity requirements specified by this field are not met at
               scheduling time, the pod will not be scheduled onto the node.
               If the affinity requirements specified by this field cease to be met
               at some point during pod execution (e.g. due to a pod label update), the
               system may or may not try to eventually evict the pod from its node.
               When there are multiple elements, the lists of nodes corresponding to each
               podAffinityTerm are intersected, i.e. all terms must be satisfied.
        """
        if preferred_during_scheduling_ignored_during_execution is not None:
            pulumi.set(
                __self__,
                "preferred_during_scheduling_ignored_during_execution",
                preferred_during_scheduling_ignored_during_execution,
            )
        if required_during_scheduling_ignored_during_execution is not None:
            pulumi.set(
                __self__,
                "required_during_scheduling_ignored_during_execution",
                required_during_scheduling_ignored_during_execution,
            )

    @property
    @pulumi.getter(name="preferredDuringSchedulingIgnoredDuringExecution")
    def preferred_during_scheduling_ignored_during_execution(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs"
                ]
            ]
        ]
    ]:
        """
        The scheduler will prefer to schedule pods to nodes that satisfy
        the affinity expressions specified by this field, but it may choose
        a node that violates one or more of the expressions. The node that is
        most preferred is the one with the greatest sum of weights, i.e.
        for each node that meets all of the scheduling requirements (resource
        request, requiredDuringScheduling affinity expressions, etc.),
        compute a sum by iterating through the elements of this field and adding
        "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
        node(s) with the highest sum are the most preferred.
        """
        return pulumi.get(self, "preferred_during_scheduling_ignored_during_execution")

    @preferred_during_scheduling_ignored_during_execution.setter
    def preferred_during_scheduling_ignored_during_execution(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "preferred_during_scheduling_ignored_during_execution", value)

    @property
    @pulumi.getter(name="requiredDuringSchedulingIgnoredDuringExecution")
    def required_during_scheduling_ignored_during_execution(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs"
                ]
            ]
        ]
    ]:
        """
        If the affinity requirements specified by this field are not met at
        scheduling time, the pod will not be scheduled onto the node.
        If the affinity requirements specified by this field cease to be met
        at some point during pod execution (e.g. due to a pod label update), the
        system may or may not try to eventually evict the pod from its node.
        When there are multiple elements, the lists of nodes corresponding to each
        podAffinityTerm are intersected, i.e. all terms must be satisfied.
        """
        return pulumi.get(self, "required_during_scheduling_ignored_during_execution")

    @required_during_scheduling_ignored_during_execution.setter
    def required_during_scheduling_ignored_during_execution(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "required_during_scheduling_ignored_during_execution", value)


if not MYPY:

    class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPatchArgsDict(
        TypedDict
    ):
        """
        Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
        """

        preferred_during_scheduling_ignored_during_execution: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgsDict"
                    ]
                ]
            ]
        ]
        """
        The scheduler will prefer to schedule pods to nodes that satisfy
        the anti-affinity expressions specified by this field, but it may choose
        a node that violates one or more of the expressions. The node that is
        most preferred is the one with the greatest sum of weights, i.e.
        for each node that meets all of the scheduling requirements (resource
        request, requiredDuringScheduling anti-affinity expressions, etc.),
        compute a sum by iterating through the elements of this field and adding
        "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
        node(s) with the highest sum are the most preferred.
        """
        required_during_scheduling_ignored_during_execution: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgsDict"
                    ]
                ]
            ]
        ]
        """
        If the anti-affinity requirements specified by this field are not met at
        scheduling time, the pod will not be scheduled onto the node.
        If the anti-affinity requirements specified by this field cease to be met
        at some point during pod execution (e.g. due to a pod label update), the
        system may or may not try to eventually evict the pod from its node.
        When there are multiple elements, the lists of nodes corresponding to each
        podAffinityTerm are intersected, i.e. all terms must be satisfied.
        """

elif False:
    ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPatchArgs:
    def __init__(
        __self__,
        *,
        preferred_during_scheduling_ignored_during_execution: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgs"
                    ]
                ]
            ]
        ] = None,
        required_during_scheduling_ignored_during_execution: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgs"
                    ]
                ]
            ]
        ] = None
    ):
        """
        Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
        :param pulumi.Input[Sequence[pulumi.Input['ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgs']]] preferred_during_scheduling_ignored_during_execution: The scheduler will prefer to schedule pods to nodes that satisfy
               the anti-affinity expressions specified by this field, but it may choose
               a node that violates one or more of the expressions. The node that is
               most preferred is the one with the greatest sum of weights, i.e.
               for each node that meets all of the scheduling requirements (resource
               request, requiredDuringScheduling anti-affinity expressions, etc.),
               compute a sum by iterating through the elements of this field and adding
               "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
               node(s) with the highest sum are the most preferred.
        :param pulumi.Input[Sequence[pulumi.Input['ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgs']]] required_during_scheduling_ignored_during_execution: If the anti-affinity requirements specified by this field are not met at
               scheduling time, the pod will not be scheduled onto the node.
               If the anti-affinity requirements specified by this field cease to be met
               at some point during pod execution (e.g. due to a pod label update), the
               system may or may not try to eventually evict the pod from its node.
               When there are multiple elements, the lists of nodes corresponding to each
               podAffinityTerm are intersected, i.e. all terms must be satisfied.
        """
        if preferred_during_scheduling_ignored_during_execution is not None:
            pulumi.set(
                __self__,
                "preferred_during_scheduling_ignored_during_execution",
                preferred_during_scheduling_ignored_during_execution,
            )
        if required_during_scheduling_ignored_during_execution is not None:
            pulumi.set(
                __self__,
                "required_during_scheduling_ignored_during_execution",
                required_during_scheduling_ignored_during_execution,
            )

    @property
    @pulumi.getter(name="preferredDuringSchedulingIgnoredDuringExecution")
    def preferred_during_scheduling_ignored_during_execution(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgs"
                ]
            ]
        ]
    ]:
        """
        The scheduler will prefer to schedule pods to nodes that satisfy
        the anti-affinity expressions specified by this field, but it may choose
        a node that violates one or more of the expressions. The node that is
        most preferred is the one with the greatest sum of weights, i.e.
        for each node that meets all of the scheduling requirements (resource
        request, requiredDuringScheduling anti-affinity expressions, etc.),
        compute a sum by iterating through the elements of this field and adding
        "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
        node(s) with the highest sum are the most preferred.
        """
        return pulumi.get(self, "preferred_during_scheduling_ignored_during_execution")

    @preferred_during_scheduling_ignored_during_execution.setter
    def preferred_during_scheduling_ignored_during_execution(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "preferred_during_scheduling_ignored_during_execution", value)

    @property
    @pulumi.getter(name="requiredDuringSchedulingIgnoredDuringExecution")
    def required_during_scheduling_ignored_during_execution(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgs"
                ]
            ]
        ]
    ]:
        """
        If the anti-affinity requirements specified by this field are not met at
        scheduling time, the pod will not be scheduled onto the node.
        If the anti-affinity requirements specified by this field cease to be met
        at some point during pod execution (e.g. due to a pod label update), the
        system may or may not try to eventually evict the pod from its node.
        When there are multiple elements, the lists of nodes corresponding to each
        podAffinityTerm are intersected, i.e. all terms must be satisfied.
        """
        return pulumi.get(self, "required_during_scheduling_ignored_during_execution")

    @required_during_scheduling_ignored_during_execution.setter
    def required_during_scheduling_ignored_during_execution(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "required_during_scheduling_ignored_during_execution", value)


if not MYPY:

    class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgsDict(
        TypedDict
    ):
        """
        The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
        """

        pod_affinity_term: NotRequired[
            pulumi.Input[
                "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchArgsDict"
            ]
        ]
        weight: NotRequired[pulumi.Input[int]]
        """
        weight associated with matching the corresponding podAffinityTerm,
        in the range 1-100.
        """

elif False:
    ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgs:
    def __init__(
        __self__,
        *,
        pod_affinity_term: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchArgs"
            ]
        ] = None,
        weight: Optional[pulumi.Input[int]] = None
    ):
        """
        The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
        :param pulumi.Input[int] weight: weight associated with matching the corresponding podAffinityTerm,
               in the range 1-100.
        """
        if pod_affinity_term is not None:
            pulumi.set(__self__, "pod_affinity_term", pod_affinity_term)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter(name="podAffinityTerm")
    def pod_affinity_term(
        self,
    ) -> Optional[
        pulumi.Input[
            "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchArgs"
        ]
    ]:
        return pulumi.get(self, "pod_affinity_term")

    @pod_affinity_term.setter
    def pod_affinity_term(
        self,
        value: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "pod_affinity_term", value)

    @property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[int]]:
        """
        weight associated with matching the corresponding podAffinityTerm,
        in the range 1-100.
        """
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "weight", value)


if not MYPY:

    class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArgsDict(
        TypedDict
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        key is the label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """

elif False:
    ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        operator: Optional[pulumi.Input[str]] = None,
        values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        :param pulumi.Input[str] key: key is the label key that the selector applies to.
        :param pulumi.Input[str] operator: operator represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists and DoesNotExist.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: values is an array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. This array is replaced during a strategic
               merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:

    class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgsDict(
        TypedDict
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        key is the label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """

elif False:
    ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        operator: Optional[pulumi.Input[str]] = None,
        values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        :param pulumi.Input[str] key: key is the label key that the selector applies to.
        :param pulumi.Input[str] operator: operator represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists and DoesNotExist.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: values is an array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. This array is replaced during a strategic
               merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:

    class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchArgsDict(
        TypedDict
    ):
        """
        A label query over a set of resources, in this case pods.
        If it's null, this PodAffinityTerm matches with no Pods.
        """

        match_expressions: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArgsDict"
                    ]
                ]
            ]
        ]
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        match_labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """

elif False:
    ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchArgs:
    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArgs"
                    ]
                ]
            ]
        ] = None,
        match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None
    ):
        """
        A label query over a set of resources, in this case pods.
        If it's null, this PodAffinityTerm matches with no Pods.
        :param pulumi.Input[Sequence[pulumi.Input['ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArgs']]] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
               map is equivalent to an element of matchExpressions, whose key field is "key", the
               operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArgs"
                ]
            ]
        ]
    ]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(
        self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
    ):
        pulumi.set(self, "match_labels", value)


if not MYPY:

    class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgsDict(
        TypedDict
    ):
        """
        A label query over a set of resources, in this case pods.
        If it's null, this PodAffinityTerm matches with no Pods.
        """

        match_expressions: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgsDict"
                    ]
                ]
            ]
        ]
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        match_labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """

elif False:
    ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs:
    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs"
                    ]
                ]
            ]
        ] = None,
        match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None
    ):
        """
        A label query over a set of resources, in this case pods.
        If it's null, this PodAffinityTerm matches with no Pods.
        :param pulumi.Input[Sequence[pulumi.Input['ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs']]] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
               map is equivalent to an element of matchExpressions, whose key field is "key", the
               operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs"
                ]
            ]
        ]
    ]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(
        self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
    ):
        pulumi.set(self, "match_labels", value)


if not MYPY:

    class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArgsDict(
        TypedDict
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        key is the label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """

elif False:
    ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        operator: Optional[pulumi.Input[str]] = None,
        values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        :param pulumi.Input[str] key: key is the label key that the selector applies to.
        :param pulumi.Input[str] operator: operator represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists and DoesNotExist.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: values is an array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. This array is replaced during a strategic
               merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:

    class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgsDict(
        TypedDict
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        key is the label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """

elif False:
    ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        operator: Optional[pulumi.Input[str]] = None,
        values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        :param pulumi.Input[str] key: key is the label key that the selector applies to.
        :param pulumi.Input[str] operator: operator represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists and DoesNotExist.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: values is an array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. This array is replaced during a strategic
               merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:

    class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchArgsDict(
        TypedDict
    ):
        """
        A label query over the set of namespaces that the term applies to.
        The term is applied to the union of the namespaces selected by this field
        and the ones listed in the namespaces field.
        null selector and null or empty namespaces list means "this pod's namespace".
        An empty selector ({}) matches all namespaces.
        """

        match_expressions: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArgsDict"
                    ]
                ]
            ]
        ]
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        match_labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """

elif False:
    ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchArgs:
    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArgs"
                    ]
                ]
            ]
        ] = None,
        match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None
    ):
        """
        A label query over the set of namespaces that the term applies to.
        The term is applied to the union of the namespaces selected by this field
        and the ones listed in the namespaces field.
        null selector and null or empty namespaces list means "this pod's namespace".
        An empty selector ({}) matches all namespaces.
        :param pulumi.Input[Sequence[pulumi.Input['ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArgs']]] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
               map is equivalent to an element of matchExpressions, whose key field is "key", the
               operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArgs"
                ]
            ]
        ]
    ]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(
        self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
    ):
        pulumi.set(self, "match_labels", value)


if not MYPY:

    class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgsDict(
        TypedDict
    ):
        """
        A label query over the set of namespaces that the term applies to.
        The term is applied to the union of the namespaces selected by this field
        and the ones listed in the namespaces field.
        null selector and null or empty namespaces list means "this pod's namespace".
        An empty selector ({}) matches all namespaces.
        """

        match_expressions: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgsDict"
                    ]
                ]
            ]
        ]
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        match_labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """

elif False:
    ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs:
    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs"
                    ]
                ]
            ]
        ] = None,
        match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None
    ):
        """
        A label query over the set of namespaces that the term applies to.
        The term is applied to the union of the namespaces selected by this field
        and the ones listed in the namespaces field.
        null selector and null or empty namespaces list means "this pod's namespace".
        An empty selector ({}) matches all namespaces.
        :param pulumi.Input[Sequence[pulumi.Input['ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs']]] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
               map is equivalent to an element of matchExpressions, whose key field is "key", the
               operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs"
                ]
            ]
        ]
    ]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(
        self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
    ):
        pulumi.set(self, "match_labels", value)


if not MYPY:

    class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchArgsDict(
        TypedDict
    ):
        """
        Required. A pod affinity term, associated with the corresponding weight.
        """

        label_selector: NotRequired[
            pulumi.Input[
                "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchArgsDict"
            ]
        ]
        match_label_keys: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        MatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both matchLabelKeys and labelSelector.
        Also, matchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        mismatch_label_keys: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        MismatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
        Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        namespace_selector: NotRequired[
            pulumi.Input[
                "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchArgsDict"
            ]
        ]
        namespaces: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        namespaces specifies a static list of namespace names that the term applies to.
        The term is applied to the union of the namespaces listed in this field
        and the ones selected by namespaceSelector.
        null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        """
        topology_key: NotRequired[pulumi.Input[str]]
        """
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
        the labelSelector in the specified namespaces, where co-located is defined as running on a node
        whose value of the label with key topologyKey matches that of any node on which any of the
        selected pods is running.
        Empty topologyKey is not allowed.
        """

elif False:
    ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchArgs:
    def __init__(
        __self__,
        *,
        label_selector: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchArgs"
            ]
        ] = None,
        match_label_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        mismatch_label_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        namespace_selector: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchArgs"
            ]
        ] = None,
        namespaces: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        topology_key: Optional[pulumi.Input[str]] = None
    ):
        """
        Required. A pod affinity term, associated with the corresponding weight.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] match_label_keys: MatchLabelKeys is a set of pod label keys to select which pods will
               be taken into consideration. The keys are used to lookup values from the
               incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
               to select the group of existing pods which pods will be taken into consideration
               for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
               pod labels will be ignored. The default value is empty.
               The same key is forbidden to exist in both matchLabelKeys and labelSelector.
               Also, matchLabelKeys cannot be set when labelSelector isn't set.
               This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] mismatch_label_keys: MismatchLabelKeys is a set of pod label keys to select which pods will
               be taken into consideration. The keys are used to lookup values from the
               incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
               to select the group of existing pods which pods will be taken into consideration
               for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
               pod labels will be ignored. The default value is empty.
               The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
               Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
               This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] namespaces: namespaces specifies a static list of namespace names that the term applies to.
               The term is applied to the union of the namespaces listed in this field
               and the ones selected by namespaceSelector.
               null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        :param pulumi.Input[str] topology_key: This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
               the labelSelector in the specified namespaces, where co-located is defined as running on a node
               whose value of the label with key topologyKey matches that of any node on which any of the
               selected pods is running.
               Empty topologyKey is not allowed.
        """
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if match_label_keys is not None:
            pulumi.set(__self__, "match_label_keys", match_label_keys)
        if mismatch_label_keys is not None:
            pulumi.set(__self__, "mismatch_label_keys", mismatch_label_keys)
        if namespace_selector is not None:
            pulumi.set(__self__, "namespace_selector", namespace_selector)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)
        if topology_key is not None:
            pulumi.set(__self__, "topology_key", topology_key)

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(
        self,
    ) -> Optional[
        pulumi.Input[
            "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchArgs"
        ]
    ]:
        return pulumi.get(self, "label_selector")

    @label_selector.setter
    def label_selector(
        self,
        value: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "label_selector", value)

    @property
    @pulumi.getter(name="matchLabelKeys")
    def match_label_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        MatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both matchLabelKeys and labelSelector.
        Also, matchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        return pulumi.get(self, "match_label_keys")

    @match_label_keys.setter
    def match_label_keys(
        self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]
    ):
        pulumi.set(self, "match_label_keys", value)

    @property
    @pulumi.getter(name="mismatchLabelKeys")
    def mismatch_label_keys(
        self,
    ) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        MismatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
        Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        return pulumi.get(self, "mismatch_label_keys")

    @mismatch_label_keys.setter
    def mismatch_label_keys(
        self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]
    ):
        pulumi.set(self, "mismatch_label_keys", value)

    @property
    @pulumi.getter(name="namespaceSelector")
    def namespace_selector(
        self,
    ) -> Optional[
        pulumi.Input[
            "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchArgs"
        ]
    ]:
        return pulumi.get(self, "namespace_selector")

    @namespace_selector.setter
    def namespace_selector(
        self,
        value: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "namespace_selector", value)

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        namespaces specifies a static list of namespace names that the term applies to.
        The term is applied to the union of the namespaces listed in this field
        and the ones selected by namespaceSelector.
        null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        """
        return pulumi.get(self, "namespaces")

    @namespaces.setter
    def namespaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "namespaces", value)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> Optional[pulumi.Input[str]]:
        """
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
        the labelSelector in the specified namespaces, where co-located is defined as running on a node
        whose value of the label with key topologyKey matches that of any node on which any of the
        selected pods is running.
        Empty topologyKey is not allowed.
        """
        return pulumi.get(self, "topology_key")

    @topology_key.setter
    def topology_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topology_key", value)


if not MYPY:

    class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgsDict(
        TypedDict
    ):
        """
        Required. A pod affinity term, associated with the corresponding weight.
        """

        label_selector: NotRequired[
            pulumi.Input[
                "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgsDict"
            ]
        ]
        match_label_keys: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        MatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both matchLabelKeys and labelSelector.
        Also, matchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        mismatch_label_keys: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        MismatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
        Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        namespace_selector: NotRequired[
            pulumi.Input[
                "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgsDict"
            ]
        ]
        namespaces: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        namespaces specifies a static list of namespace names that the term applies to.
        The term is applied to the union of the namespaces listed in this field
        and the ones selected by namespaceSelector.
        null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        """
        topology_key: NotRequired[pulumi.Input[str]]
        """
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
        the labelSelector in the specified namespaces, where co-located is defined as running on a node
        whose value of the label with key topologyKey matches that of any node on which any of the
        selected pods is running.
        Empty topologyKey is not allowed.
        """

elif False:
    ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs:
    def __init__(
        __self__,
        *,
        label_selector: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs"
            ]
        ] = None,
        match_label_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        mismatch_label_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        namespace_selector: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs"
            ]
        ] = None,
        namespaces: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        topology_key: Optional[pulumi.Input[str]] = None
    ):
        """
        Required. A pod affinity term, associated with the corresponding weight.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] match_label_keys: MatchLabelKeys is a set of pod label keys to select which pods will
               be taken into consideration. The keys are used to lookup values from the
               incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
               to select the group of existing pods which pods will be taken into consideration
               for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
               pod labels will be ignored. The default value is empty.
               The same key is forbidden to exist in both matchLabelKeys and labelSelector.
               Also, matchLabelKeys cannot be set when labelSelector isn't set.
               This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] mismatch_label_keys: MismatchLabelKeys is a set of pod label keys to select which pods will
               be taken into consideration. The keys are used to lookup values from the
               incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
               to select the group of existing pods which pods will be taken into consideration
               for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
               pod labels will be ignored. The default value is empty.
               The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
               Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
               This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] namespaces: namespaces specifies a static list of namespace names that the term applies to.
               The term is applied to the union of the namespaces listed in this field
               and the ones selected by namespaceSelector.
               null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        :param pulumi.Input[str] topology_key: This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
               the labelSelector in the specified namespaces, where co-located is defined as running on a node
               whose value of the label with key topologyKey matches that of any node on which any of the
               selected pods is running.
               Empty topologyKey is not allowed.
        """
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if match_label_keys is not None:
            pulumi.set(__self__, "match_label_keys", match_label_keys)
        if mismatch_label_keys is not None:
            pulumi.set(__self__, "mismatch_label_keys", mismatch_label_keys)
        if namespace_selector is not None:
            pulumi.set(__self__, "namespace_selector", namespace_selector)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)
        if topology_key is not None:
            pulumi.set(__self__, "topology_key", topology_key)

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(
        self,
    ) -> Optional[
        pulumi.Input[
            "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs"
        ]
    ]:
        return pulumi.get(self, "label_selector")

    @label_selector.setter
    def label_selector(
        self,
        value: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs"
            ]
        ],
    ):
        pulumi.set(self, "label_selector", value)

    @property
    @pulumi.getter(name="matchLabelKeys")
    def match_label_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        MatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both matchLabelKeys and labelSelector.
        Also, matchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        return pulumi.get(self, "match_label_keys")

    @match_label_keys.setter
    def match_label_keys(
        self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]
    ):
        pulumi.set(self, "match_label_keys", value)

    @property
    @pulumi.getter(name="mismatchLabelKeys")
    def mismatch_label_keys(
        self,
    ) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        MismatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
        Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        return pulumi.get(self, "mismatch_label_keys")

    @mismatch_label_keys.setter
    def mismatch_label_keys(
        self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]
    ):
        pulumi.set(self, "mismatch_label_keys", value)

    @property
    @pulumi.getter(name="namespaceSelector")
    def namespace_selector(
        self,
    ) -> Optional[
        pulumi.Input[
            "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs"
        ]
    ]:
        return pulumi.get(self, "namespace_selector")

    @namespace_selector.setter
    def namespace_selector(
        self,
        value: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs"
            ]
        ],
    ):
        pulumi.set(self, "namespace_selector", value)

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        namespaces specifies a static list of namespace names that the term applies to.
        The term is applied to the union of the namespaces listed in this field
        and the ones selected by namespaceSelector.
        null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        """
        return pulumi.get(self, "namespaces")

    @namespaces.setter
    def namespaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "namespaces", value)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> Optional[pulumi.Input[str]]:
        """
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
        the labelSelector in the specified namespaces, where co-located is defined as running on a node
        whose value of the label with key topologyKey matches that of any node on which any of the
        selected pods is running.
        Empty topologyKey is not allowed.
        """
        return pulumi.get(self, "topology_key")

    @topology_key.setter
    def topology_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topology_key", value)


if not MYPY:

    class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgsDict(
        TypedDict
    ):
        """
        The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
        """

        pod_affinity_term: NotRequired[
            pulumi.Input[
                "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgsDict"
            ]
        ]
        weight: NotRequired[pulumi.Input[int]]
        """
        weight associated with matching the corresponding podAffinityTerm,
        in the range 1-100.
        """

elif False:
    ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs:
    def __init__(
        __self__,
        *,
        pod_affinity_term: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs"
            ]
        ] = None,
        weight: Optional[pulumi.Input[int]] = None
    ):
        """
        The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
        :param pulumi.Input[int] weight: weight associated with matching the corresponding podAffinityTerm,
               in the range 1-100.
        """
        if pod_affinity_term is not None:
            pulumi.set(__self__, "pod_affinity_term", pod_affinity_term)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter(name="podAffinityTerm")
    def pod_affinity_term(
        self,
    ) -> Optional[
        pulumi.Input[
            "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs"
        ]
    ]:
        return pulumi.get(self, "pod_affinity_term")

    @pod_affinity_term.setter
    def pod_affinity_term(
        self,
        value: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs"
            ]
        ],
    ):
        pulumi.set(self, "pod_affinity_term", value)

    @property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[int]]:
        """
        weight associated with matching the corresponding podAffinityTerm,
        in the range 1-100.
        """
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "weight", value)


if not MYPY:

    class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArgsDict(
        TypedDict
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        key is the label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """

elif False:
    ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        operator: Optional[pulumi.Input[str]] = None,
        values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        :param pulumi.Input[str] key: key is the label key that the selector applies to.
        :param pulumi.Input[str] operator: operator represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists and DoesNotExist.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: values is an array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. This array is replaced during a strategic
               merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:

    class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgsDict(
        TypedDict
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        key is the label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """

elif False:
    ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        operator: Optional[pulumi.Input[str]] = None,
        values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        :param pulumi.Input[str] key: key is the label key that the selector applies to.
        :param pulumi.Input[str] operator: operator represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists and DoesNotExist.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: values is an array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. This array is replaced during a strategic
               merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:

    class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchArgsDict(
        TypedDict
    ):
        """
        A label query over a set of resources, in this case pods.
        If it's null, this PodAffinityTerm matches with no Pods.
        """

        match_expressions: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArgsDict"
                    ]
                ]
            ]
        ]
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        match_labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """

elif False:
    ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchArgs:
    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArgs"
                    ]
                ]
            ]
        ] = None,
        match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None
    ):
        """
        A label query over a set of resources, in this case pods.
        If it's null, this PodAffinityTerm matches with no Pods.
        :param pulumi.Input[Sequence[pulumi.Input['ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArgs']]] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
               map is equivalent to an element of matchExpressions, whose key field is "key", the
               operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArgs"
                ]
            ]
        ]
    ]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(
        self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
    ):
        pulumi.set(self, "match_labels", value)


if not MYPY:

    class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgsDict(
        TypedDict
    ):
        """
        A label query over a set of resources, in this case pods.
        If it's null, this PodAffinityTerm matches with no Pods.
        """

        match_expressions: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgsDict"
                    ]
                ]
            ]
        ]
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        match_labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """

elif False:
    ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs:
    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs"
                    ]
                ]
            ]
        ] = None,
        match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None
    ):
        """
        A label query over a set of resources, in this case pods.
        If it's null, this PodAffinityTerm matches with no Pods.
        :param pulumi.Input[Sequence[pulumi.Input['ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs']]] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
               map is equivalent to an element of matchExpressions, whose key field is "key", the
               operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs"
                ]
            ]
        ]
    ]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(
        self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
    ):
        pulumi.set(self, "match_labels", value)


if not MYPY:

    class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArgsDict(
        TypedDict
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        key is the label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """

elif False:
    ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        operator: Optional[pulumi.Input[str]] = None,
        values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        :param pulumi.Input[str] key: key is the label key that the selector applies to.
        :param pulumi.Input[str] operator: operator represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists and DoesNotExist.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: values is an array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. This array is replaced during a strategic
               merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:

    class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgsDict(
        TypedDict
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        key is the label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """

elif False:
    ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        operator: Optional[pulumi.Input[str]] = None,
        values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        :param pulumi.Input[str] key: key is the label key that the selector applies to.
        :param pulumi.Input[str] operator: operator represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists and DoesNotExist.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: values is an array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. This array is replaced during a strategic
               merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:

    class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchArgsDict(
        TypedDict
    ):
        """
        A label query over the set of namespaces that the term applies to.
        The term is applied to the union of the namespaces selected by this field
        and the ones listed in the namespaces field.
        null selector and null or empty namespaces list means "this pod's namespace".
        An empty selector ({}) matches all namespaces.
        """

        match_expressions: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArgsDict"
                    ]
                ]
            ]
        ]
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        match_labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """

elif False:
    ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchArgs:
    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArgs"
                    ]
                ]
            ]
        ] = None,
        match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None
    ):
        """
        A label query over the set of namespaces that the term applies to.
        The term is applied to the union of the namespaces selected by this field
        and the ones listed in the namespaces field.
        null selector and null or empty namespaces list means "this pod's namespace".
        An empty selector ({}) matches all namespaces.
        :param pulumi.Input[Sequence[pulumi.Input['ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArgs']]] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
               map is equivalent to an element of matchExpressions, whose key field is "key", the
               operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArgs"
                ]
            ]
        ]
    ]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(
        self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
    ):
        pulumi.set(self, "match_labels", value)


if not MYPY:

    class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgsDict(
        TypedDict
    ):
        """
        A label query over the set of namespaces that the term applies to.
        The term is applied to the union of the namespaces selected by this field
        and the ones listed in the namespaces field.
        null selector and null or empty namespaces list means "this pod's namespace".
        An empty selector ({}) matches all namespaces.
        """

        match_expressions: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgsDict"
                    ]
                ]
            ]
        ]
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        match_labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """

elif False:
    ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs:
    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs"
                    ]
                ]
            ]
        ] = None,
        match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None
    ):
        """
        A label query over the set of namespaces that the term applies to.
        The term is applied to the union of the namespaces selected by this field
        and the ones listed in the namespaces field.
        null selector and null or empty namespaces list means "this pod's namespace".
        An empty selector ({}) matches all namespaces.
        :param pulumi.Input[Sequence[pulumi.Input['ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs']]] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
               map is equivalent to an element of matchExpressions, whose key field is "key", the
               operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs"
                ]
            ]
        ]
    ]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(
        self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
    ):
        pulumi.set(self, "match_labels", value)


if not MYPY:

    class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgsDict(
        TypedDict
    ):
        """
        Defines a set of pods (namely those matching the labelSelector
        relative to the given namespace(s)) that this pod should be
        co-located (affinity) or not co-located (anti-affinity) with,
        where co-located is defined as running on a node whose value of
        the label with key <topologyKey> matches that of any node on which
        a pod of the set of pods is running
        """

        label_selector: NotRequired[
            pulumi.Input[
                "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchArgsDict"
            ]
        ]
        match_label_keys: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        MatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both matchLabelKeys and labelSelector.
        Also, matchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        mismatch_label_keys: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        MismatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
        Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        namespace_selector: NotRequired[
            pulumi.Input[
                "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchArgsDict"
            ]
        ]
        namespaces: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        namespaces specifies a static list of namespace names that the term applies to.
        The term is applied to the union of the namespaces listed in this field
        and the ones selected by namespaceSelector.
        null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        """
        topology_key: NotRequired[pulumi.Input[str]]
        """
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
        the labelSelector in the specified namespaces, where co-located is defined as running on a node
        whose value of the label with key topologyKey matches that of any node on which any of the
        selected pods is running.
        Empty topologyKey is not allowed.
        """

elif False:
    ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgs:
    def __init__(
        __self__,
        *,
        label_selector: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchArgs"
            ]
        ] = None,
        match_label_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        mismatch_label_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        namespace_selector: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchArgs"
            ]
        ] = None,
        namespaces: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        topology_key: Optional[pulumi.Input[str]] = None
    ):
        """
        Defines a set of pods (namely those matching the labelSelector
        relative to the given namespace(s)) that this pod should be
        co-located (affinity) or not co-located (anti-affinity) with,
        where co-located is defined as running on a node whose value of
        the label with key <topologyKey> matches that of any node on which
        a pod of the set of pods is running
        :param pulumi.Input[Sequence[pulumi.Input[str]]] match_label_keys: MatchLabelKeys is a set of pod label keys to select which pods will
               be taken into consideration. The keys are used to lookup values from the
               incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
               to select the group of existing pods which pods will be taken into consideration
               for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
               pod labels will be ignored. The default value is empty.
               The same key is forbidden to exist in both matchLabelKeys and labelSelector.
               Also, matchLabelKeys cannot be set when labelSelector isn't set.
               This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] mismatch_label_keys: MismatchLabelKeys is a set of pod label keys to select which pods will
               be taken into consideration. The keys are used to lookup values from the
               incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
               to select the group of existing pods which pods will be taken into consideration
               for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
               pod labels will be ignored. The default value is empty.
               The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
               Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
               This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] namespaces: namespaces specifies a static list of namespace names that the term applies to.
               The term is applied to the union of the namespaces listed in this field
               and the ones selected by namespaceSelector.
               null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        :param pulumi.Input[str] topology_key: This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
               the labelSelector in the specified namespaces, where co-located is defined as running on a node
               whose value of the label with key topologyKey matches that of any node on which any of the
               selected pods is running.
               Empty topologyKey is not allowed.
        """
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if match_label_keys is not None:
            pulumi.set(__self__, "match_label_keys", match_label_keys)
        if mismatch_label_keys is not None:
            pulumi.set(__self__, "mismatch_label_keys", mismatch_label_keys)
        if namespace_selector is not None:
            pulumi.set(__self__, "namespace_selector", namespace_selector)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)
        if topology_key is not None:
            pulumi.set(__self__, "topology_key", topology_key)

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(
        self,
    ) -> Optional[
        pulumi.Input[
            "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchArgs"
        ]
    ]:
        return pulumi.get(self, "label_selector")

    @label_selector.setter
    def label_selector(
        self,
        value: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "label_selector", value)

    @property
    @pulumi.getter(name="matchLabelKeys")
    def match_label_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        MatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both matchLabelKeys and labelSelector.
        Also, matchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        return pulumi.get(self, "match_label_keys")

    @match_label_keys.setter
    def match_label_keys(
        self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]
    ):
        pulumi.set(self, "match_label_keys", value)

    @property
    @pulumi.getter(name="mismatchLabelKeys")
    def mismatch_label_keys(
        self,
    ) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        MismatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
        Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        return pulumi.get(self, "mismatch_label_keys")

    @mismatch_label_keys.setter
    def mismatch_label_keys(
        self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]
    ):
        pulumi.set(self, "mismatch_label_keys", value)

    @property
    @pulumi.getter(name="namespaceSelector")
    def namespace_selector(
        self,
    ) -> Optional[
        pulumi.Input[
            "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchArgs"
        ]
    ]:
        return pulumi.get(self, "namespace_selector")

    @namespace_selector.setter
    def namespace_selector(
        self,
        value: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "namespace_selector", value)

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        namespaces specifies a static list of namespace names that the term applies to.
        The term is applied to the union of the namespaces listed in this field
        and the ones selected by namespaceSelector.
        null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        """
        return pulumi.get(self, "namespaces")

    @namespaces.setter
    def namespaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "namespaces", value)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> Optional[pulumi.Input[str]]:
        """
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
        the labelSelector in the specified namespaces, where co-located is defined as running on a node
        whose value of the label with key topologyKey matches that of any node on which any of the
        selected pods is running.
        Empty topologyKey is not allowed.
        """
        return pulumi.get(self, "topology_key")

    @topology_key.setter
    def topology_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topology_key", value)


if not MYPY:

    class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgsDict(
        TypedDict
    ):
        """
        Defines a set of pods (namely those matching the labelSelector
        relative to the given namespace(s)) that this pod should be
        co-located (affinity) or not co-located (anti-affinity) with,
        where co-located is defined as running on a node whose value of
        the label with key <topologyKey> matches that of any node on which
        a pod of the set of pods is running
        """

        label_selector: NotRequired[
            pulumi.Input[
                "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgsDict"
            ]
        ]
        match_label_keys: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        MatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both matchLabelKeys and labelSelector.
        Also, matchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        mismatch_label_keys: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        MismatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
        Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        namespace_selector: NotRequired[
            pulumi.Input[
                "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgsDict"
            ]
        ]
        namespaces: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        namespaces specifies a static list of namespace names that the term applies to.
        The term is applied to the union of the namespaces listed in this field
        and the ones selected by namespaceSelector.
        null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        """
        topology_key: NotRequired[pulumi.Input[str]]
        """
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
        the labelSelector in the specified namespaces, where co-located is defined as running on a node
        whose value of the label with key topologyKey matches that of any node on which any of the
        selected pods is running.
        Empty topologyKey is not allowed.
        """

elif False:
    ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs:
    def __init__(
        __self__,
        *,
        label_selector: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs"
            ]
        ] = None,
        match_label_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        mismatch_label_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        namespace_selector: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs"
            ]
        ] = None,
        namespaces: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        topology_key: Optional[pulumi.Input[str]] = None
    ):
        """
        Defines a set of pods (namely those matching the labelSelector
        relative to the given namespace(s)) that this pod should be
        co-located (affinity) or not co-located (anti-affinity) with,
        where co-located is defined as running on a node whose value of
        the label with key <topologyKey> matches that of any node on which
        a pod of the set of pods is running
        :param pulumi.Input[Sequence[pulumi.Input[str]]] match_label_keys: MatchLabelKeys is a set of pod label keys to select which pods will
               be taken into consideration. The keys are used to lookup values from the
               incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
               to select the group of existing pods which pods will be taken into consideration
               for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
               pod labels will be ignored. The default value is empty.
               The same key is forbidden to exist in both matchLabelKeys and labelSelector.
               Also, matchLabelKeys cannot be set when labelSelector isn't set.
               This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] mismatch_label_keys: MismatchLabelKeys is a set of pod label keys to select which pods will
               be taken into consideration. The keys are used to lookup values from the
               incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
               to select the group of existing pods which pods will be taken into consideration
               for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
               pod labels will be ignored. The default value is empty.
               The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
               Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
               This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] namespaces: namespaces specifies a static list of namespace names that the term applies to.
               The term is applied to the union of the namespaces listed in this field
               and the ones selected by namespaceSelector.
               null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        :param pulumi.Input[str] topology_key: This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
               the labelSelector in the specified namespaces, where co-located is defined as running on a node
               whose value of the label with key topologyKey matches that of any node on which any of the
               selected pods is running.
               Empty topologyKey is not allowed.
        """
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if match_label_keys is not None:
            pulumi.set(__self__, "match_label_keys", match_label_keys)
        if mismatch_label_keys is not None:
            pulumi.set(__self__, "mismatch_label_keys", mismatch_label_keys)
        if namespace_selector is not None:
            pulumi.set(__self__, "namespace_selector", namespace_selector)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)
        if topology_key is not None:
            pulumi.set(__self__, "topology_key", topology_key)

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(
        self,
    ) -> Optional[
        pulumi.Input[
            "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs"
        ]
    ]:
        return pulumi.get(self, "label_selector")

    @label_selector.setter
    def label_selector(
        self,
        value: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs"
            ]
        ],
    ):
        pulumi.set(self, "label_selector", value)

    @property
    @pulumi.getter(name="matchLabelKeys")
    def match_label_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        MatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both matchLabelKeys and labelSelector.
        Also, matchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        return pulumi.get(self, "match_label_keys")

    @match_label_keys.setter
    def match_label_keys(
        self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]
    ):
        pulumi.set(self, "match_label_keys", value)

    @property
    @pulumi.getter(name="mismatchLabelKeys")
    def mismatch_label_keys(
        self,
    ) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        MismatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
        Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        return pulumi.get(self, "mismatch_label_keys")

    @mismatch_label_keys.setter
    def mismatch_label_keys(
        self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]
    ):
        pulumi.set(self, "mismatch_label_keys", value)

    @property
    @pulumi.getter(name="namespaceSelector")
    def namespace_selector(
        self,
    ) -> Optional[
        pulumi.Input[
            "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs"
        ]
    ]:
        return pulumi.get(self, "namespace_selector")

    @namespace_selector.setter
    def namespace_selector(
        self,
        value: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs"
            ]
        ],
    ):
        pulumi.set(self, "namespace_selector", value)

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        namespaces specifies a static list of namespace names that the term applies to.
        The term is applied to the union of the namespaces listed in this field
        and the ones selected by namespaceSelector.
        null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        """
        return pulumi.get(self, "namespaces")

    @namespaces.setter
    def namespaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "namespaces", value)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> Optional[pulumi.Input[str]]:
        """
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
        the labelSelector in the specified namespaces, where co-located is defined as running on a node
        whose value of the label with key topologyKey matches that of any node on which any of the
        selected pods is running.
        Empty topologyKey is not allowed.
        """
        return pulumi.get(self, "topology_key")

    @topology_key.setter
    def topology_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topology_key", value)


if not MYPY:

    class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityArgsDict(
        TypedDict
    ):
        """
        Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
        """

        preferred_during_scheduling_ignored_during_execution: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgsDict"
                    ]
                ]
            ]
        ]
        """
        The scheduler will prefer to schedule pods to nodes that satisfy
        the anti-affinity expressions specified by this field, but it may choose
        a node that violates one or more of the expressions. The node that is
        most preferred is the one with the greatest sum of weights, i.e.
        for each node that meets all of the scheduling requirements (resource
        request, requiredDuringScheduling anti-affinity expressions, etc.),
        compute a sum by iterating through the elements of this field and adding
        "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
        node(s) with the highest sum are the most preferred.
        """
        required_during_scheduling_ignored_during_execution: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgsDict"
                    ]
                ]
            ]
        ]
        """
        If the anti-affinity requirements specified by this field are not met at
        scheduling time, the pod will not be scheduled onto the node.
        If the anti-affinity requirements specified by this field cease to be met
        at some point during pod execution (e.g. due to a pod label update), the
        system may or may not try to eventually evict the pod from its node.
        When there are multiple elements, the lists of nodes corresponding to each
        podAffinityTerm are intersected, i.e. all terms must be satisfied.
        """

elif False:
    ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityArgs:
    def __init__(
        __self__,
        *,
        preferred_during_scheduling_ignored_during_execution: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs"
                    ]
                ]
            ]
        ] = None,
        required_during_scheduling_ignored_during_execution: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs"
                    ]
                ]
            ]
        ] = None
    ):
        """
        Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
        :param pulumi.Input[Sequence[pulumi.Input['ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs']]] preferred_during_scheduling_ignored_during_execution: The scheduler will prefer to schedule pods to nodes that satisfy
               the anti-affinity expressions specified by this field, but it may choose
               a node that violates one or more of the expressions. The node that is
               most preferred is the one with the greatest sum of weights, i.e.
               for each node that meets all of the scheduling requirements (resource
               request, requiredDuringScheduling anti-affinity expressions, etc.),
               compute a sum by iterating through the elements of this field and adding
               "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
               node(s) with the highest sum are the most preferred.
        :param pulumi.Input[Sequence[pulumi.Input['ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs']]] required_during_scheduling_ignored_during_execution: If the anti-affinity requirements specified by this field are not met at
               scheduling time, the pod will not be scheduled onto the node.
               If the anti-affinity requirements specified by this field cease to be met
               at some point during pod execution (e.g. due to a pod label update), the
               system may or may not try to eventually evict the pod from its node.
               When there are multiple elements, the lists of nodes corresponding to each
               podAffinityTerm are intersected, i.e. all terms must be satisfied.
        """
        if preferred_during_scheduling_ignored_during_execution is not None:
            pulumi.set(
                __self__,
                "preferred_during_scheduling_ignored_during_execution",
                preferred_during_scheduling_ignored_during_execution,
            )
        if required_during_scheduling_ignored_during_execution is not None:
            pulumi.set(
                __self__,
                "required_during_scheduling_ignored_during_execution",
                required_during_scheduling_ignored_during_execution,
            )

    @property
    @pulumi.getter(name="preferredDuringSchedulingIgnoredDuringExecution")
    def preferred_during_scheduling_ignored_during_execution(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs"
                ]
            ]
        ]
    ]:
        """
        The scheduler will prefer to schedule pods to nodes that satisfy
        the anti-affinity expressions specified by this field, but it may choose
        a node that violates one or more of the expressions. The node that is
        most preferred is the one with the greatest sum of weights, i.e.
        for each node that meets all of the scheduling requirements (resource
        request, requiredDuringScheduling anti-affinity expressions, etc.),
        compute a sum by iterating through the elements of this field and adding
        "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
        node(s) with the highest sum are the most preferred.
        """
        return pulumi.get(self, "preferred_during_scheduling_ignored_during_execution")

    @preferred_during_scheduling_ignored_during_execution.setter
    def preferred_during_scheduling_ignored_during_execution(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "preferred_during_scheduling_ignored_during_execution", value)

    @property
    @pulumi.getter(name="requiredDuringSchedulingIgnoredDuringExecution")
    def required_during_scheduling_ignored_during_execution(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs"
                ]
            ]
        ]
    ]:
        """
        If the anti-affinity requirements specified by this field are not met at
        scheduling time, the pod will not be scheduled onto the node.
        If the anti-affinity requirements specified by this field cease to be met
        at some point during pod execution (e.g. due to a pod label update), the
        system may or may not try to eventually evict the pod from its node.
        When there are multiple elements, the lists of nodes corresponding to each
        podAffinityTerm are intersected, i.e. all terms must be satisfied.
        """
        return pulumi.get(self, "required_during_scheduling_ignored_during_execution")

    @required_during_scheduling_ignored_during_execution.setter
    def required_during_scheduling_ignored_during_execution(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "required_during_scheduling_ignored_during_execution", value)


if not MYPY:

    class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityArgsDict(TypedDict):
        """
        If specified, the pod's scheduling constraints
        """

        node_affinity: NotRequired[
            pulumi.Input[
                "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityArgsDict"
            ]
        ]
        pod_affinity: NotRequired[
            pulumi.Input[
                "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityArgsDict"
            ]
        ]
        pod_anti_affinity: NotRequired[
            pulumi.Input[
                "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityArgsDict"
            ]
        ]

elif False:
    ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityArgsDict: TypeAlias = (
        Mapping[str, Any]
    )


@pulumi.input_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityArgs:
    def __init__(
        __self__,
        *,
        node_affinity: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityArgs"
            ]
        ] = None,
        pod_affinity: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityArgs"
            ]
        ] = None,
        pod_anti_affinity: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityArgs"
            ]
        ] = None
    ):
        """
        If specified, the pod's scheduling constraints
        """
        if node_affinity is not None:
            pulumi.set(__self__, "node_affinity", node_affinity)
        if pod_affinity is not None:
            pulumi.set(__self__, "pod_affinity", pod_affinity)
        if pod_anti_affinity is not None:
            pulumi.set(__self__, "pod_anti_affinity", pod_anti_affinity)

    @property
    @pulumi.getter(name="nodeAffinity")
    def node_affinity(
        self,
    ) -> Optional[
        pulumi.Input[
            "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityArgs"
        ]
    ]:
        return pulumi.get(self, "node_affinity")

    @node_affinity.setter
    def node_affinity(
        self,
        value: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityArgs"
            ]
        ],
    ):
        pulumi.set(self, "node_affinity", value)

    @property
    @pulumi.getter(name="podAffinity")
    def pod_affinity(
        self,
    ) -> Optional[
        pulumi.Input[
            "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityArgs"
        ]
    ]:
        return pulumi.get(self, "pod_affinity")

    @pod_affinity.setter
    def pod_affinity(
        self,
        value: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityArgs"
            ]
        ],
    ):
        pulumi.set(self, "pod_affinity", value)

    @property
    @pulumi.getter(name="podAntiAffinity")
    def pod_anti_affinity(
        self,
    ) -> Optional[
        pulumi.Input[
            "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityArgs"
        ]
    ]:
        return pulumi.get(self, "pod_anti_affinity")

    @pod_anti_affinity.setter
    def pod_anti_affinity(
        self,
        value: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityArgs"
            ]
        ],
    ):
        pulumi.set(self, "pod_anti_affinity", value)


if not MYPY:

    class ChallengeSpecSolverHttp01IngressPodTemplateSpecImagePullSecretsPatchArgsDict(
        TypedDict
    ):
        """
        LocalObjectReference contains enough information to let you locate the
        referenced object inside the same namespace.
        """

        name: NotRequired[pulumi.Input[str]]
        """
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """

elif False:
    ChallengeSpecSolverHttp01IngressPodTemplateSpecImagePullSecretsPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecImagePullSecretsPatchArgs:
    def __init__(__self__, *, name: Optional[pulumi.Input[str]] = None):
        """
        LocalObjectReference contains enough information to let you locate the
        referenced object inside the same namespace.
        :param pulumi.Input[str] name: Name of the referent.
               This field is effectively required, but due to backwards compatibility is
               allowed to be empty. Instances of this type with an empty value here are
               almost certainly wrong.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:

    class ChallengeSpecSolverHttp01IngressPodTemplateSpecImagePullSecretsArgsDict(
        TypedDict
    ):
        """
        LocalObjectReference contains enough information to let you locate the
        referenced object inside the same namespace.
        """

        name: NotRequired[pulumi.Input[str]]
        """
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """

elif False:
    ChallengeSpecSolverHttp01IngressPodTemplateSpecImagePullSecretsArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecImagePullSecretsArgs:
    def __init__(__self__, *, name: Optional[pulumi.Input[str]] = None):
        """
        LocalObjectReference contains enough information to let you locate the
        referenced object inside the same namespace.
        :param pulumi.Input[str] name: Name of the referent.
               This field is effectively required, but due to backwards compatibility is
               allowed to be empty. Instances of this type with an empty value here are
               almost certainly wrong.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:

    class ChallengeSpecSolverHttp01IngressPodTemplateSpecPatchArgsDict(TypedDict):
        """
        PodSpec defines overrides for the HTTP01 challenge solver pod.
        Check ACMEChallengeSolverHTTP01IngressPodSpec to find out currently supported fields.
        All other fields will be ignored.
        """

        affinity: NotRequired[
            pulumi.Input[
                "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPatchArgsDict"
            ]
        ]
        image_pull_secrets: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01IngressPodTemplateSpecImagePullSecretsPatchArgsDict"
                    ]
                ]
            ]
        ]
        """
        If specified, the pod's imagePullSecrets
        """
        node_selector: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        NodeSelector is a selector which must be true for the pod to fit on a node.
        Selector which must match a node's labels for the pod to be scheduled on that node.
        More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
        """
        priority_class_name: NotRequired[pulumi.Input[str]]
        """
        If specified, the pod's priorityClassName.
        """
        security_context: NotRequired[
            pulumi.Input[
                "ChallengeSpecSolverHttp01IngressPodTemplateSpecSecurityContextPatchArgsDict"
            ]
        ]
        service_account_name: NotRequired[pulumi.Input[str]]
        """
        If specified, the pod's service account
        """
        tolerations: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01IngressPodTemplateSpecTolerationsPatchArgsDict"
                    ]
                ]
            ]
        ]
        """
        If specified, the pod's tolerations.
        """

elif False:
    ChallengeSpecSolverHttp01IngressPodTemplateSpecPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecPatchArgs:
    def __init__(
        __self__,
        *,
        affinity: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPatchArgs"
            ]
        ] = None,
        image_pull_secrets: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01IngressPodTemplateSpecImagePullSecretsPatchArgs"
                    ]
                ]
            ]
        ] = None,
        node_selector: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
        priority_class_name: Optional[pulumi.Input[str]] = None,
        security_context: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01IngressPodTemplateSpecSecurityContextPatchArgs"
            ]
        ] = None,
        service_account_name: Optional[pulumi.Input[str]] = None,
        tolerations: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01IngressPodTemplateSpecTolerationsPatchArgs"
                    ]
                ]
            ]
        ] = None
    ):
        """
        PodSpec defines overrides for the HTTP01 challenge solver pod.
        Check ACMEChallengeSolverHTTP01IngressPodSpec to find out currently supported fields.
        All other fields will be ignored.
        :param pulumi.Input[Sequence[pulumi.Input['ChallengeSpecSolverHttp01IngressPodTemplateSpecImagePullSecretsPatchArgs']]] image_pull_secrets: If specified, the pod's imagePullSecrets
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] node_selector: NodeSelector is a selector which must be true for the pod to fit on a node.
               Selector which must match a node's labels for the pod to be scheduled on that node.
               More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
        :param pulumi.Input[str] priority_class_name: If specified, the pod's priorityClassName.
        :param pulumi.Input[str] service_account_name: If specified, the pod's service account
        :param pulumi.Input[Sequence[pulumi.Input['ChallengeSpecSolverHttp01IngressPodTemplateSpecTolerationsPatchArgs']]] tolerations: If specified, the pod's tolerations.
        """
        if affinity is not None:
            pulumi.set(__self__, "affinity", affinity)
        if image_pull_secrets is not None:
            pulumi.set(__self__, "image_pull_secrets", image_pull_secrets)
        if node_selector is not None:
            pulumi.set(__self__, "node_selector", node_selector)
        if priority_class_name is not None:
            pulumi.set(__self__, "priority_class_name", priority_class_name)
        if security_context is not None:
            pulumi.set(__self__, "security_context", security_context)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tolerations is not None:
            pulumi.set(__self__, "tolerations", tolerations)

    @property
    @pulumi.getter
    def affinity(
        self,
    ) -> Optional[
        pulumi.Input["ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPatchArgs"]
    ]:
        return pulumi.get(self, "affinity")

    @affinity.setter
    def affinity(
        self,
        value: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "affinity", value)

    @property
    @pulumi.getter(name="imagePullSecrets")
    def image_pull_secrets(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ChallengeSpecSolverHttp01IngressPodTemplateSpecImagePullSecretsPatchArgs"
                ]
            ]
        ]
    ]:
        """
        If specified, the pod's imagePullSecrets
        """
        return pulumi.get(self, "image_pull_secrets")

    @image_pull_secrets.setter
    def image_pull_secrets(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01IngressPodTemplateSpecImagePullSecretsPatchArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "image_pull_secrets", value)

    @property
    @pulumi.getter(name="nodeSelector")
    def node_selector(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        NodeSelector is a selector which must be true for the pod to fit on a node.
        Selector which must match a node's labels for the pod to be scheduled on that node.
        More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
        """
        return pulumi.get(self, "node_selector")

    @node_selector.setter
    def node_selector(
        self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
    ):
        pulumi.set(self, "node_selector", value)

    @property
    @pulumi.getter(name="priorityClassName")
    def priority_class_name(self) -> Optional[pulumi.Input[str]]:
        """
        If specified, the pod's priorityClassName.
        """
        return pulumi.get(self, "priority_class_name")

    @priority_class_name.setter
    def priority_class_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "priority_class_name", value)

    @property
    @pulumi.getter(name="securityContext")
    def security_context(
        self,
    ) -> Optional[
        pulumi.Input[
            "ChallengeSpecSolverHttp01IngressPodTemplateSpecSecurityContextPatchArgs"
        ]
    ]:
        return pulumi.get(self, "security_context")

    @security_context.setter
    def security_context(
        self,
        value: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01IngressPodTemplateSpecSecurityContextPatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "security_context", value)

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[pulumi.Input[str]]:
        """
        If specified, the pod's service account
        """
        return pulumi.get(self, "service_account_name")

    @service_account_name.setter
    def service_account_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account_name", value)

    @property
    @pulumi.getter
    def tolerations(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ChallengeSpecSolverHttp01IngressPodTemplateSpecTolerationsPatchArgs"
                ]
            ]
        ]
    ]:
        """
        If specified, the pod's tolerations.
        """
        return pulumi.get(self, "tolerations")

    @tolerations.setter
    def tolerations(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01IngressPodTemplateSpecTolerationsPatchArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "tolerations", value)


if not MYPY:

    class ChallengeSpecSolverHttp01IngressPodTemplateSpecSecurityContextPatchArgsDict(
        TypedDict
    ):
        """
        If specified, the pod's security context
        """

        fs_group: NotRequired[pulumi.Input[int]]
        """
        A special supplemental group that applies to all containers in a pod.
        Some volume types allow the Kubelet to change the ownership of that volume
        to be owned by the pod:

        1. The owning GID will be the FSGroup
        2. The setgid bit is set (new files created in the volume will be owned by FSGroup)
        3. The permission bits are OR'd with rw-rw----

        If unset, the Kubelet will not modify the ownership and permissions of any volume.
        Note that this field cannot be set when spec.os.name is windows.
        """
        fs_group_change_policy: NotRequired[pulumi.Input[str]]
        """
        fsGroupChangePolicy defines behavior of changing ownership and permission of the volume
        before being exposed inside Pod. This field will only apply to
        volume types which support fsGroup based ownership(and permissions).
        It will have no effect on ephemeral volume types such as: secret, configmaps
        and emptydir.
        Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used.
        Note that this field cannot be set when spec.os.name is windows.
        """
        run_as_group: NotRequired[pulumi.Input[int]]
        """
        The GID to run the entrypoint of the container process.
        Uses runtime default if unset.
        May also be set in SecurityContext.  If set in both SecurityContext and
        PodSecurityContext, the value specified in SecurityContext takes precedence
        for that container.
        Note that this field cannot be set when spec.os.name is windows.
        """
        run_as_non_root: NotRequired[pulumi.Input[bool]]
        """
        Indicates that the container must run as a non-root user.
        If true, the Kubelet will validate the image at runtime to ensure that it
        does not run as UID 0 (root) and fail to start the container if it does.
        If unset or false, no such validation will be performed.
        May also be set in SecurityContext.  If set in both SecurityContext and
        PodSecurityContext, the value specified in SecurityContext takes precedence.
        """
        run_as_user: NotRequired[pulumi.Input[int]]
        """
        The UID to run the entrypoint of the container process.
        Defaults to user specified in image metadata if unspecified.
        May also be set in SecurityContext.  If set in both SecurityContext and
        PodSecurityContext, the value specified in SecurityContext takes precedence
        for that container.
        Note that this field cannot be set when spec.os.name is windows.
        """
        se_linux_options: NotRequired[
            pulumi.Input[
                "ChallengeSpecSolverHttp01IngressPodTemplateSpecSecurityContextSeLinuxOptionsPatchArgsDict"
            ]
        ]
        seccomp_profile: NotRequired[
            pulumi.Input[
                "ChallengeSpecSolverHttp01IngressPodTemplateSpecSecurityContextSeccompProfilePatchArgsDict"
            ]
        ]
        supplemental_groups: NotRequired[pulumi.Input[Sequence[pulumi.Input[int]]]]
        """
        A list of groups applied to the first process run in each container, in addition
        to the container's primary GID, the fsGroup (if specified), and group memberships
        defined in the container image for the uid of the container process. If unspecified,
        no additional groups are added to any container. Note that group memberships
        defined in the container image for the uid of the container process are still effective,
        even if they are not included in this list.
        Note that this field cannot be set when spec.os.name is windows.
        """
        sysctls: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01IngressPodTemplateSpecSecurityContextSysctlsPatchArgsDict"
                    ]
                ]
            ]
        ]
        """
        Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported
        sysctls (by the container runtime) might fail to launch.
        Note that this field cannot be set when spec.os.name is windows.
        """

elif False:
    ChallengeSpecSolverHttp01IngressPodTemplateSpecSecurityContextPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecSecurityContextPatchArgs:
    def __init__(
        __self__,
        *,
        fs_group: Optional[pulumi.Input[int]] = None,
        fs_group_change_policy: Optional[pulumi.Input[str]] = None,
        run_as_group: Optional[pulumi.Input[int]] = None,
        run_as_non_root: Optional[pulumi.Input[bool]] = None,
        run_as_user: Optional[pulumi.Input[int]] = None,
        se_linux_options: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01IngressPodTemplateSpecSecurityContextSeLinuxOptionsPatchArgs"
            ]
        ] = None,
        seccomp_profile: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01IngressPodTemplateSpecSecurityContextSeccompProfilePatchArgs"
            ]
        ] = None,
        supplemental_groups: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
        sysctls: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01IngressPodTemplateSpecSecurityContextSysctlsPatchArgs"
                    ]
                ]
            ]
        ] = None
    ):
        """
        If specified, the pod's security context
        :param pulumi.Input[int] fs_group: A special supplemental group that applies to all containers in a pod.
               Some volume types allow the Kubelet to change the ownership of that volume
               to be owned by the pod:

               1. The owning GID will be the FSGroup
               2. The setgid bit is set (new files created in the volume will be owned by FSGroup)
               3. The permission bits are OR'd with rw-rw----

               If unset, the Kubelet will not modify the ownership and permissions of any volume.
               Note that this field cannot be set when spec.os.name is windows.
        :param pulumi.Input[str] fs_group_change_policy: fsGroupChangePolicy defines behavior of changing ownership and permission of the volume
               before being exposed inside Pod. This field will only apply to
               volume types which support fsGroup based ownership(and permissions).
               It will have no effect on ephemeral volume types such as: secret, configmaps
               and emptydir.
               Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used.
               Note that this field cannot be set when spec.os.name is windows.
        :param pulumi.Input[int] run_as_group: The GID to run the entrypoint of the container process.
               Uses runtime default if unset.
               May also be set in SecurityContext.  If set in both SecurityContext and
               PodSecurityContext, the value specified in SecurityContext takes precedence
               for that container.
               Note that this field cannot be set when spec.os.name is windows.
        :param pulumi.Input[bool] run_as_non_root: Indicates that the container must run as a non-root user.
               If true, the Kubelet will validate the image at runtime to ensure that it
               does not run as UID 0 (root) and fail to start the container if it does.
               If unset or false, no such validation will be performed.
               May also be set in SecurityContext.  If set in both SecurityContext and
               PodSecurityContext, the value specified in SecurityContext takes precedence.
        :param pulumi.Input[int] run_as_user: The UID to run the entrypoint of the container process.
               Defaults to user specified in image metadata if unspecified.
               May also be set in SecurityContext.  If set in both SecurityContext and
               PodSecurityContext, the value specified in SecurityContext takes precedence
               for that container.
               Note that this field cannot be set when spec.os.name is windows.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] supplemental_groups: A list of groups applied to the first process run in each container, in addition
               to the container's primary GID, the fsGroup (if specified), and group memberships
               defined in the container image for the uid of the container process. If unspecified,
               no additional groups are added to any container. Note that group memberships
               defined in the container image for the uid of the container process are still effective,
               even if they are not included in this list.
               Note that this field cannot be set when spec.os.name is windows.
        :param pulumi.Input[Sequence[pulumi.Input['ChallengeSpecSolverHttp01IngressPodTemplateSpecSecurityContextSysctlsPatchArgs']]] sysctls: Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported
               sysctls (by the container runtime) might fail to launch.
               Note that this field cannot be set when spec.os.name is windows.
        """
        if fs_group is not None:
            pulumi.set(__self__, "fs_group", fs_group)
        if fs_group_change_policy is not None:
            pulumi.set(__self__, "fs_group_change_policy", fs_group_change_policy)
        if run_as_group is not None:
            pulumi.set(__self__, "run_as_group", run_as_group)
        if run_as_non_root is not None:
            pulumi.set(__self__, "run_as_non_root", run_as_non_root)
        if run_as_user is not None:
            pulumi.set(__self__, "run_as_user", run_as_user)
        if se_linux_options is not None:
            pulumi.set(__self__, "se_linux_options", se_linux_options)
        if seccomp_profile is not None:
            pulumi.set(__self__, "seccomp_profile", seccomp_profile)
        if supplemental_groups is not None:
            pulumi.set(__self__, "supplemental_groups", supplemental_groups)
        if sysctls is not None:
            pulumi.set(__self__, "sysctls", sysctls)

    @property
    @pulumi.getter(name="fsGroup")
    def fs_group(self) -> Optional[pulumi.Input[int]]:
        """
        A special supplemental group that applies to all containers in a pod.
        Some volume types allow the Kubelet to change the ownership of that volume
        to be owned by the pod:

        1. The owning GID will be the FSGroup
        2. The setgid bit is set (new files created in the volume will be owned by FSGroup)
        3. The permission bits are OR'd with rw-rw----

        If unset, the Kubelet will not modify the ownership and permissions of any volume.
        Note that this field cannot be set when spec.os.name is windows.
        """
        return pulumi.get(self, "fs_group")

    @fs_group.setter
    def fs_group(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fs_group", value)

    @property
    @pulumi.getter(name="fsGroupChangePolicy")
    def fs_group_change_policy(self) -> Optional[pulumi.Input[str]]:
        """
        fsGroupChangePolicy defines behavior of changing ownership and permission of the volume
        before being exposed inside Pod. This field will only apply to
        volume types which support fsGroup based ownership(and permissions).
        It will have no effect on ephemeral volume types such as: secret, configmaps
        and emptydir.
        Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used.
        Note that this field cannot be set when spec.os.name is windows.
        """
        return pulumi.get(self, "fs_group_change_policy")

    @fs_group_change_policy.setter
    def fs_group_change_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fs_group_change_policy", value)

    @property
    @pulumi.getter(name="runAsGroup")
    def run_as_group(self) -> Optional[pulumi.Input[int]]:
        """
        The GID to run the entrypoint of the container process.
        Uses runtime default if unset.
        May also be set in SecurityContext.  If set in both SecurityContext and
        PodSecurityContext, the value specified in SecurityContext takes precedence
        for that container.
        Note that this field cannot be set when spec.os.name is windows.
        """
        return pulumi.get(self, "run_as_group")

    @run_as_group.setter
    def run_as_group(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "run_as_group", value)

    @property
    @pulumi.getter(name="runAsNonRoot")
    def run_as_non_root(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates that the container must run as a non-root user.
        If true, the Kubelet will validate the image at runtime to ensure that it
        does not run as UID 0 (root) and fail to start the container if it does.
        If unset or false, no such validation will be performed.
        May also be set in SecurityContext.  If set in both SecurityContext and
        PodSecurityContext, the value specified in SecurityContext takes precedence.
        """
        return pulumi.get(self, "run_as_non_root")

    @run_as_non_root.setter
    def run_as_non_root(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "run_as_non_root", value)

    @property
    @pulumi.getter(name="runAsUser")
    def run_as_user(self) -> Optional[pulumi.Input[int]]:
        """
        The UID to run the entrypoint of the container process.
        Defaults to user specified in image metadata if unspecified.
        May also be set in SecurityContext.  If set in both SecurityContext and
        PodSecurityContext, the value specified in SecurityContext takes precedence
        for that container.
        Note that this field cannot be set when spec.os.name is windows.
        """
        return pulumi.get(self, "run_as_user")

    @run_as_user.setter
    def run_as_user(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "run_as_user", value)

    @property
    @pulumi.getter(name="seLinuxOptions")
    def se_linux_options(
        self,
    ) -> Optional[
        pulumi.Input[
            "ChallengeSpecSolverHttp01IngressPodTemplateSpecSecurityContextSeLinuxOptionsPatchArgs"
        ]
    ]:
        return pulumi.get(self, "se_linux_options")

    @se_linux_options.setter
    def se_linux_options(
        self,
        value: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01IngressPodTemplateSpecSecurityContextSeLinuxOptionsPatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "se_linux_options", value)

    @property
    @pulumi.getter(name="seccompProfile")
    def seccomp_profile(
        self,
    ) -> Optional[
        pulumi.Input[
            "ChallengeSpecSolverHttp01IngressPodTemplateSpecSecurityContextSeccompProfilePatchArgs"
        ]
    ]:
        return pulumi.get(self, "seccomp_profile")

    @seccomp_profile.setter
    def seccomp_profile(
        self,
        value: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01IngressPodTemplateSpecSecurityContextSeccompProfilePatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "seccomp_profile", value)

    @property
    @pulumi.getter(name="supplementalGroups")
    def supplemental_groups(
        self,
    ) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        A list of groups applied to the first process run in each container, in addition
        to the container's primary GID, the fsGroup (if specified), and group memberships
        defined in the container image for the uid of the container process. If unspecified,
        no additional groups are added to any container. Note that group memberships
        defined in the container image for the uid of the container process are still effective,
        even if they are not included in this list.
        Note that this field cannot be set when spec.os.name is windows.
        """
        return pulumi.get(self, "supplemental_groups")

    @supplemental_groups.setter
    def supplemental_groups(
        self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]
    ):
        pulumi.set(self, "supplemental_groups", value)

    @property
    @pulumi.getter
    def sysctls(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ChallengeSpecSolverHttp01IngressPodTemplateSpecSecurityContextSysctlsPatchArgs"
                ]
            ]
        ]
    ]:
        """
        Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported
        sysctls (by the container runtime) might fail to launch.
        Note that this field cannot be set when spec.os.name is windows.
        """
        return pulumi.get(self, "sysctls")

    @sysctls.setter
    def sysctls(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01IngressPodTemplateSpecSecurityContextSysctlsPatchArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "sysctls", value)


if not MYPY:

    class ChallengeSpecSolverHttp01IngressPodTemplateSpecSecurityContextSeLinuxOptionsPatchArgsDict(
        TypedDict
    ):
        """
        The SELinux context to be applied to all containers.
        If unspecified, the container runtime will allocate a random SELinux context for each
        container.  May also be set in SecurityContext.  If set in
        both SecurityContext and PodSecurityContext, the value specified in SecurityContext
        takes precedence for that container.
        Note that this field cannot be set when spec.os.name is windows.
        """

        level: NotRequired[pulumi.Input[str]]
        """
        Level is SELinux level label that applies to the container.
        """
        role: NotRequired[pulumi.Input[str]]
        """
        Role is a SELinux role label that applies to the container.
        """
        type: NotRequired[pulumi.Input[str]]
        """
        Type is a SELinux type label that applies to the container.
        """
        user: NotRequired[pulumi.Input[str]]
        """
        User is a SELinux user label that applies to the container.
        """

elif False:
    ChallengeSpecSolverHttp01IngressPodTemplateSpecSecurityContextSeLinuxOptionsPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecSecurityContextSeLinuxOptionsPatchArgs:
    def __init__(
        __self__,
        *,
        level: Optional[pulumi.Input[str]] = None,
        role: Optional[pulumi.Input[str]] = None,
        type: Optional[pulumi.Input[str]] = None,
        user: Optional[pulumi.Input[str]] = None
    ):
        """
        The SELinux context to be applied to all containers.
        If unspecified, the container runtime will allocate a random SELinux context for each
        container.  May also be set in SecurityContext.  If set in
        both SecurityContext and PodSecurityContext, the value specified in SecurityContext
        takes precedence for that container.
        Note that this field cannot be set when spec.os.name is windows.
        :param pulumi.Input[str] level: Level is SELinux level label that applies to the container.
        :param pulumi.Input[str] role: Role is a SELinux role label that applies to the container.
        :param pulumi.Input[str] type: Type is a SELinux type label that applies to the container.
        :param pulumi.Input[str] user: User is a SELinux user label that applies to the container.
        """
        if level is not None:
            pulumi.set(__self__, "level", level)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        """
        Level is SELinux level label that applies to the container.
        """
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input[str]]:
        """
        Role is a SELinux role label that applies to the container.
        """
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Type is a SELinux type label that applies to the container.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def user(self) -> Optional[pulumi.Input[str]]:
        """
        User is a SELinux user label that applies to the container.
        """
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user", value)


if not MYPY:

    class ChallengeSpecSolverHttp01IngressPodTemplateSpecSecurityContextSeLinuxOptionsArgsDict(
        TypedDict
    ):
        """
        The SELinux context to be applied to all containers.
        If unspecified, the container runtime will allocate a random SELinux context for each
        container.  May also be set in SecurityContext.  If set in
        both SecurityContext and PodSecurityContext, the value specified in SecurityContext
        takes precedence for that container.
        Note that this field cannot be set when spec.os.name is windows.
        """

        level: NotRequired[pulumi.Input[str]]
        """
        Level is SELinux level label that applies to the container.
        """
        role: NotRequired[pulumi.Input[str]]
        """
        Role is a SELinux role label that applies to the container.
        """
        type: NotRequired[pulumi.Input[str]]
        """
        Type is a SELinux type label that applies to the container.
        """
        user: NotRequired[pulumi.Input[str]]
        """
        User is a SELinux user label that applies to the container.
        """

elif False:
    ChallengeSpecSolverHttp01IngressPodTemplateSpecSecurityContextSeLinuxOptionsArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecSecurityContextSeLinuxOptionsArgs:
    def __init__(
        __self__,
        *,
        level: Optional[pulumi.Input[str]] = None,
        role: Optional[pulumi.Input[str]] = None,
        type: Optional[pulumi.Input[str]] = None,
        user: Optional[pulumi.Input[str]] = None
    ):
        """
        The SELinux context to be applied to all containers.
        If unspecified, the container runtime will allocate a random SELinux context for each
        container.  May also be set in SecurityContext.  If set in
        both SecurityContext and PodSecurityContext, the value specified in SecurityContext
        takes precedence for that container.
        Note that this field cannot be set when spec.os.name is windows.
        :param pulumi.Input[str] level: Level is SELinux level label that applies to the container.
        :param pulumi.Input[str] role: Role is a SELinux role label that applies to the container.
        :param pulumi.Input[str] type: Type is a SELinux type label that applies to the container.
        :param pulumi.Input[str] user: User is a SELinux user label that applies to the container.
        """
        if level is not None:
            pulumi.set(__self__, "level", level)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        """
        Level is SELinux level label that applies to the container.
        """
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input[str]]:
        """
        Role is a SELinux role label that applies to the container.
        """
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Type is a SELinux type label that applies to the container.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def user(self) -> Optional[pulumi.Input[str]]:
        """
        User is a SELinux user label that applies to the container.
        """
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user", value)


if not MYPY:

    class ChallengeSpecSolverHttp01IngressPodTemplateSpecSecurityContextSeccompProfilePatchArgsDict(
        TypedDict
    ):
        """
        The seccomp options to use by the containers in this pod.
        Note that this field cannot be set when spec.os.name is windows.
        """

        localhost_profile: NotRequired[pulumi.Input[str]]
        """
        localhostProfile indicates a profile defined in a file on the node should be used.
        The profile must be preconfigured on the node to work.
        Must be a descending path, relative to the kubelet's configured seccomp profile location.
        Must be set if type is "Localhost". Must NOT be set for any other type.
        """
        type: NotRequired[pulumi.Input[str]]
        """
        type indicates which kind of seccomp profile will be applied.
        Valid options are:

        Localhost - a profile defined in a file on the node should be used.
        RuntimeDefault - the container runtime default profile should be used.
        Unconfined - no profile should be applied.
        """

elif False:
    ChallengeSpecSolverHttp01IngressPodTemplateSpecSecurityContextSeccompProfilePatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecSecurityContextSeccompProfilePatchArgs:
    def __init__(
        __self__,
        *,
        localhost_profile: Optional[pulumi.Input[str]] = None,
        type: Optional[pulumi.Input[str]] = None
    ):
        """
        The seccomp options to use by the containers in this pod.
        Note that this field cannot be set when spec.os.name is windows.
        :param pulumi.Input[str] localhost_profile: localhostProfile indicates a profile defined in a file on the node should be used.
               The profile must be preconfigured on the node to work.
               Must be a descending path, relative to the kubelet's configured seccomp profile location.
               Must be set if type is "Localhost". Must NOT be set for any other type.
        :param pulumi.Input[str] type: type indicates which kind of seccomp profile will be applied.
               Valid options are:

               Localhost - a profile defined in a file on the node should be used.
               RuntimeDefault - the container runtime default profile should be used.
               Unconfined - no profile should be applied.
        """
        if localhost_profile is not None:
            pulumi.set(__self__, "localhost_profile", localhost_profile)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="localhostProfile")
    def localhost_profile(self) -> Optional[pulumi.Input[str]]:
        """
        localhostProfile indicates a profile defined in a file on the node should be used.
        The profile must be preconfigured on the node to work.
        Must be a descending path, relative to the kubelet's configured seccomp profile location.
        Must be set if type is "Localhost". Must NOT be set for any other type.
        """
        return pulumi.get(self, "localhost_profile")

    @localhost_profile.setter
    def localhost_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "localhost_profile", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        type indicates which kind of seccomp profile will be applied.
        Valid options are:

        Localhost - a profile defined in a file on the node should be used.
        RuntimeDefault - the container runtime default profile should be used.
        Unconfined - no profile should be applied.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


if not MYPY:

    class ChallengeSpecSolverHttp01IngressPodTemplateSpecSecurityContextSeccompProfileArgsDict(
        TypedDict
    ):
        """
        The seccomp options to use by the containers in this pod.
        Note that this field cannot be set when spec.os.name is windows.
        """

        localhost_profile: NotRequired[pulumi.Input[str]]
        """
        localhostProfile indicates a profile defined in a file on the node should be used.
        The profile must be preconfigured on the node to work.
        Must be a descending path, relative to the kubelet's configured seccomp profile location.
        Must be set if type is "Localhost". Must NOT be set for any other type.
        """
        type: NotRequired[pulumi.Input[str]]
        """
        type indicates which kind of seccomp profile will be applied.
        Valid options are:

        Localhost - a profile defined in a file on the node should be used.
        RuntimeDefault - the container runtime default profile should be used.
        Unconfined - no profile should be applied.
        """

elif False:
    ChallengeSpecSolverHttp01IngressPodTemplateSpecSecurityContextSeccompProfileArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecSecurityContextSeccompProfileArgs:
    def __init__(
        __self__,
        *,
        localhost_profile: Optional[pulumi.Input[str]] = None,
        type: Optional[pulumi.Input[str]] = None
    ):
        """
        The seccomp options to use by the containers in this pod.
        Note that this field cannot be set when spec.os.name is windows.
        :param pulumi.Input[str] localhost_profile: localhostProfile indicates a profile defined in a file on the node should be used.
               The profile must be preconfigured on the node to work.
               Must be a descending path, relative to the kubelet's configured seccomp profile location.
               Must be set if type is "Localhost". Must NOT be set for any other type.
        :param pulumi.Input[str] type: type indicates which kind of seccomp profile will be applied.
               Valid options are:

               Localhost - a profile defined in a file on the node should be used.
               RuntimeDefault - the container runtime default profile should be used.
               Unconfined - no profile should be applied.
        """
        if localhost_profile is not None:
            pulumi.set(__self__, "localhost_profile", localhost_profile)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="localhostProfile")
    def localhost_profile(self) -> Optional[pulumi.Input[str]]:
        """
        localhostProfile indicates a profile defined in a file on the node should be used.
        The profile must be preconfigured on the node to work.
        Must be a descending path, relative to the kubelet's configured seccomp profile location.
        Must be set if type is "Localhost". Must NOT be set for any other type.
        """
        return pulumi.get(self, "localhost_profile")

    @localhost_profile.setter
    def localhost_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "localhost_profile", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        type indicates which kind of seccomp profile will be applied.
        Valid options are:

        Localhost - a profile defined in a file on the node should be used.
        RuntimeDefault - the container runtime default profile should be used.
        Unconfined - no profile should be applied.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


if not MYPY:

    class ChallengeSpecSolverHttp01IngressPodTemplateSpecSecurityContextSysctlsPatchArgsDict(
        TypedDict
    ):
        """
        Sysctl defines a kernel parameter to be set
        """

        name: NotRequired[pulumi.Input[str]]
        """
        Name of a property to set
        """
        value: NotRequired[pulumi.Input[str]]
        """
        Value of a property to set
        """

elif False:
    ChallengeSpecSolverHttp01IngressPodTemplateSpecSecurityContextSysctlsPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecSecurityContextSysctlsPatchArgs:
    def __init__(
        __self__,
        *,
        name: Optional[pulumi.Input[str]] = None,
        value: Optional[pulumi.Input[str]] = None
    ):
        """
        Sysctl defines a kernel parameter to be set
        :param pulumi.Input[str] name: Name of a property to set
        :param pulumi.Input[str] value: Value of a property to set
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of a property to set
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Value of a property to set
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:

    class ChallengeSpecSolverHttp01IngressPodTemplateSpecSecurityContextSysctlsArgsDict(
        TypedDict
    ):
        """
        Sysctl defines a kernel parameter to be set
        """

        name: NotRequired[pulumi.Input[str]]
        """
        Name of a property to set
        """
        value: NotRequired[pulumi.Input[str]]
        """
        Value of a property to set
        """

elif False:
    ChallengeSpecSolverHttp01IngressPodTemplateSpecSecurityContextSysctlsArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecSecurityContextSysctlsArgs:
    def __init__(
        __self__,
        *,
        name: Optional[pulumi.Input[str]] = None,
        value: Optional[pulumi.Input[str]] = None
    ):
        """
        Sysctl defines a kernel parameter to be set
        :param pulumi.Input[str] name: Name of a property to set
        :param pulumi.Input[str] value: Value of a property to set
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of a property to set
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Value of a property to set
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:

    class ChallengeSpecSolverHttp01IngressPodTemplateSpecSecurityContextArgsDict(
        TypedDict
    ):
        """
        If specified, the pod's security context
        """

        fs_group: NotRequired[pulumi.Input[int]]
        """
        A special supplemental group that applies to all containers in a pod.
        Some volume types allow the Kubelet to change the ownership of that volume
        to be owned by the pod:

        1. The owning GID will be the FSGroup
        2. The setgid bit is set (new files created in the volume will be owned by FSGroup)
        3. The permission bits are OR'd with rw-rw----

        If unset, the Kubelet will not modify the ownership and permissions of any volume.
        Note that this field cannot be set when spec.os.name is windows.
        """
        fs_group_change_policy: NotRequired[pulumi.Input[str]]
        """
        fsGroupChangePolicy defines behavior of changing ownership and permission of the volume
        before being exposed inside Pod. This field will only apply to
        volume types which support fsGroup based ownership(and permissions).
        It will have no effect on ephemeral volume types such as: secret, configmaps
        and emptydir.
        Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used.
        Note that this field cannot be set when spec.os.name is windows.
        """
        run_as_group: NotRequired[pulumi.Input[int]]
        """
        The GID to run the entrypoint of the container process.
        Uses runtime default if unset.
        May also be set in SecurityContext.  If set in both SecurityContext and
        PodSecurityContext, the value specified in SecurityContext takes precedence
        for that container.
        Note that this field cannot be set when spec.os.name is windows.
        """
        run_as_non_root: NotRequired[pulumi.Input[bool]]
        """
        Indicates that the container must run as a non-root user.
        If true, the Kubelet will validate the image at runtime to ensure that it
        does not run as UID 0 (root) and fail to start the container if it does.
        If unset or false, no such validation will be performed.
        May also be set in SecurityContext.  If set in both SecurityContext and
        PodSecurityContext, the value specified in SecurityContext takes precedence.
        """
        run_as_user: NotRequired[pulumi.Input[int]]
        """
        The UID to run the entrypoint of the container process.
        Defaults to user specified in image metadata if unspecified.
        May also be set in SecurityContext.  If set in both SecurityContext and
        PodSecurityContext, the value specified in SecurityContext takes precedence
        for that container.
        Note that this field cannot be set when spec.os.name is windows.
        """
        se_linux_options: NotRequired[
            pulumi.Input[
                "ChallengeSpecSolverHttp01IngressPodTemplateSpecSecurityContextSeLinuxOptionsArgsDict"
            ]
        ]
        seccomp_profile: NotRequired[
            pulumi.Input[
                "ChallengeSpecSolverHttp01IngressPodTemplateSpecSecurityContextSeccompProfileArgsDict"
            ]
        ]
        supplemental_groups: NotRequired[pulumi.Input[Sequence[pulumi.Input[int]]]]
        """
        A list of groups applied to the first process run in each container, in addition
        to the container's primary GID, the fsGroup (if specified), and group memberships
        defined in the container image for the uid of the container process. If unspecified,
        no additional groups are added to any container. Note that group memberships
        defined in the container image for the uid of the container process are still effective,
        even if they are not included in this list.
        Note that this field cannot be set when spec.os.name is windows.
        """
        sysctls: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01IngressPodTemplateSpecSecurityContextSysctlsArgsDict"
                    ]
                ]
            ]
        ]
        """
        Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported
        sysctls (by the container runtime) might fail to launch.
        Note that this field cannot be set when spec.os.name is windows.
        """

elif False:
    ChallengeSpecSolverHttp01IngressPodTemplateSpecSecurityContextArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecSecurityContextArgs:
    def __init__(
        __self__,
        *,
        fs_group: Optional[pulumi.Input[int]] = None,
        fs_group_change_policy: Optional[pulumi.Input[str]] = None,
        run_as_group: Optional[pulumi.Input[int]] = None,
        run_as_non_root: Optional[pulumi.Input[bool]] = None,
        run_as_user: Optional[pulumi.Input[int]] = None,
        se_linux_options: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01IngressPodTemplateSpecSecurityContextSeLinuxOptionsArgs"
            ]
        ] = None,
        seccomp_profile: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01IngressPodTemplateSpecSecurityContextSeccompProfileArgs"
            ]
        ] = None,
        supplemental_groups: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
        sysctls: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01IngressPodTemplateSpecSecurityContextSysctlsArgs"
                    ]
                ]
            ]
        ] = None
    ):
        """
        If specified, the pod's security context
        :param pulumi.Input[int] fs_group: A special supplemental group that applies to all containers in a pod.
               Some volume types allow the Kubelet to change the ownership of that volume
               to be owned by the pod:

               1. The owning GID will be the FSGroup
               2. The setgid bit is set (new files created in the volume will be owned by FSGroup)
               3. The permission bits are OR'd with rw-rw----

               If unset, the Kubelet will not modify the ownership and permissions of any volume.
               Note that this field cannot be set when spec.os.name is windows.
        :param pulumi.Input[str] fs_group_change_policy: fsGroupChangePolicy defines behavior of changing ownership and permission of the volume
               before being exposed inside Pod. This field will only apply to
               volume types which support fsGroup based ownership(and permissions).
               It will have no effect on ephemeral volume types such as: secret, configmaps
               and emptydir.
               Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used.
               Note that this field cannot be set when spec.os.name is windows.
        :param pulumi.Input[int] run_as_group: The GID to run the entrypoint of the container process.
               Uses runtime default if unset.
               May also be set in SecurityContext.  If set in both SecurityContext and
               PodSecurityContext, the value specified in SecurityContext takes precedence
               for that container.
               Note that this field cannot be set when spec.os.name is windows.
        :param pulumi.Input[bool] run_as_non_root: Indicates that the container must run as a non-root user.
               If true, the Kubelet will validate the image at runtime to ensure that it
               does not run as UID 0 (root) and fail to start the container if it does.
               If unset or false, no such validation will be performed.
               May also be set in SecurityContext.  If set in both SecurityContext and
               PodSecurityContext, the value specified in SecurityContext takes precedence.
        :param pulumi.Input[int] run_as_user: The UID to run the entrypoint of the container process.
               Defaults to user specified in image metadata if unspecified.
               May also be set in SecurityContext.  If set in both SecurityContext and
               PodSecurityContext, the value specified in SecurityContext takes precedence
               for that container.
               Note that this field cannot be set when spec.os.name is windows.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] supplemental_groups: A list of groups applied to the first process run in each container, in addition
               to the container's primary GID, the fsGroup (if specified), and group memberships
               defined in the container image for the uid of the container process. If unspecified,
               no additional groups are added to any container. Note that group memberships
               defined in the container image for the uid of the container process are still effective,
               even if they are not included in this list.
               Note that this field cannot be set when spec.os.name is windows.
        :param pulumi.Input[Sequence[pulumi.Input['ChallengeSpecSolverHttp01IngressPodTemplateSpecSecurityContextSysctlsArgs']]] sysctls: Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported
               sysctls (by the container runtime) might fail to launch.
               Note that this field cannot be set when spec.os.name is windows.
        """
        if fs_group is not None:
            pulumi.set(__self__, "fs_group", fs_group)
        if fs_group_change_policy is not None:
            pulumi.set(__self__, "fs_group_change_policy", fs_group_change_policy)
        if run_as_group is not None:
            pulumi.set(__self__, "run_as_group", run_as_group)
        if run_as_non_root is not None:
            pulumi.set(__self__, "run_as_non_root", run_as_non_root)
        if run_as_user is not None:
            pulumi.set(__self__, "run_as_user", run_as_user)
        if se_linux_options is not None:
            pulumi.set(__self__, "se_linux_options", se_linux_options)
        if seccomp_profile is not None:
            pulumi.set(__self__, "seccomp_profile", seccomp_profile)
        if supplemental_groups is not None:
            pulumi.set(__self__, "supplemental_groups", supplemental_groups)
        if sysctls is not None:
            pulumi.set(__self__, "sysctls", sysctls)

    @property
    @pulumi.getter(name="fsGroup")
    def fs_group(self) -> Optional[pulumi.Input[int]]:
        """
        A special supplemental group that applies to all containers in a pod.
        Some volume types allow the Kubelet to change the ownership of that volume
        to be owned by the pod:

        1. The owning GID will be the FSGroup
        2. The setgid bit is set (new files created in the volume will be owned by FSGroup)
        3. The permission bits are OR'd with rw-rw----

        If unset, the Kubelet will not modify the ownership and permissions of any volume.
        Note that this field cannot be set when spec.os.name is windows.
        """
        return pulumi.get(self, "fs_group")

    @fs_group.setter
    def fs_group(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fs_group", value)

    @property
    @pulumi.getter(name="fsGroupChangePolicy")
    def fs_group_change_policy(self) -> Optional[pulumi.Input[str]]:
        """
        fsGroupChangePolicy defines behavior of changing ownership and permission of the volume
        before being exposed inside Pod. This field will only apply to
        volume types which support fsGroup based ownership(and permissions).
        It will have no effect on ephemeral volume types such as: secret, configmaps
        and emptydir.
        Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used.
        Note that this field cannot be set when spec.os.name is windows.
        """
        return pulumi.get(self, "fs_group_change_policy")

    @fs_group_change_policy.setter
    def fs_group_change_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fs_group_change_policy", value)

    @property
    @pulumi.getter(name="runAsGroup")
    def run_as_group(self) -> Optional[pulumi.Input[int]]:
        """
        The GID to run the entrypoint of the container process.
        Uses runtime default if unset.
        May also be set in SecurityContext.  If set in both SecurityContext and
        PodSecurityContext, the value specified in SecurityContext takes precedence
        for that container.
        Note that this field cannot be set when spec.os.name is windows.
        """
        return pulumi.get(self, "run_as_group")

    @run_as_group.setter
    def run_as_group(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "run_as_group", value)

    @property
    @pulumi.getter(name="runAsNonRoot")
    def run_as_non_root(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates that the container must run as a non-root user.
        If true, the Kubelet will validate the image at runtime to ensure that it
        does not run as UID 0 (root) and fail to start the container if it does.
        If unset or false, no such validation will be performed.
        May also be set in SecurityContext.  If set in both SecurityContext and
        PodSecurityContext, the value specified in SecurityContext takes precedence.
        """
        return pulumi.get(self, "run_as_non_root")

    @run_as_non_root.setter
    def run_as_non_root(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "run_as_non_root", value)

    @property
    @pulumi.getter(name="runAsUser")
    def run_as_user(self) -> Optional[pulumi.Input[int]]:
        """
        The UID to run the entrypoint of the container process.
        Defaults to user specified in image metadata if unspecified.
        May also be set in SecurityContext.  If set in both SecurityContext and
        PodSecurityContext, the value specified in SecurityContext takes precedence
        for that container.
        Note that this field cannot be set when spec.os.name is windows.
        """
        return pulumi.get(self, "run_as_user")

    @run_as_user.setter
    def run_as_user(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "run_as_user", value)

    @property
    @pulumi.getter(name="seLinuxOptions")
    def se_linux_options(
        self,
    ) -> Optional[
        pulumi.Input[
            "ChallengeSpecSolverHttp01IngressPodTemplateSpecSecurityContextSeLinuxOptionsArgs"
        ]
    ]:
        return pulumi.get(self, "se_linux_options")

    @se_linux_options.setter
    def se_linux_options(
        self,
        value: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01IngressPodTemplateSpecSecurityContextSeLinuxOptionsArgs"
            ]
        ],
    ):
        pulumi.set(self, "se_linux_options", value)

    @property
    @pulumi.getter(name="seccompProfile")
    def seccomp_profile(
        self,
    ) -> Optional[
        pulumi.Input[
            "ChallengeSpecSolverHttp01IngressPodTemplateSpecSecurityContextSeccompProfileArgs"
        ]
    ]:
        return pulumi.get(self, "seccomp_profile")

    @seccomp_profile.setter
    def seccomp_profile(
        self,
        value: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01IngressPodTemplateSpecSecurityContextSeccompProfileArgs"
            ]
        ],
    ):
        pulumi.set(self, "seccomp_profile", value)

    @property
    @pulumi.getter(name="supplementalGroups")
    def supplemental_groups(
        self,
    ) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        A list of groups applied to the first process run in each container, in addition
        to the container's primary GID, the fsGroup (if specified), and group memberships
        defined in the container image for the uid of the container process. If unspecified,
        no additional groups are added to any container. Note that group memberships
        defined in the container image for the uid of the container process are still effective,
        even if they are not included in this list.
        Note that this field cannot be set when spec.os.name is windows.
        """
        return pulumi.get(self, "supplemental_groups")

    @supplemental_groups.setter
    def supplemental_groups(
        self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]
    ):
        pulumi.set(self, "supplemental_groups", value)

    @property
    @pulumi.getter
    def sysctls(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ChallengeSpecSolverHttp01IngressPodTemplateSpecSecurityContextSysctlsArgs"
                ]
            ]
        ]
    ]:
        """
        Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported
        sysctls (by the container runtime) might fail to launch.
        Note that this field cannot be set when spec.os.name is windows.
        """
        return pulumi.get(self, "sysctls")

    @sysctls.setter
    def sysctls(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01IngressPodTemplateSpecSecurityContextSysctlsArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "sysctls", value)


if not MYPY:

    class ChallengeSpecSolverHttp01IngressPodTemplateSpecTolerationsPatchArgsDict(
        TypedDict
    ):
        """
        The pod this Toleration is attached to tolerates any taint that matches
        the triple <key,value,effect> using the matching operator <operator>.
        """

        effect: NotRequired[pulumi.Input[str]]
        """
        Effect indicates the taint effect to match. Empty means match all taint effects.
        When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
        """
        key: NotRequired[pulumi.Input[str]]
        """
        Key is the taint key that the toleration applies to. Empty means match all taint keys.
        If the key is empty, operator must be Exists; this combination means to match all values and all keys.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        Operator represents a key's relationship to the value.
        Valid operators are Exists and Equal. Defaults to Equal.
        Exists is equivalent to wildcard for value, so that a pod can
        tolerate all taints of a particular category.
        """
        toleration_seconds: NotRequired[pulumi.Input[int]]
        """
        TolerationSeconds represents the period of time the toleration (which must be
        of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,
        it is not set, which means tolerate the taint forever (do not evict). Zero and
        negative values will be treated as 0 (evict immediately) by the system.
        """
        value: NotRequired[pulumi.Input[str]]
        """
        Value is the taint value the toleration matches to.
        If the operator is Exists, the value should be empty, otherwise just a regular string.
        """

elif False:
    ChallengeSpecSolverHttp01IngressPodTemplateSpecTolerationsPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecTolerationsPatchArgs:
    def __init__(
        __self__,
        *,
        effect: Optional[pulumi.Input[str]] = None,
        key: Optional[pulumi.Input[str]] = None,
        operator: Optional[pulumi.Input[str]] = None,
        toleration_seconds: Optional[pulumi.Input[int]] = None,
        value: Optional[pulumi.Input[str]] = None
    ):
        """
        The pod this Toleration is attached to tolerates any taint that matches
        the triple <key,value,effect> using the matching operator <operator>.
        :param pulumi.Input[str] effect: Effect indicates the taint effect to match. Empty means match all taint effects.
               When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
        :param pulumi.Input[str] key: Key is the taint key that the toleration applies to. Empty means match all taint keys.
               If the key is empty, operator must be Exists; this combination means to match all values and all keys.
        :param pulumi.Input[str] operator: Operator represents a key's relationship to the value.
               Valid operators are Exists and Equal. Defaults to Equal.
               Exists is equivalent to wildcard for value, so that a pod can
               tolerate all taints of a particular category.
        :param pulumi.Input[int] toleration_seconds: TolerationSeconds represents the period of time the toleration (which must be
               of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,
               it is not set, which means tolerate the taint forever (do not evict). Zero and
               negative values will be treated as 0 (evict immediately) by the system.
        :param pulumi.Input[str] value: Value is the taint value the toleration matches to.
               If the operator is Exists, the value should be empty, otherwise just a regular string.
        """
        if effect is not None:
            pulumi.set(__self__, "effect", effect)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if toleration_seconds is not None:
            pulumi.set(__self__, "toleration_seconds", toleration_seconds)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def effect(self) -> Optional[pulumi.Input[str]]:
        """
        Effect indicates the taint effect to match. Empty means match all taint effects.
        When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
        """
        return pulumi.get(self, "effect")

    @effect.setter
    def effect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "effect", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        Key is the taint key that the toleration applies to. Empty means match all taint keys.
        If the key is empty, operator must be Exists; this combination means to match all values and all keys.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        Operator represents a key's relationship to the value.
        Valid operators are Exists and Equal. Defaults to Equal.
        Exists is equivalent to wildcard for value, so that a pod can
        tolerate all taints of a particular category.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter(name="tolerationSeconds")
    def toleration_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        TolerationSeconds represents the period of time the toleration (which must be
        of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,
        it is not set, which means tolerate the taint forever (do not evict). Zero and
        negative values will be treated as 0 (evict immediately) by the system.
        """
        return pulumi.get(self, "toleration_seconds")

    @toleration_seconds.setter
    def toleration_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "toleration_seconds", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Value is the taint value the toleration matches to.
        If the operator is Exists, the value should be empty, otherwise just a regular string.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:

    class ChallengeSpecSolverHttp01IngressPodTemplateSpecTolerationsArgsDict(TypedDict):
        """
        The pod this Toleration is attached to tolerates any taint that matches
        the triple <key,value,effect> using the matching operator <operator>.
        """

        effect: NotRequired[pulumi.Input[str]]
        """
        Effect indicates the taint effect to match. Empty means match all taint effects.
        When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
        """
        key: NotRequired[pulumi.Input[str]]
        """
        Key is the taint key that the toleration applies to. Empty means match all taint keys.
        If the key is empty, operator must be Exists; this combination means to match all values and all keys.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        Operator represents a key's relationship to the value.
        Valid operators are Exists and Equal. Defaults to Equal.
        Exists is equivalent to wildcard for value, so that a pod can
        tolerate all taints of a particular category.
        """
        toleration_seconds: NotRequired[pulumi.Input[int]]
        """
        TolerationSeconds represents the period of time the toleration (which must be
        of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,
        it is not set, which means tolerate the taint forever (do not evict). Zero and
        negative values will be treated as 0 (evict immediately) by the system.
        """
        value: NotRequired[pulumi.Input[str]]
        """
        Value is the taint value the toleration matches to.
        If the operator is Exists, the value should be empty, otherwise just a regular string.
        """

elif False:
    ChallengeSpecSolverHttp01IngressPodTemplateSpecTolerationsArgsDict: TypeAlias = (
        Mapping[str, Any]
    )


@pulumi.input_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecTolerationsArgs:
    def __init__(
        __self__,
        *,
        effect: Optional[pulumi.Input[str]] = None,
        key: Optional[pulumi.Input[str]] = None,
        operator: Optional[pulumi.Input[str]] = None,
        toleration_seconds: Optional[pulumi.Input[int]] = None,
        value: Optional[pulumi.Input[str]] = None
    ):
        """
        The pod this Toleration is attached to tolerates any taint that matches
        the triple <key,value,effect> using the matching operator <operator>.
        :param pulumi.Input[str] effect: Effect indicates the taint effect to match. Empty means match all taint effects.
               When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
        :param pulumi.Input[str] key: Key is the taint key that the toleration applies to. Empty means match all taint keys.
               If the key is empty, operator must be Exists; this combination means to match all values and all keys.
        :param pulumi.Input[str] operator: Operator represents a key's relationship to the value.
               Valid operators are Exists and Equal. Defaults to Equal.
               Exists is equivalent to wildcard for value, so that a pod can
               tolerate all taints of a particular category.
        :param pulumi.Input[int] toleration_seconds: TolerationSeconds represents the period of time the toleration (which must be
               of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,
               it is not set, which means tolerate the taint forever (do not evict). Zero and
               negative values will be treated as 0 (evict immediately) by the system.
        :param pulumi.Input[str] value: Value is the taint value the toleration matches to.
               If the operator is Exists, the value should be empty, otherwise just a regular string.
        """
        if effect is not None:
            pulumi.set(__self__, "effect", effect)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if toleration_seconds is not None:
            pulumi.set(__self__, "toleration_seconds", toleration_seconds)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def effect(self) -> Optional[pulumi.Input[str]]:
        """
        Effect indicates the taint effect to match. Empty means match all taint effects.
        When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
        """
        return pulumi.get(self, "effect")

    @effect.setter
    def effect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "effect", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        Key is the taint key that the toleration applies to. Empty means match all taint keys.
        If the key is empty, operator must be Exists; this combination means to match all values and all keys.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        Operator represents a key's relationship to the value.
        Valid operators are Exists and Equal. Defaults to Equal.
        Exists is equivalent to wildcard for value, so that a pod can
        tolerate all taints of a particular category.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter(name="tolerationSeconds")
    def toleration_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        TolerationSeconds represents the period of time the toleration (which must be
        of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,
        it is not set, which means tolerate the taint forever (do not evict). Zero and
        negative values will be treated as 0 (evict immediately) by the system.
        """
        return pulumi.get(self, "toleration_seconds")

    @toleration_seconds.setter
    def toleration_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "toleration_seconds", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Value is the taint value the toleration matches to.
        If the operator is Exists, the value should be empty, otherwise just a regular string.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:

    class ChallengeSpecSolverHttp01IngressPodTemplateSpecArgsDict(TypedDict):
        """
        PodSpec defines overrides for the HTTP01 challenge solver pod.
        Check ACMEChallengeSolverHTTP01IngressPodSpec to find out currently supported fields.
        All other fields will be ignored.
        """

        affinity: NotRequired[
            pulumi.Input[
                "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityArgsDict"
            ]
        ]
        image_pull_secrets: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01IngressPodTemplateSpecImagePullSecretsArgsDict"
                    ]
                ]
            ]
        ]
        """
        If specified, the pod's imagePullSecrets
        """
        node_selector: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        NodeSelector is a selector which must be true for the pod to fit on a node.
        Selector which must match a node's labels for the pod to be scheduled on that node.
        More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
        """
        priority_class_name: NotRequired[pulumi.Input[str]]
        """
        If specified, the pod's priorityClassName.
        """
        security_context: NotRequired[
            pulumi.Input[
                "ChallengeSpecSolverHttp01IngressPodTemplateSpecSecurityContextArgsDict"
            ]
        ]
        service_account_name: NotRequired[pulumi.Input[str]]
        """
        If specified, the pod's service account
        """
        tolerations: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01IngressPodTemplateSpecTolerationsArgsDict"
                    ]
                ]
            ]
        ]
        """
        If specified, the pod's tolerations.
        """

elif False:
    ChallengeSpecSolverHttp01IngressPodTemplateSpecArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecArgs:
    def __init__(
        __self__,
        *,
        affinity: Optional[
            pulumi.Input["ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityArgs"]
        ] = None,
        image_pull_secrets: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01IngressPodTemplateSpecImagePullSecretsArgs"
                    ]
                ]
            ]
        ] = None,
        node_selector: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
        priority_class_name: Optional[pulumi.Input[str]] = None,
        security_context: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01IngressPodTemplateSpecSecurityContextArgs"
            ]
        ] = None,
        service_account_name: Optional[pulumi.Input[str]] = None,
        tolerations: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01IngressPodTemplateSpecTolerationsArgs"
                    ]
                ]
            ]
        ] = None
    ):
        """
        PodSpec defines overrides for the HTTP01 challenge solver pod.
        Check ACMEChallengeSolverHTTP01IngressPodSpec to find out currently supported fields.
        All other fields will be ignored.
        :param pulumi.Input[Sequence[pulumi.Input['ChallengeSpecSolverHttp01IngressPodTemplateSpecImagePullSecretsArgs']]] image_pull_secrets: If specified, the pod's imagePullSecrets
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] node_selector: NodeSelector is a selector which must be true for the pod to fit on a node.
               Selector which must match a node's labels for the pod to be scheduled on that node.
               More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
        :param pulumi.Input[str] priority_class_name: If specified, the pod's priorityClassName.
        :param pulumi.Input[str] service_account_name: If specified, the pod's service account
        :param pulumi.Input[Sequence[pulumi.Input['ChallengeSpecSolverHttp01IngressPodTemplateSpecTolerationsArgs']]] tolerations: If specified, the pod's tolerations.
        """
        if affinity is not None:
            pulumi.set(__self__, "affinity", affinity)
        if image_pull_secrets is not None:
            pulumi.set(__self__, "image_pull_secrets", image_pull_secrets)
        if node_selector is not None:
            pulumi.set(__self__, "node_selector", node_selector)
        if priority_class_name is not None:
            pulumi.set(__self__, "priority_class_name", priority_class_name)
        if security_context is not None:
            pulumi.set(__self__, "security_context", security_context)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tolerations is not None:
            pulumi.set(__self__, "tolerations", tolerations)

    @property
    @pulumi.getter
    def affinity(
        self,
    ) -> Optional[
        pulumi.Input["ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityArgs"]
    ]:
        return pulumi.get(self, "affinity")

    @affinity.setter
    def affinity(
        self,
        value: Optional[
            pulumi.Input["ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityArgs"]
        ],
    ):
        pulumi.set(self, "affinity", value)

    @property
    @pulumi.getter(name="imagePullSecrets")
    def image_pull_secrets(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ChallengeSpecSolverHttp01IngressPodTemplateSpecImagePullSecretsArgs"
                ]
            ]
        ]
    ]:
        """
        If specified, the pod's imagePullSecrets
        """
        return pulumi.get(self, "image_pull_secrets")

    @image_pull_secrets.setter
    def image_pull_secrets(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01IngressPodTemplateSpecImagePullSecretsArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "image_pull_secrets", value)

    @property
    @pulumi.getter(name="nodeSelector")
    def node_selector(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        NodeSelector is a selector which must be true for the pod to fit on a node.
        Selector which must match a node's labels for the pod to be scheduled on that node.
        More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
        """
        return pulumi.get(self, "node_selector")

    @node_selector.setter
    def node_selector(
        self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
    ):
        pulumi.set(self, "node_selector", value)

    @property
    @pulumi.getter(name="priorityClassName")
    def priority_class_name(self) -> Optional[pulumi.Input[str]]:
        """
        If specified, the pod's priorityClassName.
        """
        return pulumi.get(self, "priority_class_name")

    @priority_class_name.setter
    def priority_class_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "priority_class_name", value)

    @property
    @pulumi.getter(name="securityContext")
    def security_context(
        self,
    ) -> Optional[
        pulumi.Input[
            "ChallengeSpecSolverHttp01IngressPodTemplateSpecSecurityContextArgs"
        ]
    ]:
        return pulumi.get(self, "security_context")

    @security_context.setter
    def security_context(
        self,
        value: Optional[
            pulumi.Input[
                "ChallengeSpecSolverHttp01IngressPodTemplateSpecSecurityContextArgs"
            ]
        ],
    ):
        pulumi.set(self, "security_context", value)

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[pulumi.Input[str]]:
        """
        If specified, the pod's service account
        """
        return pulumi.get(self, "service_account_name")

    @service_account_name.setter
    def service_account_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account_name", value)

    @property
    @pulumi.getter
    def tolerations(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ChallengeSpecSolverHttp01IngressPodTemplateSpecTolerationsArgs"
                ]
            ]
        ]
    ]:
        """
        If specified, the pod's tolerations.
        """
        return pulumi.get(self, "tolerations")

    @tolerations.setter
    def tolerations(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ChallengeSpecSolverHttp01IngressPodTemplateSpecTolerationsArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "tolerations", value)


if not MYPY:

    class ChallengeSpecSolverHttp01IngressPodTemplateArgsDict(TypedDict):
        """
        Optional pod template used to configure the ACME challenge solver pods
        used for HTTP01 challenges.
        """

        metadata: NotRequired[
            pulumi.Input["ChallengeSpecSolverHttp01IngressPodTemplateMetadataArgsDict"]
        ]
        spec: NotRequired[
            pulumi.Input["ChallengeSpecSolverHttp01IngressPodTemplateSpecArgsDict"]
        ]

elif False:
    ChallengeSpecSolverHttp01IngressPodTemplateArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class ChallengeSpecSolverHttp01IngressPodTemplateArgs:
    def __init__(
        __self__,
        *,
        metadata: Optional[
            pulumi.Input["ChallengeSpecSolverHttp01IngressPodTemplateMetadataArgs"]
        ] = None,
        spec: Optional[
            pulumi.Input["ChallengeSpecSolverHttp01IngressPodTemplateSpecArgs"]
        ] = None
    ):
        """
        Optional pod template used to configure the ACME challenge solver pods
        used for HTTP01 challenges.
        """
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if spec is not None:
            pulumi.set(__self__, "spec", spec)

    @property
    @pulumi.getter
    def metadata(
        self,
    ) -> Optional[
        pulumi.Input["ChallengeSpecSolverHttp01IngressPodTemplateMetadataArgs"]
    ]:
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(
        self,
        value: Optional[
            pulumi.Input["ChallengeSpecSolverHttp01IngressPodTemplateMetadataArgs"]
        ],
    ):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter
    def spec(
        self,
    ) -> Optional[pulumi.Input["ChallengeSpecSolverHttp01IngressPodTemplateSpecArgs"]]:
        return pulumi.get(self, "spec")

    @spec.setter
    def spec(
        self,
        value: Optional[
            pulumi.Input["ChallengeSpecSolverHttp01IngressPodTemplateSpecArgs"]
        ],
    ):
        pulumi.set(self, "spec", value)


if not MYPY:

    class ChallengeSpecSolverHttp01IngressArgsDict(TypedDict):
        """
        The ingress based HTTP01 challenge solver will solve challenges by
        creating or modifying Ingress resources in order to route requests for
        '/.well-known/acme-challenge/XYZ' to 'challenge solver' pods that are
        provisioned by cert-manager for each Challenge to be completed.
        """

        class_: NotRequired[pulumi.Input[str]]
        """
        This field configures the annotation `kubernetes.io/ingress.class` when
        creating Ingress resources to solve ACME challenges that use this
        challenge solver. Only one of `class`, `name` or `ingressClassName` may
        be specified.
        """
        ingress_class_name: NotRequired[pulumi.Input[str]]
        """
        This field configures the field `ingressClassName` on the created Ingress
        resources used to solve ACME challenges that use this challenge solver.
        This is the recommended way of configuring the ingress class. Only one of
        `class`, `name` or `ingressClassName` may be specified.
        """
        ingress_template: NotRequired[
            pulumi.Input["ChallengeSpecSolverHttp01IngressIngressTemplateArgsDict"]
        ]
        name: NotRequired[pulumi.Input[str]]
        """
        The name of the ingress resource that should have ACME challenge solving
        routes inserted into it in order to solve HTTP01 challenges.
        This is typically used in conjunction with ingress controllers like
        ingress-gce, which maintains a 1:1 mapping between external IPs and
        ingress resources. Only one of `class`, `name` or `ingressClassName` may
        be specified.
        """
        pod_template: NotRequired[
            pulumi.Input["ChallengeSpecSolverHttp01IngressPodTemplateArgsDict"]
        ]
        service_type: NotRequired[pulumi.Input[str]]
        """
        Optional service type for Kubernetes solver service. Supported values
        are NodePort or ClusterIP. If unset, defaults to NodePort.
        """

elif False:
    ChallengeSpecSolverHttp01IngressArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class ChallengeSpecSolverHttp01IngressArgs:
    def __init__(
        __self__,
        *,
        class_: Optional[pulumi.Input[str]] = None,
        ingress_class_name: Optional[pulumi.Input[str]] = None,
        ingress_template: Optional[
            pulumi.Input["ChallengeSpecSolverHttp01IngressIngressTemplateArgs"]
        ] = None,
        name: Optional[pulumi.Input[str]] = None,
        pod_template: Optional[
            pulumi.Input["ChallengeSpecSolverHttp01IngressPodTemplateArgs"]
        ] = None,
        service_type: Optional[pulumi.Input[str]] = None
    ):
        """
        The ingress based HTTP01 challenge solver will solve challenges by
        creating or modifying Ingress resources in order to route requests for
        '/.well-known/acme-challenge/XYZ' to 'challenge solver' pods that are
        provisioned by cert-manager for each Challenge to be completed.
        :param pulumi.Input[str] class_: This field configures the annotation `kubernetes.io/ingress.class` when
               creating Ingress resources to solve ACME challenges that use this
               challenge solver. Only one of `class`, `name` or `ingressClassName` may
               be specified.
        :param pulumi.Input[str] ingress_class_name: This field configures the field `ingressClassName` on the created Ingress
               resources used to solve ACME challenges that use this challenge solver.
               This is the recommended way of configuring the ingress class. Only one of
               `class`, `name` or `ingressClassName` may be specified.
        :param pulumi.Input[str] name: The name of the ingress resource that should have ACME challenge solving
               routes inserted into it in order to solve HTTP01 challenges.
               This is typically used in conjunction with ingress controllers like
               ingress-gce, which maintains a 1:1 mapping between external IPs and
               ingress resources. Only one of `class`, `name` or `ingressClassName` may
               be specified.
        :param pulumi.Input[str] service_type: Optional service type for Kubernetes solver service. Supported values
               are NodePort or ClusterIP. If unset, defaults to NodePort.
        """
        if class_ is not None:
            pulumi.set(__self__, "class_", class_)
        if ingress_class_name is not None:
            pulumi.set(__self__, "ingress_class_name", ingress_class_name)
        if ingress_template is not None:
            pulumi.set(__self__, "ingress_template", ingress_template)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if pod_template is not None:
            pulumi.set(__self__, "pod_template", pod_template)
        if service_type is not None:
            pulumi.set(__self__, "service_type", service_type)

    @property
    @pulumi.getter(name="class")
    def class_(self) -> Optional[pulumi.Input[str]]:
        """
        This field configures the annotation `kubernetes.io/ingress.class` when
        creating Ingress resources to solve ACME challenges that use this
        challenge solver. Only one of `class`, `name` or `ingressClassName` may
        be specified.
        """
        return pulumi.get(self, "class_")

    @class_.setter
    def class_(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "class_", value)

    @property
    @pulumi.getter(name="ingressClassName")
    def ingress_class_name(self) -> Optional[pulumi.Input[str]]:
        """
        This field configures the field `ingressClassName` on the created Ingress
        resources used to solve ACME challenges that use this challenge solver.
        This is the recommended way of configuring the ingress class. Only one of
        `class`, `name` or `ingressClassName` may be specified.
        """
        return pulumi.get(self, "ingress_class_name")

    @ingress_class_name.setter
    def ingress_class_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ingress_class_name", value)

    @property
    @pulumi.getter(name="ingressTemplate")
    def ingress_template(
        self,
    ) -> Optional[pulumi.Input["ChallengeSpecSolverHttp01IngressIngressTemplateArgs"]]:
        return pulumi.get(self, "ingress_template")

    @ingress_template.setter
    def ingress_template(
        self,
        value: Optional[
            pulumi.Input["ChallengeSpecSolverHttp01IngressIngressTemplateArgs"]
        ],
    ):
        pulumi.set(self, "ingress_template", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the ingress resource that should have ACME challenge solving
        routes inserted into it in order to solve HTTP01 challenges.
        This is typically used in conjunction with ingress controllers like
        ingress-gce, which maintains a 1:1 mapping between external IPs and
        ingress resources. Only one of `class`, `name` or `ingressClassName` may
        be specified.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="podTemplate")
    def pod_template(
        self,
    ) -> Optional[pulumi.Input["ChallengeSpecSolverHttp01IngressPodTemplateArgs"]]:
        return pulumi.get(self, "pod_template")

    @pod_template.setter
    def pod_template(
        self,
        value: Optional[
            pulumi.Input["ChallengeSpecSolverHttp01IngressPodTemplateArgs"]
        ],
    ):
        pulumi.set(self, "pod_template", value)

    @property
    @pulumi.getter(name="serviceType")
    def service_type(self) -> Optional[pulumi.Input[str]]:
        """
        Optional service type for Kubernetes solver service. Supported values
        are NodePort or ClusterIP. If unset, defaults to NodePort.
        """
        return pulumi.get(self, "service_type")

    @service_type.setter
    def service_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_type", value)


if not MYPY:

    class ChallengeSpecSolverHttp01PatchArgsDict(TypedDict):
        """
        Configures cert-manager to attempt to complete authorizations by
        performing the HTTP01 challenge flow.
        It is not possible to obtain certificates for wildcard domain names
        (e.g. `*.example.com`) using the HTTP01 challenge mechanism.
        """

        gateway_http_route: NotRequired[
            pulumi.Input["ChallengeSpecSolverHttp01GatewayHTTPRoutePatchArgsDict"]
        ]
        ingress: NotRequired[
            pulumi.Input["ChallengeSpecSolverHttp01IngressPatchArgsDict"]
        ]

elif False:
    ChallengeSpecSolverHttp01PatchArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class ChallengeSpecSolverHttp01PatchArgs:
    def __init__(
        __self__,
        *,
        gateway_http_route: Optional[
            pulumi.Input["ChallengeSpecSolverHttp01GatewayHTTPRoutePatchArgs"]
        ] = None,
        ingress: Optional[
            pulumi.Input["ChallengeSpecSolverHttp01IngressPatchArgs"]
        ] = None
    ):
        """
        Configures cert-manager to attempt to complete authorizations by
        performing the HTTP01 challenge flow.
        It is not possible to obtain certificates for wildcard domain names
        (e.g. `*.example.com`) using the HTTP01 challenge mechanism.
        """
        if gateway_http_route is not None:
            pulumi.set(__self__, "gateway_http_route", gateway_http_route)
        if ingress is not None:
            pulumi.set(__self__, "ingress", ingress)

    @property
    @pulumi.getter(name="gatewayHTTPRoute")
    def gateway_http_route(
        self,
    ) -> Optional[pulumi.Input["ChallengeSpecSolverHttp01GatewayHTTPRoutePatchArgs"]]:
        return pulumi.get(self, "gateway_http_route")

    @gateway_http_route.setter
    def gateway_http_route(
        self,
        value: Optional[
            pulumi.Input["ChallengeSpecSolverHttp01GatewayHTTPRoutePatchArgs"]
        ],
    ):
        pulumi.set(self, "gateway_http_route", value)

    @property
    @pulumi.getter
    def ingress(
        self,
    ) -> Optional[pulumi.Input["ChallengeSpecSolverHttp01IngressPatchArgs"]]:
        return pulumi.get(self, "ingress")

    @ingress.setter
    def ingress(
        self, value: Optional[pulumi.Input["ChallengeSpecSolverHttp01IngressPatchArgs"]]
    ):
        pulumi.set(self, "ingress", value)


if not MYPY:

    class ChallengeSpecSolverHttp01ArgsDict(TypedDict):
        """
        Configures cert-manager to attempt to complete authorizations by
        performing the HTTP01 challenge flow.
        It is not possible to obtain certificates for wildcard domain names
        (e.g. `*.example.com`) using the HTTP01 challenge mechanism.
        """

        gateway_http_route: NotRequired[
            pulumi.Input["ChallengeSpecSolverHttp01GatewayHTTPRouteArgsDict"]
        ]
        ingress: NotRequired[pulumi.Input["ChallengeSpecSolverHttp01IngressArgsDict"]]

elif False:
    ChallengeSpecSolverHttp01ArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class ChallengeSpecSolverHttp01Args:
    def __init__(
        __self__,
        *,
        gateway_http_route: Optional[
            pulumi.Input["ChallengeSpecSolverHttp01GatewayHTTPRouteArgs"]
        ] = None,
        ingress: Optional[pulumi.Input["ChallengeSpecSolverHttp01IngressArgs"]] = None
    ):
        """
        Configures cert-manager to attempt to complete authorizations by
        performing the HTTP01 challenge flow.
        It is not possible to obtain certificates for wildcard domain names
        (e.g. `*.example.com`) using the HTTP01 challenge mechanism.
        """
        if gateway_http_route is not None:
            pulumi.set(__self__, "gateway_http_route", gateway_http_route)
        if ingress is not None:
            pulumi.set(__self__, "ingress", ingress)

    @property
    @pulumi.getter(name="gatewayHTTPRoute")
    def gateway_http_route(
        self,
    ) -> Optional[pulumi.Input["ChallengeSpecSolverHttp01GatewayHTTPRouteArgs"]]:
        return pulumi.get(self, "gateway_http_route")

    @gateway_http_route.setter
    def gateway_http_route(
        self,
        value: Optional[pulumi.Input["ChallengeSpecSolverHttp01GatewayHTTPRouteArgs"]],
    ):
        pulumi.set(self, "gateway_http_route", value)

    @property
    @pulumi.getter
    def ingress(self) -> Optional[pulumi.Input["ChallengeSpecSolverHttp01IngressArgs"]]:
        return pulumi.get(self, "ingress")

    @ingress.setter
    def ingress(
        self, value: Optional[pulumi.Input["ChallengeSpecSolverHttp01IngressArgs"]]
    ):
        pulumi.set(self, "ingress", value)


if not MYPY:

    class ChallengeSpecSolverPatchArgsDict(TypedDict):
        """
        Contains the domain solving configuration that should be used to
        solve this challenge resource.
        """

        dns01: NotRequired[pulumi.Input["ChallengeSpecSolverDns01PatchArgsDict"]]
        http01: NotRequired[pulumi.Input["ChallengeSpecSolverHttp01PatchArgsDict"]]
        selector: NotRequired[pulumi.Input["ChallengeSpecSolverSelectorPatchArgsDict"]]

elif False:
    ChallengeSpecSolverPatchArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class ChallengeSpecSolverPatchArgs:
    def __init__(
        __self__,
        *,
        dns01: Optional[pulumi.Input["ChallengeSpecSolverDns01PatchArgs"]] = None,
        http01: Optional[pulumi.Input["ChallengeSpecSolverHttp01PatchArgs"]] = None,
        selector: Optional[pulumi.Input["ChallengeSpecSolverSelectorPatchArgs"]] = None
    ):
        """
        Contains the domain solving configuration that should be used to
        solve this challenge resource.
        """
        if dns01 is not None:
            pulumi.set(__self__, "dns01", dns01)
        if http01 is not None:
            pulumi.set(__self__, "http01", http01)
        if selector is not None:
            pulumi.set(__self__, "selector", selector)

    @property
    @pulumi.getter
    def dns01(self) -> Optional[pulumi.Input["ChallengeSpecSolverDns01PatchArgs"]]:
        return pulumi.get(self, "dns01")

    @dns01.setter
    def dns01(self, value: Optional[pulumi.Input["ChallengeSpecSolverDns01PatchArgs"]]):
        pulumi.set(self, "dns01", value)

    @property
    @pulumi.getter
    def http01(self) -> Optional[pulumi.Input["ChallengeSpecSolverHttp01PatchArgs"]]:
        return pulumi.get(self, "http01")

    @http01.setter
    def http01(
        self, value: Optional[pulumi.Input["ChallengeSpecSolverHttp01PatchArgs"]]
    ):
        pulumi.set(self, "http01", value)

    @property
    @pulumi.getter
    def selector(
        self,
    ) -> Optional[pulumi.Input["ChallengeSpecSolverSelectorPatchArgs"]]:
        return pulumi.get(self, "selector")

    @selector.setter
    def selector(
        self, value: Optional[pulumi.Input["ChallengeSpecSolverSelectorPatchArgs"]]
    ):
        pulumi.set(self, "selector", value)


if not MYPY:

    class ChallengeSpecSolverSelectorPatchArgsDict(TypedDict):
        """
        Selector selects a set of DNSNames on the Certificate resource that
        should be solved using this challenge solver.
        If not specified, the solver will be treated as the 'default' solver
        with the lowest priority, i.e. if any other solver has a more specific
        match, it will be used instead.
        """

        dns_names: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        List of DNSNames that this solver will be used to solve.
        If specified and a match is found, a dnsNames selector will take
        precedence over a dnsZones selector.
        If multiple solvers match with the same dnsNames value, the solver
        with the most matching labels in matchLabels will be selected.
        If neither has more matches, the solver defined earlier in the list
        will be selected.
        """
        dns_zones: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        List of DNSZones that this solver will be used to solve.
        The most specific DNS zone match specified here will take precedence
        over other DNS zone matches, so a solver specifying sys.example.com
        will be selected over one specifying example.com for the domain
        www.sys.example.com.
        If multiple solvers match with the same dnsZones value, the solver
        with the most matching labels in matchLabels will be selected.
        If neither has more matches, the solver defined earlier in the list
        will be selected.
        """
        match_labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        A label selector that is used to refine the set of certificate's that
        this challenge solver will apply to.
        """

elif False:
    ChallengeSpecSolverSelectorPatchArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class ChallengeSpecSolverSelectorPatchArgs:
    def __init__(
        __self__,
        *,
        dns_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        dns_zones: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None
    ):
        """
        Selector selects a set of DNSNames on the Certificate resource that
        should be solved using this challenge solver.
        If not specified, the solver will be treated as the 'default' solver
        with the lowest priority, i.e. if any other solver has a more specific
        match, it will be used instead.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] dns_names: List of DNSNames that this solver will be used to solve.
               If specified and a match is found, a dnsNames selector will take
               precedence over a dnsZones selector.
               If multiple solvers match with the same dnsNames value, the solver
               with the most matching labels in matchLabels will be selected.
               If neither has more matches, the solver defined earlier in the list
               will be selected.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] dns_zones: List of DNSZones that this solver will be used to solve.
               The most specific DNS zone match specified here will take precedence
               over other DNS zone matches, so a solver specifying sys.example.com
               will be selected over one specifying example.com for the domain
               www.sys.example.com.
               If multiple solvers match with the same dnsZones value, the solver
               with the most matching labels in matchLabels will be selected.
               If neither has more matches, the solver defined earlier in the list
               will be selected.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] match_labels: A label selector that is used to refine the set of certificate's that
               this challenge solver will apply to.
        """
        if dns_names is not None:
            pulumi.set(__self__, "dns_names", dns_names)
        if dns_zones is not None:
            pulumi.set(__self__, "dns_zones", dns_zones)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="dnsNames")
    def dns_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of DNSNames that this solver will be used to solve.
        If specified and a match is found, a dnsNames selector will take
        precedence over a dnsZones selector.
        If multiple solvers match with the same dnsNames value, the solver
        with the most matching labels in matchLabels will be selected.
        If neither has more matches, the solver defined earlier in the list
        will be selected.
        """
        return pulumi.get(self, "dns_names")

    @dns_names.setter
    def dns_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "dns_names", value)

    @property
    @pulumi.getter(name="dnsZones")
    def dns_zones(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of DNSZones that this solver will be used to solve.
        The most specific DNS zone match specified here will take precedence
        over other DNS zone matches, so a solver specifying sys.example.com
        will be selected over one specifying example.com for the domain
        www.sys.example.com.
        If multiple solvers match with the same dnsZones value, the solver
        with the most matching labels in matchLabels will be selected.
        If neither has more matches, the solver defined earlier in the list
        will be selected.
        """
        return pulumi.get(self, "dns_zones")

    @dns_zones.setter
    def dns_zones(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "dns_zones", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A label selector that is used to refine the set of certificate's that
        this challenge solver will apply to.
        """
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(
        self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
    ):
        pulumi.set(self, "match_labels", value)


if not MYPY:

    class ChallengeSpecSolverSelectorArgsDict(TypedDict):
        """
        Selector selects a set of DNSNames on the Certificate resource that
        should be solved using this challenge solver.
        If not specified, the solver will be treated as the 'default' solver
        with the lowest priority, i.e. if any other solver has a more specific
        match, it will be used instead.
        """

        dns_names: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        List of DNSNames that this solver will be used to solve.
        If specified and a match is found, a dnsNames selector will take
        precedence over a dnsZones selector.
        If multiple solvers match with the same dnsNames value, the solver
        with the most matching labels in matchLabels will be selected.
        If neither has more matches, the solver defined earlier in the list
        will be selected.
        """
        dns_zones: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        List of DNSZones that this solver will be used to solve.
        The most specific DNS zone match specified here will take precedence
        over other DNS zone matches, so a solver specifying sys.example.com
        will be selected over one specifying example.com for the domain
        www.sys.example.com.
        If multiple solvers match with the same dnsZones value, the solver
        with the most matching labels in matchLabels will be selected.
        If neither has more matches, the solver defined earlier in the list
        will be selected.
        """
        match_labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        A label selector that is used to refine the set of certificate's that
        this challenge solver will apply to.
        """

elif False:
    ChallengeSpecSolverSelectorArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class ChallengeSpecSolverSelectorArgs:
    def __init__(
        __self__,
        *,
        dns_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        dns_zones: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None
    ):
        """
        Selector selects a set of DNSNames on the Certificate resource that
        should be solved using this challenge solver.
        If not specified, the solver will be treated as the 'default' solver
        with the lowest priority, i.e. if any other solver has a more specific
        match, it will be used instead.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] dns_names: List of DNSNames that this solver will be used to solve.
               If specified and a match is found, a dnsNames selector will take
               precedence over a dnsZones selector.
               If multiple solvers match with the same dnsNames value, the solver
               with the most matching labels in matchLabels will be selected.
               If neither has more matches, the solver defined earlier in the list
               will be selected.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] dns_zones: List of DNSZones that this solver will be used to solve.
               The most specific DNS zone match specified here will take precedence
               over other DNS zone matches, so a solver specifying sys.example.com
               will be selected over one specifying example.com for the domain
               www.sys.example.com.
               If multiple solvers match with the same dnsZones value, the solver
               with the most matching labels in matchLabels will be selected.
               If neither has more matches, the solver defined earlier in the list
               will be selected.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] match_labels: A label selector that is used to refine the set of certificate's that
               this challenge solver will apply to.
        """
        if dns_names is not None:
            pulumi.set(__self__, "dns_names", dns_names)
        if dns_zones is not None:
            pulumi.set(__self__, "dns_zones", dns_zones)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="dnsNames")
    def dns_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of DNSNames that this solver will be used to solve.
        If specified and a match is found, a dnsNames selector will take
        precedence over a dnsZones selector.
        If multiple solvers match with the same dnsNames value, the solver
        with the most matching labels in matchLabels will be selected.
        If neither has more matches, the solver defined earlier in the list
        will be selected.
        """
        return pulumi.get(self, "dns_names")

    @dns_names.setter
    def dns_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "dns_names", value)

    @property
    @pulumi.getter(name="dnsZones")
    def dns_zones(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of DNSZones that this solver will be used to solve.
        The most specific DNS zone match specified here will take precedence
        over other DNS zone matches, so a solver specifying sys.example.com
        will be selected over one specifying example.com for the domain
        www.sys.example.com.
        If multiple solvers match with the same dnsZones value, the solver
        with the most matching labels in matchLabels will be selected.
        If neither has more matches, the solver defined earlier in the list
        will be selected.
        """
        return pulumi.get(self, "dns_zones")

    @dns_zones.setter
    def dns_zones(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "dns_zones", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A label selector that is used to refine the set of certificate's that
        this challenge solver will apply to.
        """
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(
        self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
    ):
        pulumi.set(self, "match_labels", value)


if not MYPY:

    class ChallengeSpecSolverArgsDict(TypedDict):
        """
        Contains the domain solving configuration that should be used to
        solve this challenge resource.
        """

        dns01: NotRequired[pulumi.Input["ChallengeSpecSolverDns01ArgsDict"]]
        http01: NotRequired[pulumi.Input["ChallengeSpecSolverHttp01ArgsDict"]]
        selector: NotRequired[pulumi.Input["ChallengeSpecSolverSelectorArgsDict"]]

elif False:
    ChallengeSpecSolverArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class ChallengeSpecSolverArgs:
    def __init__(
        __self__,
        *,
        dns01: Optional[pulumi.Input["ChallengeSpecSolverDns01Args"]] = None,
        http01: Optional[pulumi.Input["ChallengeSpecSolverHttp01Args"]] = None,
        selector: Optional[pulumi.Input["ChallengeSpecSolverSelectorArgs"]] = None
    ):
        """
        Contains the domain solving configuration that should be used to
        solve this challenge resource.
        """
        if dns01 is not None:
            pulumi.set(__self__, "dns01", dns01)
        if http01 is not None:
            pulumi.set(__self__, "http01", http01)
        if selector is not None:
            pulumi.set(__self__, "selector", selector)

    @property
    @pulumi.getter
    def dns01(self) -> Optional[pulumi.Input["ChallengeSpecSolverDns01Args"]]:
        return pulumi.get(self, "dns01")

    @dns01.setter
    def dns01(self, value: Optional[pulumi.Input["ChallengeSpecSolverDns01Args"]]):
        pulumi.set(self, "dns01", value)

    @property
    @pulumi.getter
    def http01(self) -> Optional[pulumi.Input["ChallengeSpecSolverHttp01Args"]]:
        return pulumi.get(self, "http01")

    @http01.setter
    def http01(self, value: Optional[pulumi.Input["ChallengeSpecSolverHttp01Args"]]):
        pulumi.set(self, "http01", value)

    @property
    @pulumi.getter
    def selector(self) -> Optional[pulumi.Input["ChallengeSpecSolverSelectorArgs"]]:
        return pulumi.get(self, "selector")

    @selector.setter
    def selector(
        self, value: Optional[pulumi.Input["ChallengeSpecSolverSelectorArgs"]]
    ):
        pulumi.set(self, "selector", value)


if not MYPY:

    class ChallengeSpecArgsDict(TypedDict):
        authorization_url: NotRequired[pulumi.Input[str]]
        """
        The URL to the ACME Authorization resource that this
        challenge is a part of.
        """
        dns_name: NotRequired[pulumi.Input[str]]
        """
        dnsName is the identifier that this challenge is for, e.g. example.com.
        If the requested DNSName is a 'wildcard', this field MUST be set to the
        non-wildcard domain, e.g. for `*.example.com`, it must be `example.com`.
        """
        issuer_ref: NotRequired[pulumi.Input["ChallengeSpecIssuerRefArgsDict"]]
        key: NotRequired[pulumi.Input[str]]
        """
        The ACME challenge key for this challenge
        For HTTP01 challenges, this is the value that must be responded with to
        complete the HTTP01 challenge in the format:
        `<private key JWK thumbprint>.<key from acme server for challenge>`.
        For DNS01 challenges, this is the base64 encoded SHA256 sum of the
        `<private key JWK thumbprint>.<key from acme server for challenge>`
        text that must be set as the TXT record content.
        """
        solver: NotRequired[pulumi.Input["ChallengeSpecSolverArgsDict"]]
        token: NotRequired[pulumi.Input[str]]
        """
        The ACME challenge token for this challenge.
        This is the raw value returned from the ACME server.
        """
        type: NotRequired[pulumi.Input[str]]
        """
        The type of ACME challenge this resource represents.
        One of "HTTP-01" or "DNS-01".
        """
        url: NotRequired[pulumi.Input[str]]
        """
        The URL of the ACME Challenge resource for this challenge.
        This can be used to lookup details about the status of this challenge.
        """
        wildcard: NotRequired[pulumi.Input[bool]]
        """
        wildcard will be true if this challenge is for a wildcard identifier,
        for example '*.example.com'.
        """

elif False:
    ChallengeSpecArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class ChallengeSpecArgs:
    def __init__(
        __self__,
        *,
        authorization_url: Optional[pulumi.Input[str]] = None,
        dns_name: Optional[pulumi.Input[str]] = None,
        issuer_ref: Optional[pulumi.Input["ChallengeSpecIssuerRefArgs"]] = None,
        key: Optional[pulumi.Input[str]] = None,
        solver: Optional[pulumi.Input["ChallengeSpecSolverArgs"]] = None,
        token: Optional[pulumi.Input[str]] = None,
        type: Optional[pulumi.Input[str]] = None,
        url: Optional[pulumi.Input[str]] = None,
        wildcard: Optional[pulumi.Input[bool]] = None
    ):
        """
        :param pulumi.Input[str] authorization_url: The URL to the ACME Authorization resource that this
               challenge is a part of.
        :param pulumi.Input[str] dns_name: dnsName is the identifier that this challenge is for, e.g. example.com.
               If the requested DNSName is a 'wildcard', this field MUST be set to the
               non-wildcard domain, e.g. for `*.example.com`, it must be `example.com`.
        :param pulumi.Input[str] key: The ACME challenge key for this challenge
               For HTTP01 challenges, this is the value that must be responded with to
               complete the HTTP01 challenge in the format:
               `<private key JWK thumbprint>.<key from acme server for challenge>`.
               For DNS01 challenges, this is the base64 encoded SHA256 sum of the
               `<private key JWK thumbprint>.<key from acme server for challenge>`
               text that must be set as the TXT record content.
        :param pulumi.Input[str] token: The ACME challenge token for this challenge.
               This is the raw value returned from the ACME server.
        :param pulumi.Input[str] type: The type of ACME challenge this resource represents.
               One of "HTTP-01" or "DNS-01".
        :param pulumi.Input[str] url: The URL of the ACME Challenge resource for this challenge.
               This can be used to lookup details about the status of this challenge.
        :param pulumi.Input[bool] wildcard: wildcard will be true if this challenge is for a wildcard identifier,
               for example '*.example.com'.
        """
        if authorization_url is not None:
            pulumi.set(__self__, "authorization_url", authorization_url)
        if dns_name is not None:
            pulumi.set(__self__, "dns_name", dns_name)
        if issuer_ref is not None:
            pulumi.set(__self__, "issuer_ref", issuer_ref)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if solver is not None:
            pulumi.set(__self__, "solver", solver)
        if token is not None:
            pulumi.set(__self__, "token", token)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if url is not None:
            pulumi.set(__self__, "url", url)
        if wildcard is not None:
            pulumi.set(__self__, "wildcard", wildcard)

    @property
    @pulumi.getter(name="authorizationURL")
    def authorization_url(self) -> Optional[pulumi.Input[str]]:
        """
        The URL to the ACME Authorization resource that this
        challenge is a part of.
        """
        return pulumi.get(self, "authorization_url")

    @authorization_url.setter
    def authorization_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authorization_url", value)

    @property
    @pulumi.getter(name="dnsName")
    def dns_name(self) -> Optional[pulumi.Input[str]]:
        """
        dnsName is the identifier that this challenge is for, e.g. example.com.
        If the requested DNSName is a 'wildcard', this field MUST be set to the
        non-wildcard domain, e.g. for `*.example.com`, it must be `example.com`.
        """
        return pulumi.get(self, "dns_name")

    @dns_name.setter
    def dns_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns_name", value)

    @property
    @pulumi.getter(name="issuerRef")
    def issuer_ref(self) -> Optional[pulumi.Input["ChallengeSpecIssuerRefArgs"]]:
        return pulumi.get(self, "issuer_ref")

    @issuer_ref.setter
    def issuer_ref(self, value: Optional[pulumi.Input["ChallengeSpecIssuerRefArgs"]]):
        pulumi.set(self, "issuer_ref", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The ACME challenge key for this challenge
        For HTTP01 challenges, this is the value that must be responded with to
        complete the HTTP01 challenge in the format:
        `<private key JWK thumbprint>.<key from acme server for challenge>`.
        For DNS01 challenges, this is the base64 encoded SHA256 sum of the
        `<private key JWK thumbprint>.<key from acme server for challenge>`
        text that must be set as the TXT record content.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def solver(self) -> Optional[pulumi.Input["ChallengeSpecSolverArgs"]]:
        return pulumi.get(self, "solver")

    @solver.setter
    def solver(self, value: Optional[pulumi.Input["ChallengeSpecSolverArgs"]]):
        pulumi.set(self, "solver", value)

    @property
    @pulumi.getter
    def token(self) -> Optional[pulumi.Input[str]]:
        """
        The ACME challenge token for this challenge.
        This is the raw value returned from the ACME server.
        """
        return pulumi.get(self, "token")

    @token.setter
    def token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "token", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of ACME challenge this resource represents.
        One of "HTTP-01" or "DNS-01".
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        """
        The URL of the ACME Challenge resource for this challenge.
        This can be used to lookup details about the status of this challenge.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter
    def wildcard(self) -> Optional[pulumi.Input[bool]]:
        """
        wildcard will be true if this challenge is for a wildcard identifier,
        for example '*.example.com'.
        """
        return pulumi.get(self, "wildcard")

    @wildcard.setter
    def wildcard(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "wildcard", value)


if not MYPY:

    class ChallengeStatusArgsDict(TypedDict):
        presented: NotRequired[pulumi.Input[bool]]
        """
        presented will be set to true if the challenge values for this challenge
        are currently 'presented'.
        This *does not* imply the self check is passing. Only that the values
        have been 'submitted' for the appropriate challenge mechanism (i.e. the
        DNS01 TXT record has been presented, or the HTTP01 configuration has been
        configured).
        """
        processing: NotRequired[pulumi.Input[bool]]
        """
        Used to denote whether this challenge should be processed or not.
        This field will only be set to true by the 'scheduling' component.
        It will only be set to false by the 'challenges' controller, after the
        challenge has reached a final state or timed out.
        If this field is set to false, the challenge controller will not take
        any more action.
        """
        reason: NotRequired[pulumi.Input[str]]
        """
        Contains human readable information on why the Challenge is in the
        current state.
        """
        state: NotRequired[pulumi.Input[str]]
        """
        Contains the current 'state' of the challenge.
        If not set, the state of the challenge is unknown.
        """

elif False:
    ChallengeStatusArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class ChallengeStatusArgs:
    def __init__(
        __self__,
        *,
        presented: Optional[pulumi.Input[bool]] = None,
        processing: Optional[pulumi.Input[bool]] = None,
        reason: Optional[pulumi.Input[str]] = None,
        state: Optional[pulumi.Input[str]] = None
    ):
        """
        :param pulumi.Input[bool] presented: presented will be set to true if the challenge values for this challenge
               are currently 'presented'.
               This *does not* imply the self check is passing. Only that the values
               have been 'submitted' for the appropriate challenge mechanism (i.e. the
               DNS01 TXT record has been presented, or the HTTP01 configuration has been
               configured).
        :param pulumi.Input[bool] processing: Used to denote whether this challenge should be processed or not.
               This field will only be set to true by the 'scheduling' component.
               It will only be set to false by the 'challenges' controller, after the
               challenge has reached a final state or timed out.
               If this field is set to false, the challenge controller will not take
               any more action.
        :param pulumi.Input[str] reason: Contains human readable information on why the Challenge is in the
               current state.
        :param pulumi.Input[str] state: Contains the current 'state' of the challenge.
               If not set, the state of the challenge is unknown.
        """
        if presented is not None:
            pulumi.set(__self__, "presented", presented)
        if processing is not None:
            pulumi.set(__self__, "processing", processing)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def presented(self) -> Optional[pulumi.Input[bool]]:
        """
        presented will be set to true if the challenge values for this challenge
        are currently 'presented'.
        This *does not* imply the self check is passing. Only that the values
        have been 'submitted' for the appropriate challenge mechanism (i.e. the
        DNS01 TXT record has been presented, or the HTTP01 configuration has been
        configured).
        """
        return pulumi.get(self, "presented")

    @presented.setter
    def presented(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "presented", value)

    @property
    @pulumi.getter
    def processing(self) -> Optional[pulumi.Input[bool]]:
        """
        Used to denote whether this challenge should be processed or not.
        This field will only be set to true by the 'scheduling' component.
        It will only be set to false by the 'challenges' controller, after the
        challenge has reached a final state or timed out.
        If this field is set to false, the challenge controller will not take
        any more action.
        """
        return pulumi.get(self, "processing")

    @processing.setter
    def processing(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "processing", value)

    @property
    @pulumi.getter
    def reason(self) -> Optional[pulumi.Input[str]]:
        """
        Contains human readable information on why the Challenge is in the
        current state.
        """
        return pulumi.get(self, "reason")

    @reason.setter
    def reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reason", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        """
        Contains the current 'state' of the challenge.
        If not set, the state of the challenge is unknown.
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)


if not MYPY:

    class ChallengeArgsDict(TypedDict):
        """
        Challenge is a type to represent a Challenge request with an ACME server
        """

        api_version: NotRequired[pulumi.Input[str]]
        """
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
        """
        kind: NotRequired[pulumi.Input[str]]
        """
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        """
        metadata: NotRequired[pulumi.Input["_meta.v1.ObjectMetaArgsDict"]]
        """
        Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
        """
        spec: NotRequired[pulumi.Input["ChallengeSpecArgsDict"]]
        status: NotRequired[pulumi.Input["ChallengeStatusArgsDict"]]

elif False:
    ChallengeArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class ChallengeArgs:
    def __init__(
        __self__,
        *,
        api_version: Optional[pulumi.Input[str]] = None,
        kind: Optional[pulumi.Input[str]] = None,
        metadata: Optional[pulumi.Input["_meta.v1.ObjectMetaArgs"]] = None,
        spec: Optional[pulumi.Input["ChallengeSpecArgs"]] = None,
        status: Optional[pulumi.Input["ChallengeStatusArgs"]] = None
    ):
        """
        Challenge is a type to represent a Challenge request with an ACME server
        :param pulumi.Input[str] api_version: APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
        :param pulumi.Input[str] kind: Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        :param pulumi.Input['_meta.v1.ObjectMetaArgs'] metadata: Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
        """
        if api_version is not None:
            pulumi.set(__self__, "api_version", "acme.cert-manager.io/v1")
        if kind is not None:
            pulumi.set(__self__, "kind", "Challenge")
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if spec is not None:
            pulumi.set(__self__, "spec", spec)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[pulumi.Input[str]]:
        """
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
        """
        return pulumi.get(self, "api_version")

    @api_version.setter
    def api_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_version", value)

    @property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[str]]:
        """
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input["_meta.v1.ObjectMetaArgs"]]:
        """
        Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
        """
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input["_meta.v1.ObjectMetaArgs"]]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter
    def spec(self) -> Optional[pulumi.Input["ChallengeSpecArgs"]]:
        return pulumi.get(self, "spec")

    @spec.setter
    def spec(self, value: Optional[pulumi.Input["ChallengeSpecArgs"]]):
        pulumi.set(self, "spec", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input["ChallengeStatusArgs"]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input["ChallengeStatusArgs"]]):
        pulumi.set(self, "status", value)


if not MYPY:

    class OrderSpecIssuerRefPatchArgsDict(TypedDict):
        """
        IssuerRef references a properly configured ACME-type Issuer which should
        be used to create this Order.
        If the Issuer does not exist, processing will be retried.
        If the Issuer is not an 'ACME' Issuer, an error will be returned and the
        Order will be marked as failed.
        """

        group: NotRequired[pulumi.Input[str]]
        """
        Group of the resource being referred to.
        """
        kind: NotRequired[pulumi.Input[str]]
        """
        Kind of the resource being referred to.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the resource being referred to.
        """

elif False:
    OrderSpecIssuerRefPatchArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class OrderSpecIssuerRefPatchArgs:
    def __init__(
        __self__,
        *,
        group: Optional[pulumi.Input[str]] = None,
        kind: Optional[pulumi.Input[str]] = None,
        name: Optional[pulumi.Input[str]] = None
    ):
        """
        IssuerRef references a properly configured ACME-type Issuer which should
        be used to create this Order.
        If the Issuer does not exist, processing will be retried.
        If the Issuer is not an 'ACME' Issuer, an error will be returned and the
        Order will be marked as failed.
        :param pulumi.Input[str] group: Group of the resource being referred to.
        :param pulumi.Input[str] kind: Kind of the resource being referred to.
        :param pulumi.Input[str] name: Name of the resource being referred to.
        """
        if group is not None:
            pulumi.set(__self__, "group", group)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def group(self) -> Optional[pulumi.Input[str]]:
        """
        Group of the resource being referred to.
        """
        return pulumi.get(self, "group")

    @group.setter
    def group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group", value)

    @property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[str]]:
        """
        Kind of the resource being referred to.
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the resource being referred to.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:

    class OrderSpecIssuerRefArgsDict(TypedDict):
        """
        IssuerRef references a properly configured ACME-type Issuer which should
        be used to create this Order.
        If the Issuer does not exist, processing will be retried.
        If the Issuer is not an 'ACME' Issuer, an error will be returned and the
        Order will be marked as failed.
        """

        group: NotRequired[pulumi.Input[str]]
        """
        Group of the resource being referred to.
        """
        kind: NotRequired[pulumi.Input[str]]
        """
        Kind of the resource being referred to.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the resource being referred to.
        """

elif False:
    OrderSpecIssuerRefArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class OrderSpecIssuerRefArgs:
    def __init__(
        __self__,
        *,
        group: Optional[pulumi.Input[str]] = None,
        kind: Optional[pulumi.Input[str]] = None,
        name: Optional[pulumi.Input[str]] = None
    ):
        """
        IssuerRef references a properly configured ACME-type Issuer which should
        be used to create this Order.
        If the Issuer does not exist, processing will be retried.
        If the Issuer is not an 'ACME' Issuer, an error will be returned and the
        Order will be marked as failed.
        :param pulumi.Input[str] group: Group of the resource being referred to.
        :param pulumi.Input[str] kind: Kind of the resource being referred to.
        :param pulumi.Input[str] name: Name of the resource being referred to.
        """
        if group is not None:
            pulumi.set(__self__, "group", group)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def group(self) -> Optional[pulumi.Input[str]]:
        """
        Group of the resource being referred to.
        """
        return pulumi.get(self, "group")

    @group.setter
    def group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group", value)

    @property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[str]]:
        """
        Kind of the resource being referred to.
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the resource being referred to.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:

    class OrderSpecPatchArgsDict(TypedDict):
        common_name: NotRequired[pulumi.Input[str]]
        """
        CommonName is the common name as specified on the DER encoded CSR.
        If specified, this value must also be present in `dnsNames` or `ipAddresses`.
        This field must match the corresponding field on the DER encoded CSR.
        """
        dns_names: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        DNSNames is a list of DNS names that should be included as part of the Order
        validation process.
        This field must match the corresponding field on the DER encoded CSR.
        """
        duration: NotRequired[pulumi.Input[str]]
        """
        Duration is the duration for the not after date for the requested certificate.
        this is set on order creation as pe the ACME spec.
        """
        ip_addresses: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        IPAddresses is a list of IP addresses that should be included as part of the Order
        validation process.
        This field must match the corresponding field on the DER encoded CSR.
        """
        issuer_ref: NotRequired[pulumi.Input["OrderSpecIssuerRefPatchArgsDict"]]
        request: NotRequired[pulumi.Input[str]]
        """
        Certificate signing request bytes in DER encoding.
        This will be used when finalizing the order.
        This field must be set on the order.
        """

elif False:
    OrderSpecPatchArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class OrderSpecPatchArgs:
    def __init__(
        __self__,
        *,
        common_name: Optional[pulumi.Input[str]] = None,
        dns_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        duration: Optional[pulumi.Input[str]] = None,
        ip_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        issuer_ref: Optional[pulumi.Input["OrderSpecIssuerRefPatchArgs"]] = None,
        request: Optional[pulumi.Input[str]] = None
    ):
        """
        :param pulumi.Input[str] common_name: CommonName is the common name as specified on the DER encoded CSR.
               If specified, this value must also be present in `dnsNames` or `ipAddresses`.
               This field must match the corresponding field on the DER encoded CSR.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] dns_names: DNSNames is a list of DNS names that should be included as part of the Order
               validation process.
               This field must match the corresponding field on the DER encoded CSR.
        :param pulumi.Input[str] duration: Duration is the duration for the not after date for the requested certificate.
               this is set on order creation as pe the ACME spec.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ip_addresses: IPAddresses is a list of IP addresses that should be included as part of the Order
               validation process.
               This field must match the corresponding field on the DER encoded CSR.
        :param pulumi.Input[str] request: Certificate signing request bytes in DER encoding.
               This will be used when finalizing the order.
               This field must be set on the order.
        """
        if common_name is not None:
            pulumi.set(__self__, "common_name", common_name)
        if dns_names is not None:
            pulumi.set(__self__, "dns_names", dns_names)
        if duration is not None:
            pulumi.set(__self__, "duration", duration)
        if ip_addresses is not None:
            pulumi.set(__self__, "ip_addresses", ip_addresses)
        if issuer_ref is not None:
            pulumi.set(__self__, "issuer_ref", issuer_ref)
        if request is not None:
            pulumi.set(__self__, "request", request)

    @property
    @pulumi.getter(name="commonName")
    def common_name(self) -> Optional[pulumi.Input[str]]:
        """
        CommonName is the common name as specified on the DER encoded CSR.
        If specified, this value must also be present in `dnsNames` or `ipAddresses`.
        This field must match the corresponding field on the DER encoded CSR.
        """
        return pulumi.get(self, "common_name")

    @common_name.setter
    def common_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "common_name", value)

    @property
    @pulumi.getter(name="dnsNames")
    def dns_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        DNSNames is a list of DNS names that should be included as part of the Order
        validation process.
        This field must match the corresponding field on the DER encoded CSR.
        """
        return pulumi.get(self, "dns_names")

    @dns_names.setter
    def dns_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "dns_names", value)

    @property
    @pulumi.getter
    def duration(self) -> Optional[pulumi.Input[str]]:
        """
        Duration is the duration for the not after date for the requested certificate.
        this is set on order creation as pe the ACME spec.
        """
        return pulumi.get(self, "duration")

    @duration.setter
    def duration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "duration", value)

    @property
    @pulumi.getter(name="ipAddresses")
    def ip_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        IPAddresses is a list of IP addresses that should be included as part of the Order
        validation process.
        This field must match the corresponding field on the DER encoded CSR.
        """
        return pulumi.get(self, "ip_addresses")

    @ip_addresses.setter
    def ip_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ip_addresses", value)

    @property
    @pulumi.getter(name="issuerRef")
    def issuer_ref(self) -> Optional[pulumi.Input["OrderSpecIssuerRefPatchArgs"]]:
        return pulumi.get(self, "issuer_ref")

    @issuer_ref.setter
    def issuer_ref(self, value: Optional[pulumi.Input["OrderSpecIssuerRefPatchArgs"]]):
        pulumi.set(self, "issuer_ref", value)

    @property
    @pulumi.getter
    def request(self) -> Optional[pulumi.Input[str]]:
        """
        Certificate signing request bytes in DER encoding.
        This will be used when finalizing the order.
        This field must be set on the order.
        """
        return pulumi.get(self, "request")

    @request.setter
    def request(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "request", value)


if not MYPY:

    class OrderSpecArgsDict(TypedDict):
        common_name: NotRequired[pulumi.Input[str]]
        """
        CommonName is the common name as specified on the DER encoded CSR.
        If specified, this value must also be present in `dnsNames` or `ipAddresses`.
        This field must match the corresponding field on the DER encoded CSR.
        """
        dns_names: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        DNSNames is a list of DNS names that should be included as part of the Order
        validation process.
        This field must match the corresponding field on the DER encoded CSR.
        """
        duration: NotRequired[pulumi.Input[str]]
        """
        Duration is the duration for the not after date for the requested certificate.
        this is set on order creation as pe the ACME spec.
        """
        ip_addresses: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        IPAddresses is a list of IP addresses that should be included as part of the Order
        validation process.
        This field must match the corresponding field on the DER encoded CSR.
        """
        issuer_ref: NotRequired[pulumi.Input["OrderSpecIssuerRefArgsDict"]]
        request: NotRequired[pulumi.Input[str]]
        """
        Certificate signing request bytes in DER encoding.
        This will be used when finalizing the order.
        This field must be set on the order.
        """

elif False:
    OrderSpecArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class OrderSpecArgs:
    def __init__(
        __self__,
        *,
        common_name: Optional[pulumi.Input[str]] = None,
        dns_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        duration: Optional[pulumi.Input[str]] = None,
        ip_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        issuer_ref: Optional[pulumi.Input["OrderSpecIssuerRefArgs"]] = None,
        request: Optional[pulumi.Input[str]] = None
    ):
        """
        :param pulumi.Input[str] common_name: CommonName is the common name as specified on the DER encoded CSR.
               If specified, this value must also be present in `dnsNames` or `ipAddresses`.
               This field must match the corresponding field on the DER encoded CSR.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] dns_names: DNSNames is a list of DNS names that should be included as part of the Order
               validation process.
               This field must match the corresponding field on the DER encoded CSR.
        :param pulumi.Input[str] duration: Duration is the duration for the not after date for the requested certificate.
               this is set on order creation as pe the ACME spec.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ip_addresses: IPAddresses is a list of IP addresses that should be included as part of the Order
               validation process.
               This field must match the corresponding field on the DER encoded CSR.
        :param pulumi.Input[str] request: Certificate signing request bytes in DER encoding.
               This will be used when finalizing the order.
               This field must be set on the order.
        """
        if common_name is not None:
            pulumi.set(__self__, "common_name", common_name)
        if dns_names is not None:
            pulumi.set(__self__, "dns_names", dns_names)
        if duration is not None:
            pulumi.set(__self__, "duration", duration)
        if ip_addresses is not None:
            pulumi.set(__self__, "ip_addresses", ip_addresses)
        if issuer_ref is not None:
            pulumi.set(__self__, "issuer_ref", issuer_ref)
        if request is not None:
            pulumi.set(__self__, "request", request)

    @property
    @pulumi.getter(name="commonName")
    def common_name(self) -> Optional[pulumi.Input[str]]:
        """
        CommonName is the common name as specified on the DER encoded CSR.
        If specified, this value must also be present in `dnsNames` or `ipAddresses`.
        This field must match the corresponding field on the DER encoded CSR.
        """
        return pulumi.get(self, "common_name")

    @common_name.setter
    def common_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "common_name", value)

    @property
    @pulumi.getter(name="dnsNames")
    def dns_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        DNSNames is a list of DNS names that should be included as part of the Order
        validation process.
        This field must match the corresponding field on the DER encoded CSR.
        """
        return pulumi.get(self, "dns_names")

    @dns_names.setter
    def dns_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "dns_names", value)

    @property
    @pulumi.getter
    def duration(self) -> Optional[pulumi.Input[str]]:
        """
        Duration is the duration for the not after date for the requested certificate.
        this is set on order creation as pe the ACME spec.
        """
        return pulumi.get(self, "duration")

    @duration.setter
    def duration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "duration", value)

    @property
    @pulumi.getter(name="ipAddresses")
    def ip_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        IPAddresses is a list of IP addresses that should be included as part of the Order
        validation process.
        This field must match the corresponding field on the DER encoded CSR.
        """
        return pulumi.get(self, "ip_addresses")

    @ip_addresses.setter
    def ip_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ip_addresses", value)

    @property
    @pulumi.getter(name="issuerRef")
    def issuer_ref(self) -> Optional[pulumi.Input["OrderSpecIssuerRefArgs"]]:
        return pulumi.get(self, "issuer_ref")

    @issuer_ref.setter
    def issuer_ref(self, value: Optional[pulumi.Input["OrderSpecIssuerRefArgs"]]):
        pulumi.set(self, "issuer_ref", value)

    @property
    @pulumi.getter
    def request(self) -> Optional[pulumi.Input[str]]:
        """
        Certificate signing request bytes in DER encoding.
        This will be used when finalizing the order.
        This field must be set on the order.
        """
        return pulumi.get(self, "request")

    @request.setter
    def request(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "request", value)


if not MYPY:

    class OrderStatusAuthorizationsChallengesArgsDict(TypedDict):
        """
        Challenge specifies a challenge offered by the ACME server for an Order.
        An appropriate Challenge resource can be created to perform the ACME
        challenge process.
        """

        token: NotRequired[pulumi.Input[str]]
        """
        Token is the token that must be presented for this challenge.
        This is used to compute the 'key' that must also be presented.
        """
        type: NotRequired[pulumi.Input[str]]
        """
        Type is the type of challenge being offered, e.g. 'http-01', 'dns-01',
        'tls-sni-01', etc.
        This is the raw value retrieved from the ACME server.
        Only 'http-01' and 'dns-01' are supported by cert-manager, other values
        will be ignored.
        """
        url: NotRequired[pulumi.Input[str]]
        """
        URL is the URL of this challenge. It can be used to retrieve additional
        metadata about the Challenge from the ACME server.
        """

elif False:
    OrderStatusAuthorizationsChallengesArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class OrderStatusAuthorizationsChallengesArgs:
    def __init__(
        __self__,
        *,
        token: Optional[pulumi.Input[str]] = None,
        type: Optional[pulumi.Input[str]] = None,
        url: Optional[pulumi.Input[str]] = None
    ):
        """
        Challenge specifies a challenge offered by the ACME server for an Order.
        An appropriate Challenge resource can be created to perform the ACME
        challenge process.
        :param pulumi.Input[str] token: Token is the token that must be presented for this challenge.
               This is used to compute the 'key' that must also be presented.
        :param pulumi.Input[str] type: Type is the type of challenge being offered, e.g. 'http-01', 'dns-01',
               'tls-sni-01', etc.
               This is the raw value retrieved from the ACME server.
               Only 'http-01' and 'dns-01' are supported by cert-manager, other values
               will be ignored.
        :param pulumi.Input[str] url: URL is the URL of this challenge. It can be used to retrieve additional
               metadata about the Challenge from the ACME server.
        """
        if token is not None:
            pulumi.set(__self__, "token", token)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def token(self) -> Optional[pulumi.Input[str]]:
        """
        Token is the token that must be presented for this challenge.
        This is used to compute the 'key' that must also be presented.
        """
        return pulumi.get(self, "token")

    @token.setter
    def token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "token", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Type is the type of challenge being offered, e.g. 'http-01', 'dns-01',
        'tls-sni-01', etc.
        This is the raw value retrieved from the ACME server.
        Only 'http-01' and 'dns-01' are supported by cert-manager, other values
        will be ignored.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        """
        URL is the URL of this challenge. It can be used to retrieve additional
        metadata about the Challenge from the ACME server.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)


if not MYPY:

    class OrderStatusAuthorizationsArgsDict(TypedDict):
        """
        ACMEAuthorization contains data returned from the ACME server on an
        authorization that must be completed in order validate a DNS name on an ACME
        Order resource.
        """

        challenges: NotRequired[
            pulumi.Input[
                Sequence[pulumi.Input["OrderStatusAuthorizationsChallengesArgsDict"]]
            ]
        ]
        """
        Challenges specifies the challenge types offered by the ACME server.
        One of these challenge types will be selected when validating the DNS
        name and an appropriate Challenge resource will be created to perform
        the ACME challenge process.
        """
        identifier: NotRequired[pulumi.Input[str]]
        """
        Identifier is the DNS name to be validated as part of this authorization
        """
        initial_state: NotRequired[pulumi.Input[str]]
        """
        InitialState is the initial state of the ACME authorization when first
        fetched from the ACME server.
        If an Authorization is already 'valid', the Order controller will not
        create a Challenge resource for the authorization. This will occur when
        working with an ACME server that enables 'authz reuse' (such as Let's
        Encrypt's production endpoint).
        If not set and 'identifier' is set, the state is assumed to be pending
        and a Challenge will be created.
        """
        url: NotRequired[pulumi.Input[str]]
        """
        URL is the URL of the Authorization that must be completed
        """
        wildcard: NotRequired[pulumi.Input[bool]]
        """
        Wildcard will be true if this authorization is for a wildcard DNS name.
        If this is true, the identifier will be the *non-wildcard* version of
        the DNS name.
        For example, if '*.example.com' is the DNS name being validated, this
        field will be 'true' and the 'identifier' field will be 'example.com'.
        """

elif False:
    OrderStatusAuthorizationsArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class OrderStatusAuthorizationsArgs:
    def __init__(
        __self__,
        *,
        challenges: Optional[
            pulumi.Input[
                Sequence[pulumi.Input["OrderStatusAuthorizationsChallengesArgs"]]
            ]
        ] = None,
        identifier: Optional[pulumi.Input[str]] = None,
        initial_state: Optional[pulumi.Input[str]] = None,
        url: Optional[pulumi.Input[str]] = None,
        wildcard: Optional[pulumi.Input[bool]] = None
    ):
        """
        ACMEAuthorization contains data returned from the ACME server on an
        authorization that must be completed in order validate a DNS name on an ACME
        Order resource.
        :param pulumi.Input[Sequence[pulumi.Input['OrderStatusAuthorizationsChallengesArgs']]] challenges: Challenges specifies the challenge types offered by the ACME server.
               One of these challenge types will be selected when validating the DNS
               name and an appropriate Challenge resource will be created to perform
               the ACME challenge process.
        :param pulumi.Input[str] identifier: Identifier is the DNS name to be validated as part of this authorization
        :param pulumi.Input[str] initial_state: InitialState is the initial state of the ACME authorization when first
               fetched from the ACME server.
               If an Authorization is already 'valid', the Order controller will not
               create a Challenge resource for the authorization. This will occur when
               working with an ACME server that enables 'authz reuse' (such as Let's
               Encrypt's production endpoint).
               If not set and 'identifier' is set, the state is assumed to be pending
               and a Challenge will be created.
        :param pulumi.Input[str] url: URL is the URL of the Authorization that must be completed
        :param pulumi.Input[bool] wildcard: Wildcard will be true if this authorization is for a wildcard DNS name.
               If this is true, the identifier will be the *non-wildcard* version of
               the DNS name.
               For example, if '*.example.com' is the DNS name being validated, this
               field will be 'true' and the 'identifier' field will be 'example.com'.
        """
        if challenges is not None:
            pulumi.set(__self__, "challenges", challenges)
        if identifier is not None:
            pulumi.set(__self__, "identifier", identifier)
        if initial_state is not None:
            pulumi.set(__self__, "initial_state", initial_state)
        if url is not None:
            pulumi.set(__self__, "url", url)
        if wildcard is not None:
            pulumi.set(__self__, "wildcard", wildcard)

    @property
    @pulumi.getter
    def challenges(
        self,
    ) -> Optional[
        pulumi.Input[Sequence[pulumi.Input["OrderStatusAuthorizationsChallengesArgs"]]]
    ]:
        """
        Challenges specifies the challenge types offered by the ACME server.
        One of these challenge types will be selected when validating the DNS
        name and an appropriate Challenge resource will be created to perform
        the ACME challenge process.
        """
        return pulumi.get(self, "challenges")

    @challenges.setter
    def challenges(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[pulumi.Input["OrderStatusAuthorizationsChallengesArgs"]]
            ]
        ],
    ):
        pulumi.set(self, "challenges", value)

    @property
    @pulumi.getter
    def identifier(self) -> Optional[pulumi.Input[str]]:
        """
        Identifier is the DNS name to be validated as part of this authorization
        """
        return pulumi.get(self, "identifier")

    @identifier.setter
    def identifier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "identifier", value)

    @property
    @pulumi.getter(name="initialState")
    def initial_state(self) -> Optional[pulumi.Input[str]]:
        """
        InitialState is the initial state of the ACME authorization when first
        fetched from the ACME server.
        If an Authorization is already 'valid', the Order controller will not
        create a Challenge resource for the authorization. This will occur when
        working with an ACME server that enables 'authz reuse' (such as Let's
        Encrypt's production endpoint).
        If not set and 'identifier' is set, the state is assumed to be pending
        and a Challenge will be created.
        """
        return pulumi.get(self, "initial_state")

    @initial_state.setter
    def initial_state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "initial_state", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        """
        URL is the URL of the Authorization that must be completed
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter
    def wildcard(self) -> Optional[pulumi.Input[bool]]:
        """
        Wildcard will be true if this authorization is for a wildcard DNS name.
        If this is true, the identifier will be the *non-wildcard* version of
        the DNS name.
        For example, if '*.example.com' is the DNS name being validated, this
        field will be 'true' and the 'identifier' field will be 'example.com'.
        """
        return pulumi.get(self, "wildcard")

    @wildcard.setter
    def wildcard(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "wildcard", value)


if not MYPY:

    class OrderStatusArgsDict(TypedDict):
        authorizations: NotRequired[
            pulumi.Input[Sequence[pulumi.Input["OrderStatusAuthorizationsArgsDict"]]]
        ]
        """
        Authorizations contains data returned from the ACME server on what
        authorizations must be completed in order to validate the DNS names
        specified on the Order.
        """
        certificate: NotRequired[pulumi.Input[str]]
        """
        Certificate is a copy of the PEM encoded certificate for this Order.
        This field will be populated after the order has been successfully
        finalized with the ACME server, and the order has transitioned to the
        'valid' state.
        """
        failure_time: NotRequired[pulumi.Input[str]]
        """
        FailureTime stores the time that this order failed.
        This is used to influence garbage collection and back-off.
        """
        finalize_url: NotRequired[pulumi.Input[str]]
        """
        FinalizeURL of the Order.
        This is used to obtain certificates for this order once it has been completed.
        """
        reason: NotRequired[pulumi.Input[str]]
        """
        Reason optionally provides more information about a why the order is in
        the current state.
        """
        state: NotRequired[pulumi.Input[str]]
        """
        State contains the current state of this Order resource.
        States 'success' and 'expired' are 'final'
        """
        url: NotRequired[pulumi.Input[str]]
        """
        URL of the Order.
        This will initially be empty when the resource is first created.
        The Order controller will populate this field when the Order is first processed.
        This field will be immutable after it is initially set.
        """

elif False:
    OrderStatusArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class OrderStatusArgs:
    def __init__(
        __self__,
        *,
        authorizations: Optional[
            pulumi.Input[Sequence[pulumi.Input["OrderStatusAuthorizationsArgs"]]]
        ] = None,
        certificate: Optional[pulumi.Input[str]] = None,
        failure_time: Optional[pulumi.Input[str]] = None,
        finalize_url: Optional[pulumi.Input[str]] = None,
        reason: Optional[pulumi.Input[str]] = None,
        state: Optional[pulumi.Input[str]] = None,
        url: Optional[pulumi.Input[str]] = None
    ):
        """
        :param pulumi.Input[Sequence[pulumi.Input['OrderStatusAuthorizationsArgs']]] authorizations: Authorizations contains data returned from the ACME server on what
               authorizations must be completed in order to validate the DNS names
               specified on the Order.
        :param pulumi.Input[str] certificate: Certificate is a copy of the PEM encoded certificate for this Order.
               This field will be populated after the order has been successfully
               finalized with the ACME server, and the order has transitioned to the
               'valid' state.
        :param pulumi.Input[str] failure_time: FailureTime stores the time that this order failed.
               This is used to influence garbage collection and back-off.
        :param pulumi.Input[str] finalize_url: FinalizeURL of the Order.
               This is used to obtain certificates for this order once it has been completed.
        :param pulumi.Input[str] reason: Reason optionally provides more information about a why the order is in
               the current state.
        :param pulumi.Input[str] state: State contains the current state of this Order resource.
               States 'success' and 'expired' are 'final'
        :param pulumi.Input[str] url: URL of the Order.
               This will initially be empty when the resource is first created.
               The Order controller will populate this field when the Order is first processed.
               This field will be immutable after it is initially set.
        """
        if authorizations is not None:
            pulumi.set(__self__, "authorizations", authorizations)
        if certificate is not None:
            pulumi.set(__self__, "certificate", certificate)
        if failure_time is not None:
            pulumi.set(__self__, "failure_time", failure_time)
        if finalize_url is not None:
            pulumi.set(__self__, "finalize_url", finalize_url)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def authorizations(
        self,
    ) -> Optional[
        pulumi.Input[Sequence[pulumi.Input["OrderStatusAuthorizationsArgs"]]]
    ]:
        """
        Authorizations contains data returned from the ACME server on what
        authorizations must be completed in order to validate the DNS names
        specified on the Order.
        """
        return pulumi.get(self, "authorizations")

    @authorizations.setter
    def authorizations(
        self,
        value: Optional[
            pulumi.Input[Sequence[pulumi.Input["OrderStatusAuthorizationsArgs"]]]
        ],
    ):
        pulumi.set(self, "authorizations", value)

    @property
    @pulumi.getter
    def certificate(self) -> Optional[pulumi.Input[str]]:
        """
        Certificate is a copy of the PEM encoded certificate for this Order.
        This field will be populated after the order has been successfully
        finalized with the ACME server, and the order has transitioned to the
        'valid' state.
        """
        return pulumi.get(self, "certificate")

    @certificate.setter
    def certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate", value)

    @property
    @pulumi.getter(name="failureTime")
    def failure_time(self) -> Optional[pulumi.Input[str]]:
        """
        FailureTime stores the time that this order failed.
        This is used to influence garbage collection and back-off.
        """
        return pulumi.get(self, "failure_time")

    @failure_time.setter
    def failure_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "failure_time", value)

    @property
    @pulumi.getter(name="finalizeURL")
    def finalize_url(self) -> Optional[pulumi.Input[str]]:
        """
        FinalizeURL of the Order.
        This is used to obtain certificates for this order once it has been completed.
        """
        return pulumi.get(self, "finalize_url")

    @finalize_url.setter
    def finalize_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "finalize_url", value)

    @property
    @pulumi.getter
    def reason(self) -> Optional[pulumi.Input[str]]:
        """
        Reason optionally provides more information about a why the order is in
        the current state.
        """
        return pulumi.get(self, "reason")

    @reason.setter
    def reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reason", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        """
        State contains the current state of this Order resource.
        States 'success' and 'expired' are 'final'
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        """
        URL of the Order.
        This will initially be empty when the resource is first created.
        The Order controller will populate this field when the Order is first processed.
        This field will be immutable after it is initially set.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)


if not MYPY:

    class OrderArgsDict(TypedDict):
        """
        Order is a type to represent an Order with an ACME server
        """

        api_version: NotRequired[pulumi.Input[str]]
        """
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
        """
        kind: NotRequired[pulumi.Input[str]]
        """
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        """
        metadata: NotRequired[pulumi.Input["_meta.v1.ObjectMetaArgsDict"]]
        """
        Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
        """
        spec: NotRequired[pulumi.Input["OrderSpecArgsDict"]]
        status: NotRequired[pulumi.Input["OrderStatusArgsDict"]]

elif False:
    OrderArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class OrderArgs:
    def __init__(
        __self__,
        *,
        api_version: Optional[pulumi.Input[str]] = None,
        kind: Optional[pulumi.Input[str]] = None,
        metadata: Optional[pulumi.Input["_meta.v1.ObjectMetaArgs"]] = None,
        spec: Optional[pulumi.Input["OrderSpecArgs"]] = None,
        status: Optional[pulumi.Input["OrderStatusArgs"]] = None
    ):
        """
        Order is a type to represent an Order with an ACME server
        :param pulumi.Input[str] api_version: APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
        :param pulumi.Input[str] kind: Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        :param pulumi.Input['_meta.v1.ObjectMetaArgs'] metadata: Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
        """
        if api_version is not None:
            pulumi.set(__self__, "api_version", "acme.cert-manager.io/v1")
        if kind is not None:
            pulumi.set(__self__, "kind", "Order")
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if spec is not None:
            pulumi.set(__self__, "spec", spec)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[pulumi.Input[str]]:
        """
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
        """
        return pulumi.get(self, "api_version")

    @api_version.setter
    def api_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_version", value)

    @property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[str]]:
        """
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input["_meta.v1.ObjectMetaArgs"]]:
        """
        Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
        """
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input["_meta.v1.ObjectMetaArgs"]]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter
    def spec(self) -> Optional[pulumi.Input["OrderSpecArgs"]]:
        return pulumi.get(self, "spec")

    @spec.setter
    def spec(self, value: Optional[pulumi.Input["OrderSpecArgs"]]):
        pulumi.set(self, "spec", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input["OrderStatusArgs"]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input["OrderStatusArgs"]]):
        pulumi.set(self, "status", value)
