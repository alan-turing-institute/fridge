# coding=utf-8
# *** WARNING: this file was generated by crd2pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload

if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from ... import _utilities
from . import outputs
from ... import meta as _meta

__all__ = [
    "Challenge",
    "ChallengeSpec",
    "ChallengeSpecIssuerRef",
    "ChallengeSpecIssuerRefPatch",
    "ChallengeSpecPatch",
    "ChallengeSpecSolver",
    "ChallengeSpecSolverDns01",
    "ChallengeSpecSolverDns01AcmeDNS",
    "ChallengeSpecSolverDns01AcmeDNSAccountSecretRef",
    "ChallengeSpecSolverDns01AcmeDNSAccountSecretRefPatch",
    "ChallengeSpecSolverDns01AcmeDNSPatch",
    "ChallengeSpecSolverDns01Akamai",
    "ChallengeSpecSolverDns01AkamaiAccessTokenSecretRef",
    "ChallengeSpecSolverDns01AkamaiAccessTokenSecretRefPatch",
    "ChallengeSpecSolverDns01AkamaiClientSecretSecretRef",
    "ChallengeSpecSolverDns01AkamaiClientSecretSecretRefPatch",
    "ChallengeSpecSolverDns01AkamaiClientTokenSecretRef",
    "ChallengeSpecSolverDns01AkamaiClientTokenSecretRefPatch",
    "ChallengeSpecSolverDns01AkamaiPatch",
    "ChallengeSpecSolverDns01AzureDNS",
    "ChallengeSpecSolverDns01AzureDNSClientSecretSecretRef",
    "ChallengeSpecSolverDns01AzureDNSClientSecretSecretRefPatch",
    "ChallengeSpecSolverDns01AzureDNSManagedIdentity",
    "ChallengeSpecSolverDns01AzureDNSManagedIdentityPatch",
    "ChallengeSpecSolverDns01AzureDNSPatch",
    "ChallengeSpecSolverDns01CloudDNS",
    "ChallengeSpecSolverDns01CloudDNSPatch",
    "ChallengeSpecSolverDns01CloudDNSServiceAccountSecretRef",
    "ChallengeSpecSolverDns01CloudDNSServiceAccountSecretRefPatch",
    "ChallengeSpecSolverDns01Cloudflare",
    "ChallengeSpecSolverDns01CloudflareApiKeySecretRef",
    "ChallengeSpecSolverDns01CloudflareApiKeySecretRefPatch",
    "ChallengeSpecSolverDns01CloudflareApiTokenSecretRef",
    "ChallengeSpecSolverDns01CloudflareApiTokenSecretRefPatch",
    "ChallengeSpecSolverDns01CloudflarePatch",
    "ChallengeSpecSolverDns01Digitalocean",
    "ChallengeSpecSolverDns01DigitaloceanPatch",
    "ChallengeSpecSolverDns01DigitaloceanTokenSecretRef",
    "ChallengeSpecSolverDns01DigitaloceanTokenSecretRefPatch",
    "ChallengeSpecSolverDns01Patch",
    "ChallengeSpecSolverDns01Rfc2136",
    "ChallengeSpecSolverDns01Rfc2136Patch",
    "ChallengeSpecSolverDns01Rfc2136TsigSecretSecretRef",
    "ChallengeSpecSolverDns01Rfc2136TsigSecretSecretRefPatch",
    "ChallengeSpecSolverDns01Route53",
    "ChallengeSpecSolverDns01Route53AccessKeyIDSecretRef",
    "ChallengeSpecSolverDns01Route53AccessKeyIDSecretRefPatch",
    "ChallengeSpecSolverDns01Route53Auth",
    "ChallengeSpecSolverDns01Route53AuthKubernetes",
    "ChallengeSpecSolverDns01Route53AuthKubernetesPatch",
    "ChallengeSpecSolverDns01Route53AuthKubernetesServiceAccountRef",
    "ChallengeSpecSolverDns01Route53AuthKubernetesServiceAccountRefPatch",
    "ChallengeSpecSolverDns01Route53AuthPatch",
    "ChallengeSpecSolverDns01Route53Patch",
    "ChallengeSpecSolverDns01Route53SecretAccessKeySecretRef",
    "ChallengeSpecSolverDns01Route53SecretAccessKeySecretRefPatch",
    "ChallengeSpecSolverDns01Webhook",
    "ChallengeSpecSolverDns01WebhookPatch",
    "ChallengeSpecSolverHttp01",
    "ChallengeSpecSolverHttp01GatewayHTTPRoute",
    "ChallengeSpecSolverHttp01GatewayHTTPRouteParentRefs",
    "ChallengeSpecSolverHttp01GatewayHTTPRouteParentRefsPatch",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePatch",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplate",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateMetadata",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateMetadataPatch",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplatePatch",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpec",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinity",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinity",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPatch",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatch",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatch",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatch",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatch",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatch",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatch",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPatch",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinity",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPatch",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinity",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPatch",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecImagePullSecrets",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecImagePullSecretsPatch",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecPatch",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecSecurityContext",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextPatch",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSeLinuxOptions",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSeLinuxOptionsPatch",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSeccompProfile",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSeccompProfilePatch",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSysctls",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSysctlsPatch",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecTolerations",
    "ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecTolerationsPatch",
    "ChallengeSpecSolverHttp01Ingress",
    "ChallengeSpecSolverHttp01IngressIngressTemplate",
    "ChallengeSpecSolverHttp01IngressIngressTemplateMetadata",
    "ChallengeSpecSolverHttp01IngressIngressTemplateMetadataPatch",
    "ChallengeSpecSolverHttp01IngressIngressTemplatePatch",
    "ChallengeSpecSolverHttp01IngressPatch",
    "ChallengeSpecSolverHttp01IngressPodTemplate",
    "ChallengeSpecSolverHttp01IngressPodTemplateMetadata",
    "ChallengeSpecSolverHttp01IngressPodTemplateMetadataPatch",
    "ChallengeSpecSolverHttp01IngressPodTemplatePatch",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpec",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinity",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinity",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPatch",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatch",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatch",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatch",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatch",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatch",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatch",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPatch",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinity",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPatch",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinity",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPatch",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecImagePullSecrets",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecImagePullSecretsPatch",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecPatch",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecSecurityContext",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecSecurityContextPatch",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecSecurityContextSeLinuxOptions",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecSecurityContextSeLinuxOptionsPatch",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecSecurityContextSeccompProfile",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecSecurityContextSeccompProfilePatch",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecSecurityContextSysctls",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecSecurityContextSysctlsPatch",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecTolerations",
    "ChallengeSpecSolverHttp01IngressPodTemplateSpecTolerationsPatch",
    "ChallengeSpecSolverHttp01Patch",
    "ChallengeSpecSolverPatch",
    "ChallengeSpecSolverSelector",
    "ChallengeSpecSolverSelectorPatch",
    "ChallengeStatus",
    "ChallengeStatusPatch",
    "Order",
    "OrderSpec",
    "OrderSpecIssuerRef",
    "OrderSpecIssuerRefPatch",
    "OrderSpecPatch",
    "OrderStatus",
    "OrderStatusAuthorizations",
    "OrderStatusAuthorizationsChallenges",
    "OrderStatusAuthorizationsChallengesPatch",
    "OrderStatusAuthorizationsPatch",
    "OrderStatusPatch",
]


@pulumi.output_type
class Challenge(dict):
    """
    Challenge is a type to represent a Challenge request with an ACME server
    """

    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiVersion":
            suggest = "api_version"

        if suggest:
            pulumi.log.warn(
                f"Key '{key}' not found in Challenge. Access the value via the '{suggest}' property getter instead."
            )

    def __getitem__(self, key: str) -> Any:
        Challenge.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default=None) -> Any:
        Challenge.__key_warning(key)
        return super().get(key, default)

    def __init__(
        __self__,
        *,
        api_version: Optional[str] = None,
        kind: Optional[str] = None,
        metadata: Optional["_meta.v1.outputs.ObjectMeta"] = None,
        spec: Optional["outputs.ChallengeSpec"] = None,
        status: Optional["outputs.ChallengeStatus"] = None,
    ):
        """
        Challenge is a type to represent a Challenge request with an ACME server
        :param str api_version: APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
        :param str kind: Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        :param '_meta.v1.ObjectMetaArgs' metadata: Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
        """
        if api_version is not None:
            pulumi.set(__self__, "api_version", "acme.cert-manager.io/v1")
        if kind is not None:
            pulumi.set(__self__, "kind", "Challenge")
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if spec is not None:
            pulumi.set(__self__, "spec", spec)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[str]:
        """
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
        """
        return pulumi.get(self, "api_version")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def metadata(self) -> Optional["_meta.v1.outputs.ObjectMeta"]:
        """
        Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def spec(self) -> Optional["outputs.ChallengeSpec"]:
        return pulumi.get(self, "spec")

    @property
    @pulumi.getter
    def status(self) -> Optional["outputs.ChallengeStatus"]:
        return pulumi.get(self, "status")


@pulumi.output_type
class ChallengeSpec(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authorizationURL":
            suggest = "authorization_url"
        elif key == "dnsName":
            suggest = "dns_name"
        elif key == "issuerRef":
            suggest = "issuer_ref"

        if suggest:
            pulumi.log.warn(
                f"Key '{key}' not found in ChallengeSpec. Access the value via the '{suggest}' property getter instead."
            )

    def __getitem__(self, key: str) -> Any:
        ChallengeSpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default=None) -> Any:
        ChallengeSpec.__key_warning(key)
        return super().get(key, default)

    def __init__(
        __self__,
        *,
        authorization_url: Optional[str] = None,
        dns_name: Optional[str] = None,
        issuer_ref: Optional["outputs.ChallengeSpecIssuerRef"] = None,
        key: Optional[str] = None,
        solver: Optional["outputs.ChallengeSpecSolver"] = None,
        token: Optional[str] = None,
        type: Optional[str] = None,
        url: Optional[str] = None,
        wildcard: Optional[bool] = None,
    ):
        """
        :param str authorization_url: The URL to the ACME Authorization resource that this
               challenge is a part of.
        :param str dns_name: dnsName is the identifier that this challenge is for, e.g. example.com.
               If the requested DNSName is a 'wildcard', this field MUST be set to the
               non-wildcard domain, e.g. for `*.example.com`, it must be `example.com`.
        :param str key: The ACME challenge key for this challenge
               For HTTP01 challenges, this is the value that must be responded with to
               complete the HTTP01 challenge in the format:
               `<private key JWK thumbprint>.<key from acme server for challenge>`.
               For DNS01 challenges, this is the base64 encoded SHA256 sum of the
               `<private key JWK thumbprint>.<key from acme server for challenge>`
               text that must be set as the TXT record content.
        :param str token: The ACME challenge token for this challenge.
               This is the raw value returned from the ACME server.
        :param str type: The type of ACME challenge this resource represents.
               One of "HTTP-01" or "DNS-01".
        :param str url: The URL of the ACME Challenge resource for this challenge.
               This can be used to lookup details about the status of this challenge.
        :param bool wildcard: wildcard will be true if this challenge is for a wildcard identifier,
               for example '*.example.com'.
        """
        if authorization_url is not None:
            pulumi.set(__self__, "authorization_url", authorization_url)
        if dns_name is not None:
            pulumi.set(__self__, "dns_name", dns_name)
        if issuer_ref is not None:
            pulumi.set(__self__, "issuer_ref", issuer_ref)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if solver is not None:
            pulumi.set(__self__, "solver", solver)
        if token is not None:
            pulumi.set(__self__, "token", token)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if url is not None:
            pulumi.set(__self__, "url", url)
        if wildcard is not None:
            pulumi.set(__self__, "wildcard", wildcard)

    @property
    @pulumi.getter(name="authorizationURL")
    def authorization_url(self) -> Optional[str]:
        """
        The URL to the ACME Authorization resource that this
        challenge is a part of.
        """
        return pulumi.get(self, "authorization_url")

    @property
    @pulumi.getter(name="dnsName")
    def dns_name(self) -> Optional[str]:
        """
        dnsName is the identifier that this challenge is for, e.g. example.com.
        If the requested DNSName is a 'wildcard', this field MUST be set to the
        non-wildcard domain, e.g. for `*.example.com`, it must be `example.com`.
        """
        return pulumi.get(self, "dns_name")

    @property
    @pulumi.getter(name="issuerRef")
    def issuer_ref(self) -> Optional["outputs.ChallengeSpecIssuerRef"]:
        return pulumi.get(self, "issuer_ref")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        The ACME challenge key for this challenge
        For HTTP01 challenges, this is the value that must be responded with to
        complete the HTTP01 challenge in the format:
        `<private key JWK thumbprint>.<key from acme server for challenge>`.
        For DNS01 challenges, this is the base64 encoded SHA256 sum of the
        `<private key JWK thumbprint>.<key from acme server for challenge>`
        text that must be set as the TXT record content.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def solver(self) -> Optional["outputs.ChallengeSpecSolver"]:
        return pulumi.get(self, "solver")

    @property
    @pulumi.getter
    def token(self) -> Optional[str]:
        """
        The ACME challenge token for this challenge.
        This is the raw value returned from the ACME server.
        """
        return pulumi.get(self, "token")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        The type of ACME challenge this resource represents.
        One of "HTTP-01" or "DNS-01".
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        """
        The URL of the ACME Challenge resource for this challenge.
        This can be used to lookup details about the status of this challenge.
        """
        return pulumi.get(self, "url")

    @property
    @pulumi.getter
    def wildcard(self) -> Optional[bool]:
        """
        wildcard will be true if this challenge is for a wildcard identifier,
        for example '*.example.com'.
        """
        return pulumi.get(self, "wildcard")


@pulumi.output_type
class ChallengeSpecIssuerRef(dict):
    """
    References a properly configured ACME-type Issuer which should
    be used to create this Challenge.
    If the Issuer does not exist, processing will be retried.
    If the Issuer is not an 'ACME' Issuer, an error will be returned and the
    Challenge will be marked as failed.
    """

    def __init__(
        __self__,
        *,
        group: Optional[str] = None,
        kind: Optional[str] = None,
        name: Optional[str] = None,
    ):
        """
        References a properly configured ACME-type Issuer which should
        be used to create this Challenge.
        If the Issuer does not exist, processing will be retried.
        If the Issuer is not an 'ACME' Issuer, an error will be returned and the
        Challenge will be marked as failed.
        :param str group: Group of the resource being referred to.
        :param str kind: Kind of the resource being referred to.
        :param str name: Name of the resource being referred to.
        """
        if group is not None:
            pulumi.set(__self__, "group", group)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def group(self) -> Optional[str]:
        """
        Group of the resource being referred to.
        """
        return pulumi.get(self, "group")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        Kind of the resource being referred to.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the resource being referred to.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ChallengeSpecIssuerRefPatch(dict):
    """
    References a properly configured ACME-type Issuer which should
    be used to create this Challenge.
    If the Issuer does not exist, processing will be retried.
    If the Issuer is not an 'ACME' Issuer, an error will be returned and the
    Challenge will be marked as failed.
    """

    def __init__(
        __self__,
        *,
        group: Optional[str] = None,
        kind: Optional[str] = None,
        name: Optional[str] = None,
    ):
        """
        References a properly configured ACME-type Issuer which should
        be used to create this Challenge.
        If the Issuer does not exist, processing will be retried.
        If the Issuer is not an 'ACME' Issuer, an error will be returned and the
        Challenge will be marked as failed.
        :param str group: Group of the resource being referred to.
        :param str kind: Kind of the resource being referred to.
        :param str name: Name of the resource being referred to.
        """
        if group is not None:
            pulumi.set(__self__, "group", group)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def group(self) -> Optional[str]:
        """
        Group of the resource being referred to.
        """
        return pulumi.get(self, "group")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        Kind of the resource being referred to.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the resource being referred to.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ChallengeSpecPatch(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authorizationURL":
            suggest = "authorization_url"
        elif key == "dnsName":
            suggest = "dns_name"
        elif key == "issuerRef":
            suggest = "issuer_ref"

        if suggest:
            pulumi.log.warn(
                f"Key '{key}' not found in ChallengeSpecPatch. Access the value via the '{suggest}' property getter instead."
            )

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecPatch.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default=None) -> Any:
        ChallengeSpecPatch.__key_warning(key)
        return super().get(key, default)

    def __init__(
        __self__,
        *,
        authorization_url: Optional[str] = None,
        dns_name: Optional[str] = None,
        issuer_ref: Optional["outputs.ChallengeSpecIssuerRefPatch"] = None,
        key: Optional[str] = None,
        solver: Optional["outputs.ChallengeSpecSolverPatch"] = None,
        token: Optional[str] = None,
        type: Optional[str] = None,
        url: Optional[str] = None,
        wildcard: Optional[bool] = None,
    ):
        """
        :param str authorization_url: The URL to the ACME Authorization resource that this
               challenge is a part of.
        :param str dns_name: dnsName is the identifier that this challenge is for, e.g. example.com.
               If the requested DNSName is a 'wildcard', this field MUST be set to the
               non-wildcard domain, e.g. for `*.example.com`, it must be `example.com`.
        :param str key: The ACME challenge key for this challenge
               For HTTP01 challenges, this is the value that must be responded with to
               complete the HTTP01 challenge in the format:
               `<private key JWK thumbprint>.<key from acme server for challenge>`.
               For DNS01 challenges, this is the base64 encoded SHA256 sum of the
               `<private key JWK thumbprint>.<key from acme server for challenge>`
               text that must be set as the TXT record content.
        :param str token: The ACME challenge token for this challenge.
               This is the raw value returned from the ACME server.
        :param str type: The type of ACME challenge this resource represents.
               One of "HTTP-01" or "DNS-01".
        :param str url: The URL of the ACME Challenge resource for this challenge.
               This can be used to lookup details about the status of this challenge.
        :param bool wildcard: wildcard will be true if this challenge is for a wildcard identifier,
               for example '*.example.com'.
        """
        if authorization_url is not None:
            pulumi.set(__self__, "authorization_url", authorization_url)
        if dns_name is not None:
            pulumi.set(__self__, "dns_name", dns_name)
        if issuer_ref is not None:
            pulumi.set(__self__, "issuer_ref", issuer_ref)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if solver is not None:
            pulumi.set(__self__, "solver", solver)
        if token is not None:
            pulumi.set(__self__, "token", token)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if url is not None:
            pulumi.set(__self__, "url", url)
        if wildcard is not None:
            pulumi.set(__self__, "wildcard", wildcard)

    @property
    @pulumi.getter(name="authorizationURL")
    def authorization_url(self) -> Optional[str]:
        """
        The URL to the ACME Authorization resource that this
        challenge is a part of.
        """
        return pulumi.get(self, "authorization_url")

    @property
    @pulumi.getter(name="dnsName")
    def dns_name(self) -> Optional[str]:
        """
        dnsName is the identifier that this challenge is for, e.g. example.com.
        If the requested DNSName is a 'wildcard', this field MUST be set to the
        non-wildcard domain, e.g. for `*.example.com`, it must be `example.com`.
        """
        return pulumi.get(self, "dns_name")

    @property
    @pulumi.getter(name="issuerRef")
    def issuer_ref(self) -> Optional["outputs.ChallengeSpecIssuerRefPatch"]:
        return pulumi.get(self, "issuer_ref")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        The ACME challenge key for this challenge
        For HTTP01 challenges, this is the value that must be responded with to
        complete the HTTP01 challenge in the format:
        `<private key JWK thumbprint>.<key from acme server for challenge>`.
        For DNS01 challenges, this is the base64 encoded SHA256 sum of the
        `<private key JWK thumbprint>.<key from acme server for challenge>`
        text that must be set as the TXT record content.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def solver(self) -> Optional["outputs.ChallengeSpecSolverPatch"]:
        return pulumi.get(self, "solver")

    @property
    @pulumi.getter
    def token(self) -> Optional[str]:
        """
        The ACME challenge token for this challenge.
        This is the raw value returned from the ACME server.
        """
        return pulumi.get(self, "token")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        The type of ACME challenge this resource represents.
        One of "HTTP-01" or "DNS-01".
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        """
        The URL of the ACME Challenge resource for this challenge.
        This can be used to lookup details about the status of this challenge.
        """
        return pulumi.get(self, "url")

    @property
    @pulumi.getter
    def wildcard(self) -> Optional[bool]:
        """
        wildcard will be true if this challenge is for a wildcard identifier,
        for example '*.example.com'.
        """
        return pulumi.get(self, "wildcard")


@pulumi.output_type
class ChallengeSpecSolver(dict):
    """
    Contains the domain solving configuration that should be used to
    solve this challenge resource.
    """

    def __init__(
        __self__,
        *,
        dns01: Optional["outputs.ChallengeSpecSolverDns01"] = None,
        http01: Optional["outputs.ChallengeSpecSolverHttp01"] = None,
        selector: Optional["outputs.ChallengeSpecSolverSelector"] = None,
    ):
        """
        Contains the domain solving configuration that should be used to
        solve this challenge resource.
        """
        if dns01 is not None:
            pulumi.set(__self__, "dns01", dns01)
        if http01 is not None:
            pulumi.set(__self__, "http01", http01)
        if selector is not None:
            pulumi.set(__self__, "selector", selector)

    @property
    @pulumi.getter
    def dns01(self) -> Optional["outputs.ChallengeSpecSolverDns01"]:
        return pulumi.get(self, "dns01")

    @property
    @pulumi.getter
    def http01(self) -> Optional["outputs.ChallengeSpecSolverHttp01"]:
        return pulumi.get(self, "http01")

    @property
    @pulumi.getter
    def selector(self) -> Optional["outputs.ChallengeSpecSolverSelector"]:
        return pulumi.get(self, "selector")


@pulumi.output_type
class ChallengeSpecSolverDns01(dict):
    """
    Configures cert-manager to attempt to complete authorizations by
    performing the DNS01 challenge flow.
    """

    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "acmeDNS":
            suggest = "acme_dns"
        elif key == "azureDNS":
            suggest = "azure_dns"
        elif key == "cloudDNS":
            suggest = "cloud_dns"
        elif key == "cnameStrategy":
            suggest = "cname_strategy"

        if suggest:
            pulumi.log.warn(
                f"Key '{key}' not found in ChallengeSpecSolverDns01. Access the value via the '{suggest}' property getter instead."
            )

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverDns01.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default=None) -> Any:
        ChallengeSpecSolverDns01.__key_warning(key)
        return super().get(key, default)

    def __init__(
        __self__,
        *,
        acme_dns: Optional["outputs.ChallengeSpecSolverDns01AcmeDNS"] = None,
        akamai: Optional["outputs.ChallengeSpecSolverDns01Akamai"] = None,
        azure_dns: Optional["outputs.ChallengeSpecSolverDns01AzureDNS"] = None,
        cloud_dns: Optional["outputs.ChallengeSpecSolverDns01CloudDNS"] = None,
        cloudflare: Optional["outputs.ChallengeSpecSolverDns01Cloudflare"] = None,
        cname_strategy: Optional[str] = None,
        digitalocean: Optional["outputs.ChallengeSpecSolverDns01Digitalocean"] = None,
        rfc2136: Optional["outputs.ChallengeSpecSolverDns01Rfc2136"] = None,
        route53: Optional["outputs.ChallengeSpecSolverDns01Route53"] = None,
        webhook: Optional["outputs.ChallengeSpecSolverDns01Webhook"] = None,
    ):
        """
        Configures cert-manager to attempt to complete authorizations by
        performing the DNS01 challenge flow.
        :param str cname_strategy: CNAMEStrategy configures how the DNS01 provider should handle CNAME
               records when found in DNS zones.
        """
        if acme_dns is not None:
            pulumi.set(__self__, "acme_dns", acme_dns)
        if akamai is not None:
            pulumi.set(__self__, "akamai", akamai)
        if azure_dns is not None:
            pulumi.set(__self__, "azure_dns", azure_dns)
        if cloud_dns is not None:
            pulumi.set(__self__, "cloud_dns", cloud_dns)
        if cloudflare is not None:
            pulumi.set(__self__, "cloudflare", cloudflare)
        if cname_strategy is not None:
            pulumi.set(__self__, "cname_strategy", cname_strategy)
        if digitalocean is not None:
            pulumi.set(__self__, "digitalocean", digitalocean)
        if rfc2136 is not None:
            pulumi.set(__self__, "rfc2136", rfc2136)
        if route53 is not None:
            pulumi.set(__self__, "route53", route53)
        if webhook is not None:
            pulumi.set(__self__, "webhook", webhook)

    @property
    @pulumi.getter(name="acmeDNS")
    def acme_dns(self) -> Optional["outputs.ChallengeSpecSolverDns01AcmeDNS"]:
        return pulumi.get(self, "acme_dns")

    @property
    @pulumi.getter
    def akamai(self) -> Optional["outputs.ChallengeSpecSolverDns01Akamai"]:
        return pulumi.get(self, "akamai")

    @property
    @pulumi.getter(name="azureDNS")
    def azure_dns(self) -> Optional["outputs.ChallengeSpecSolverDns01AzureDNS"]:
        return pulumi.get(self, "azure_dns")

    @property
    @pulumi.getter(name="cloudDNS")
    def cloud_dns(self) -> Optional["outputs.ChallengeSpecSolverDns01CloudDNS"]:
        return pulumi.get(self, "cloud_dns")

    @property
    @pulumi.getter
    def cloudflare(self) -> Optional["outputs.ChallengeSpecSolverDns01Cloudflare"]:
        return pulumi.get(self, "cloudflare")

    @property
    @pulumi.getter(name="cnameStrategy")
    def cname_strategy(self) -> Optional[str]:
        """
        CNAMEStrategy configures how the DNS01 provider should handle CNAME
        records when found in DNS zones.
        """
        return pulumi.get(self, "cname_strategy")

    @property
    @pulumi.getter
    def digitalocean(self) -> Optional["outputs.ChallengeSpecSolverDns01Digitalocean"]:
        return pulumi.get(self, "digitalocean")

    @property
    @pulumi.getter
    def rfc2136(self) -> Optional["outputs.ChallengeSpecSolverDns01Rfc2136"]:
        return pulumi.get(self, "rfc2136")

    @property
    @pulumi.getter
    def route53(self) -> Optional["outputs.ChallengeSpecSolverDns01Route53"]:
        return pulumi.get(self, "route53")

    @property
    @pulumi.getter
    def webhook(self) -> Optional["outputs.ChallengeSpecSolverDns01Webhook"]:
        return pulumi.get(self, "webhook")


@pulumi.output_type
class ChallengeSpecSolverDns01AcmeDNS(dict):
    """
    Use the 'ACME DNS' (https://github.com/joohoi/acme-dns) API to manage
    DNS01 challenge records.
    """

    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accountSecretRef":
            suggest = "account_secret_ref"

        if suggest:
            pulumi.log.warn(
                f"Key '{key}' not found in ChallengeSpecSolverDns01AcmeDNS. Access the value via the '{suggest}' property getter instead."
            )

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverDns01AcmeDNS.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default=None) -> Any:
        ChallengeSpecSolverDns01AcmeDNS.__key_warning(key)
        return super().get(key, default)

    def __init__(
        __self__,
        *,
        account_secret_ref: Optional[
            "outputs.ChallengeSpecSolverDns01AcmeDNSAccountSecretRef"
        ] = None,
        host: Optional[str] = None,
    ):
        """
        Use the 'ACME DNS' (https://github.com/joohoi/acme-dns) API to manage
        DNS01 challenge records.
        """
        if account_secret_ref is not None:
            pulumi.set(__self__, "account_secret_ref", account_secret_ref)
        if host is not None:
            pulumi.set(__self__, "host", host)

    @property
    @pulumi.getter(name="accountSecretRef")
    def account_secret_ref(
        self,
    ) -> Optional["outputs.ChallengeSpecSolverDns01AcmeDNSAccountSecretRef"]:
        return pulumi.get(self, "account_secret_ref")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")


@pulumi.output_type
class ChallengeSpecSolverDns01AcmeDNSAccountSecretRef(dict):
    """
    A reference to a specific 'key' within a Secret resource.
    In some instances, `key` is a required field.
    """

    def __init__(__self__, *, key: Optional[str] = None, name: Optional[str] = None):
        """
        A reference to a specific 'key' within a Secret resource.
        In some instances, `key` is a required field.
        :param str key: The key of the entry in the Secret resource's `data` field to be used.
               Some instances of this field may be defaulted, in others it may be
               required.
        :param str name: Name of the resource being referred to.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ChallengeSpecSolverDns01AcmeDNSAccountSecretRefPatch(dict):
    """
    A reference to a specific 'key' within a Secret resource.
    In some instances, `key` is a required field.
    """

    def __init__(__self__, *, key: Optional[str] = None, name: Optional[str] = None):
        """
        A reference to a specific 'key' within a Secret resource.
        In some instances, `key` is a required field.
        :param str key: The key of the entry in the Secret resource's `data` field to be used.
               Some instances of this field may be defaulted, in others it may be
               required.
        :param str name: Name of the resource being referred to.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ChallengeSpecSolverDns01AcmeDNSPatch(dict):
    """
    Use the 'ACME DNS' (https://github.com/joohoi/acme-dns) API to manage
    DNS01 challenge records.
    """

    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accountSecretRef":
            suggest = "account_secret_ref"

        if suggest:
            pulumi.log.warn(
                f"Key '{key}' not found in ChallengeSpecSolverDns01AcmeDNSPatch. Access the value via the '{suggest}' property getter instead."
            )

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverDns01AcmeDNSPatch.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default=None) -> Any:
        ChallengeSpecSolverDns01AcmeDNSPatch.__key_warning(key)
        return super().get(key, default)

    def __init__(
        __self__,
        *,
        account_secret_ref: Optional[
            "outputs.ChallengeSpecSolverDns01AcmeDNSAccountSecretRefPatch"
        ] = None,
        host: Optional[str] = None,
    ):
        """
        Use the 'ACME DNS' (https://github.com/joohoi/acme-dns) API to manage
        DNS01 challenge records.
        """
        if account_secret_ref is not None:
            pulumi.set(__self__, "account_secret_ref", account_secret_ref)
        if host is not None:
            pulumi.set(__self__, "host", host)

    @property
    @pulumi.getter(name="accountSecretRef")
    def account_secret_ref(
        self,
    ) -> Optional["outputs.ChallengeSpecSolverDns01AcmeDNSAccountSecretRefPatch"]:
        return pulumi.get(self, "account_secret_ref")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")


@pulumi.output_type
class ChallengeSpecSolverDns01Akamai(dict):
    """
    Use the Akamai DNS zone management API to manage DNS01 challenge records.
    """

    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessTokenSecretRef":
            suggest = "access_token_secret_ref"
        elif key == "clientSecretSecretRef":
            suggest = "client_secret_secret_ref"
        elif key == "clientTokenSecretRef":
            suggest = "client_token_secret_ref"
        elif key == "serviceConsumerDomain":
            suggest = "service_consumer_domain"

        if suggest:
            pulumi.log.warn(
                f"Key '{key}' not found in ChallengeSpecSolverDns01Akamai. Access the value via the '{suggest}' property getter instead."
            )

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverDns01Akamai.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default=None) -> Any:
        ChallengeSpecSolverDns01Akamai.__key_warning(key)
        return super().get(key, default)

    def __init__(
        __self__,
        *,
        access_token_secret_ref: Optional[
            "outputs.ChallengeSpecSolverDns01AkamaiAccessTokenSecretRef"
        ] = None,
        client_secret_secret_ref: Optional[
            "outputs.ChallengeSpecSolverDns01AkamaiClientSecretSecretRef"
        ] = None,
        client_token_secret_ref: Optional[
            "outputs.ChallengeSpecSolverDns01AkamaiClientTokenSecretRef"
        ] = None,
        service_consumer_domain: Optional[str] = None,
    ):
        """
        Use the Akamai DNS zone management API to manage DNS01 challenge records.
        """
        if access_token_secret_ref is not None:
            pulumi.set(__self__, "access_token_secret_ref", access_token_secret_ref)
        if client_secret_secret_ref is not None:
            pulumi.set(__self__, "client_secret_secret_ref", client_secret_secret_ref)
        if client_token_secret_ref is not None:
            pulumi.set(__self__, "client_token_secret_ref", client_token_secret_ref)
        if service_consumer_domain is not None:
            pulumi.set(__self__, "service_consumer_domain", service_consumer_domain)

    @property
    @pulumi.getter(name="accessTokenSecretRef")
    def access_token_secret_ref(
        self,
    ) -> Optional["outputs.ChallengeSpecSolverDns01AkamaiAccessTokenSecretRef"]:
        return pulumi.get(self, "access_token_secret_ref")

    @property
    @pulumi.getter(name="clientSecretSecretRef")
    def client_secret_secret_ref(
        self,
    ) -> Optional["outputs.ChallengeSpecSolverDns01AkamaiClientSecretSecretRef"]:
        return pulumi.get(self, "client_secret_secret_ref")

    @property
    @pulumi.getter(name="clientTokenSecretRef")
    def client_token_secret_ref(
        self,
    ) -> Optional["outputs.ChallengeSpecSolverDns01AkamaiClientTokenSecretRef"]:
        return pulumi.get(self, "client_token_secret_ref")

    @property
    @pulumi.getter(name="serviceConsumerDomain")
    def service_consumer_domain(self) -> Optional[str]:
        return pulumi.get(self, "service_consumer_domain")


@pulumi.output_type
class ChallengeSpecSolverDns01AkamaiAccessTokenSecretRef(dict):
    """
    A reference to a specific 'key' within a Secret resource.
    In some instances, `key` is a required field.
    """

    def __init__(__self__, *, key: Optional[str] = None, name: Optional[str] = None):
        """
        A reference to a specific 'key' within a Secret resource.
        In some instances, `key` is a required field.
        :param str key: The key of the entry in the Secret resource's `data` field to be used.
               Some instances of this field may be defaulted, in others it may be
               required.
        :param str name: Name of the resource being referred to.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ChallengeSpecSolverDns01AkamaiAccessTokenSecretRefPatch(dict):
    """
    A reference to a specific 'key' within a Secret resource.
    In some instances, `key` is a required field.
    """

    def __init__(__self__, *, key: Optional[str] = None, name: Optional[str] = None):
        """
        A reference to a specific 'key' within a Secret resource.
        In some instances, `key` is a required field.
        :param str key: The key of the entry in the Secret resource's `data` field to be used.
               Some instances of this field may be defaulted, in others it may be
               required.
        :param str name: Name of the resource being referred to.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ChallengeSpecSolverDns01AkamaiClientSecretSecretRef(dict):
    """
    A reference to a specific 'key' within a Secret resource.
    In some instances, `key` is a required field.
    """

    def __init__(__self__, *, key: Optional[str] = None, name: Optional[str] = None):
        """
        A reference to a specific 'key' within a Secret resource.
        In some instances, `key` is a required field.
        :param str key: The key of the entry in the Secret resource's `data` field to be used.
               Some instances of this field may be defaulted, in others it may be
               required.
        :param str name: Name of the resource being referred to.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ChallengeSpecSolverDns01AkamaiClientSecretSecretRefPatch(dict):
    """
    A reference to a specific 'key' within a Secret resource.
    In some instances, `key` is a required field.
    """

    def __init__(__self__, *, key: Optional[str] = None, name: Optional[str] = None):
        """
        A reference to a specific 'key' within a Secret resource.
        In some instances, `key` is a required field.
        :param str key: The key of the entry in the Secret resource's `data` field to be used.
               Some instances of this field may be defaulted, in others it may be
               required.
        :param str name: Name of the resource being referred to.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ChallengeSpecSolverDns01AkamaiClientTokenSecretRef(dict):
    """
    A reference to a specific 'key' within a Secret resource.
    In some instances, `key` is a required field.
    """

    def __init__(__self__, *, key: Optional[str] = None, name: Optional[str] = None):
        """
        A reference to a specific 'key' within a Secret resource.
        In some instances, `key` is a required field.
        :param str key: The key of the entry in the Secret resource's `data` field to be used.
               Some instances of this field may be defaulted, in others it may be
               required.
        :param str name: Name of the resource being referred to.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ChallengeSpecSolverDns01AkamaiClientTokenSecretRefPatch(dict):
    """
    A reference to a specific 'key' within a Secret resource.
    In some instances, `key` is a required field.
    """

    def __init__(__self__, *, key: Optional[str] = None, name: Optional[str] = None):
        """
        A reference to a specific 'key' within a Secret resource.
        In some instances, `key` is a required field.
        :param str key: The key of the entry in the Secret resource's `data` field to be used.
               Some instances of this field may be defaulted, in others it may be
               required.
        :param str name: Name of the resource being referred to.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ChallengeSpecSolverDns01AkamaiPatch(dict):
    """
    Use the Akamai DNS zone management API to manage DNS01 challenge records.
    """

    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessTokenSecretRef":
            suggest = "access_token_secret_ref"
        elif key == "clientSecretSecretRef":
            suggest = "client_secret_secret_ref"
        elif key == "clientTokenSecretRef":
            suggest = "client_token_secret_ref"
        elif key == "serviceConsumerDomain":
            suggest = "service_consumer_domain"

        if suggest:
            pulumi.log.warn(
                f"Key '{key}' not found in ChallengeSpecSolverDns01AkamaiPatch. Access the value via the '{suggest}' property getter instead."
            )

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverDns01AkamaiPatch.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default=None) -> Any:
        ChallengeSpecSolverDns01AkamaiPatch.__key_warning(key)
        return super().get(key, default)

    def __init__(
        __self__,
        *,
        access_token_secret_ref: Optional[
            "outputs.ChallengeSpecSolverDns01AkamaiAccessTokenSecretRefPatch"
        ] = None,
        client_secret_secret_ref: Optional[
            "outputs.ChallengeSpecSolverDns01AkamaiClientSecretSecretRefPatch"
        ] = None,
        client_token_secret_ref: Optional[
            "outputs.ChallengeSpecSolverDns01AkamaiClientTokenSecretRefPatch"
        ] = None,
        service_consumer_domain: Optional[str] = None,
    ):
        """
        Use the Akamai DNS zone management API to manage DNS01 challenge records.
        """
        if access_token_secret_ref is not None:
            pulumi.set(__self__, "access_token_secret_ref", access_token_secret_ref)
        if client_secret_secret_ref is not None:
            pulumi.set(__self__, "client_secret_secret_ref", client_secret_secret_ref)
        if client_token_secret_ref is not None:
            pulumi.set(__self__, "client_token_secret_ref", client_token_secret_ref)
        if service_consumer_domain is not None:
            pulumi.set(__self__, "service_consumer_domain", service_consumer_domain)

    @property
    @pulumi.getter(name="accessTokenSecretRef")
    def access_token_secret_ref(
        self,
    ) -> Optional["outputs.ChallengeSpecSolverDns01AkamaiAccessTokenSecretRefPatch"]:
        return pulumi.get(self, "access_token_secret_ref")

    @property
    @pulumi.getter(name="clientSecretSecretRef")
    def client_secret_secret_ref(
        self,
    ) -> Optional["outputs.ChallengeSpecSolverDns01AkamaiClientSecretSecretRefPatch"]:
        return pulumi.get(self, "client_secret_secret_ref")

    @property
    @pulumi.getter(name="clientTokenSecretRef")
    def client_token_secret_ref(
        self,
    ) -> Optional["outputs.ChallengeSpecSolverDns01AkamaiClientTokenSecretRefPatch"]:
        return pulumi.get(self, "client_token_secret_ref")

    @property
    @pulumi.getter(name="serviceConsumerDomain")
    def service_consumer_domain(self) -> Optional[str]:
        return pulumi.get(self, "service_consumer_domain")


@pulumi.output_type
class ChallengeSpecSolverDns01AzureDNS(dict):
    """
    Use the Microsoft Azure DNS API to manage DNS01 challenge records.
    """

    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientID":
            suggest = "client_id"
        elif key == "clientSecretSecretRef":
            suggest = "client_secret_secret_ref"
        elif key == "hostedZoneName":
            suggest = "hosted_zone_name"
        elif key == "managedIdentity":
            suggest = "managed_identity"
        elif key == "resourceGroupName":
            suggest = "resource_group_name"
        elif key == "subscriptionID":
            suggest = "subscription_id"
        elif key == "tenantID":
            suggest = "tenant_id"

        if suggest:
            pulumi.log.warn(
                f"Key '{key}' not found in ChallengeSpecSolverDns01AzureDNS. Access the value via the '{suggest}' property getter instead."
            )

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverDns01AzureDNS.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default=None) -> Any:
        ChallengeSpecSolverDns01AzureDNS.__key_warning(key)
        return super().get(key, default)

    def __init__(
        __self__,
        *,
        client_id: Optional[str] = None,
        client_secret_secret_ref: Optional[
            "outputs.ChallengeSpecSolverDns01AzureDNSClientSecretSecretRef"
        ] = None,
        environment: Optional[str] = None,
        hosted_zone_name: Optional[str] = None,
        managed_identity: Optional[
            "outputs.ChallengeSpecSolverDns01AzureDNSManagedIdentity"
        ] = None,
        resource_group_name: Optional[str] = None,
        subscription_id: Optional[str] = None,
        tenant_id: Optional[str] = None,
    ):
        """
        Use the Microsoft Azure DNS API to manage DNS01 challenge records.
        :param str client_id: Auth: Azure Service Principal:
               The ClientID of the Azure Service Principal used to authenticate with Azure DNS.
               If set, ClientSecret and TenantID must also be set.
        :param str environment: name of the Azure environment (default AzurePublicCloud)
        :param str hosted_zone_name: name of the DNS zone that should be used
        :param str resource_group_name: resource group the DNS zone is located in
        :param str subscription_id: ID of the Azure subscription
        :param str tenant_id: Auth: Azure Service Principal:
               The TenantID of the Azure Service Principal used to authenticate with Azure DNS.
               If set, ClientID and ClientSecret must also be set.
        """
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret_secret_ref is not None:
            pulumi.set(__self__, "client_secret_secret_ref", client_secret_secret_ref)
        if environment is not None:
            pulumi.set(__self__, "environment", environment)
        if hosted_zone_name is not None:
            pulumi.set(__self__, "hosted_zone_name", hosted_zone_name)
        if managed_identity is not None:
            pulumi.set(__self__, "managed_identity", managed_identity)
        if resource_group_name is not None:
            pulumi.set(__self__, "resource_group_name", resource_group_name)
        if subscription_id is not None:
            pulumi.set(__self__, "subscription_id", subscription_id)
        if tenant_id is not None:
            pulumi.set(__self__, "tenant_id", tenant_id)

    @property
    @pulumi.getter(name="clientID")
    def client_id(self) -> Optional[str]:
        """
        Auth: Azure Service Principal:
        The ClientID of the Azure Service Principal used to authenticate with Azure DNS.
        If set, ClientSecret and TenantID must also be set.
        """
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecretSecretRef")
    def client_secret_secret_ref(
        self,
    ) -> Optional["outputs.ChallengeSpecSolverDns01AzureDNSClientSecretSecretRef"]:
        return pulumi.get(self, "client_secret_secret_ref")

    @property
    @pulumi.getter
    def environment(self) -> Optional[str]:
        """
        name of the Azure environment (default AzurePublicCloud)
        """
        return pulumi.get(self, "environment")

    @property
    @pulumi.getter(name="hostedZoneName")
    def hosted_zone_name(self) -> Optional[str]:
        """
        name of the DNS zone that should be used
        """
        return pulumi.get(self, "hosted_zone_name")

    @property
    @pulumi.getter(name="managedIdentity")
    def managed_identity(
        self,
    ) -> Optional["outputs.ChallengeSpecSolverDns01AzureDNSManagedIdentity"]:
        return pulumi.get(self, "managed_identity")

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> Optional[str]:
        """
        resource group the DNS zone is located in
        """
        return pulumi.get(self, "resource_group_name")

    @property
    @pulumi.getter(name="subscriptionID")
    def subscription_id(self) -> Optional[str]:
        """
        ID of the Azure subscription
        """
        return pulumi.get(self, "subscription_id")

    @property
    @pulumi.getter(name="tenantID")
    def tenant_id(self) -> Optional[str]:
        """
        Auth: Azure Service Principal:
        The TenantID of the Azure Service Principal used to authenticate with Azure DNS.
        If set, ClientID and ClientSecret must also be set.
        """
        return pulumi.get(self, "tenant_id")


@pulumi.output_type
class ChallengeSpecSolverDns01AzureDNSClientSecretSecretRef(dict):
    """
    Auth: Azure Service Principal:
    A reference to a Secret containing the password associated with the Service Principal.
    If set, ClientID and TenantID must also be set.
    """

    def __init__(__self__, *, key: Optional[str] = None, name: Optional[str] = None):
        """
        Auth: Azure Service Principal:
        A reference to a Secret containing the password associated with the Service Principal.
        If set, ClientID and TenantID must also be set.
        :param str key: The key of the entry in the Secret resource's `data` field to be used.
               Some instances of this field may be defaulted, in others it may be
               required.
        :param str name: Name of the resource being referred to.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ChallengeSpecSolverDns01AzureDNSClientSecretSecretRefPatch(dict):
    """
    Auth: Azure Service Principal:
    A reference to a Secret containing the password associated with the Service Principal.
    If set, ClientID and TenantID must also be set.
    """

    def __init__(__self__, *, key: Optional[str] = None, name: Optional[str] = None):
        """
        Auth: Azure Service Principal:
        A reference to a Secret containing the password associated with the Service Principal.
        If set, ClientID and TenantID must also be set.
        :param str key: The key of the entry in the Secret resource's `data` field to be used.
               Some instances of this field may be defaulted, in others it may be
               required.
        :param str name: Name of the resource being referred to.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ChallengeSpecSolverDns01AzureDNSManagedIdentity(dict):
    """
    Auth: Azure Workload Identity or Azure Managed Service Identity:
    Settings to enable Azure Workload Identity or Azure Managed Service Identity
    If set, ClientID, ClientSecret and TenantID must not be set.
    """

    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientID":
            suggest = "client_id"
        elif key == "resourceID":
            suggest = "resource_id"
        elif key == "tenantID":
            suggest = "tenant_id"

        if suggest:
            pulumi.log.warn(
                f"Key '{key}' not found in ChallengeSpecSolverDns01AzureDNSManagedIdentity. Access the value via the '{suggest}' property getter instead."
            )

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverDns01AzureDNSManagedIdentity.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default=None) -> Any:
        ChallengeSpecSolverDns01AzureDNSManagedIdentity.__key_warning(key)
        return super().get(key, default)

    def __init__(
        __self__,
        *,
        client_id: Optional[str] = None,
        resource_id: Optional[str] = None,
        tenant_id: Optional[str] = None,
    ):
        """
        Auth: Azure Workload Identity or Azure Managed Service Identity:
        Settings to enable Azure Workload Identity or Azure Managed Service Identity
        If set, ClientID, ClientSecret and TenantID must not be set.
        :param str client_id: client ID of the managed identity, can not be used at the same time as resourceID
        :param str resource_id: resource ID of the managed identity, can not be used at the same time as clientID
               Cannot be used for Azure Managed Service Identity
        :param str tenant_id: tenant ID of the managed identity, can not be used at the same time as resourceID
        """
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if tenant_id is not None:
            pulumi.set(__self__, "tenant_id", tenant_id)

    @property
    @pulumi.getter(name="clientID")
    def client_id(self) -> Optional[str]:
        """
        client ID of the managed identity, can not be used at the same time as resourceID
        """
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="resourceID")
    def resource_id(self) -> Optional[str]:
        """
        resource ID of the managed identity, can not be used at the same time as clientID
        Cannot be used for Azure Managed Service Identity
        """
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter(name="tenantID")
    def tenant_id(self) -> Optional[str]:
        """
        tenant ID of the managed identity, can not be used at the same time as resourceID
        """
        return pulumi.get(self, "tenant_id")


@pulumi.output_type
class ChallengeSpecSolverDns01AzureDNSManagedIdentityPatch(dict):
    """
    Auth: Azure Workload Identity or Azure Managed Service Identity:
    Settings to enable Azure Workload Identity or Azure Managed Service Identity
    If set, ClientID, ClientSecret and TenantID must not be set.
    """

    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientID":
            suggest = "client_id"
        elif key == "resourceID":
            suggest = "resource_id"
        elif key == "tenantID":
            suggest = "tenant_id"

        if suggest:
            pulumi.log.warn(
                f"Key '{key}' not found in ChallengeSpecSolverDns01AzureDNSManagedIdentityPatch. Access the value via the '{suggest}' property getter instead."
            )

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverDns01AzureDNSManagedIdentityPatch.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default=None) -> Any:
        ChallengeSpecSolverDns01AzureDNSManagedIdentityPatch.__key_warning(key)
        return super().get(key, default)

    def __init__(
        __self__,
        *,
        client_id: Optional[str] = None,
        resource_id: Optional[str] = None,
        tenant_id: Optional[str] = None,
    ):
        """
        Auth: Azure Workload Identity or Azure Managed Service Identity:
        Settings to enable Azure Workload Identity or Azure Managed Service Identity
        If set, ClientID, ClientSecret and TenantID must not be set.
        :param str client_id: client ID of the managed identity, can not be used at the same time as resourceID
        :param str resource_id: resource ID of the managed identity, can not be used at the same time as clientID
               Cannot be used for Azure Managed Service Identity
        :param str tenant_id: tenant ID of the managed identity, can not be used at the same time as resourceID
        """
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if tenant_id is not None:
            pulumi.set(__self__, "tenant_id", tenant_id)

    @property
    @pulumi.getter(name="clientID")
    def client_id(self) -> Optional[str]:
        """
        client ID of the managed identity, can not be used at the same time as resourceID
        """
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="resourceID")
    def resource_id(self) -> Optional[str]:
        """
        resource ID of the managed identity, can not be used at the same time as clientID
        Cannot be used for Azure Managed Service Identity
        """
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter(name="tenantID")
    def tenant_id(self) -> Optional[str]:
        """
        tenant ID of the managed identity, can not be used at the same time as resourceID
        """
        return pulumi.get(self, "tenant_id")


@pulumi.output_type
class ChallengeSpecSolverDns01AzureDNSPatch(dict):
    """
    Use the Microsoft Azure DNS API to manage DNS01 challenge records.
    """

    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientID":
            suggest = "client_id"
        elif key == "clientSecretSecretRef":
            suggest = "client_secret_secret_ref"
        elif key == "hostedZoneName":
            suggest = "hosted_zone_name"
        elif key == "managedIdentity":
            suggest = "managed_identity"
        elif key == "resourceGroupName":
            suggest = "resource_group_name"
        elif key == "subscriptionID":
            suggest = "subscription_id"
        elif key == "tenantID":
            suggest = "tenant_id"

        if suggest:
            pulumi.log.warn(
                f"Key '{key}' not found in ChallengeSpecSolverDns01AzureDNSPatch. Access the value via the '{suggest}' property getter instead."
            )

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverDns01AzureDNSPatch.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default=None) -> Any:
        ChallengeSpecSolverDns01AzureDNSPatch.__key_warning(key)
        return super().get(key, default)

    def __init__(
        __self__,
        *,
        client_id: Optional[str] = None,
        client_secret_secret_ref: Optional[
            "outputs.ChallengeSpecSolverDns01AzureDNSClientSecretSecretRefPatch"
        ] = None,
        environment: Optional[str] = None,
        hosted_zone_name: Optional[str] = None,
        managed_identity: Optional[
            "outputs.ChallengeSpecSolverDns01AzureDNSManagedIdentityPatch"
        ] = None,
        resource_group_name: Optional[str] = None,
        subscription_id: Optional[str] = None,
        tenant_id: Optional[str] = None,
    ):
        """
        Use the Microsoft Azure DNS API to manage DNS01 challenge records.
        :param str client_id: Auth: Azure Service Principal:
               The ClientID of the Azure Service Principal used to authenticate with Azure DNS.
               If set, ClientSecret and TenantID must also be set.
        :param str environment: name of the Azure environment (default AzurePublicCloud)
        :param str hosted_zone_name: name of the DNS zone that should be used
        :param str resource_group_name: resource group the DNS zone is located in
        :param str subscription_id: ID of the Azure subscription
        :param str tenant_id: Auth: Azure Service Principal:
               The TenantID of the Azure Service Principal used to authenticate with Azure DNS.
               If set, ClientID and ClientSecret must also be set.
        """
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret_secret_ref is not None:
            pulumi.set(__self__, "client_secret_secret_ref", client_secret_secret_ref)
        if environment is not None:
            pulumi.set(__self__, "environment", environment)
        if hosted_zone_name is not None:
            pulumi.set(__self__, "hosted_zone_name", hosted_zone_name)
        if managed_identity is not None:
            pulumi.set(__self__, "managed_identity", managed_identity)
        if resource_group_name is not None:
            pulumi.set(__self__, "resource_group_name", resource_group_name)
        if subscription_id is not None:
            pulumi.set(__self__, "subscription_id", subscription_id)
        if tenant_id is not None:
            pulumi.set(__self__, "tenant_id", tenant_id)

    @property
    @pulumi.getter(name="clientID")
    def client_id(self) -> Optional[str]:
        """
        Auth: Azure Service Principal:
        The ClientID of the Azure Service Principal used to authenticate with Azure DNS.
        If set, ClientSecret and TenantID must also be set.
        """
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecretSecretRef")
    def client_secret_secret_ref(
        self,
    ) -> Optional["outputs.ChallengeSpecSolverDns01AzureDNSClientSecretSecretRefPatch"]:
        return pulumi.get(self, "client_secret_secret_ref")

    @property
    @pulumi.getter
    def environment(self) -> Optional[str]:
        """
        name of the Azure environment (default AzurePublicCloud)
        """
        return pulumi.get(self, "environment")

    @property
    @pulumi.getter(name="hostedZoneName")
    def hosted_zone_name(self) -> Optional[str]:
        """
        name of the DNS zone that should be used
        """
        return pulumi.get(self, "hosted_zone_name")

    @property
    @pulumi.getter(name="managedIdentity")
    def managed_identity(
        self,
    ) -> Optional["outputs.ChallengeSpecSolverDns01AzureDNSManagedIdentityPatch"]:
        return pulumi.get(self, "managed_identity")

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> Optional[str]:
        """
        resource group the DNS zone is located in
        """
        return pulumi.get(self, "resource_group_name")

    @property
    @pulumi.getter(name="subscriptionID")
    def subscription_id(self) -> Optional[str]:
        """
        ID of the Azure subscription
        """
        return pulumi.get(self, "subscription_id")

    @property
    @pulumi.getter(name="tenantID")
    def tenant_id(self) -> Optional[str]:
        """
        Auth: Azure Service Principal:
        The TenantID of the Azure Service Principal used to authenticate with Azure DNS.
        If set, ClientID and ClientSecret must also be set.
        """
        return pulumi.get(self, "tenant_id")


@pulumi.output_type
class ChallengeSpecSolverDns01CloudDNS(dict):
    """
    Use the Google Cloud DNS API to manage DNS01 challenge records.
    """

    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "hostedZoneName":
            suggest = "hosted_zone_name"
        elif key == "serviceAccountSecretRef":
            suggest = "service_account_secret_ref"

        if suggest:
            pulumi.log.warn(
                f"Key '{key}' not found in ChallengeSpecSolverDns01CloudDNS. Access the value via the '{suggest}' property getter instead."
            )

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverDns01CloudDNS.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default=None) -> Any:
        ChallengeSpecSolverDns01CloudDNS.__key_warning(key)
        return super().get(key, default)

    def __init__(
        __self__,
        *,
        hosted_zone_name: Optional[str] = None,
        project: Optional[str] = None,
        service_account_secret_ref: Optional[
            "outputs.ChallengeSpecSolverDns01CloudDNSServiceAccountSecretRef"
        ] = None,
    ):
        """
        Use the Google Cloud DNS API to manage DNS01 challenge records.
        :param str hosted_zone_name: HostedZoneName is an optional field that tells cert-manager in which
               Cloud DNS zone the challenge record has to be created.
               If left empty cert-manager will automatically choose a zone.
        """
        if hosted_zone_name is not None:
            pulumi.set(__self__, "hosted_zone_name", hosted_zone_name)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if service_account_secret_ref is not None:
            pulumi.set(
                __self__, "service_account_secret_ref", service_account_secret_ref
            )

    @property
    @pulumi.getter(name="hostedZoneName")
    def hosted_zone_name(self) -> Optional[str]:
        """
        HostedZoneName is an optional field that tells cert-manager in which
        Cloud DNS zone the challenge record has to be created.
        If left empty cert-manager will automatically choose a zone.
        """
        return pulumi.get(self, "hosted_zone_name")

    @property
    @pulumi.getter
    def project(self) -> Optional[str]:
        return pulumi.get(self, "project")

    @property
    @pulumi.getter(name="serviceAccountSecretRef")
    def service_account_secret_ref(
        self,
    ) -> Optional["outputs.ChallengeSpecSolverDns01CloudDNSServiceAccountSecretRef"]:
        return pulumi.get(self, "service_account_secret_ref")


@pulumi.output_type
class ChallengeSpecSolverDns01CloudDNSPatch(dict):
    """
    Use the Google Cloud DNS API to manage DNS01 challenge records.
    """

    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "hostedZoneName":
            suggest = "hosted_zone_name"
        elif key == "serviceAccountSecretRef":
            suggest = "service_account_secret_ref"

        if suggest:
            pulumi.log.warn(
                f"Key '{key}' not found in ChallengeSpecSolverDns01CloudDNSPatch. Access the value via the '{suggest}' property getter instead."
            )

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverDns01CloudDNSPatch.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default=None) -> Any:
        ChallengeSpecSolverDns01CloudDNSPatch.__key_warning(key)
        return super().get(key, default)

    def __init__(
        __self__,
        *,
        hosted_zone_name: Optional[str] = None,
        project: Optional[str] = None,
        service_account_secret_ref: Optional[
            "outputs.ChallengeSpecSolverDns01CloudDNSServiceAccountSecretRefPatch"
        ] = None,
    ):
        """
        Use the Google Cloud DNS API to manage DNS01 challenge records.
        :param str hosted_zone_name: HostedZoneName is an optional field that tells cert-manager in which
               Cloud DNS zone the challenge record has to be created.
               If left empty cert-manager will automatically choose a zone.
        """
        if hosted_zone_name is not None:
            pulumi.set(__self__, "hosted_zone_name", hosted_zone_name)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if service_account_secret_ref is not None:
            pulumi.set(
                __self__, "service_account_secret_ref", service_account_secret_ref
            )

    @property
    @pulumi.getter(name="hostedZoneName")
    def hosted_zone_name(self) -> Optional[str]:
        """
        HostedZoneName is an optional field that tells cert-manager in which
        Cloud DNS zone the challenge record has to be created.
        If left empty cert-manager will automatically choose a zone.
        """
        return pulumi.get(self, "hosted_zone_name")

    @property
    @pulumi.getter
    def project(self) -> Optional[str]:
        return pulumi.get(self, "project")

    @property
    @pulumi.getter(name="serviceAccountSecretRef")
    def service_account_secret_ref(
        self,
    ) -> Optional[
        "outputs.ChallengeSpecSolverDns01CloudDNSServiceAccountSecretRefPatch"
    ]:
        return pulumi.get(self, "service_account_secret_ref")


@pulumi.output_type
class ChallengeSpecSolverDns01CloudDNSServiceAccountSecretRef(dict):
    """
    A reference to a specific 'key' within a Secret resource.
    In some instances, `key` is a required field.
    """

    def __init__(__self__, *, key: Optional[str] = None, name: Optional[str] = None):
        """
        A reference to a specific 'key' within a Secret resource.
        In some instances, `key` is a required field.
        :param str key: The key of the entry in the Secret resource's `data` field to be used.
               Some instances of this field may be defaulted, in others it may be
               required.
        :param str name: Name of the resource being referred to.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ChallengeSpecSolverDns01CloudDNSServiceAccountSecretRefPatch(dict):
    """
    A reference to a specific 'key' within a Secret resource.
    In some instances, `key` is a required field.
    """

    def __init__(__self__, *, key: Optional[str] = None, name: Optional[str] = None):
        """
        A reference to a specific 'key' within a Secret resource.
        In some instances, `key` is a required field.
        :param str key: The key of the entry in the Secret resource's `data` field to be used.
               Some instances of this field may be defaulted, in others it may be
               required.
        :param str name: Name of the resource being referred to.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ChallengeSpecSolverDns01Cloudflare(dict):
    """
    Use the Cloudflare API to manage DNS01 challenge records.
    """

    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiKeySecretRef":
            suggest = "api_key_secret_ref"
        elif key == "apiTokenSecretRef":
            suggest = "api_token_secret_ref"

        if suggest:
            pulumi.log.warn(
                f"Key '{key}' not found in ChallengeSpecSolverDns01Cloudflare. Access the value via the '{suggest}' property getter instead."
            )

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverDns01Cloudflare.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default=None) -> Any:
        ChallengeSpecSolverDns01Cloudflare.__key_warning(key)
        return super().get(key, default)

    def __init__(
        __self__,
        *,
        api_key_secret_ref: Optional[
            "outputs.ChallengeSpecSolverDns01CloudflareApiKeySecretRef"
        ] = None,
        api_token_secret_ref: Optional[
            "outputs.ChallengeSpecSolverDns01CloudflareApiTokenSecretRef"
        ] = None,
        email: Optional[str] = None,
    ):
        """
        Use the Cloudflare API to manage DNS01 challenge records.
        :param str email: Email of the account, only required when using API key based authentication.
        """
        if api_key_secret_ref is not None:
            pulumi.set(__self__, "api_key_secret_ref", api_key_secret_ref)
        if api_token_secret_ref is not None:
            pulumi.set(__self__, "api_token_secret_ref", api_token_secret_ref)
        if email is not None:
            pulumi.set(__self__, "email", email)

    @property
    @pulumi.getter(name="apiKeySecretRef")
    def api_key_secret_ref(
        self,
    ) -> Optional["outputs.ChallengeSpecSolverDns01CloudflareApiKeySecretRef"]:
        return pulumi.get(self, "api_key_secret_ref")

    @property
    @pulumi.getter(name="apiTokenSecretRef")
    def api_token_secret_ref(
        self,
    ) -> Optional["outputs.ChallengeSpecSolverDns01CloudflareApiTokenSecretRef"]:
        return pulumi.get(self, "api_token_secret_ref")

    @property
    @pulumi.getter
    def email(self) -> Optional[str]:
        """
        Email of the account, only required when using API key based authentication.
        """
        return pulumi.get(self, "email")


@pulumi.output_type
class ChallengeSpecSolverDns01CloudflareApiKeySecretRef(dict):
    """
    API key to use to authenticate with Cloudflare.
    Note: using an API token to authenticate is now the recommended method
    as it allows greater control of permissions.
    """

    def __init__(__self__, *, key: Optional[str] = None, name: Optional[str] = None):
        """
        API key to use to authenticate with Cloudflare.
        Note: using an API token to authenticate is now the recommended method
        as it allows greater control of permissions.
        :param str key: The key of the entry in the Secret resource's `data` field to be used.
               Some instances of this field may be defaulted, in others it may be
               required.
        :param str name: Name of the resource being referred to.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ChallengeSpecSolverDns01CloudflareApiKeySecretRefPatch(dict):
    """
    API key to use to authenticate with Cloudflare.
    Note: using an API token to authenticate is now the recommended method
    as it allows greater control of permissions.
    """

    def __init__(__self__, *, key: Optional[str] = None, name: Optional[str] = None):
        """
        API key to use to authenticate with Cloudflare.
        Note: using an API token to authenticate is now the recommended method
        as it allows greater control of permissions.
        :param str key: The key of the entry in the Secret resource's `data` field to be used.
               Some instances of this field may be defaulted, in others it may be
               required.
        :param str name: Name of the resource being referred to.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ChallengeSpecSolverDns01CloudflareApiTokenSecretRef(dict):
    """
    API token used to authenticate with Cloudflare.
    """

    def __init__(__self__, *, key: Optional[str] = None, name: Optional[str] = None):
        """
        API token used to authenticate with Cloudflare.
        :param str key: The key of the entry in the Secret resource's `data` field to be used.
               Some instances of this field may be defaulted, in others it may be
               required.
        :param str name: Name of the resource being referred to.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ChallengeSpecSolverDns01CloudflareApiTokenSecretRefPatch(dict):
    """
    API token used to authenticate with Cloudflare.
    """

    def __init__(__self__, *, key: Optional[str] = None, name: Optional[str] = None):
        """
        API token used to authenticate with Cloudflare.
        :param str key: The key of the entry in the Secret resource's `data` field to be used.
               Some instances of this field may be defaulted, in others it may be
               required.
        :param str name: Name of the resource being referred to.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ChallengeSpecSolverDns01CloudflarePatch(dict):
    """
    Use the Cloudflare API to manage DNS01 challenge records.
    """

    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiKeySecretRef":
            suggest = "api_key_secret_ref"
        elif key == "apiTokenSecretRef":
            suggest = "api_token_secret_ref"

        if suggest:
            pulumi.log.warn(
                f"Key '{key}' not found in ChallengeSpecSolverDns01CloudflarePatch. Access the value via the '{suggest}' property getter instead."
            )

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverDns01CloudflarePatch.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default=None) -> Any:
        ChallengeSpecSolverDns01CloudflarePatch.__key_warning(key)
        return super().get(key, default)

    def __init__(
        __self__,
        *,
        api_key_secret_ref: Optional[
            "outputs.ChallengeSpecSolverDns01CloudflareApiKeySecretRefPatch"
        ] = None,
        api_token_secret_ref: Optional[
            "outputs.ChallengeSpecSolverDns01CloudflareApiTokenSecretRefPatch"
        ] = None,
        email: Optional[str] = None,
    ):
        """
        Use the Cloudflare API to manage DNS01 challenge records.
        :param str email: Email of the account, only required when using API key based authentication.
        """
        if api_key_secret_ref is not None:
            pulumi.set(__self__, "api_key_secret_ref", api_key_secret_ref)
        if api_token_secret_ref is not None:
            pulumi.set(__self__, "api_token_secret_ref", api_token_secret_ref)
        if email is not None:
            pulumi.set(__self__, "email", email)

    @property
    @pulumi.getter(name="apiKeySecretRef")
    def api_key_secret_ref(
        self,
    ) -> Optional["outputs.ChallengeSpecSolverDns01CloudflareApiKeySecretRefPatch"]:
        return pulumi.get(self, "api_key_secret_ref")

    @property
    @pulumi.getter(name="apiTokenSecretRef")
    def api_token_secret_ref(
        self,
    ) -> Optional["outputs.ChallengeSpecSolverDns01CloudflareApiTokenSecretRefPatch"]:
        return pulumi.get(self, "api_token_secret_ref")

    @property
    @pulumi.getter
    def email(self) -> Optional[str]:
        """
        Email of the account, only required when using API key based authentication.
        """
        return pulumi.get(self, "email")


@pulumi.output_type
class ChallengeSpecSolverDns01Digitalocean(dict):
    """
    Use the DigitalOcean DNS API to manage DNS01 challenge records.
    """

    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "tokenSecretRef":
            suggest = "token_secret_ref"

        if suggest:
            pulumi.log.warn(
                f"Key '{key}' not found in ChallengeSpecSolverDns01Digitalocean. Access the value via the '{suggest}' property getter instead."
            )

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverDns01Digitalocean.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default=None) -> Any:
        ChallengeSpecSolverDns01Digitalocean.__key_warning(key)
        return super().get(key, default)

    def __init__(
        __self__,
        *,
        token_secret_ref: Optional[
            "outputs.ChallengeSpecSolverDns01DigitaloceanTokenSecretRef"
        ] = None,
    ):
        """
        Use the DigitalOcean DNS API to manage DNS01 challenge records.
        """
        if token_secret_ref is not None:
            pulumi.set(__self__, "token_secret_ref", token_secret_ref)

    @property
    @pulumi.getter(name="tokenSecretRef")
    def token_secret_ref(
        self,
    ) -> Optional["outputs.ChallengeSpecSolverDns01DigitaloceanTokenSecretRef"]:
        return pulumi.get(self, "token_secret_ref")


@pulumi.output_type
class ChallengeSpecSolverDns01DigitaloceanPatch(dict):
    """
    Use the DigitalOcean DNS API to manage DNS01 challenge records.
    """

    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "tokenSecretRef":
            suggest = "token_secret_ref"

        if suggest:
            pulumi.log.warn(
                f"Key '{key}' not found in ChallengeSpecSolverDns01DigitaloceanPatch. Access the value via the '{suggest}' property getter instead."
            )

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverDns01DigitaloceanPatch.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default=None) -> Any:
        ChallengeSpecSolverDns01DigitaloceanPatch.__key_warning(key)
        return super().get(key, default)

    def __init__(
        __self__,
        *,
        token_secret_ref: Optional[
            "outputs.ChallengeSpecSolverDns01DigitaloceanTokenSecretRefPatch"
        ] = None,
    ):
        """
        Use the DigitalOcean DNS API to manage DNS01 challenge records.
        """
        if token_secret_ref is not None:
            pulumi.set(__self__, "token_secret_ref", token_secret_ref)

    @property
    @pulumi.getter(name="tokenSecretRef")
    def token_secret_ref(
        self,
    ) -> Optional["outputs.ChallengeSpecSolverDns01DigitaloceanTokenSecretRefPatch"]:
        return pulumi.get(self, "token_secret_ref")


@pulumi.output_type
class ChallengeSpecSolverDns01DigitaloceanTokenSecretRef(dict):
    """
    A reference to a specific 'key' within a Secret resource.
    In some instances, `key` is a required field.
    """

    def __init__(__self__, *, key: Optional[str] = None, name: Optional[str] = None):
        """
        A reference to a specific 'key' within a Secret resource.
        In some instances, `key` is a required field.
        :param str key: The key of the entry in the Secret resource's `data` field to be used.
               Some instances of this field may be defaulted, in others it may be
               required.
        :param str name: Name of the resource being referred to.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ChallengeSpecSolverDns01DigitaloceanTokenSecretRefPatch(dict):
    """
    A reference to a specific 'key' within a Secret resource.
    In some instances, `key` is a required field.
    """

    def __init__(__self__, *, key: Optional[str] = None, name: Optional[str] = None):
        """
        A reference to a specific 'key' within a Secret resource.
        In some instances, `key` is a required field.
        :param str key: The key of the entry in the Secret resource's `data` field to be used.
               Some instances of this field may be defaulted, in others it may be
               required.
        :param str name: Name of the resource being referred to.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ChallengeSpecSolverDns01Patch(dict):
    """
    Configures cert-manager to attempt to complete authorizations by
    performing the DNS01 challenge flow.
    """

    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "acmeDNS":
            suggest = "acme_dns"
        elif key == "azureDNS":
            suggest = "azure_dns"
        elif key == "cloudDNS":
            suggest = "cloud_dns"
        elif key == "cnameStrategy":
            suggest = "cname_strategy"

        if suggest:
            pulumi.log.warn(
                f"Key '{key}' not found in ChallengeSpecSolverDns01Patch. Access the value via the '{suggest}' property getter instead."
            )

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverDns01Patch.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default=None) -> Any:
        ChallengeSpecSolverDns01Patch.__key_warning(key)
        return super().get(key, default)

    def __init__(
        __self__,
        *,
        acme_dns: Optional["outputs.ChallengeSpecSolverDns01AcmeDNSPatch"] = None,
        akamai: Optional["outputs.ChallengeSpecSolverDns01AkamaiPatch"] = None,
        azure_dns: Optional["outputs.ChallengeSpecSolverDns01AzureDNSPatch"] = None,
        cloud_dns: Optional["outputs.ChallengeSpecSolverDns01CloudDNSPatch"] = None,
        cloudflare: Optional["outputs.ChallengeSpecSolverDns01CloudflarePatch"] = None,
        cname_strategy: Optional[str] = None,
        digitalocean: Optional[
            "outputs.ChallengeSpecSolverDns01DigitaloceanPatch"
        ] = None,
        rfc2136: Optional["outputs.ChallengeSpecSolverDns01Rfc2136Patch"] = None,
        route53: Optional["outputs.ChallengeSpecSolverDns01Route53Patch"] = None,
        webhook: Optional["outputs.ChallengeSpecSolverDns01WebhookPatch"] = None,
    ):
        """
        Configures cert-manager to attempt to complete authorizations by
        performing the DNS01 challenge flow.
        :param str cname_strategy: CNAMEStrategy configures how the DNS01 provider should handle CNAME
               records when found in DNS zones.
        """
        if acme_dns is not None:
            pulumi.set(__self__, "acme_dns", acme_dns)
        if akamai is not None:
            pulumi.set(__self__, "akamai", akamai)
        if azure_dns is not None:
            pulumi.set(__self__, "azure_dns", azure_dns)
        if cloud_dns is not None:
            pulumi.set(__self__, "cloud_dns", cloud_dns)
        if cloudflare is not None:
            pulumi.set(__self__, "cloudflare", cloudflare)
        if cname_strategy is not None:
            pulumi.set(__self__, "cname_strategy", cname_strategy)
        if digitalocean is not None:
            pulumi.set(__self__, "digitalocean", digitalocean)
        if rfc2136 is not None:
            pulumi.set(__self__, "rfc2136", rfc2136)
        if route53 is not None:
            pulumi.set(__self__, "route53", route53)
        if webhook is not None:
            pulumi.set(__self__, "webhook", webhook)

    @property
    @pulumi.getter(name="acmeDNS")
    def acme_dns(self) -> Optional["outputs.ChallengeSpecSolverDns01AcmeDNSPatch"]:
        return pulumi.get(self, "acme_dns")

    @property
    @pulumi.getter
    def akamai(self) -> Optional["outputs.ChallengeSpecSolverDns01AkamaiPatch"]:
        return pulumi.get(self, "akamai")

    @property
    @pulumi.getter(name="azureDNS")
    def azure_dns(self) -> Optional["outputs.ChallengeSpecSolverDns01AzureDNSPatch"]:
        return pulumi.get(self, "azure_dns")

    @property
    @pulumi.getter(name="cloudDNS")
    def cloud_dns(self) -> Optional["outputs.ChallengeSpecSolverDns01CloudDNSPatch"]:
        return pulumi.get(self, "cloud_dns")

    @property
    @pulumi.getter
    def cloudflare(self) -> Optional["outputs.ChallengeSpecSolverDns01CloudflarePatch"]:
        return pulumi.get(self, "cloudflare")

    @property
    @pulumi.getter(name="cnameStrategy")
    def cname_strategy(self) -> Optional[str]:
        """
        CNAMEStrategy configures how the DNS01 provider should handle CNAME
        records when found in DNS zones.
        """
        return pulumi.get(self, "cname_strategy")

    @property
    @pulumi.getter
    def digitalocean(
        self,
    ) -> Optional["outputs.ChallengeSpecSolverDns01DigitaloceanPatch"]:
        return pulumi.get(self, "digitalocean")

    @property
    @pulumi.getter
    def rfc2136(self) -> Optional["outputs.ChallengeSpecSolverDns01Rfc2136Patch"]:
        return pulumi.get(self, "rfc2136")

    @property
    @pulumi.getter
    def route53(self) -> Optional["outputs.ChallengeSpecSolverDns01Route53Patch"]:
        return pulumi.get(self, "route53")

    @property
    @pulumi.getter
    def webhook(self) -> Optional["outputs.ChallengeSpecSolverDns01WebhookPatch"]:
        return pulumi.get(self, "webhook")


@pulumi.output_type
class ChallengeSpecSolverDns01Rfc2136(dict):
    """
    Use RFC2136 ("Dynamic Updates in the Domain Name System") (https://datatracker.ietf.org/doc/rfc2136/)
    to manage DNS01 challenge records.
    """

    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "tsigAlgorithm":
            suggest = "tsig_algorithm"
        elif key == "tsigKeyName":
            suggest = "tsig_key_name"
        elif key == "tsigSecretSecretRef":
            suggest = "tsig_secret_secret_ref"

        if suggest:
            pulumi.log.warn(
                f"Key '{key}' not found in ChallengeSpecSolverDns01Rfc2136. Access the value via the '{suggest}' property getter instead."
            )

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverDns01Rfc2136.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default=None) -> Any:
        ChallengeSpecSolverDns01Rfc2136.__key_warning(key)
        return super().get(key, default)

    def __init__(
        __self__,
        *,
        nameserver: Optional[str] = None,
        tsig_algorithm: Optional[str] = None,
        tsig_key_name: Optional[str] = None,
        tsig_secret_secret_ref: Optional[
            "outputs.ChallengeSpecSolverDns01Rfc2136TsigSecretSecretRef"
        ] = None,
    ):
        """
        Use RFC2136 ("Dynamic Updates in the Domain Name System") (https://datatracker.ietf.org/doc/rfc2136/)
        to manage DNS01 challenge records.
        :param str nameserver: The IP address or hostname of an authoritative DNS server supporting
               RFC2136 in the form host:port. If the host is an IPv6 address it must be
               enclosed in square brackets (e.g [2001:db8::1]) ; port is optional.
               This field is required.
        :param str tsig_algorithm: The TSIG Algorithm configured in the DNS supporting RFC2136. Used only
               when ``tsigSecretSecretRef`` and ``tsigKeyName`` are defined.
               Supported values are (case-insensitive): ``HMACMD5`` (default),
               ``HMACSHA1``, ``HMACSHA256`` or ``HMACSHA512``.
        :param str tsig_key_name: The TSIG Key name configured in the DNS.
               If ``tsigSecretSecretRef`` is defined, this field is required.
        """
        if nameserver is not None:
            pulumi.set(__self__, "nameserver", nameserver)
        if tsig_algorithm is not None:
            pulumi.set(__self__, "tsig_algorithm", tsig_algorithm)
        if tsig_key_name is not None:
            pulumi.set(__self__, "tsig_key_name", tsig_key_name)
        if tsig_secret_secret_ref is not None:
            pulumi.set(__self__, "tsig_secret_secret_ref", tsig_secret_secret_ref)

    @property
    @pulumi.getter
    def nameserver(self) -> Optional[str]:
        """
        The IP address or hostname of an authoritative DNS server supporting
        RFC2136 in the form host:port. If the host is an IPv6 address it must be
        enclosed in square brackets (e.g [2001:db8::1]) ; port is optional.
        This field is required.
        """
        return pulumi.get(self, "nameserver")

    @property
    @pulumi.getter(name="tsigAlgorithm")
    def tsig_algorithm(self) -> Optional[str]:
        """
        The TSIG Algorithm configured in the DNS supporting RFC2136. Used only
        when ``tsigSecretSecretRef`` and ``tsigKeyName`` are defined.
        Supported values are (case-insensitive): ``HMACMD5`` (default),
        ``HMACSHA1``, ``HMACSHA256`` or ``HMACSHA512``.
        """
        return pulumi.get(self, "tsig_algorithm")

    @property
    @pulumi.getter(name="tsigKeyName")
    def tsig_key_name(self) -> Optional[str]:
        """
        The TSIG Key name configured in the DNS.
        If ``tsigSecretSecretRef`` is defined, this field is required.
        """
        return pulumi.get(self, "tsig_key_name")

    @property
    @pulumi.getter(name="tsigSecretSecretRef")
    def tsig_secret_secret_ref(
        self,
    ) -> Optional["outputs.ChallengeSpecSolverDns01Rfc2136TsigSecretSecretRef"]:
        return pulumi.get(self, "tsig_secret_secret_ref")


@pulumi.output_type
class ChallengeSpecSolverDns01Rfc2136Patch(dict):
    """
    Use RFC2136 ("Dynamic Updates in the Domain Name System") (https://datatracker.ietf.org/doc/rfc2136/)
    to manage DNS01 challenge records.
    """

    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "tsigAlgorithm":
            suggest = "tsig_algorithm"
        elif key == "tsigKeyName":
            suggest = "tsig_key_name"
        elif key == "tsigSecretSecretRef":
            suggest = "tsig_secret_secret_ref"

        if suggest:
            pulumi.log.warn(
                f"Key '{key}' not found in ChallengeSpecSolverDns01Rfc2136Patch. Access the value via the '{suggest}' property getter instead."
            )

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverDns01Rfc2136Patch.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default=None) -> Any:
        ChallengeSpecSolverDns01Rfc2136Patch.__key_warning(key)
        return super().get(key, default)

    def __init__(
        __self__,
        *,
        nameserver: Optional[str] = None,
        tsig_algorithm: Optional[str] = None,
        tsig_key_name: Optional[str] = None,
        tsig_secret_secret_ref: Optional[
            "outputs.ChallengeSpecSolverDns01Rfc2136TsigSecretSecretRefPatch"
        ] = None,
    ):
        """
        Use RFC2136 ("Dynamic Updates in the Domain Name System") (https://datatracker.ietf.org/doc/rfc2136/)
        to manage DNS01 challenge records.
        :param str nameserver: The IP address or hostname of an authoritative DNS server supporting
               RFC2136 in the form host:port. If the host is an IPv6 address it must be
               enclosed in square brackets (e.g [2001:db8::1]) ; port is optional.
               This field is required.
        :param str tsig_algorithm: The TSIG Algorithm configured in the DNS supporting RFC2136. Used only
               when ``tsigSecretSecretRef`` and ``tsigKeyName`` are defined.
               Supported values are (case-insensitive): ``HMACMD5`` (default),
               ``HMACSHA1``, ``HMACSHA256`` or ``HMACSHA512``.
        :param str tsig_key_name: The TSIG Key name configured in the DNS.
               If ``tsigSecretSecretRef`` is defined, this field is required.
        """
        if nameserver is not None:
            pulumi.set(__self__, "nameserver", nameserver)
        if tsig_algorithm is not None:
            pulumi.set(__self__, "tsig_algorithm", tsig_algorithm)
        if tsig_key_name is not None:
            pulumi.set(__self__, "tsig_key_name", tsig_key_name)
        if tsig_secret_secret_ref is not None:
            pulumi.set(__self__, "tsig_secret_secret_ref", tsig_secret_secret_ref)

    @property
    @pulumi.getter
    def nameserver(self) -> Optional[str]:
        """
        The IP address or hostname of an authoritative DNS server supporting
        RFC2136 in the form host:port. If the host is an IPv6 address it must be
        enclosed in square brackets (e.g [2001:db8::1]) ; port is optional.
        This field is required.
        """
        return pulumi.get(self, "nameserver")

    @property
    @pulumi.getter(name="tsigAlgorithm")
    def tsig_algorithm(self) -> Optional[str]:
        """
        The TSIG Algorithm configured in the DNS supporting RFC2136. Used only
        when ``tsigSecretSecretRef`` and ``tsigKeyName`` are defined.
        Supported values are (case-insensitive): ``HMACMD5`` (default),
        ``HMACSHA1``, ``HMACSHA256`` or ``HMACSHA512``.
        """
        return pulumi.get(self, "tsig_algorithm")

    @property
    @pulumi.getter(name="tsigKeyName")
    def tsig_key_name(self) -> Optional[str]:
        """
        The TSIG Key name configured in the DNS.
        If ``tsigSecretSecretRef`` is defined, this field is required.
        """
        return pulumi.get(self, "tsig_key_name")

    @property
    @pulumi.getter(name="tsigSecretSecretRef")
    def tsig_secret_secret_ref(
        self,
    ) -> Optional["outputs.ChallengeSpecSolverDns01Rfc2136TsigSecretSecretRefPatch"]:
        return pulumi.get(self, "tsig_secret_secret_ref")


@pulumi.output_type
class ChallengeSpecSolverDns01Rfc2136TsigSecretSecretRef(dict):
    """
    The name of the secret containing the TSIG value.
    If ``tsigKeyName`` is defined, this field is required.
    """

    def __init__(__self__, *, key: Optional[str] = None, name: Optional[str] = None):
        """
        The name of the secret containing the TSIG value.
        If ``tsigKeyName`` is defined, this field is required.
        :param str key: The key of the entry in the Secret resource's `data` field to be used.
               Some instances of this field may be defaulted, in others it may be
               required.
        :param str name: Name of the resource being referred to.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ChallengeSpecSolverDns01Rfc2136TsigSecretSecretRefPatch(dict):
    """
    The name of the secret containing the TSIG value.
    If ``tsigKeyName`` is defined, this field is required.
    """

    def __init__(__self__, *, key: Optional[str] = None, name: Optional[str] = None):
        """
        The name of the secret containing the TSIG value.
        If ``tsigKeyName`` is defined, this field is required.
        :param str key: The key of the entry in the Secret resource's `data` field to be used.
               Some instances of this field may be defaulted, in others it may be
               required.
        :param str name: Name of the resource being referred to.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ChallengeSpecSolverDns01Route53(dict):
    """
    Use the AWS Route53 API to manage DNS01 challenge records.
    """

    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessKeyID":
            suggest = "access_key_id"
        elif key == "accessKeyIDSecretRef":
            suggest = "access_key_id_secret_ref"
        elif key == "hostedZoneID":
            suggest = "hosted_zone_id"
        elif key == "secretAccessKeySecretRef":
            suggest = "secret_access_key_secret_ref"

        if suggest:
            pulumi.log.warn(
                f"Key '{key}' not found in ChallengeSpecSolverDns01Route53. Access the value via the '{suggest}' property getter instead."
            )

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverDns01Route53.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default=None) -> Any:
        ChallengeSpecSolverDns01Route53.__key_warning(key)
        return super().get(key, default)

    def __init__(
        __self__,
        *,
        access_key_id: Optional[str] = None,
        access_key_id_secret_ref: Optional[
            "outputs.ChallengeSpecSolverDns01Route53AccessKeyIDSecretRef"
        ] = None,
        auth: Optional["outputs.ChallengeSpecSolverDns01Route53Auth"] = None,
        hosted_zone_id: Optional[str] = None,
        region: Optional[str] = None,
        role: Optional[str] = None,
        secret_access_key_secret_ref: Optional[
            "outputs.ChallengeSpecSolverDns01Route53SecretAccessKeySecretRef"
        ] = None,
    ):
        """
        Use the AWS Route53 API to manage DNS01 challenge records.
        :param str access_key_id: The AccessKeyID is used for authentication.
               Cannot be set when SecretAccessKeyID is set.
               If neither the Access Key nor Key ID are set, we fall-back to using env
               vars, shared credentials file or AWS Instance metadata,
               see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
        :param str hosted_zone_id: If set, the provider will manage only this zone in Route53 and will not do a lookup using the route53:ListHostedZonesByName api call.
        :param str region: Override the AWS region.

               Route53 is a global service and does not have regional endpoints but the
               region specified here (or via environment variables) is used as a hint to
               help compute the correct AWS credential scope and partition when it
               connects to Route53. See:
               - [Amazon Route 53 endpoints and quotas](https://docs.aws.amazon.com/general/latest/gr/r53.html)
               - [Global services](https://docs.aws.amazon.com/whitepapers/latest/aws-fault-isolation-boundaries/global-services.html)

               If you omit this region field, cert-manager will use the region from
               AWS_REGION and AWS_DEFAULT_REGION environment variables, if they are set
               in the cert-manager controller Pod.

               The `region` field is not needed if you use [IAM Roles for Service Accounts (IRSA)](https://docs.aws.amazon.com/eks/latest/userguide/iam-roles-for-service-accounts.html).
               Instead an AWS_REGION environment variable is added to the cert-manager controller Pod by:
               [Amazon EKS Pod Identity Webhook](https://github.com/aws/amazon-eks-pod-identity-webhook).
               In this case this `region` field value is ignored.

               The `region` field is not needed if you use [EKS Pod Identities](https://docs.aws.amazon.com/eks/latest/userguide/pod-identities.html).
               Instead an AWS_REGION environment variable is added to the cert-manager controller Pod by:
               [Amazon EKS Pod Identity Agent](https://github.com/aws/eks-pod-identity-agent),
               In this case this `region` field value is ignored.
        :param str role: Role is a Role ARN which the Route53 provider will assume using either the explicit credentials AccessKeyID/SecretAccessKey
               or the inferred credentials from environment variables, shared credentials file or AWS Instance metadata
        """
        if access_key_id is not None:
            pulumi.set(__self__, "access_key_id", access_key_id)
        if access_key_id_secret_ref is not None:
            pulumi.set(__self__, "access_key_id_secret_ref", access_key_id_secret_ref)
        if auth is not None:
            pulumi.set(__self__, "auth", auth)
        if hosted_zone_id is not None:
            pulumi.set(__self__, "hosted_zone_id", hosted_zone_id)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if secret_access_key_secret_ref is not None:
            pulumi.set(
                __self__, "secret_access_key_secret_ref", secret_access_key_secret_ref
            )

    @property
    @pulumi.getter(name="accessKeyID")
    def access_key_id(self) -> Optional[str]:
        """
        The AccessKeyID is used for authentication.
        Cannot be set when SecretAccessKeyID is set.
        If neither the Access Key nor Key ID are set, we fall-back to using env
        vars, shared credentials file or AWS Instance metadata,
        see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
        """
        return pulumi.get(self, "access_key_id")

    @property
    @pulumi.getter(name="accessKeyIDSecretRef")
    def access_key_id_secret_ref(
        self,
    ) -> Optional["outputs.ChallengeSpecSolverDns01Route53AccessKeyIDSecretRef"]:
        return pulumi.get(self, "access_key_id_secret_ref")

    @property
    @pulumi.getter
    def auth(self) -> Optional["outputs.ChallengeSpecSolverDns01Route53Auth"]:
        return pulumi.get(self, "auth")

    @property
    @pulumi.getter(name="hostedZoneID")
    def hosted_zone_id(self) -> Optional[str]:
        """
        If set, the provider will manage only this zone in Route53 and will not do a lookup using the route53:ListHostedZonesByName api call.
        """
        return pulumi.get(self, "hosted_zone_id")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        """
        Override the AWS region.

        Route53 is a global service and does not have regional endpoints but the
        region specified here (or via environment variables) is used as a hint to
        help compute the correct AWS credential scope and partition when it
        connects to Route53. See:
        - [Amazon Route 53 endpoints and quotas](https://docs.aws.amazon.com/general/latest/gr/r53.html)
        - [Global services](https://docs.aws.amazon.com/whitepapers/latest/aws-fault-isolation-boundaries/global-services.html)

        If you omit this region field, cert-manager will use the region from
        AWS_REGION and AWS_DEFAULT_REGION environment variables, if they are set
        in the cert-manager controller Pod.

        The `region` field is not needed if you use [IAM Roles for Service Accounts (IRSA)](https://docs.aws.amazon.com/eks/latest/userguide/iam-roles-for-service-accounts.html).
        Instead an AWS_REGION environment variable is added to the cert-manager controller Pod by:
        [Amazon EKS Pod Identity Webhook](https://github.com/aws/amazon-eks-pod-identity-webhook).
        In this case this `region` field value is ignored.

        The `region` field is not needed if you use [EKS Pod Identities](https://docs.aws.amazon.com/eks/latest/userguide/pod-identities.html).
        Instead an AWS_REGION environment variable is added to the cert-manager controller Pod by:
        [Amazon EKS Pod Identity Agent](https://github.com/aws/eks-pod-identity-agent),
        In this case this `region` field value is ignored.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def role(self) -> Optional[str]:
        """
        Role is a Role ARN which the Route53 provider will assume using either the explicit credentials AccessKeyID/SecretAccessKey
        or the inferred credentials from environment variables, shared credentials file or AWS Instance metadata
        """
        return pulumi.get(self, "role")

    @property
    @pulumi.getter(name="secretAccessKeySecretRef")
    def secret_access_key_secret_ref(
        self,
    ) -> Optional["outputs.ChallengeSpecSolverDns01Route53SecretAccessKeySecretRef"]:
        return pulumi.get(self, "secret_access_key_secret_ref")


@pulumi.output_type
class ChallengeSpecSolverDns01Route53AccessKeyIDSecretRef(dict):
    """
    The SecretAccessKey is used for authentication. If set, pull the AWS
    access key ID from a key within a Kubernetes Secret.
    Cannot be set when AccessKeyID is set.
    If neither the Access Key nor Key ID are set, we fall-back to using env
    vars, shared credentials file or AWS Instance metadata,
    see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
    """

    def __init__(__self__, *, key: Optional[str] = None, name: Optional[str] = None):
        """
        The SecretAccessKey is used for authentication. If set, pull the AWS
        access key ID from a key within a Kubernetes Secret.
        Cannot be set when AccessKeyID is set.
        If neither the Access Key nor Key ID are set, we fall-back to using env
        vars, shared credentials file or AWS Instance metadata,
        see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
        :param str key: The key of the entry in the Secret resource's `data` field to be used.
               Some instances of this field may be defaulted, in others it may be
               required.
        :param str name: Name of the resource being referred to.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ChallengeSpecSolverDns01Route53AccessKeyIDSecretRefPatch(dict):
    """
    The SecretAccessKey is used for authentication. If set, pull the AWS
    access key ID from a key within a Kubernetes Secret.
    Cannot be set when AccessKeyID is set.
    If neither the Access Key nor Key ID are set, we fall-back to using env
    vars, shared credentials file or AWS Instance metadata,
    see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
    """

    def __init__(__self__, *, key: Optional[str] = None, name: Optional[str] = None):
        """
        The SecretAccessKey is used for authentication. If set, pull the AWS
        access key ID from a key within a Kubernetes Secret.
        Cannot be set when AccessKeyID is set.
        If neither the Access Key nor Key ID are set, we fall-back to using env
        vars, shared credentials file or AWS Instance metadata,
        see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
        :param str key: The key of the entry in the Secret resource's `data` field to be used.
               Some instances of this field may be defaulted, in others it may be
               required.
        :param str name: Name of the resource being referred to.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ChallengeSpecSolverDns01Route53Auth(dict):
    """
    Auth configures how cert-manager authenticates.
    """

    def __init__(
        __self__,
        *,
        kubernetes: Optional[
            "outputs.ChallengeSpecSolverDns01Route53AuthKubernetes"
        ] = None,
    ):
        """
        Auth configures how cert-manager authenticates.
        """
        if kubernetes is not None:
            pulumi.set(__self__, "kubernetes", kubernetes)

    @property
    @pulumi.getter
    def kubernetes(
        self,
    ) -> Optional["outputs.ChallengeSpecSolverDns01Route53AuthKubernetes"]:
        return pulumi.get(self, "kubernetes")


@pulumi.output_type
class ChallengeSpecSolverDns01Route53AuthKubernetes(dict):
    """
    Kubernetes authenticates with Route53 using AssumeRoleWithWebIdentity
    by passing a bound ServiceAccount token.
    """

    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "serviceAccountRef":
            suggest = "service_account_ref"

        if suggest:
            pulumi.log.warn(
                f"Key '{key}' not found in ChallengeSpecSolverDns01Route53AuthKubernetes. Access the value via the '{suggest}' property getter instead."
            )

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverDns01Route53AuthKubernetes.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default=None) -> Any:
        ChallengeSpecSolverDns01Route53AuthKubernetes.__key_warning(key)
        return super().get(key, default)

    def __init__(
        __self__,
        *,
        service_account_ref: Optional[
            "outputs.ChallengeSpecSolverDns01Route53AuthKubernetesServiceAccountRef"
        ] = None,
    ):
        """
        Kubernetes authenticates with Route53 using AssumeRoleWithWebIdentity
        by passing a bound ServiceAccount token.
        """
        if service_account_ref is not None:
            pulumi.set(__self__, "service_account_ref", service_account_ref)

    @property
    @pulumi.getter(name="serviceAccountRef")
    def service_account_ref(
        self,
    ) -> Optional[
        "outputs.ChallengeSpecSolverDns01Route53AuthKubernetesServiceAccountRef"
    ]:
        return pulumi.get(self, "service_account_ref")


@pulumi.output_type
class ChallengeSpecSolverDns01Route53AuthKubernetesPatch(dict):
    """
    Kubernetes authenticates with Route53 using AssumeRoleWithWebIdentity
    by passing a bound ServiceAccount token.
    """

    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "serviceAccountRef":
            suggest = "service_account_ref"

        if suggest:
            pulumi.log.warn(
                f"Key '{key}' not found in ChallengeSpecSolverDns01Route53AuthKubernetesPatch. Access the value via the '{suggest}' property getter instead."
            )

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverDns01Route53AuthKubernetesPatch.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default=None) -> Any:
        ChallengeSpecSolverDns01Route53AuthKubernetesPatch.__key_warning(key)
        return super().get(key, default)

    def __init__(
        __self__,
        *,
        service_account_ref: Optional[
            "outputs.ChallengeSpecSolverDns01Route53AuthKubernetesServiceAccountRefPatch"
        ] = None,
    ):
        """
        Kubernetes authenticates with Route53 using AssumeRoleWithWebIdentity
        by passing a bound ServiceAccount token.
        """
        if service_account_ref is not None:
            pulumi.set(__self__, "service_account_ref", service_account_ref)

    @property
    @pulumi.getter(name="serviceAccountRef")
    def service_account_ref(
        self,
    ) -> Optional[
        "outputs.ChallengeSpecSolverDns01Route53AuthKubernetesServiceAccountRefPatch"
    ]:
        return pulumi.get(self, "service_account_ref")


@pulumi.output_type
class ChallengeSpecSolverDns01Route53AuthKubernetesServiceAccountRef(dict):
    """
    A reference to a service account that will be used to request a bound
    token (also known as "projected token"). To use this field, you must
    configure an RBAC rule to let cert-manager request a token.
    """

    def __init__(
        __self__,
        *,
        audiences: Optional[Sequence[str]] = None,
        name: Optional[str] = None,
    ):
        """
        A reference to a service account that will be used to request a bound
        token (also known as "projected token"). To use this field, you must
        configure an RBAC rule to let cert-manager request a token.
        :param Sequence[str] audiences: TokenAudiences is an optional list of audiences to include in the
               token passed to AWS. The default token consisting of the issuer's namespace
               and name is always included.
               If unset the audience defaults to `sts.amazonaws.com`.
        :param str name: Name of the ServiceAccount used to request a token.
        """
        if audiences is not None:
            pulumi.set(__self__, "audiences", audiences)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def audiences(self) -> Optional[Sequence[str]]:
        """
        TokenAudiences is an optional list of audiences to include in the
        token passed to AWS. The default token consisting of the issuer's namespace
        and name is always included.
        If unset the audience defaults to `sts.amazonaws.com`.
        """
        return pulumi.get(self, "audiences")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the ServiceAccount used to request a token.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ChallengeSpecSolverDns01Route53AuthKubernetesServiceAccountRefPatch(dict):
    """
    A reference to a service account that will be used to request a bound
    token (also known as "projected token"). To use this field, you must
    configure an RBAC rule to let cert-manager request a token.
    """

    def __init__(
        __self__,
        *,
        audiences: Optional[Sequence[str]] = None,
        name: Optional[str] = None,
    ):
        """
        A reference to a service account that will be used to request a bound
        token (also known as "projected token"). To use this field, you must
        configure an RBAC rule to let cert-manager request a token.
        :param Sequence[str] audiences: TokenAudiences is an optional list of audiences to include in the
               token passed to AWS. The default token consisting of the issuer's namespace
               and name is always included.
               If unset the audience defaults to `sts.amazonaws.com`.
        :param str name: Name of the ServiceAccount used to request a token.
        """
        if audiences is not None:
            pulumi.set(__self__, "audiences", audiences)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def audiences(self) -> Optional[Sequence[str]]:
        """
        TokenAudiences is an optional list of audiences to include in the
        token passed to AWS. The default token consisting of the issuer's namespace
        and name is always included.
        If unset the audience defaults to `sts.amazonaws.com`.
        """
        return pulumi.get(self, "audiences")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the ServiceAccount used to request a token.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ChallengeSpecSolverDns01Route53AuthPatch(dict):
    """
    Auth configures how cert-manager authenticates.
    """

    def __init__(
        __self__,
        *,
        kubernetes: Optional[
            "outputs.ChallengeSpecSolverDns01Route53AuthKubernetesPatch"
        ] = None,
    ):
        """
        Auth configures how cert-manager authenticates.
        """
        if kubernetes is not None:
            pulumi.set(__self__, "kubernetes", kubernetes)

    @property
    @pulumi.getter
    def kubernetes(
        self,
    ) -> Optional["outputs.ChallengeSpecSolverDns01Route53AuthKubernetesPatch"]:
        return pulumi.get(self, "kubernetes")


@pulumi.output_type
class ChallengeSpecSolverDns01Route53Patch(dict):
    """
    Use the AWS Route53 API to manage DNS01 challenge records.
    """

    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessKeyID":
            suggest = "access_key_id"
        elif key == "accessKeyIDSecretRef":
            suggest = "access_key_id_secret_ref"
        elif key == "hostedZoneID":
            suggest = "hosted_zone_id"
        elif key == "secretAccessKeySecretRef":
            suggest = "secret_access_key_secret_ref"

        if suggest:
            pulumi.log.warn(
                f"Key '{key}' not found in ChallengeSpecSolverDns01Route53Patch. Access the value via the '{suggest}' property getter instead."
            )

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverDns01Route53Patch.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default=None) -> Any:
        ChallengeSpecSolverDns01Route53Patch.__key_warning(key)
        return super().get(key, default)

    def __init__(
        __self__,
        *,
        access_key_id: Optional[str] = None,
        access_key_id_secret_ref: Optional[
            "outputs.ChallengeSpecSolverDns01Route53AccessKeyIDSecretRefPatch"
        ] = None,
        auth: Optional["outputs.ChallengeSpecSolverDns01Route53AuthPatch"] = None,
        hosted_zone_id: Optional[str] = None,
        region: Optional[str] = None,
        role: Optional[str] = None,
        secret_access_key_secret_ref: Optional[
            "outputs.ChallengeSpecSolverDns01Route53SecretAccessKeySecretRefPatch"
        ] = None,
    ):
        """
        Use the AWS Route53 API to manage DNS01 challenge records.
        :param str access_key_id: The AccessKeyID is used for authentication.
               Cannot be set when SecretAccessKeyID is set.
               If neither the Access Key nor Key ID are set, we fall-back to using env
               vars, shared credentials file or AWS Instance metadata,
               see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
        :param str hosted_zone_id: If set, the provider will manage only this zone in Route53 and will not do a lookup using the route53:ListHostedZonesByName api call.
        :param str region: Override the AWS region.

               Route53 is a global service and does not have regional endpoints but the
               region specified here (or via environment variables) is used as a hint to
               help compute the correct AWS credential scope and partition when it
               connects to Route53. See:
               - [Amazon Route 53 endpoints and quotas](https://docs.aws.amazon.com/general/latest/gr/r53.html)
               - [Global services](https://docs.aws.amazon.com/whitepapers/latest/aws-fault-isolation-boundaries/global-services.html)

               If you omit this region field, cert-manager will use the region from
               AWS_REGION and AWS_DEFAULT_REGION environment variables, if they are set
               in the cert-manager controller Pod.

               The `region` field is not needed if you use [IAM Roles for Service Accounts (IRSA)](https://docs.aws.amazon.com/eks/latest/userguide/iam-roles-for-service-accounts.html).
               Instead an AWS_REGION environment variable is added to the cert-manager controller Pod by:
               [Amazon EKS Pod Identity Webhook](https://github.com/aws/amazon-eks-pod-identity-webhook).
               In this case this `region` field value is ignored.

               The `region` field is not needed if you use [EKS Pod Identities](https://docs.aws.amazon.com/eks/latest/userguide/pod-identities.html).
               Instead an AWS_REGION environment variable is added to the cert-manager controller Pod by:
               [Amazon EKS Pod Identity Agent](https://github.com/aws/eks-pod-identity-agent),
               In this case this `region` field value is ignored.
        :param str role: Role is a Role ARN which the Route53 provider will assume using either the explicit credentials AccessKeyID/SecretAccessKey
               or the inferred credentials from environment variables, shared credentials file or AWS Instance metadata
        """
        if access_key_id is not None:
            pulumi.set(__self__, "access_key_id", access_key_id)
        if access_key_id_secret_ref is not None:
            pulumi.set(__self__, "access_key_id_secret_ref", access_key_id_secret_ref)
        if auth is not None:
            pulumi.set(__self__, "auth", auth)
        if hosted_zone_id is not None:
            pulumi.set(__self__, "hosted_zone_id", hosted_zone_id)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if secret_access_key_secret_ref is not None:
            pulumi.set(
                __self__, "secret_access_key_secret_ref", secret_access_key_secret_ref
            )

    @property
    @pulumi.getter(name="accessKeyID")
    def access_key_id(self) -> Optional[str]:
        """
        The AccessKeyID is used for authentication.
        Cannot be set when SecretAccessKeyID is set.
        If neither the Access Key nor Key ID are set, we fall-back to using env
        vars, shared credentials file or AWS Instance metadata,
        see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
        """
        return pulumi.get(self, "access_key_id")

    @property
    @pulumi.getter(name="accessKeyIDSecretRef")
    def access_key_id_secret_ref(
        self,
    ) -> Optional["outputs.ChallengeSpecSolverDns01Route53AccessKeyIDSecretRefPatch"]:
        return pulumi.get(self, "access_key_id_secret_ref")

    @property
    @pulumi.getter
    def auth(self) -> Optional["outputs.ChallengeSpecSolverDns01Route53AuthPatch"]:
        return pulumi.get(self, "auth")

    @property
    @pulumi.getter(name="hostedZoneID")
    def hosted_zone_id(self) -> Optional[str]:
        """
        If set, the provider will manage only this zone in Route53 and will not do a lookup using the route53:ListHostedZonesByName api call.
        """
        return pulumi.get(self, "hosted_zone_id")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        """
        Override the AWS region.

        Route53 is a global service and does not have regional endpoints but the
        region specified here (or via environment variables) is used as a hint to
        help compute the correct AWS credential scope and partition when it
        connects to Route53. See:
        - [Amazon Route 53 endpoints and quotas](https://docs.aws.amazon.com/general/latest/gr/r53.html)
        - [Global services](https://docs.aws.amazon.com/whitepapers/latest/aws-fault-isolation-boundaries/global-services.html)

        If you omit this region field, cert-manager will use the region from
        AWS_REGION and AWS_DEFAULT_REGION environment variables, if they are set
        in the cert-manager controller Pod.

        The `region` field is not needed if you use [IAM Roles for Service Accounts (IRSA)](https://docs.aws.amazon.com/eks/latest/userguide/iam-roles-for-service-accounts.html).
        Instead an AWS_REGION environment variable is added to the cert-manager controller Pod by:
        [Amazon EKS Pod Identity Webhook](https://github.com/aws/amazon-eks-pod-identity-webhook).
        In this case this `region` field value is ignored.

        The `region` field is not needed if you use [EKS Pod Identities](https://docs.aws.amazon.com/eks/latest/userguide/pod-identities.html).
        Instead an AWS_REGION environment variable is added to the cert-manager controller Pod by:
        [Amazon EKS Pod Identity Agent](https://github.com/aws/eks-pod-identity-agent),
        In this case this `region` field value is ignored.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def role(self) -> Optional[str]:
        """
        Role is a Role ARN which the Route53 provider will assume using either the explicit credentials AccessKeyID/SecretAccessKey
        or the inferred credentials from environment variables, shared credentials file or AWS Instance metadata
        """
        return pulumi.get(self, "role")

    @property
    @pulumi.getter(name="secretAccessKeySecretRef")
    def secret_access_key_secret_ref(
        self,
    ) -> Optional[
        "outputs.ChallengeSpecSolverDns01Route53SecretAccessKeySecretRefPatch"
    ]:
        return pulumi.get(self, "secret_access_key_secret_ref")


@pulumi.output_type
class ChallengeSpecSolverDns01Route53SecretAccessKeySecretRef(dict):
    """
    The SecretAccessKey is used for authentication.
    If neither the Access Key nor Key ID are set, we fall-back to using env
    vars, shared credentials file or AWS Instance metadata,
    see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
    """

    def __init__(__self__, *, key: Optional[str] = None, name: Optional[str] = None):
        """
        The SecretAccessKey is used for authentication.
        If neither the Access Key nor Key ID are set, we fall-back to using env
        vars, shared credentials file or AWS Instance metadata,
        see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
        :param str key: The key of the entry in the Secret resource's `data` field to be used.
               Some instances of this field may be defaulted, in others it may be
               required.
        :param str name: Name of the resource being referred to.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ChallengeSpecSolverDns01Route53SecretAccessKeySecretRefPatch(dict):
    """
    The SecretAccessKey is used for authentication.
    If neither the Access Key nor Key ID are set, we fall-back to using env
    vars, shared credentials file or AWS Instance metadata,
    see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
    """

    def __init__(__self__, *, key: Optional[str] = None, name: Optional[str] = None):
        """
        The SecretAccessKey is used for authentication.
        If neither the Access Key nor Key ID are set, we fall-back to using env
        vars, shared credentials file or AWS Instance metadata,
        see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
        :param str key: The key of the entry in the Secret resource's `data` field to be used.
               Some instances of this field may be defaulted, in others it may be
               required.
        :param str name: Name of the resource being referred to.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ChallengeSpecSolverDns01Webhook(dict):
    """
    Configure an external webhook based DNS01 challenge solver to manage
    DNS01 challenge records.
    """

    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "groupName":
            suggest = "group_name"
        elif key == "solverName":
            suggest = "solver_name"

        if suggest:
            pulumi.log.warn(
                f"Key '{key}' not found in ChallengeSpecSolverDns01Webhook. Access the value via the '{suggest}' property getter instead."
            )

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverDns01Webhook.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default=None) -> Any:
        ChallengeSpecSolverDns01Webhook.__key_warning(key)
        return super().get(key, default)

    def __init__(
        __self__,
        *,
        config: Optional[Mapping[str, Any]] = None,
        group_name: Optional[str] = None,
        solver_name: Optional[str] = None,
    ):
        """
        Configure an external webhook based DNS01 challenge solver to manage
        DNS01 challenge records.
        :param Mapping[str, Any] config: Additional configuration that should be passed to the webhook apiserver
               when challenges are processed.
               This can contain arbitrary JSON data.
               Secret values should not be specified in this stanza.
               If secret values are needed (e.g. credentials for a DNS service), you
               should use a SecretKeySelector to reference a Secret resource.
               For details on the schema of this field, consult the webhook provider
               implementation's documentation.
        :param str group_name: The API group name that should be used when POSTing ChallengePayload
               resources to the webhook apiserver.
               This should be the same as the GroupName specified in the webhook
               provider implementation.
        :param str solver_name: The name of the solver to use, as defined in the webhook provider
               implementation.
               This will typically be the name of the provider, e.g. 'cloudflare'.
        """
        if config is not None:
            pulumi.set(__self__, "config", config)
        if group_name is not None:
            pulumi.set(__self__, "group_name", group_name)
        if solver_name is not None:
            pulumi.set(__self__, "solver_name", solver_name)

    @property
    @pulumi.getter
    def config(self) -> Optional[Mapping[str, Any]]:
        """
        Additional configuration that should be passed to the webhook apiserver
        when challenges are processed.
        This can contain arbitrary JSON data.
        Secret values should not be specified in this stanza.
        If secret values are needed (e.g. credentials for a DNS service), you
        should use a SecretKeySelector to reference a Secret resource.
        For details on the schema of this field, consult the webhook provider
        implementation's documentation.
        """
        return pulumi.get(self, "config")

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> Optional[str]:
        """
        The API group name that should be used when POSTing ChallengePayload
        resources to the webhook apiserver.
        This should be the same as the GroupName specified in the webhook
        provider implementation.
        """
        return pulumi.get(self, "group_name")

    @property
    @pulumi.getter(name="solverName")
    def solver_name(self) -> Optional[str]:
        """
        The name of the solver to use, as defined in the webhook provider
        implementation.
        This will typically be the name of the provider, e.g. 'cloudflare'.
        """
        return pulumi.get(self, "solver_name")


@pulumi.output_type
class ChallengeSpecSolverDns01WebhookPatch(dict):
    """
    Configure an external webhook based DNS01 challenge solver to manage
    DNS01 challenge records.
    """

    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "groupName":
            suggest = "group_name"
        elif key == "solverName":
            suggest = "solver_name"

        if suggest:
            pulumi.log.warn(
                f"Key '{key}' not found in ChallengeSpecSolverDns01WebhookPatch. Access the value via the '{suggest}' property getter instead."
            )

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverDns01WebhookPatch.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default=None) -> Any:
        ChallengeSpecSolverDns01WebhookPatch.__key_warning(key)
        return super().get(key, default)

    def __init__(
        __self__,
        *,
        config: Optional[Mapping[str, Any]] = None,
        group_name: Optional[str] = None,
        solver_name: Optional[str] = None,
    ):
        """
        Configure an external webhook based DNS01 challenge solver to manage
        DNS01 challenge records.
        :param Mapping[str, Any] config: Additional configuration that should be passed to the webhook apiserver
               when challenges are processed.
               This can contain arbitrary JSON data.
               Secret values should not be specified in this stanza.
               If secret values are needed (e.g. credentials for a DNS service), you
               should use a SecretKeySelector to reference a Secret resource.
               For details on the schema of this field, consult the webhook provider
               implementation's documentation.
        :param str group_name: The API group name that should be used when POSTing ChallengePayload
               resources to the webhook apiserver.
               This should be the same as the GroupName specified in the webhook
               provider implementation.
        :param str solver_name: The name of the solver to use, as defined in the webhook provider
               implementation.
               This will typically be the name of the provider, e.g. 'cloudflare'.
        """
        if config is not None:
            pulumi.set(__self__, "config", config)
        if group_name is not None:
            pulumi.set(__self__, "group_name", group_name)
        if solver_name is not None:
            pulumi.set(__self__, "solver_name", solver_name)

    @property
    @pulumi.getter
    def config(self) -> Optional[Mapping[str, Any]]:
        """
        Additional configuration that should be passed to the webhook apiserver
        when challenges are processed.
        This can contain arbitrary JSON data.
        Secret values should not be specified in this stanza.
        If secret values are needed (e.g. credentials for a DNS service), you
        should use a SecretKeySelector to reference a Secret resource.
        For details on the schema of this field, consult the webhook provider
        implementation's documentation.
        """
        return pulumi.get(self, "config")

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> Optional[str]:
        """
        The API group name that should be used when POSTing ChallengePayload
        resources to the webhook apiserver.
        This should be the same as the GroupName specified in the webhook
        provider implementation.
        """
        return pulumi.get(self, "group_name")

    @property
    @pulumi.getter(name="solverName")
    def solver_name(self) -> Optional[str]:
        """
        The name of the solver to use, as defined in the webhook provider
        implementation.
        This will typically be the name of the provider, e.g. 'cloudflare'.
        """
        return pulumi.get(self, "solver_name")


@pulumi.output_type
class ChallengeSpecSolverHttp01(dict):
    """
    Configures cert-manager to attempt to complete authorizations by
    performing the HTTP01 challenge flow.
    It is not possible to obtain certificates for wildcard domain names
    (e.g. `*.example.com`) using the HTTP01 challenge mechanism.
    """

    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "gatewayHTTPRoute":
            suggest = "gateway_http_route"

        if suggest:
            pulumi.log.warn(
                f"Key '{key}' not found in ChallengeSpecSolverHttp01. Access the value via the '{suggest}' property getter instead."
            )

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverHttp01.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default=None) -> Any:
        ChallengeSpecSolverHttp01.__key_warning(key)
        return super().get(key, default)

    def __init__(
        __self__,
        *,
        gateway_http_route: Optional[
            "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoute"
        ] = None,
        ingress: Optional["outputs.ChallengeSpecSolverHttp01Ingress"] = None,
    ):
        """
        Configures cert-manager to attempt to complete authorizations by
        performing the HTTP01 challenge flow.
        It is not possible to obtain certificates for wildcard domain names
        (e.g. `*.example.com`) using the HTTP01 challenge mechanism.
        """
        if gateway_http_route is not None:
            pulumi.set(__self__, "gateway_http_route", gateway_http_route)
        if ingress is not None:
            pulumi.set(__self__, "ingress", ingress)

    @property
    @pulumi.getter(name="gatewayHTTPRoute")
    def gateway_http_route(
        self,
    ) -> Optional["outputs.ChallengeSpecSolverHttp01GatewayHTTPRoute"]:
        return pulumi.get(self, "gateway_http_route")

    @property
    @pulumi.getter
    def ingress(self) -> Optional["outputs.ChallengeSpecSolverHttp01Ingress"]:
        return pulumi.get(self, "ingress")


@pulumi.output_type
class ChallengeSpecSolverHttp01GatewayHTTPRoute(dict):
    """
    The Gateway API is a sig-network community API that models service networking
    in Kubernetes (https://gateway-api.sigs.k8s.io/). The Gateway solver will
    create HTTPRoutes with the specified labels in the same namespace as the challenge.
    This solver is experimental, and fields / behaviour may change in the future.
    """

    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "parentRefs":
            suggest = "parent_refs"
        elif key == "podTemplate":
            suggest = "pod_template"
        elif key == "serviceType":
            suggest = "service_type"

        if suggest:
            pulumi.log.warn(
                f"Key '{key}' not found in ChallengeSpecSolverHttp01GatewayHTTPRoute. Access the value via the '{suggest}' property getter instead."
            )

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverHttp01GatewayHTTPRoute.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default=None) -> Any:
        ChallengeSpecSolverHttp01GatewayHTTPRoute.__key_warning(key)
        return super().get(key, default)

    def __init__(
        __self__,
        *,
        labels: Optional[Mapping[str, str]] = None,
        parent_refs: Optional[
            Sequence["outputs.ChallengeSpecSolverHttp01GatewayHTTPRouteParentRefs"]
        ] = None,
        pod_template: Optional[
            "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplate"
        ] = None,
        service_type: Optional[str] = None,
    ):
        """
        The Gateway API is a sig-network community API that models service networking
        in Kubernetes (https://gateway-api.sigs.k8s.io/). The Gateway solver will
        create HTTPRoutes with the specified labels in the same namespace as the challenge.
        This solver is experimental, and fields / behaviour may change in the future.
        :param Mapping[str, str] labels: Custom labels that will be applied to HTTPRoutes created by cert-manager
               while solving HTTP-01 challenges.
        :param Sequence['ChallengeSpecSolverHttp01GatewayHTTPRouteParentRefsArgs'] parent_refs: When solving an HTTP-01 challenge, cert-manager creates an HTTPRoute.
               cert-manager needs to know which parentRefs should be used when creating
               the HTTPRoute. Usually, the parentRef references a Gateway. See:
               https://gateway-api.sigs.k8s.io/api-types/httproute/#attaching-to-gateways
        :param str service_type: Optional service type for Kubernetes solver service. Supported values
               are NodePort or ClusterIP. If unset, defaults to NodePort.
        """
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if parent_refs is not None:
            pulumi.set(__self__, "parent_refs", parent_refs)
        if pod_template is not None:
            pulumi.set(__self__, "pod_template", pod_template)
        if service_type is not None:
            pulumi.set(__self__, "service_type", service_type)

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        """
        Custom labels that will be applied to HTTPRoutes created by cert-manager
        while solving HTTP-01 challenges.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="parentRefs")
    def parent_refs(
        self,
    ) -> Optional[
        Sequence["outputs.ChallengeSpecSolverHttp01GatewayHTTPRouteParentRefs"]
    ]:
        """
        When solving an HTTP-01 challenge, cert-manager creates an HTTPRoute.
        cert-manager needs to know which parentRefs should be used when creating
        the HTTPRoute. Usually, the parentRef references a Gateway. See:
        https://gateway-api.sigs.k8s.io/api-types/httproute/#attaching-to-gateways
        """
        return pulumi.get(self, "parent_refs")

    @property
    @pulumi.getter(name="podTemplate")
    def pod_template(
        self,
    ) -> Optional["outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplate"]:
        return pulumi.get(self, "pod_template")

    @property
    @pulumi.getter(name="serviceType")
    def service_type(self) -> Optional[str]:
        """
        Optional service type for Kubernetes solver service. Supported values
        are NodePort or ClusterIP. If unset, defaults to NodePort.
        """
        return pulumi.get(self, "service_type")


@pulumi.output_type
class ChallengeSpecSolverHttp01GatewayHTTPRouteParentRefs(dict):
    """
    ParentReference identifies an API object (usually a Gateway) that can be considered
    a parent of this resource (usually a route). There are two kinds of parent resources
    with "Core" support:

    * Gateway (Gateway conformance profile)
    * Service (Mesh conformance profile, ClusterIP Services only)

    This API may be extended in the future to support additional kinds of parent
    resources.

    The API object must be valid in the cluster; the Group and Kind must
    be registered in the cluster for this reference to be valid.
    """

    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sectionName":
            suggest = "section_name"

        if suggest:
            pulumi.log.warn(
                f"Key '{key}' not found in ChallengeSpecSolverHttp01GatewayHTTPRouteParentRefs. Access the value via the '{suggest}' property getter instead."
            )

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverHttp01GatewayHTTPRouteParentRefs.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default=None) -> Any:
        ChallengeSpecSolverHttp01GatewayHTTPRouteParentRefs.__key_warning(key)
        return super().get(key, default)

    def __init__(
        __self__,
        *,
        group: Optional[str] = None,
        kind: Optional[str] = None,
        name: Optional[str] = None,
        namespace: Optional[str] = None,
        port: Optional[int] = None,
        section_name: Optional[str] = None,
    ):
        """
        ParentReference identifies an API object (usually a Gateway) that can be considered
        a parent of this resource (usually a route). There are two kinds of parent resources
        with "Core" support:

        * Gateway (Gateway conformance profile)
        * Service (Mesh conformance profile, ClusterIP Services only)

        This API may be extended in the future to support additional kinds of parent
        resources.

        The API object must be valid in the cluster; the Group and Kind must
        be registered in the cluster for this reference to be valid.
        :param str group: Group is the group of the referent.
               When unspecified, "gateway.networking.k8s.io" is inferred.
               To set the core API group (such as for a "Service" kind referent),
               Group must be explicitly set to "" (empty string).

               Support: Core
        :param str kind: Kind is kind of the referent.

               There are two kinds of parent resources with "Core" support:

               * Gateway (Gateway conformance profile)
               * Service (Mesh conformance profile, ClusterIP Services only)

               Support for other resources is Implementation-Specific.
        :param str name: Name is the name of the referent.

               Support: Core
        :param str namespace: Namespace is the namespace of the referent. When unspecified, this refers
               to the local namespace of the Route.

               Note that there are specific rules for ParentRefs which cross namespace
               boundaries. Cross-namespace references are only valid if they are explicitly
               allowed by something in the namespace they are referring to. For example:
               Gateway has the AllowedRoutes field, and ReferenceGrant provides a
               generic way to enable any other kind of cross-namespace reference.

               <gateway:experimental:description>
               ParentRefs from a Route to a Service in the same namespace are "producer"
               routes, which apply default routing rules to inbound connections from
               any namespace to the Service.

               ParentRefs from a Route to a Service in a different namespace are
               "consumer" routes, and these routing rules are only applied to outbound
               connections originating from the same namespace as the Route, for which
               the intended destination of the connections are a Service targeted as a
               ParentRef of the Route.
               </gateway:experimental:description>

               Support: Core
        :param int port: Port is the network port this Route targets. It can be interpreted
               differently based on the type of parent resource.

               When the parent resource is a Gateway, this targets all listeners
               listening on the specified port that also support this kind of Route(and
               select this Route). It's not recommended to set `Port` unless the
               networking behaviors specified in a Route must apply to a specific port
               as opposed to a listener(s) whose port(s) may be changed. When both Port
               and SectionName are specified, the name and port of the selected listener
               must match both specified values.

               <gateway:experimental:description>
               When the parent resource is a Service, this targets a specific port in the
               Service spec. When both Port (experimental) and SectionName are specified,
               the name and port of the selected port must match both specified values.
               </gateway:experimental:description>

               Implementations MAY choose to support other parent resources.
               Implementations supporting other types of parent resources MUST clearly
               document how/if Port is interpreted.

               For the purpose of status, an attachment is considered successful as
               long as the parent resource accepts it partially. For example, Gateway
               listeners can restrict which Routes can attach to them by Route kind,
               namespace, or hostname. If 1 of 2 Gateway listeners accept attachment
               from the referencing Route, the Route MUST be considered successfully
               attached. If no Gateway listeners accept attachment from this Route,
               the Route MUST be considered detached from the Gateway.

               Support: Extended
        :param str section_name: SectionName is the name of a section within the target resource. In the
               following resources, SectionName is interpreted as the following:

               * Gateway: Listener name. When both Port (experimental) and SectionName
               are specified, the name and port of the selected listener must match
               both specified values.
               * Service: Port name. When both Port (experimental) and SectionName
               are specified, the name and port of the selected listener must match
               both specified values.

               Implementations MAY choose to support attaching Routes to other resources.
               If that is the case, they MUST clearly document how SectionName is
               interpreted.

               When unspecified (empty string), this will reference the entire resource.
               For the purpose of status, an attachment is considered successful if at
               least one section in the parent resource accepts it. For example, Gateway
               listeners can restrict which Routes can attach to them by Route kind,
               namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from
               the referencing Route, the Route MUST be considered successfully
               attached. If no Gateway listeners accept attachment from this Route, the
               Route MUST be considered detached from the Gateway.

               Support: Core
        """
        if group is not None:
            pulumi.set(__self__, "group", group)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if section_name is not None:
            pulumi.set(__self__, "section_name", section_name)

    @property
    @pulumi.getter
    def group(self) -> Optional[str]:
        """
        Group is the group of the referent.
        When unspecified, "gateway.networking.k8s.io" is inferred.
        To set the core API group (such as for a "Service" kind referent),
        Group must be explicitly set to "" (empty string).

        Support: Core
        """
        return pulumi.get(self, "group")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        Kind is kind of the referent.

        There are two kinds of parent resources with "Core" support:

        * Gateway (Gateway conformance profile)
        * Service (Mesh conformance profile, ClusterIP Services only)

        Support for other resources is Implementation-Specific.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name is the name of the referent.

        Support: Core
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace is the namespace of the referent. When unspecified, this refers
        to the local namespace of the Route.

        Note that there are specific rules for ParentRefs which cross namespace
        boundaries. Cross-namespace references are only valid if they are explicitly
        allowed by something in the namespace they are referring to. For example:
        Gateway has the AllowedRoutes field, and ReferenceGrant provides a
        generic way to enable any other kind of cross-namespace reference.

        <gateway:experimental:description>
        ParentRefs from a Route to a Service in the same namespace are "producer"
        routes, which apply default routing rules to inbound connections from
        any namespace to the Service.

        ParentRefs from a Route to a Service in a different namespace are
        "consumer" routes, and these routing rules are only applied to outbound
        connections originating from the same namespace as the Route, for which
        the intended destination of the connections are a Service targeted as a
        ParentRef of the Route.
        </gateway:experimental:description>

        Support: Core
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        """
        Port is the network port this Route targets. It can be interpreted
        differently based on the type of parent resource.

        When the parent resource is a Gateway, this targets all listeners
        listening on the specified port that also support this kind of Route(and
        select this Route). It's not recommended to set `Port` unless the
        networking behaviors specified in a Route must apply to a specific port
        as opposed to a listener(s) whose port(s) may be changed. When both Port
        and SectionName are specified, the name and port of the selected listener
        must match both specified values.

        <gateway:experimental:description>
        When the parent resource is a Service, this targets a specific port in the
        Service spec. When both Port (experimental) and SectionName are specified,
        the name and port of the selected port must match both specified values.
        </gateway:experimental:description>

        Implementations MAY choose to support other parent resources.
        Implementations supporting other types of parent resources MUST clearly
        document how/if Port is interpreted.

        For the purpose of status, an attachment is considered successful as
        long as the parent resource accepts it partially. For example, Gateway
        listeners can restrict which Routes can attach to them by Route kind,
        namespace, or hostname. If 1 of 2 Gateway listeners accept attachment
        from the referencing Route, the Route MUST be considered successfully
        attached. If no Gateway listeners accept attachment from this Route,
        the Route MUST be considered detached from the Gateway.

        Support: Extended
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="sectionName")
    def section_name(self) -> Optional[str]:
        """
        SectionName is the name of a section within the target resource. In the
        following resources, SectionName is interpreted as the following:

        * Gateway: Listener name. When both Port (experimental) and SectionName
        are specified, the name and port of the selected listener must match
        both specified values.
        * Service: Port name. When both Port (experimental) and SectionName
        are specified, the name and port of the selected listener must match
        both specified values.

        Implementations MAY choose to support attaching Routes to other resources.
        If that is the case, they MUST clearly document how SectionName is
        interpreted.

        When unspecified (empty string), this will reference the entire resource.
        For the purpose of status, an attachment is considered successful if at
        least one section in the parent resource accepts it. For example, Gateway
        listeners can restrict which Routes can attach to them by Route kind,
        namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from
        the referencing Route, the Route MUST be considered successfully
        attached. If no Gateway listeners accept attachment from this Route, the
        Route MUST be considered detached from the Gateway.

        Support: Core
        """
        return pulumi.get(self, "section_name")


@pulumi.output_type
class ChallengeSpecSolverHttp01GatewayHTTPRouteParentRefsPatch(dict):
    """
    ParentReference identifies an API object (usually a Gateway) that can be considered
    a parent of this resource (usually a route). There are two kinds of parent resources
    with "Core" support:

    * Gateway (Gateway conformance profile)
    * Service (Mesh conformance profile, ClusterIP Services only)

    This API may be extended in the future to support additional kinds of parent
    resources.

    The API object must be valid in the cluster; the Group and Kind must
    be registered in the cluster for this reference to be valid.
    """

    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sectionName":
            suggest = "section_name"

        if suggest:
            pulumi.log.warn(
                f"Key '{key}' not found in ChallengeSpecSolverHttp01GatewayHTTPRouteParentRefsPatch. Access the value via the '{suggest}' property getter instead."
            )

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverHttp01GatewayHTTPRouteParentRefsPatch.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default=None) -> Any:
        ChallengeSpecSolverHttp01GatewayHTTPRouteParentRefsPatch.__key_warning(key)
        return super().get(key, default)

    def __init__(
        __self__,
        *,
        group: Optional[str] = None,
        kind: Optional[str] = None,
        name: Optional[str] = None,
        namespace: Optional[str] = None,
        port: Optional[int] = None,
        section_name: Optional[str] = None,
    ):
        """
        ParentReference identifies an API object (usually a Gateway) that can be considered
        a parent of this resource (usually a route). There are two kinds of parent resources
        with "Core" support:

        * Gateway (Gateway conformance profile)
        * Service (Mesh conformance profile, ClusterIP Services only)

        This API may be extended in the future to support additional kinds of parent
        resources.

        The API object must be valid in the cluster; the Group and Kind must
        be registered in the cluster for this reference to be valid.
        :param str group: Group is the group of the referent.
               When unspecified, "gateway.networking.k8s.io" is inferred.
               To set the core API group (such as for a "Service" kind referent),
               Group must be explicitly set to "" (empty string).

               Support: Core
        :param str kind: Kind is kind of the referent.

               There are two kinds of parent resources with "Core" support:

               * Gateway (Gateway conformance profile)
               * Service (Mesh conformance profile, ClusterIP Services only)

               Support for other resources is Implementation-Specific.
        :param str name: Name is the name of the referent.

               Support: Core
        :param str namespace: Namespace is the namespace of the referent. When unspecified, this refers
               to the local namespace of the Route.

               Note that there are specific rules for ParentRefs which cross namespace
               boundaries. Cross-namespace references are only valid if they are explicitly
               allowed by something in the namespace they are referring to. For example:
               Gateway has the AllowedRoutes field, and ReferenceGrant provides a
               generic way to enable any other kind of cross-namespace reference.

               <gateway:experimental:description>
               ParentRefs from a Route to a Service in the same namespace are "producer"
               routes, which apply default routing rules to inbound connections from
               any namespace to the Service.

               ParentRefs from a Route to a Service in a different namespace are
               "consumer" routes, and these routing rules are only applied to outbound
               connections originating from the same namespace as the Route, for which
               the intended destination of the connections are a Service targeted as a
               ParentRef of the Route.
               </gateway:experimental:description>

               Support: Core
        :param int port: Port is the network port this Route targets. It can be interpreted
               differently based on the type of parent resource.

               When the parent resource is a Gateway, this targets all listeners
               listening on the specified port that also support this kind of Route(and
               select this Route). It's not recommended to set `Port` unless the
               networking behaviors specified in a Route must apply to a specific port
               as opposed to a listener(s) whose port(s) may be changed. When both Port
               and SectionName are specified, the name and port of the selected listener
               must match both specified values.

               <gateway:experimental:description>
               When the parent resource is a Service, this targets a specific port in the
               Service spec. When both Port (experimental) and SectionName are specified,
               the name and port of the selected port must match both specified values.
               </gateway:experimental:description>

               Implementations MAY choose to support other parent resources.
               Implementations supporting other types of parent resources MUST clearly
               document how/if Port is interpreted.

               For the purpose of status, an attachment is considered successful as
               long as the parent resource accepts it partially. For example, Gateway
               listeners can restrict which Routes can attach to them by Route kind,
               namespace, or hostname. If 1 of 2 Gateway listeners accept attachment
               from the referencing Route, the Route MUST be considered successfully
               attached. If no Gateway listeners accept attachment from this Route,
               the Route MUST be considered detached from the Gateway.

               Support: Extended
        :param str section_name: SectionName is the name of a section within the target resource. In the
               following resources, SectionName is interpreted as the following:

               * Gateway: Listener name. When both Port (experimental) and SectionName
               are specified, the name and port of the selected listener must match
               both specified values.
               * Service: Port name. When both Port (experimental) and SectionName
               are specified, the name and port of the selected listener must match
               both specified values.

               Implementations MAY choose to support attaching Routes to other resources.
               If that is the case, they MUST clearly document how SectionName is
               interpreted.

               When unspecified (empty string), this will reference the entire resource.
               For the purpose of status, an attachment is considered successful if at
               least one section in the parent resource accepts it. For example, Gateway
               listeners can restrict which Routes can attach to them by Route kind,
               namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from
               the referencing Route, the Route MUST be considered successfully
               attached. If no Gateway listeners accept attachment from this Route, the
               Route MUST be considered detached from the Gateway.

               Support: Core
        """
        if group is not None:
            pulumi.set(__self__, "group", group)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if section_name is not None:
            pulumi.set(__self__, "section_name", section_name)

    @property
    @pulumi.getter
    def group(self) -> Optional[str]:
        """
        Group is the group of the referent.
        When unspecified, "gateway.networking.k8s.io" is inferred.
        To set the core API group (such as for a "Service" kind referent),
        Group must be explicitly set to "" (empty string).

        Support: Core
        """
        return pulumi.get(self, "group")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        Kind is kind of the referent.

        There are two kinds of parent resources with "Core" support:

        * Gateway (Gateway conformance profile)
        * Service (Mesh conformance profile, ClusterIP Services only)

        Support for other resources is Implementation-Specific.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name is the name of the referent.

        Support: Core
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace is the namespace of the referent. When unspecified, this refers
        to the local namespace of the Route.

        Note that there are specific rules for ParentRefs which cross namespace
        boundaries. Cross-namespace references are only valid if they are explicitly
        allowed by something in the namespace they are referring to. For example:
        Gateway has the AllowedRoutes field, and ReferenceGrant provides a
        generic way to enable any other kind of cross-namespace reference.

        <gateway:experimental:description>
        ParentRefs from a Route to a Service in the same namespace are "producer"
        routes, which apply default routing rules to inbound connections from
        any namespace to the Service.

        ParentRefs from a Route to a Service in a different namespace are
        "consumer" routes, and these routing rules are only applied to outbound
        connections originating from the same namespace as the Route, for which
        the intended destination of the connections are a Service targeted as a
        ParentRef of the Route.
        </gateway:experimental:description>

        Support: Core
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        """
        Port is the network port this Route targets. It can be interpreted
        differently based on the type of parent resource.

        When the parent resource is a Gateway, this targets all listeners
        listening on the specified port that also support this kind of Route(and
        select this Route). It's not recommended to set `Port` unless the
        networking behaviors specified in a Route must apply to a specific port
        as opposed to a listener(s) whose port(s) may be changed. When both Port
        and SectionName are specified, the name and port of the selected listener
        must match both specified values.

        <gateway:experimental:description>
        When the parent resource is a Service, this targets a specific port in the
        Service spec. When both Port (experimental) and SectionName are specified,
        the name and port of the selected port must match both specified values.
        </gateway:experimental:description>

        Implementations MAY choose to support other parent resources.
        Implementations supporting other types of parent resources MUST clearly
        document how/if Port is interpreted.

        For the purpose of status, an attachment is considered successful as
        long as the parent resource accepts it partially. For example, Gateway
        listeners can restrict which Routes can attach to them by Route kind,
        namespace, or hostname. If 1 of 2 Gateway listeners accept attachment
        from the referencing Route, the Route MUST be considered successfully
        attached. If no Gateway listeners accept attachment from this Route,
        the Route MUST be considered detached from the Gateway.

        Support: Extended
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="sectionName")
    def section_name(self) -> Optional[str]:
        """
        SectionName is the name of a section within the target resource. In the
        following resources, SectionName is interpreted as the following:

        * Gateway: Listener name. When both Port (experimental) and SectionName
        are specified, the name and port of the selected listener must match
        both specified values.
        * Service: Port name. When both Port (experimental) and SectionName
        are specified, the name and port of the selected listener must match
        both specified values.

        Implementations MAY choose to support attaching Routes to other resources.
        If that is the case, they MUST clearly document how SectionName is
        interpreted.

        When unspecified (empty string), this will reference the entire resource.
        For the purpose of status, an attachment is considered successful if at
        least one section in the parent resource accepts it. For example, Gateway
        listeners can restrict which Routes can attach to them by Route kind,
        namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from
        the referencing Route, the Route MUST be considered successfully
        attached. If no Gateway listeners accept attachment from this Route, the
        Route MUST be considered detached from the Gateway.

        Support: Core
        """
        return pulumi.get(self, "section_name")


@pulumi.output_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePatch(dict):
    """
    The Gateway API is a sig-network community API that models service networking
    in Kubernetes (https://gateway-api.sigs.k8s.io/). The Gateway solver will
    create HTTPRoutes with the specified labels in the same namespace as the challenge.
    This solver is experimental, and fields / behaviour may change in the future.
    """

    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "parentRefs":
            suggest = "parent_refs"
        elif key == "podTemplate":
            suggest = "pod_template"
        elif key == "serviceType":
            suggest = "service_type"

        if suggest:
            pulumi.log.warn(
                f"Key '{key}' not found in ChallengeSpecSolverHttp01GatewayHTTPRoutePatch. Access the value via the '{suggest}' property getter instead."
            )

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverHttp01GatewayHTTPRoutePatch.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default=None) -> Any:
        ChallengeSpecSolverHttp01GatewayHTTPRoutePatch.__key_warning(key)
        return super().get(key, default)

    def __init__(
        __self__,
        *,
        labels: Optional[Mapping[str, str]] = None,
        parent_refs: Optional[
            Sequence["outputs.ChallengeSpecSolverHttp01GatewayHTTPRouteParentRefsPatch"]
        ] = None,
        pod_template: Optional[
            "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplatePatch"
        ] = None,
        service_type: Optional[str] = None,
    ):
        """
        The Gateway API is a sig-network community API that models service networking
        in Kubernetes (https://gateway-api.sigs.k8s.io/). The Gateway solver will
        create HTTPRoutes with the specified labels in the same namespace as the challenge.
        This solver is experimental, and fields / behaviour may change in the future.
        :param Mapping[str, str] labels: Custom labels that will be applied to HTTPRoutes created by cert-manager
               while solving HTTP-01 challenges.
        :param Sequence['ChallengeSpecSolverHttp01GatewayHTTPRouteParentRefsPatchArgs'] parent_refs: When solving an HTTP-01 challenge, cert-manager creates an HTTPRoute.
               cert-manager needs to know which parentRefs should be used when creating
               the HTTPRoute. Usually, the parentRef references a Gateway. See:
               https://gateway-api.sigs.k8s.io/api-types/httproute/#attaching-to-gateways
        :param str service_type: Optional service type for Kubernetes solver service. Supported values
               are NodePort or ClusterIP. If unset, defaults to NodePort.
        """
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if parent_refs is not None:
            pulumi.set(__self__, "parent_refs", parent_refs)
        if pod_template is not None:
            pulumi.set(__self__, "pod_template", pod_template)
        if service_type is not None:
            pulumi.set(__self__, "service_type", service_type)

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        """
        Custom labels that will be applied to HTTPRoutes created by cert-manager
        while solving HTTP-01 challenges.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="parentRefs")
    def parent_refs(
        self,
    ) -> Optional[
        Sequence["outputs.ChallengeSpecSolverHttp01GatewayHTTPRouteParentRefsPatch"]
    ]:
        """
        When solving an HTTP-01 challenge, cert-manager creates an HTTPRoute.
        cert-manager needs to know which parentRefs should be used when creating
        the HTTPRoute. Usually, the parentRef references a Gateway. See:
        https://gateway-api.sigs.k8s.io/api-types/httproute/#attaching-to-gateways
        """
        return pulumi.get(self, "parent_refs")

    @property
    @pulumi.getter(name="podTemplate")
    def pod_template(
        self,
    ) -> Optional["outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplatePatch"]:
        return pulumi.get(self, "pod_template")

    @property
    @pulumi.getter(name="serviceType")
    def service_type(self) -> Optional[str]:
        """
        Optional service type for Kubernetes solver service. Supported values
        are NodePort or ClusterIP. If unset, defaults to NodePort.
        """
        return pulumi.get(self, "service_type")


@pulumi.output_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplate(dict):
    """
    Optional pod template used to configure the ACME challenge solver pods
    used for HTTP01 challenges.
    """

    def __init__(
        __self__,
        *,
        metadata: Optional[
            "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateMetadata"
        ] = None,
        spec: Optional[
            "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpec"
        ] = None,
    ):
        """
        Optional pod template used to configure the ACME challenge solver pods
        used for HTTP01 challenges.
        """
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if spec is not None:
            pulumi.set(__self__, "spec", spec)

    @property
    @pulumi.getter
    def metadata(
        self,
    ) -> Optional[
        "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateMetadata"
    ]:
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def spec(
        self,
    ) -> Optional["outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpec"]:
        return pulumi.get(self, "spec")


@pulumi.output_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateMetadata(dict):
    """
    ObjectMeta overrides for the pod used to solve HTTP01 challenges.
    Only the 'labels' and 'annotations' fields may be set.
    If labels or annotations overlap with in-built values, the values here
    will override the in-built values.
    """

    def __init__(
        __self__,
        *,
        annotations: Optional[Mapping[str, str]] = None,
        labels: Optional[Mapping[str, str]] = None,
    ):
        """
        ObjectMeta overrides for the pod used to solve HTTP01 challenges.
        Only the 'labels' and 'annotations' fields may be set.
        If labels or annotations overlap with in-built values, the values here
        will override the in-built values.
        :param Mapping[str, str] annotations: Annotations that should be added to the created ACME HTTP01 solver pods.
        :param Mapping[str, str] labels: Labels that should be added to the created ACME HTTP01 solver pods.
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        """
        Annotations that should be added to the created ACME HTTP01 solver pods.
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        """
        Labels that should be added to the created ACME HTTP01 solver pods.
        """
        return pulumi.get(self, "labels")


@pulumi.output_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateMetadataPatch(dict):
    """
    ObjectMeta overrides for the pod used to solve HTTP01 challenges.
    Only the 'labels' and 'annotations' fields may be set.
    If labels or annotations overlap with in-built values, the values here
    will override the in-built values.
    """

    def __init__(
        __self__,
        *,
        annotations: Optional[Mapping[str, str]] = None,
        labels: Optional[Mapping[str, str]] = None,
    ):
        """
        ObjectMeta overrides for the pod used to solve HTTP01 challenges.
        Only the 'labels' and 'annotations' fields may be set.
        If labels or annotations overlap with in-built values, the values here
        will override the in-built values.
        :param Mapping[str, str] annotations: Annotations that should be added to the created ACME HTTP01 solver pods.
        :param Mapping[str, str] labels: Labels that should be added to the created ACME HTTP01 solver pods.
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        """
        Annotations that should be added to the created ACME HTTP01 solver pods.
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        """
        Labels that should be added to the created ACME HTTP01 solver pods.
        """
        return pulumi.get(self, "labels")


@pulumi.output_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplatePatch(dict):
    """
    Optional pod template used to configure the ACME challenge solver pods
    used for HTTP01 challenges.
    """

    def __init__(
        __self__,
        *,
        metadata: Optional[
            "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateMetadataPatch"
        ] = None,
        spec: Optional[
            "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecPatch"
        ] = None,
    ):
        """
        Optional pod template used to configure the ACME challenge solver pods
        used for HTTP01 challenges.
        """
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if spec is not None:
            pulumi.set(__self__, "spec", spec)

    @property
    @pulumi.getter
    def metadata(
        self,
    ) -> Optional[
        "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateMetadataPatch"
    ]:
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def spec(
        self,
    ) -> Optional[
        "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecPatch"
    ]:
        return pulumi.get(self, "spec")


@pulumi.output_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpec(dict):
    """
    PodSpec defines overrides for the HTTP01 challenge solver pod.
    Check ACMEChallengeSolverHTTP01IngressPodSpec to find out currently supported fields.
    All other fields will be ignored.
    """

    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imagePullSecrets":
            suggest = "image_pull_secrets"
        elif key == "nodeSelector":
            suggest = "node_selector"
        elif key == "priorityClassName":
            suggest = "priority_class_name"
        elif key == "securityContext":
            suggest = "security_context"
        elif key == "serviceAccountName":
            suggest = "service_account_name"

        if suggest:
            pulumi.log.warn(
                f"Key '{key}' not found in ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpec. Access the value via the '{suggest}' property getter instead."
            )

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default=None) -> Any:
        ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpec.__key_warning(key)
        return super().get(key, default)

    def __init__(
        __self__,
        *,
        affinity: Optional[
            "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinity"
        ] = None,
        image_pull_secrets: Optional[
            Sequence[
                "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecImagePullSecrets"
            ]
        ] = None,
        node_selector: Optional[Mapping[str, str]] = None,
        priority_class_name: Optional[str] = None,
        security_context: Optional[
            "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecSecurityContext"
        ] = None,
        service_account_name: Optional[str] = None,
        tolerations: Optional[
            Sequence[
                "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecTolerations"
            ]
        ] = None,
    ):
        """
        PodSpec defines overrides for the HTTP01 challenge solver pod.
        Check ACMEChallengeSolverHTTP01IngressPodSpec to find out currently supported fields.
        All other fields will be ignored.
        :param Sequence['ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecImagePullSecretsArgs'] image_pull_secrets: If specified, the pod's imagePullSecrets
        :param Mapping[str, str] node_selector: NodeSelector is a selector which must be true for the pod to fit on a node.
               Selector which must match a node's labels for the pod to be scheduled on that node.
               More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
        :param str priority_class_name: If specified, the pod's priorityClassName.
        :param str service_account_name: If specified, the pod's service account
        :param Sequence['ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecTolerationsArgs'] tolerations: If specified, the pod's tolerations.
        """
        if affinity is not None:
            pulumi.set(__self__, "affinity", affinity)
        if image_pull_secrets is not None:
            pulumi.set(__self__, "image_pull_secrets", image_pull_secrets)
        if node_selector is not None:
            pulumi.set(__self__, "node_selector", node_selector)
        if priority_class_name is not None:
            pulumi.set(__self__, "priority_class_name", priority_class_name)
        if security_context is not None:
            pulumi.set(__self__, "security_context", security_context)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tolerations is not None:
            pulumi.set(__self__, "tolerations", tolerations)

    @property
    @pulumi.getter
    def affinity(
        self,
    ) -> Optional[
        "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinity"
    ]:
        return pulumi.get(self, "affinity")

    @property
    @pulumi.getter(name="imagePullSecrets")
    def image_pull_secrets(
        self,
    ) -> Optional[
        Sequence[
            "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecImagePullSecrets"
        ]
    ]:
        """
        If specified, the pod's imagePullSecrets
        """
        return pulumi.get(self, "image_pull_secrets")

    @property
    @pulumi.getter(name="nodeSelector")
    def node_selector(self) -> Optional[Mapping[str, str]]:
        """
        NodeSelector is a selector which must be true for the pod to fit on a node.
        Selector which must match a node's labels for the pod to be scheduled on that node.
        More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
        """
        return pulumi.get(self, "node_selector")

    @property
    @pulumi.getter(name="priorityClassName")
    def priority_class_name(self) -> Optional[str]:
        """
        If specified, the pod's priorityClassName.
        """
        return pulumi.get(self, "priority_class_name")

    @property
    @pulumi.getter(name="securityContext")
    def security_context(
        self,
    ) -> Optional[
        "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecSecurityContext"
    ]:
        return pulumi.get(self, "security_context")

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[str]:
        """
        If specified, the pod's service account
        """
        return pulumi.get(self, "service_account_name")

    @property
    @pulumi.getter
    def tolerations(
        self,
    ) -> Optional[
        Sequence[
            "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecTolerations"
        ]
    ]:
        """
        If specified, the pod's tolerations.
        """
        return pulumi.get(self, "tolerations")


@pulumi.output_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinity(dict):
    """
    If specified, the pod's scheduling constraints
    """

    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "nodeAffinity":
            suggest = "node_affinity"
        elif key == "podAffinity":
            suggest = "pod_affinity"
        elif key == "podAntiAffinity":
            suggest = "pod_anti_affinity"

        if suggest:
            pulumi.log.warn(
                f"Key '{key}' not found in ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinity. Access the value via the '{suggest}' property getter instead."
            )

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinity.__key_warning(
            key
        )
        return super().__getitem__(key)

    def get(self, key: str, default=None) -> Any:
        ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinity.__key_warning(
            key
        )
        return super().get(key, default)

    def __init__(
        __self__,
        *,
        node_affinity: Optional[
            "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinity"
        ] = None,
        pod_affinity: Optional[
            "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinity"
        ] = None,
        pod_anti_affinity: Optional[
            "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinity"
        ] = None,
    ):
        """
        If specified, the pod's scheduling constraints
        """
        if node_affinity is not None:
            pulumi.set(__self__, "node_affinity", node_affinity)
        if pod_affinity is not None:
            pulumi.set(__self__, "pod_affinity", pod_affinity)
        if pod_anti_affinity is not None:
            pulumi.set(__self__, "pod_anti_affinity", pod_anti_affinity)

    @property
    @pulumi.getter(name="nodeAffinity")
    def node_affinity(
        self,
    ) -> Optional[
        "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinity"
    ]:
        return pulumi.get(self, "node_affinity")

    @property
    @pulumi.getter(name="podAffinity")
    def pod_affinity(
        self,
    ) -> Optional[
        "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinity"
    ]:
        return pulumi.get(self, "pod_affinity")

    @property
    @pulumi.getter(name="podAntiAffinity")
    def pod_anti_affinity(
        self,
    ) -> Optional[
        "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinity"
    ]:
        return pulumi.get(self, "pod_anti_affinity")


@pulumi.output_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinity(
    dict
):
    """
    Describes node affinity scheduling rules for the pod.
    """

    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "preferredDuringSchedulingIgnoredDuringExecution":
            suggest = "preferred_during_scheduling_ignored_during_execution"
        elif key == "requiredDuringSchedulingIgnoredDuringExecution":
            suggest = "required_during_scheduling_ignored_during_execution"

        if suggest:
            pulumi.log.warn(
                f"Key '{key}' not found in ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinity. Access the value via the '{suggest}' property getter instead."
            )

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinity.__key_warning(
            key
        )
        return super().__getitem__(key)

    def get(self, key: str, default=None) -> Any:
        ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinity.__key_warning(
            key
        )
        return super().get(key, default)

    def __init__(
        __self__,
        *,
        preferred_during_scheduling_ignored_during_execution: Optional[
            Sequence[
                "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution"
            ]
        ] = None,
        required_during_scheduling_ignored_during_execution: Optional[
            "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution"
        ] = None,
    ):
        """
        Describes node affinity scheduling rules for the pod.
        :param Sequence['ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs'] preferred_during_scheduling_ignored_during_execution: The scheduler will prefer to schedule pods to nodes that satisfy
               the affinity expressions specified by this field, but it may choose
               a node that violates one or more of the expressions. The node that is
               most preferred is the one with the greatest sum of weights, i.e.
               for each node that meets all of the scheduling requirements (resource
               request, requiredDuringScheduling affinity expressions, etc.),
               compute a sum by iterating through the elements of this field and adding
               "weight" to the sum if the node matches the corresponding matchExpressions; the
               node(s) with the highest sum are the most preferred.
        """
        if preferred_during_scheduling_ignored_during_execution is not None:
            pulumi.set(
                __self__,
                "preferred_during_scheduling_ignored_during_execution",
                preferred_during_scheduling_ignored_during_execution,
            )
        if required_during_scheduling_ignored_during_execution is not None:
            pulumi.set(
                __self__,
                "required_during_scheduling_ignored_during_execution",
                required_during_scheduling_ignored_during_execution,
            )

    @property
    @pulumi.getter(name="preferredDuringSchedulingIgnoredDuringExecution")
    def preferred_during_scheduling_ignored_during_execution(
        self,
    ) -> Optional[
        Sequence[
            "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution"
        ]
    ]:
        """
        The scheduler will prefer to schedule pods to nodes that satisfy
        the affinity expressions specified by this field, but it may choose
        a node that violates one or more of the expressions. The node that is
        most preferred is the one with the greatest sum of weights, i.e.
        for each node that meets all of the scheduling requirements (resource
        request, requiredDuringScheduling affinity expressions, etc.),
        compute a sum by iterating through the elements of this field and adding
        "weight" to the sum if the node matches the corresponding matchExpressions; the
        node(s) with the highest sum are the most preferred.
        """
        return pulumi.get(self, "preferred_during_scheduling_ignored_during_execution")

    @property
    @pulumi.getter(name="requiredDuringSchedulingIgnoredDuringExecution")
    def required_during_scheduling_ignored_during_execution(
        self,
    ) -> Optional[
        "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution"
    ]:
        return pulumi.get(self, "required_during_scheduling_ignored_during_execution")


@pulumi.output_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPatch(
    dict
):
    """
    Describes node affinity scheduling rules for the pod.
    """

    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "preferredDuringSchedulingIgnoredDuringExecution":
            suggest = "preferred_during_scheduling_ignored_during_execution"
        elif key == "requiredDuringSchedulingIgnoredDuringExecution":
            suggest = "required_during_scheduling_ignored_during_execution"

        if suggest:
            pulumi.log.warn(
                f"Key '{key}' not found in ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPatch. Access the value via the '{suggest}' property getter instead."
            )

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPatch.__key_warning(
            key
        )
        return super().__getitem__(key)

    def get(self, key: str, default=None) -> Any:
        ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPatch.__key_warning(
            key
        )
        return super().get(key, default)

    def __init__(
        __self__,
        *,
        preferred_during_scheduling_ignored_during_execution: Optional[
            Sequence[
                "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch"
            ]
        ] = None,
        required_during_scheduling_ignored_during_execution: Optional[
            "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch"
        ] = None,
    ):
        """
        Describes node affinity scheduling rules for the pod.
        :param Sequence['ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgs'] preferred_during_scheduling_ignored_during_execution: The scheduler will prefer to schedule pods to nodes that satisfy
               the affinity expressions specified by this field, but it may choose
               a node that violates one or more of the expressions. The node that is
               most preferred is the one with the greatest sum of weights, i.e.
               for each node that meets all of the scheduling requirements (resource
               request, requiredDuringScheduling affinity expressions, etc.),
               compute a sum by iterating through the elements of this field and adding
               "weight" to the sum if the node matches the corresponding matchExpressions; the
               node(s) with the highest sum are the most preferred.
        """
        if preferred_during_scheduling_ignored_during_execution is not None:
            pulumi.set(
                __self__,
                "preferred_during_scheduling_ignored_during_execution",
                preferred_during_scheduling_ignored_during_execution,
            )
        if required_during_scheduling_ignored_during_execution is not None:
            pulumi.set(
                __self__,
                "required_during_scheduling_ignored_during_execution",
                required_during_scheduling_ignored_during_execution,
            )

    @property
    @pulumi.getter(name="preferredDuringSchedulingIgnoredDuringExecution")
    def preferred_during_scheduling_ignored_during_execution(
        self,
    ) -> Optional[
        Sequence[
            "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch"
        ]
    ]:
        """
        The scheduler will prefer to schedule pods to nodes that satisfy
        the affinity expressions specified by this field, but it may choose
        a node that violates one or more of the expressions. The node that is
        most preferred is the one with the greatest sum of weights, i.e.
        for each node that meets all of the scheduling requirements (resource
        request, requiredDuringScheduling affinity expressions, etc.),
        compute a sum by iterating through the elements of this field and adding
        "weight" to the sum if the node matches the corresponding matchExpressions; the
        node(s) with the highest sum are the most preferred.
        """
        return pulumi.get(self, "preferred_during_scheduling_ignored_during_execution")

    @property
    @pulumi.getter(name="requiredDuringSchedulingIgnoredDuringExecution")
    def required_during_scheduling_ignored_during_execution(
        self,
    ) -> Optional[
        "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch"
    ]:
        return pulumi.get(self, "required_during_scheduling_ignored_during_execution")


@pulumi.output_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution(
    dict
):
    """
    An empty preferred scheduling term matches all objects with implicit weight 0
    (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
    """

    def __init__(
        __self__,
        *,
        preference: Optional[
            "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference"
        ] = None,
        weight: Optional[int] = None,
    ):
        """
        An empty preferred scheduling term matches all objects with implicit weight 0
        (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
        :param int weight: Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
        """
        if preference is not None:
            pulumi.set(__self__, "preference", preference)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def preference(
        self,
    ) -> Optional[
        "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference"
    ]:
        return pulumi.get(self, "preference")

    @property
    @pulumi.getter
    def weight(self) -> Optional[int]:
        """
        Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
        """
        return pulumi.get(self, "weight")


@pulumi.output_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch(
    dict
):
    """
    An empty preferred scheduling term matches all objects with implicit weight 0
    (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
    """

    def __init__(
        __self__,
        *,
        preference: Optional[
            "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatch"
        ] = None,
        weight: Optional[int] = None,
    ):
        """
        An empty preferred scheduling term matches all objects with implicit weight 0
        (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
        :param int weight: Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
        """
        if preference is not None:
            pulumi.set(__self__, "preference", preference)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def preference(
        self,
    ) -> Optional[
        "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatch"
    ]:
        return pulumi.get(self, "preference")

    @property
    @pulumi.getter
    def weight(self) -> Optional[int]:
        """
        Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
        """
        return pulumi.get(self, "weight")


@pulumi.output_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference(
    dict
):
    """
    A node selector term, associated with the corresponding weight.
    """

    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "matchExpressions":
            suggest = "match_expressions"
        elif key == "matchFields":
            suggest = "match_fields"

        if suggest:
            pulumi.log.warn(
                f"Key '{key}' not found in ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference. Access the value via the '{suggest}' property getter instead."
            )

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference.__key_warning(
            key
        )
        return super().__getitem__(key)

    def get(self, key: str, default=None) -> Any:
        ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference.__key_warning(
            key
        )
        return super().get(key, default)

    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            Sequence[
                "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions"
            ]
        ] = None,
        match_fields: Optional[
            Sequence[
                "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields"
            ]
        ] = None,
    ):
        """
        A node selector term, associated with the corresponding weight.
        :param Sequence['ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgs'] match_expressions: A list of node selector requirements by node's labels.
        :param Sequence['ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgs'] match_fields: A list of node selector requirements by node's fields.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_fields is not None:
            pulumi.set(__self__, "match_fields", match_fields)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        Sequence[
            "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions"
        ]
    ]:
        """
        A list of node selector requirements by node's labels.
        """
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchFields")
    def match_fields(
        self,
    ) -> Optional[
        Sequence[
            "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields"
        ]
    ]:
        """
        A list of node selector requirements by node's fields.
        """
        return pulumi.get(self, "match_fields")


@pulumi.output_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions(
    dict
):
    """
    A node selector requirement is a selector that contains values, a key, and an operator
    that relates the key and values.
    """

    def __init__(
        __self__,
        *,
        key: Optional[str] = None,
        operator: Optional[str] = None,
        values: Optional[Sequence[str]] = None,
    ):
        """
        A node selector requirement is a selector that contains values, a key, and an operator
        that relates the key and values.
        :param str key: The label key that the selector applies to.
        :param str operator: Represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        :param Sequence[str] values: An array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. If the operator is Gt or Lt, the values
               array must have a single element, which will be interpreted as an integer.
               This array is replaced during a strategic merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> Optional[str]:
        """
        Represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        """
        An array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. If the operator is Gt or Lt, the values
        array must have a single element, which will be interpreted as an integer.
        This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatch(
    dict
):
    """
    A node selector requirement is a selector that contains values, a key, and an operator
    that relates the key and values.
    """

    def __init__(
        __self__,
        *,
        key: Optional[str] = None,
        operator: Optional[str] = None,
        values: Optional[Sequence[str]] = None,
    ):
        """
        A node selector requirement is a selector that contains values, a key, and an operator
        that relates the key and values.
        :param str key: The label key that the selector applies to.
        :param str operator: Represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        :param Sequence[str] values: An array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. If the operator is Gt or Lt, the values
               array must have a single element, which will be interpreted as an integer.
               This array is replaced during a strategic merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> Optional[str]:
        """
        Represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        """
        An array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. If the operator is Gt or Lt, the values
        array must have a single element, which will be interpreted as an integer.
        This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields(
    dict
):
    """
    A node selector requirement is a selector that contains values, a key, and an operator
    that relates the key and values.
    """

    def __init__(
        __self__,
        *,
        key: Optional[str] = None,
        operator: Optional[str] = None,
        values: Optional[Sequence[str]] = None,
    ):
        """
        A node selector requirement is a selector that contains values, a key, and an operator
        that relates the key and values.
        :param str key: The label key that the selector applies to.
        :param str operator: Represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        :param Sequence[str] values: An array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. If the operator is Gt or Lt, the values
               array must have a single element, which will be interpreted as an integer.
               This array is replaced during a strategic merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> Optional[str]:
        """
        Represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        """
        An array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. If the operator is Gt or Lt, the values
        array must have a single element, which will be interpreted as an integer.
        This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatch(
    dict
):
    """
    A node selector requirement is a selector that contains values, a key, and an operator
    that relates the key and values.
    """

    def __init__(
        __self__,
        *,
        key: Optional[str] = None,
        operator: Optional[str] = None,
        values: Optional[Sequence[str]] = None,
    ):
        """
        A node selector requirement is a selector that contains values, a key, and an operator
        that relates the key and values.
        :param str key: The label key that the selector applies to.
        :param str operator: Represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        :param Sequence[str] values: An array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. If the operator is Gt or Lt, the values
               array must have a single element, which will be interpreted as an integer.
               This array is replaced during a strategic merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> Optional[str]:
        """
        Represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        """
        An array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. If the operator is Gt or Lt, the values
        array must have a single element, which will be interpreted as an integer.
        This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatch(
    dict
):
    """
    A node selector term, associated with the corresponding weight.
    """

    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "matchExpressions":
            suggest = "match_expressions"
        elif key == "matchFields":
            suggest = "match_fields"

        if suggest:
            pulumi.log.warn(
                f"Key '{key}' not found in ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatch. Access the value via the '{suggest}' property getter instead."
            )

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatch.__key_warning(
            key
        )
        return super().__getitem__(key)

    def get(self, key: str, default=None) -> Any:
        ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatch.__key_warning(
            key
        )
        return super().get(key, default)

    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            Sequence[
                "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatch"
            ]
        ] = None,
        match_fields: Optional[
            Sequence[
                "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatch"
            ]
        ] = None,
    ):
        """
        A node selector term, associated with the corresponding weight.
        :param Sequence['ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatchArgs'] match_expressions: A list of node selector requirements by node's labels.
        :param Sequence['ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatchArgs'] match_fields: A list of node selector requirements by node's fields.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_fields is not None:
            pulumi.set(__self__, "match_fields", match_fields)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        Sequence[
            "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatch"
        ]
    ]:
        """
        A list of node selector requirements by node's labels.
        """
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchFields")
    def match_fields(
        self,
    ) -> Optional[
        Sequence[
            "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatch"
        ]
    ]:
        """
        A list of node selector requirements by node's fields.
        """
        return pulumi.get(self, "match_fields")


@pulumi.output_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution(
    dict
):
    """
    If the affinity requirements specified by this field are not met at
    scheduling time, the pod will not be scheduled onto the node.
    If the affinity requirements specified by this field cease to be met
    at some point during pod execution (e.g. due to an update), the system
    may or may not try to eventually evict the pod from its node.
    """

    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "nodeSelectorTerms":
            suggest = "node_selector_terms"

        if suggest:
            pulumi.log.warn(
                f"Key '{key}' not found in ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution. Access the value via the '{suggest}' property getter instead."
            )

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution.__key_warning(
            key
        )
        return super().__getitem__(key)

    def get(self, key: str, default=None) -> Any:
        ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution.__key_warning(
            key
        )
        return super().get(key, default)

    def __init__(
        __self__,
        *,
        node_selector_terms: Optional[
            Sequence[
                "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms"
            ]
        ] = None,
    ):
        """
        If the affinity requirements specified by this field are not met at
        scheduling time, the pod will not be scheduled onto the node.
        If the affinity requirements specified by this field cease to be met
        at some point during pod execution (e.g. due to an update), the system
        may or may not try to eventually evict the pod from its node.
        :param Sequence['ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgs'] node_selector_terms: Required. A list of node selector terms. The terms are ORed.
        """
        if node_selector_terms is not None:
            pulumi.set(__self__, "node_selector_terms", node_selector_terms)

    @property
    @pulumi.getter(name="nodeSelectorTerms")
    def node_selector_terms(
        self,
    ) -> Optional[
        Sequence[
            "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms"
        ]
    ]:
        """
        Required. A list of node selector terms. The terms are ORed.
        """
        return pulumi.get(self, "node_selector_terms")


@pulumi.output_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms(
    dict
):
    """
    A null or empty node selector term matches no objects. The requirements of
    them are ANDed.
    The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
    """

    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "matchExpressions":
            suggest = "match_expressions"
        elif key == "matchFields":
            suggest = "match_fields"

        if suggest:
            pulumi.log.warn(
                f"Key '{key}' not found in ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms. Access the value via the '{suggest}' property getter instead."
            )

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms.__key_warning(
            key
        )
        return super().__getitem__(key)

    def get(self, key: str, default=None) -> Any:
        ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms.__key_warning(
            key
        )
        return super().get(key, default)

    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            Sequence[
                "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions"
            ]
        ] = None,
        match_fields: Optional[
            Sequence[
                "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields"
            ]
        ] = None,
    ):
        """
        A null or empty node selector term matches no objects. The requirements of
        them are ANDed.
        The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
        :param Sequence['ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgs'] match_expressions: A list of node selector requirements by node's labels.
        :param Sequence['ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgs'] match_fields: A list of node selector requirements by node's fields.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_fields is not None:
            pulumi.set(__self__, "match_fields", match_fields)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        Sequence[
            "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions"
        ]
    ]:
        """
        A list of node selector requirements by node's labels.
        """
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchFields")
    def match_fields(
        self,
    ) -> Optional[
        Sequence[
            "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields"
        ]
    ]:
        """
        A list of node selector requirements by node's fields.
        """
        return pulumi.get(self, "match_fields")


@pulumi.output_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions(
    dict
):
    """
    A node selector requirement is a selector that contains values, a key, and an operator
    that relates the key and values.
    """

    def __init__(
        __self__,
        *,
        key: Optional[str] = None,
        operator: Optional[str] = None,
        values: Optional[Sequence[str]] = None,
    ):
        """
        A node selector requirement is a selector that contains values, a key, and an operator
        that relates the key and values.
        :param str key: The label key that the selector applies to.
        :param str operator: Represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        :param Sequence[str] values: An array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. If the operator is Gt or Lt, the values
               array must have a single element, which will be interpreted as an integer.
               This array is replaced during a strategic merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> Optional[str]:
        """
        Represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        """
        An array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. If the operator is Gt or Lt, the values
        array must have a single element, which will be interpreted as an integer.
        This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatch(
    dict
):
    """
    A node selector requirement is a selector that contains values, a key, and an operator
    that relates the key and values.
    """

    def __init__(
        __self__,
        *,
        key: Optional[str] = None,
        operator: Optional[str] = None,
        values: Optional[Sequence[str]] = None,
    ):
        """
        A node selector requirement is a selector that contains values, a key, and an operator
        that relates the key and values.
        :param str key: The label key that the selector applies to.
        :param str operator: Represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        :param Sequence[str] values: An array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. If the operator is Gt or Lt, the values
               array must have a single element, which will be interpreted as an integer.
               This array is replaced during a strategic merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> Optional[str]:
        """
        Represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        """
        An array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. If the operator is Gt or Lt, the values
        array must have a single element, which will be interpreted as an integer.
        This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields(
    dict
):
    """
    A node selector requirement is a selector that contains values, a key, and an operator
    that relates the key and values.
    """

    def __init__(
        __self__,
        *,
        key: Optional[str] = None,
        operator: Optional[str] = None,
        values: Optional[Sequence[str]] = None,
    ):
        """
        A node selector requirement is a selector that contains values, a key, and an operator
        that relates the key and values.
        :param str key: The label key that the selector applies to.
        :param str operator: Represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        :param Sequence[str] values: An array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. If the operator is Gt or Lt, the values
               array must have a single element, which will be interpreted as an integer.
               This array is replaced during a strategic merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> Optional[str]:
        """
        Represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        """
        An array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. If the operator is Gt or Lt, the values
        array must have a single element, which will be interpreted as an integer.
        This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatch(
    dict
):
    """
    A node selector requirement is a selector that contains values, a key, and an operator
    that relates the key and values.
    """

    def __init__(
        __self__,
        *,
        key: Optional[str] = None,
        operator: Optional[str] = None,
        values: Optional[Sequence[str]] = None,
    ):
        """
        A node selector requirement is a selector that contains values, a key, and an operator
        that relates the key and values.
        :param str key: The label key that the selector applies to.
        :param str operator: Represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        :param Sequence[str] values: An array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. If the operator is Gt or Lt, the values
               array must have a single element, which will be interpreted as an integer.
               This array is replaced during a strategic merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> Optional[str]:
        """
        Represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        """
        An array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. If the operator is Gt or Lt, the values
        array must have a single element, which will be interpreted as an integer.
        This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatch(
    dict
):
    """
    A null or empty node selector term matches no objects. The requirements of
    them are ANDed.
    The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
    """

    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "matchExpressions":
            suggest = "match_expressions"
        elif key == "matchFields":
            suggest = "match_fields"

        if suggest:
            pulumi.log.warn(
                f"Key '{key}' not found in ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatch. Access the value via the '{suggest}' property getter instead."
            )

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatch.__key_warning(
            key
        )
        return super().__getitem__(key)

    def get(self, key: str, default=None) -> Any:
        ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatch.__key_warning(
            key
        )
        return super().get(key, default)

    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            Sequence[
                "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatch"
            ]
        ] = None,
        match_fields: Optional[
            Sequence[
                "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatch"
            ]
        ] = None,
    ):
        """
        A null or empty node selector term matches no objects. The requirements of
        them are ANDed.
        The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
        :param Sequence['ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatchArgs'] match_expressions: A list of node selector requirements by node's labels.
        :param Sequence['ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatchArgs'] match_fields: A list of node selector requirements by node's fields.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_fields is not None:
            pulumi.set(__self__, "match_fields", match_fields)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        Sequence[
            "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatch"
        ]
    ]:
        """
        A list of node selector requirements by node's labels.
        """
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchFields")
    def match_fields(
        self,
    ) -> Optional[
        Sequence[
            "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatch"
        ]
    ]:
        """
        A list of node selector requirements by node's fields.
        """
        return pulumi.get(self, "match_fields")


@pulumi.output_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch(
    dict
):
    """
    If the affinity requirements specified by this field are not met at
    scheduling time, the pod will not be scheduled onto the node.
    If the affinity requirements specified by this field cease to be met
    at some point during pod execution (e.g. due to an update), the system
    may or may not try to eventually evict the pod from its node.
    """

    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "nodeSelectorTerms":
            suggest = "node_selector_terms"

        if suggest:
            pulumi.log.warn(
                f"Key '{key}' not found in ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch. Access the value via the '{suggest}' property getter instead."
            )

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch.__key_warning(
            key
        )
        return super().__getitem__(key)

    def get(self, key: str, default=None) -> Any:
        ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch.__key_warning(
            key
        )
        return super().get(key, default)

    def __init__(
        __self__,
        *,
        node_selector_terms: Optional[
            Sequence[
                "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatch"
            ]
        ] = None,
    ):
        """
        If the affinity requirements specified by this field are not met at
        scheduling time, the pod will not be scheduled onto the node.
        If the affinity requirements specified by this field cease to be met
        at some point during pod execution (e.g. due to an update), the system
        may or may not try to eventually evict the pod from its node.
        :param Sequence['ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatchArgs'] node_selector_terms: Required. A list of node selector terms. The terms are ORed.
        """
        if node_selector_terms is not None:
            pulumi.set(__self__, "node_selector_terms", node_selector_terms)

    @property
    @pulumi.getter(name="nodeSelectorTerms")
    def node_selector_terms(
        self,
    ) -> Optional[
        Sequence[
            "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatch"
        ]
    ]:
        """
        Required. A list of node selector terms. The terms are ORed.
        """
        return pulumi.get(self, "node_selector_terms")


@pulumi.output_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPatch(dict):
    """
    If specified, the pod's scheduling constraints
    """

    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "nodeAffinity":
            suggest = "node_affinity"
        elif key == "podAffinity":
            suggest = "pod_affinity"
        elif key == "podAntiAffinity":
            suggest = "pod_anti_affinity"

        if suggest:
            pulumi.log.warn(
                f"Key '{key}' not found in ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPatch. Access the value via the '{suggest}' property getter instead."
            )

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPatch.__key_warning(
            key
        )
        return super().__getitem__(key)

    def get(self, key: str, default=None) -> Any:
        ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPatch.__key_warning(
            key
        )
        return super().get(key, default)

    def __init__(
        __self__,
        *,
        node_affinity: Optional[
            "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPatch"
        ] = None,
        pod_affinity: Optional[
            "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPatch"
        ] = None,
        pod_anti_affinity: Optional[
            "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPatch"
        ] = None,
    ):
        """
        If specified, the pod's scheduling constraints
        """
        if node_affinity is not None:
            pulumi.set(__self__, "node_affinity", node_affinity)
        if pod_affinity is not None:
            pulumi.set(__self__, "pod_affinity", pod_affinity)
        if pod_anti_affinity is not None:
            pulumi.set(__self__, "pod_anti_affinity", pod_anti_affinity)

    @property
    @pulumi.getter(name="nodeAffinity")
    def node_affinity(
        self,
    ) -> Optional[
        "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPatch"
    ]:
        return pulumi.get(self, "node_affinity")

    @property
    @pulumi.getter(name="podAffinity")
    def pod_affinity(
        self,
    ) -> Optional[
        "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPatch"
    ]:
        return pulumi.get(self, "pod_affinity")

    @property
    @pulumi.getter(name="podAntiAffinity")
    def pod_anti_affinity(
        self,
    ) -> Optional[
        "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPatch"
    ]:
        return pulumi.get(self, "pod_anti_affinity")


@pulumi.output_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinity(dict):
    """
    Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
    """

    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "preferredDuringSchedulingIgnoredDuringExecution":
            suggest = "preferred_during_scheduling_ignored_during_execution"
        elif key == "requiredDuringSchedulingIgnoredDuringExecution":
            suggest = "required_during_scheduling_ignored_during_execution"

        if suggest:
            pulumi.log.warn(
                f"Key '{key}' not found in ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinity. Access the value via the '{suggest}' property getter instead."
            )

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinity.__key_warning(
            key
        )
        return super().__getitem__(key)

    def get(self, key: str, default=None) -> Any:
        ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinity.__key_warning(
            key
        )
        return super().get(key, default)

    def __init__(
        __self__,
        *,
        preferred_during_scheduling_ignored_during_execution: Optional[
            Sequence[
                "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution"
            ]
        ] = None,
        required_during_scheduling_ignored_during_execution: Optional[
            Sequence[
                "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution"
            ]
        ] = None,
    ):
        """
        Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
        :param Sequence['ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs'] preferred_during_scheduling_ignored_during_execution: The scheduler will prefer to schedule pods to nodes that satisfy
               the affinity expressions specified by this field, but it may choose
               a node that violates one or more of the expressions. The node that is
               most preferred is the one with the greatest sum of weights, i.e.
               for each node that meets all of the scheduling requirements (resource
               request, requiredDuringScheduling affinity expressions, etc.),
               compute a sum by iterating through the elements of this field and adding
               "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
               node(s) with the highest sum are the most preferred.
        :param Sequence['ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs'] required_during_scheduling_ignored_during_execution: If the affinity requirements specified by this field are not met at
               scheduling time, the pod will not be scheduled onto the node.
               If the affinity requirements specified by this field cease to be met
               at some point during pod execution (e.g. due to a pod label update), the
               system may or may not try to eventually evict the pod from its node.
               When there are multiple elements, the lists of nodes corresponding to each
               podAffinityTerm are intersected, i.e. all terms must be satisfied.
        """
        if preferred_during_scheduling_ignored_during_execution is not None:
            pulumi.set(
                __self__,
                "preferred_during_scheduling_ignored_during_execution",
                preferred_during_scheduling_ignored_during_execution,
            )
        if required_during_scheduling_ignored_during_execution is not None:
            pulumi.set(
                __self__,
                "required_during_scheduling_ignored_during_execution",
                required_during_scheduling_ignored_during_execution,
            )

    @property
    @pulumi.getter(name="preferredDuringSchedulingIgnoredDuringExecution")
    def preferred_during_scheduling_ignored_during_execution(
        self,
    ) -> Optional[
        Sequence[
            "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution"
        ]
    ]:
        """
        The scheduler will prefer to schedule pods to nodes that satisfy
        the affinity expressions specified by this field, but it may choose
        a node that violates one or more of the expressions. The node that is
        most preferred is the one with the greatest sum of weights, i.e.
        for each node that meets all of the scheduling requirements (resource
        request, requiredDuringScheduling affinity expressions, etc.),
        compute a sum by iterating through the elements of this field and adding
        "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
        node(s) with the highest sum are the most preferred.
        """
        return pulumi.get(self, "preferred_during_scheduling_ignored_during_execution")

    @property
    @pulumi.getter(name="requiredDuringSchedulingIgnoredDuringExecution")
    def required_during_scheduling_ignored_during_execution(
        self,
    ) -> Optional[
        Sequence[
            "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution"
        ]
    ]:
        """
        If the affinity requirements specified by this field are not met at
        scheduling time, the pod will not be scheduled onto the node.
        If the affinity requirements specified by this field cease to be met
        at some point during pod execution (e.g. due to a pod label update), the
        system may or may not try to eventually evict the pod from its node.
        When there are multiple elements, the lists of nodes corresponding to each
        podAffinityTerm are intersected, i.e. all terms must be satisfied.
        """
        return pulumi.get(self, "required_during_scheduling_ignored_during_execution")


@pulumi.output_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPatch(
    dict
):
    """
    Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
    """

    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "preferredDuringSchedulingIgnoredDuringExecution":
            suggest = "preferred_during_scheduling_ignored_during_execution"
        elif key == "requiredDuringSchedulingIgnoredDuringExecution":
            suggest = "required_during_scheduling_ignored_during_execution"

        if suggest:
            pulumi.log.warn(
                f"Key '{key}' not found in ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPatch. Access the value via the '{suggest}' property getter instead."
            )

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPatch.__key_warning(
            key
        )
        return super().__getitem__(key)

    def get(self, key: str, default=None) -> Any:
        ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPatch.__key_warning(
            key
        )
        return super().get(key, default)

    def __init__(
        __self__,
        *,
        preferred_during_scheduling_ignored_during_execution: Optional[
            Sequence[
                "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch"
            ]
        ] = None,
        required_during_scheduling_ignored_during_execution: Optional[
            Sequence[
                "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch"
            ]
        ] = None,
    ):
        """
        Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
        :param Sequence['ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgs'] preferred_during_scheduling_ignored_during_execution: The scheduler will prefer to schedule pods to nodes that satisfy
               the affinity expressions specified by this field, but it may choose
               a node that violates one or more of the expressions. The node that is
               most preferred is the one with the greatest sum of weights, i.e.
               for each node that meets all of the scheduling requirements (resource
               request, requiredDuringScheduling affinity expressions, etc.),
               compute a sum by iterating through the elements of this field and adding
               "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
               node(s) with the highest sum are the most preferred.
        :param Sequence['ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgs'] required_during_scheduling_ignored_during_execution: If the affinity requirements specified by this field are not met at
               scheduling time, the pod will not be scheduled onto the node.
               If the affinity requirements specified by this field cease to be met
               at some point during pod execution (e.g. due to a pod label update), the
               system may or may not try to eventually evict the pod from its node.
               When there are multiple elements, the lists of nodes corresponding to each
               podAffinityTerm are intersected, i.e. all terms must be satisfied.
        """
        if preferred_during_scheduling_ignored_during_execution is not None:
            pulumi.set(
                __self__,
                "preferred_during_scheduling_ignored_during_execution",
                preferred_during_scheduling_ignored_during_execution,
            )
        if required_during_scheduling_ignored_during_execution is not None:
            pulumi.set(
                __self__,
                "required_during_scheduling_ignored_during_execution",
                required_during_scheduling_ignored_during_execution,
            )

    @property
    @pulumi.getter(name="preferredDuringSchedulingIgnoredDuringExecution")
    def preferred_during_scheduling_ignored_during_execution(
        self,
    ) -> Optional[
        Sequence[
            "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch"
        ]
    ]:
        """
        The scheduler will prefer to schedule pods to nodes that satisfy
        the affinity expressions specified by this field, but it may choose
        a node that violates one or more of the expressions. The node that is
        most preferred is the one with the greatest sum of weights, i.e.
        for each node that meets all of the scheduling requirements (resource
        request, requiredDuringScheduling affinity expressions, etc.),
        compute a sum by iterating through the elements of this field and adding
        "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
        node(s) with the highest sum are the most preferred.
        """
        return pulumi.get(self, "preferred_during_scheduling_ignored_during_execution")

    @property
    @pulumi.getter(name="requiredDuringSchedulingIgnoredDuringExecution")
    def required_during_scheduling_ignored_during_execution(
        self,
    ) -> Optional[
        Sequence[
            "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch"
        ]
    ]:
        """
        If the affinity requirements specified by this field are not met at
        scheduling time, the pod will not be scheduled onto the node.
        If the affinity requirements specified by this field cease to be met
        at some point during pod execution (e.g. due to a pod label update), the
        system may or may not try to eventually evict the pod from its node.
        When there are multiple elements, the lists of nodes corresponding to each
        podAffinityTerm are intersected, i.e. all terms must be satisfied.
        """
        return pulumi.get(self, "required_during_scheduling_ignored_during_execution")


@pulumi.output_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution(
    dict
):
    """
    The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
    """

    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "podAffinityTerm":
            suggest = "pod_affinity_term"

        if suggest:
            pulumi.log.warn(
                f"Key '{key}' not found in ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution. Access the value via the '{suggest}' property getter instead."
            )

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution.__key_warning(
            key
        )
        return super().__getitem__(key)

    def get(self, key: str, default=None) -> Any:
        ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution.__key_warning(
            key
        )
        return super().get(key, default)

    def __init__(
        __self__,
        *,
        pod_affinity_term: Optional[
            "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm"
        ] = None,
        weight: Optional[int] = None,
    ):
        """
        The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
        :param int weight: weight associated with matching the corresponding podAffinityTerm,
               in the range 1-100.
        """
        if pod_affinity_term is not None:
            pulumi.set(__self__, "pod_affinity_term", pod_affinity_term)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter(name="podAffinityTerm")
    def pod_affinity_term(
        self,
    ) -> Optional[
        "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm"
    ]:
        return pulumi.get(self, "pod_affinity_term")

    @property
    @pulumi.getter
    def weight(self) -> Optional[int]:
        """
        weight associated with matching the corresponding podAffinityTerm,
        in the range 1-100.
        """
        return pulumi.get(self, "weight")


@pulumi.output_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch(
    dict
):
    """
    The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
    """

    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "podAffinityTerm":
            suggest = "pod_affinity_term"

        if suggest:
            pulumi.log.warn(
                f"Key '{key}' not found in ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch. Access the value via the '{suggest}' property getter instead."
            )

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch.__key_warning(
            key
        )
        return super().__getitem__(key)

    def get(self, key: str, default=None) -> Any:
        ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch.__key_warning(
            key
        )
        return super().get(key, default)

    def __init__(
        __self__,
        *,
        pod_affinity_term: Optional[
            "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch"
        ] = None,
        weight: Optional[int] = None,
    ):
        """
        The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
        :param int weight: weight associated with matching the corresponding podAffinityTerm,
               in the range 1-100.
        """
        if pod_affinity_term is not None:
            pulumi.set(__self__, "pod_affinity_term", pod_affinity_term)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter(name="podAffinityTerm")
    def pod_affinity_term(
        self,
    ) -> Optional[
        "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch"
    ]:
        return pulumi.get(self, "pod_affinity_term")

    @property
    @pulumi.getter
    def weight(self) -> Optional[int]:
        """
        weight associated with matching the corresponding podAffinityTerm,
        in the range 1-100.
        """
        return pulumi.get(self, "weight")


@pulumi.output_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm(
    dict
):
    """
    Required. A pod affinity term, associated with the corresponding weight.
    """

    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "labelSelector":
            suggest = "label_selector"
        elif key == "matchLabelKeys":
            suggest = "match_label_keys"
        elif key == "mismatchLabelKeys":
            suggest = "mismatch_label_keys"
        elif key == "namespaceSelector":
            suggest = "namespace_selector"
        elif key == "topologyKey":
            suggest = "topology_key"

        if suggest:
            pulumi.log.warn(
                f"Key '{key}' not found in ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm. Access the value via the '{suggest}' property getter instead."
            )

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm.__key_warning(
            key
        )
        return super().__getitem__(key)

    def get(self, key: str, default=None) -> Any:
        ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm.__key_warning(
            key
        )
        return super().get(key, default)

    def __init__(
        __self__,
        *,
        label_selector: Optional[
            "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector"
        ] = None,
        match_label_keys: Optional[Sequence[str]] = None,
        mismatch_label_keys: Optional[Sequence[str]] = None,
        namespace_selector: Optional[
            "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector"
        ] = None,
        namespaces: Optional[Sequence[str]] = None,
        topology_key: Optional[str] = None,
    ):
        """
        Required. A pod affinity term, associated with the corresponding weight.
        :param Sequence[str] match_label_keys: MatchLabelKeys is a set of pod label keys to select which pods will
               be taken into consideration. The keys are used to lookup values from the
               incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
               to select the group of existing pods which pods will be taken into consideration
               for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
               pod labels will be ignored. The default value is empty.
               The same key is forbidden to exist in both matchLabelKeys and labelSelector.
               Also, matchLabelKeys cannot be set when labelSelector isn't set.
               This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        :param Sequence[str] mismatch_label_keys: MismatchLabelKeys is a set of pod label keys to select which pods will
               be taken into consideration. The keys are used to lookup values from the
               incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
               to select the group of existing pods which pods will be taken into consideration
               for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
               pod labels will be ignored. The default value is empty.
               The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
               Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
               This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        :param Sequence[str] namespaces: namespaces specifies a static list of namespace names that the term applies to.
               The term is applied to the union of the namespaces listed in this field
               and the ones selected by namespaceSelector.
               null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        :param str topology_key: This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
               the labelSelector in the specified namespaces, where co-located is defined as running on a node
               whose value of the label with key topologyKey matches that of any node on which any of the
               selected pods is running.
               Empty topologyKey is not allowed.
        """
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if match_label_keys is not None:
            pulumi.set(__self__, "match_label_keys", match_label_keys)
        if mismatch_label_keys is not None:
            pulumi.set(__self__, "mismatch_label_keys", mismatch_label_keys)
        if namespace_selector is not None:
            pulumi.set(__self__, "namespace_selector", namespace_selector)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)
        if topology_key is not None:
            pulumi.set(__self__, "topology_key", topology_key)

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(
        self,
    ) -> Optional[
        "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector"
    ]:
        return pulumi.get(self, "label_selector")

    @property
    @pulumi.getter(name="matchLabelKeys")
    def match_label_keys(self) -> Optional[Sequence[str]]:
        """
        MatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both matchLabelKeys and labelSelector.
        Also, matchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        return pulumi.get(self, "match_label_keys")

    @property
    @pulumi.getter(name="mismatchLabelKeys")
    def mismatch_label_keys(self) -> Optional[Sequence[str]]:
        """
        MismatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
        Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        return pulumi.get(self, "mismatch_label_keys")

    @property
    @pulumi.getter(name="namespaceSelector")
    def namespace_selector(
        self,
    ) -> Optional[
        "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector"
    ]:
        return pulumi.get(self, "namespace_selector")

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[Sequence[str]]:
        """
        namespaces specifies a static list of namespace names that the term applies to.
        The term is applied to the union of the namespaces listed in this field
        and the ones selected by namespaceSelector.
        null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        """
        return pulumi.get(self, "namespaces")

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> Optional[str]:
        """
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
        the labelSelector in the specified namespaces, where co-located is defined as running on a node
        whose value of the label with key topologyKey matches that of any node on which any of the
        selected pods is running.
        Empty topologyKey is not allowed.
        """
        return pulumi.get(self, "topology_key")


@pulumi.output_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector(
    dict
):
    """
    A label query over a set of resources, in this case pods.
    If it's null, this PodAffinityTerm matches with no Pods.
    """

    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "matchExpressions":
            suggest = "match_expressions"
        elif key == "matchLabels":
            suggest = "match_labels"

        if suggest:
            pulumi.log.warn(
                f"Key '{key}' not found in ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector. Access the value via the '{suggest}' property getter instead."
            )

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector.__key_warning(
            key
        )
        return super().__getitem__(key)

    def get(self, key: str, default=None) -> Any:
        ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector.__key_warning(
            key
        )
        return super().get(key, default)

    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            Sequence[
                "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions"
            ]
        ] = None,
        match_labels: Optional[Mapping[str, str]] = None,
    ):
        """
        A label query over a set of resources, in this case pods.
        If it's null, this PodAffinityTerm matches with no Pods.
        :param Sequence['ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs'] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param Mapping[str, str] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
               map is equivalent to an element of matchExpressions, whose key field is "key", the
               operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        Sequence[
            "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions"
        ]
    ]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, str]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")


@pulumi.output_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions(
    dict
):
    """
    A label selector requirement is a selector that contains values, a key, and an operator that
    relates the key and values.
    """

    def __init__(
        __self__,
        *,
        key: Optional[str] = None,
        operator: Optional[str] = None,
        values: Optional[Sequence[str]] = None,
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        :param str key: key is the label key that the selector applies to.
        :param str operator: operator represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists and DoesNotExist.
        :param Sequence[str] values: values is an array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. This array is replaced during a strategic
               merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> Optional[str]:
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch(
    dict
):
    """
    A label selector requirement is a selector that contains values, a key, and an operator that
    relates the key and values.
    """

    def __init__(
        __self__,
        *,
        key: Optional[str] = None,
        operator: Optional[str] = None,
        values: Optional[Sequence[str]] = None,
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        :param str key: key is the label key that the selector applies to.
        :param str operator: operator represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists and DoesNotExist.
        :param Sequence[str] values: values is an array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. This array is replaced during a strategic
               merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> Optional[str]:
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch(
    dict
):
    """
    A label query over a set of resources, in this case pods.
    If it's null, this PodAffinityTerm matches with no Pods.
    """

    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "matchExpressions":
            suggest = "match_expressions"
        elif key == "matchLabels":
            suggest = "match_labels"

        if suggest:
            pulumi.log.warn(
                f"Key '{key}' not found in ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch. Access the value via the '{suggest}' property getter instead."
            )

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch.__key_warning(
            key
        )
        return super().__getitem__(key)

    def get(self, key: str, default=None) -> Any:
        ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch.__key_warning(
            key
        )
        return super().get(key, default)

    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            Sequence[
                "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch"
            ]
        ] = None,
        match_labels: Optional[Mapping[str, str]] = None,
    ):
        """
        A label query over a set of resources, in this case pods.
        If it's null, this PodAffinityTerm matches with no Pods.
        :param Sequence['ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArgs'] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param Mapping[str, str] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
               map is equivalent to an element of matchExpressions, whose key field is "key", the
               operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        Sequence[
            "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch"
        ]
    ]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, str]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")


@pulumi.output_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector(
    dict
):
    """
    A label query over the set of namespaces that the term applies to.
    The term is applied to the union of the namespaces selected by this field
    and the ones listed in the namespaces field.
    null selector and null or empty namespaces list means "this pod's namespace".
    An empty selector ({}) matches all namespaces.
    """

    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "matchExpressions":
            suggest = "match_expressions"
        elif key == "matchLabels":
            suggest = "match_labels"

        if suggest:
            pulumi.log.warn(
                f"Key '{key}' not found in ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector. Access the value via the '{suggest}' property getter instead."
            )

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector.__key_warning(
            key
        )
        return super().__getitem__(key)

    def get(self, key: str, default=None) -> Any:
        ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector.__key_warning(
            key
        )
        return super().get(key, default)

    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            Sequence[
                "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions"
            ]
        ] = None,
        match_labels: Optional[Mapping[str, str]] = None,
    ):
        """
        A label query over the set of namespaces that the term applies to.
        The term is applied to the union of the namespaces selected by this field
        and the ones listed in the namespaces field.
        null selector and null or empty namespaces list means "this pod's namespace".
        An empty selector ({}) matches all namespaces.
        :param Sequence['ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs'] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param Mapping[str, str] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
               map is equivalent to an element of matchExpressions, whose key field is "key", the
               operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        Sequence[
            "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions"
        ]
    ]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, str]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")


@pulumi.output_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions(
    dict
):
    """
    A label selector requirement is a selector that contains values, a key, and an operator that
    relates the key and values.
    """

    def __init__(
        __self__,
        *,
        key: Optional[str] = None,
        operator: Optional[str] = None,
        values: Optional[Sequence[str]] = None,
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        :param str key: key is the label key that the selector applies to.
        :param str operator: operator represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists and DoesNotExist.
        :param Sequence[str] values: values is an array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. This array is replaced during a strategic
               merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> Optional[str]:
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch(
    dict
):
    """
    A label selector requirement is a selector that contains values, a key, and an operator that
    relates the key and values.
    """

    def __init__(
        __self__,
        *,
        key: Optional[str] = None,
        operator: Optional[str] = None,
        values: Optional[Sequence[str]] = None,
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        :param str key: key is the label key that the selector applies to.
        :param str operator: operator represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists and DoesNotExist.
        :param Sequence[str] values: values is an array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. This array is replaced during a strategic
               merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> Optional[str]:
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch(
    dict
):
    """
    A label query over the set of namespaces that the term applies to.
    The term is applied to the union of the namespaces selected by this field
    and the ones listed in the namespaces field.
    null selector and null or empty namespaces list means "this pod's namespace".
    An empty selector ({}) matches all namespaces.
    """

    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "matchExpressions":
            suggest = "match_expressions"
        elif key == "matchLabels":
            suggest = "match_labels"

        if suggest:
            pulumi.log.warn(
                f"Key '{key}' not found in ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch. Access the value via the '{suggest}' property getter instead."
            )

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch.__key_warning(
            key
        )
        return super().__getitem__(key)

    def get(self, key: str, default=None) -> Any:
        ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch.__key_warning(
            key
        )
        return super().get(key, default)

    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            Sequence[
                "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch"
            ]
        ] = None,
        match_labels: Optional[Mapping[str, str]] = None,
    ):
        """
        A label query over the set of namespaces that the term applies to.
        The term is applied to the union of the namespaces selected by this field
        and the ones listed in the namespaces field.
        null selector and null or empty namespaces list means "this pod's namespace".
        An empty selector ({}) matches all namespaces.
        :param Sequence['ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArgs'] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param Mapping[str, str] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
               map is equivalent to an element of matchExpressions, whose key field is "key", the
               operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        Sequence[
            "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch"
        ]
    ]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, str]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")


@pulumi.output_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch(
    dict
):
    """
    Required. A pod affinity term, associated with the corresponding weight.
    """

    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "labelSelector":
            suggest = "label_selector"
        elif key == "matchLabelKeys":
            suggest = "match_label_keys"
        elif key == "mismatchLabelKeys":
            suggest = "mismatch_label_keys"
        elif key == "namespaceSelector":
            suggest = "namespace_selector"
        elif key == "topologyKey":
            suggest = "topology_key"

        if suggest:
            pulumi.log.warn(
                f"Key '{key}' not found in ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch. Access the value via the '{suggest}' property getter instead."
            )

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch.__key_warning(
            key
        )
        return super().__getitem__(key)

    def get(self, key: str, default=None) -> Any:
        ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch.__key_warning(
            key
        )
        return super().get(key, default)

    def __init__(
        __self__,
        *,
        label_selector: Optional[
            "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch"
        ] = None,
        match_label_keys: Optional[Sequence[str]] = None,
        mismatch_label_keys: Optional[Sequence[str]] = None,
        namespace_selector: Optional[
            "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch"
        ] = None,
        namespaces: Optional[Sequence[str]] = None,
        topology_key: Optional[str] = None,
    ):
        """
        Required. A pod affinity term, associated with the corresponding weight.
        :param Sequence[str] match_label_keys: MatchLabelKeys is a set of pod label keys to select which pods will
               be taken into consideration. The keys are used to lookup values from the
               incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
               to select the group of existing pods which pods will be taken into consideration
               for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
               pod labels will be ignored. The default value is empty.
               The same key is forbidden to exist in both matchLabelKeys and labelSelector.
               Also, matchLabelKeys cannot be set when labelSelector isn't set.
               This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        :param Sequence[str] mismatch_label_keys: MismatchLabelKeys is a set of pod label keys to select which pods will
               be taken into consideration. The keys are used to lookup values from the
               incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
               to select the group of existing pods which pods will be taken into consideration
               for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
               pod labels will be ignored. The default value is empty.
               The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
               Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
               This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        :param Sequence[str] namespaces: namespaces specifies a static list of namespace names that the term applies to.
               The term is applied to the union of the namespaces listed in this field
               and the ones selected by namespaceSelector.
               null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        :param str topology_key: This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
               the labelSelector in the specified namespaces, where co-located is defined as running on a node
               whose value of the label with key topologyKey matches that of any node on which any of the
               selected pods is running.
               Empty topologyKey is not allowed.
        """
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if match_label_keys is not None:
            pulumi.set(__self__, "match_label_keys", match_label_keys)
        if mismatch_label_keys is not None:
            pulumi.set(__self__, "mismatch_label_keys", mismatch_label_keys)
        if namespace_selector is not None:
            pulumi.set(__self__, "namespace_selector", namespace_selector)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)
        if topology_key is not None:
            pulumi.set(__self__, "topology_key", topology_key)

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(
        self,
    ) -> Optional[
        "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch"
    ]:
        return pulumi.get(self, "label_selector")

    @property
    @pulumi.getter(name="matchLabelKeys")
    def match_label_keys(self) -> Optional[Sequence[str]]:
        """
        MatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both matchLabelKeys and labelSelector.
        Also, matchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        return pulumi.get(self, "match_label_keys")

    @property
    @pulumi.getter(name="mismatchLabelKeys")
    def mismatch_label_keys(self) -> Optional[Sequence[str]]:
        """
        MismatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
        Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        return pulumi.get(self, "mismatch_label_keys")

    @property
    @pulumi.getter(name="namespaceSelector")
    def namespace_selector(
        self,
    ) -> Optional[
        "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch"
    ]:
        return pulumi.get(self, "namespace_selector")

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[Sequence[str]]:
        """
        namespaces specifies a static list of namespace names that the term applies to.
        The term is applied to the union of the namespaces listed in this field
        and the ones selected by namespaceSelector.
        null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        """
        return pulumi.get(self, "namespaces")

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> Optional[str]:
        """
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
        the labelSelector in the specified namespaces, where co-located is defined as running on a node
        whose value of the label with key topologyKey matches that of any node on which any of the
        selected pods is running.
        Empty topologyKey is not allowed.
        """
        return pulumi.get(self, "topology_key")


@pulumi.output_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution(
    dict
):
    """
    Defines a set of pods (namely those matching the labelSelector
    relative to the given namespace(s)) that this pod should be
    co-located (affinity) or not co-located (anti-affinity) with,
    where co-located is defined as running on a node whose value of
    the label with key <topologyKey> matches that of any node on which
    a pod of the set of pods is running
    """

    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "labelSelector":
            suggest = "label_selector"
        elif key == "matchLabelKeys":
            suggest = "match_label_keys"
        elif key == "mismatchLabelKeys":
            suggest = "mismatch_label_keys"
        elif key == "namespaceSelector":
            suggest = "namespace_selector"
        elif key == "topologyKey":
            suggest = "topology_key"

        if suggest:
            pulumi.log.warn(
                f"Key '{key}' not found in ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution. Access the value via the '{suggest}' property getter instead."
            )

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution.__key_warning(
            key
        )
        return super().__getitem__(key)

    def get(self, key: str, default=None) -> Any:
        ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution.__key_warning(
            key
        )
        return super().get(key, default)

    def __init__(
        __self__,
        *,
        label_selector: Optional[
            "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector"
        ] = None,
        match_label_keys: Optional[Sequence[str]] = None,
        mismatch_label_keys: Optional[Sequence[str]] = None,
        namespace_selector: Optional[
            "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector"
        ] = None,
        namespaces: Optional[Sequence[str]] = None,
        topology_key: Optional[str] = None,
    ):
        """
        Defines a set of pods (namely those matching the labelSelector
        relative to the given namespace(s)) that this pod should be
        co-located (affinity) or not co-located (anti-affinity) with,
        where co-located is defined as running on a node whose value of
        the label with key <topologyKey> matches that of any node on which
        a pod of the set of pods is running
        :param Sequence[str] match_label_keys: MatchLabelKeys is a set of pod label keys to select which pods will
               be taken into consideration. The keys are used to lookup values from the
               incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
               to select the group of existing pods which pods will be taken into consideration
               for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
               pod labels will be ignored. The default value is empty.
               The same key is forbidden to exist in both matchLabelKeys and labelSelector.
               Also, matchLabelKeys cannot be set when labelSelector isn't set.
               This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        :param Sequence[str] mismatch_label_keys: MismatchLabelKeys is a set of pod label keys to select which pods will
               be taken into consideration. The keys are used to lookup values from the
               incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
               to select the group of existing pods which pods will be taken into consideration
               for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
               pod labels will be ignored. The default value is empty.
               The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
               Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
               This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        :param Sequence[str] namespaces: namespaces specifies a static list of namespace names that the term applies to.
               The term is applied to the union of the namespaces listed in this field
               and the ones selected by namespaceSelector.
               null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        :param str topology_key: This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
               the labelSelector in the specified namespaces, where co-located is defined as running on a node
               whose value of the label with key topologyKey matches that of any node on which any of the
               selected pods is running.
               Empty topologyKey is not allowed.
        """
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if match_label_keys is not None:
            pulumi.set(__self__, "match_label_keys", match_label_keys)
        if mismatch_label_keys is not None:
            pulumi.set(__self__, "mismatch_label_keys", mismatch_label_keys)
        if namespace_selector is not None:
            pulumi.set(__self__, "namespace_selector", namespace_selector)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)
        if topology_key is not None:
            pulumi.set(__self__, "topology_key", topology_key)

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(
        self,
    ) -> Optional[
        "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector"
    ]:
        return pulumi.get(self, "label_selector")

    @property
    @pulumi.getter(name="matchLabelKeys")
    def match_label_keys(self) -> Optional[Sequence[str]]:
        """
        MatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both matchLabelKeys and labelSelector.
        Also, matchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        return pulumi.get(self, "match_label_keys")

    @property
    @pulumi.getter(name="mismatchLabelKeys")
    def mismatch_label_keys(self) -> Optional[Sequence[str]]:
        """
        MismatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
        Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        return pulumi.get(self, "mismatch_label_keys")

    @property
    @pulumi.getter(name="namespaceSelector")
    def namespace_selector(
        self,
    ) -> Optional[
        "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector"
    ]:
        return pulumi.get(self, "namespace_selector")

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[Sequence[str]]:
        """
        namespaces specifies a static list of namespace names that the term applies to.
        The term is applied to the union of the namespaces listed in this field
        and the ones selected by namespaceSelector.
        null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        """
        return pulumi.get(self, "namespaces")

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> Optional[str]:
        """
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
        the labelSelector in the specified namespaces, where co-located is defined as running on a node
        whose value of the label with key topologyKey matches that of any node on which any of the
        selected pods is running.
        Empty topologyKey is not allowed.
        """
        return pulumi.get(self, "topology_key")


@pulumi.output_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector(
    dict
):
    """
    A label query over a set of resources, in this case pods.
    If it's null, this PodAffinityTerm matches with no Pods.
    """

    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "matchExpressions":
            suggest = "match_expressions"
        elif key == "matchLabels":
            suggest = "match_labels"

        if suggest:
            pulumi.log.warn(
                f"Key '{key}' not found in ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector. Access the value via the '{suggest}' property getter instead."
            )

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector.__key_warning(
            key
        )
        return super().__getitem__(key)

    def get(self, key: str, default=None) -> Any:
        ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector.__key_warning(
            key
        )
        return super().get(key, default)

    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            Sequence[
                "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions"
            ]
        ] = None,
        match_labels: Optional[Mapping[str, str]] = None,
    ):
        """
        A label query over a set of resources, in this case pods.
        If it's null, this PodAffinityTerm matches with no Pods.
        :param Sequence['ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs'] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param Mapping[str, str] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
               map is equivalent to an element of matchExpressions, whose key field is "key", the
               operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        Sequence[
            "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions"
        ]
    ]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, str]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")


@pulumi.output_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions(
    dict
):
    """
    A label selector requirement is a selector that contains values, a key, and an operator that
    relates the key and values.
    """

    def __init__(
        __self__,
        *,
        key: Optional[str] = None,
        operator: Optional[str] = None,
        values: Optional[Sequence[str]] = None,
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        :param str key: key is the label key that the selector applies to.
        :param str operator: operator represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists and DoesNotExist.
        :param Sequence[str] values: values is an array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. This array is replaced during a strategic
               merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> Optional[str]:
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch(
    dict
):
    """
    A label selector requirement is a selector that contains values, a key, and an operator that
    relates the key and values.
    """

    def __init__(
        __self__,
        *,
        key: Optional[str] = None,
        operator: Optional[str] = None,
        values: Optional[Sequence[str]] = None,
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        :param str key: key is the label key that the selector applies to.
        :param str operator: operator represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists and DoesNotExist.
        :param Sequence[str] values: values is an array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. This array is replaced during a strategic
               merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> Optional[str]:
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch(
    dict
):
    """
    A label query over a set of resources, in this case pods.
    If it's null, this PodAffinityTerm matches with no Pods.
    """

    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "matchExpressions":
            suggest = "match_expressions"
        elif key == "matchLabels":
            suggest = "match_labels"

        if suggest:
            pulumi.log.warn(
                f"Key '{key}' not found in ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch. Access the value via the '{suggest}' property getter instead."
            )

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch.__key_warning(
            key
        )
        return super().__getitem__(key)

    def get(self, key: str, default=None) -> Any:
        ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch.__key_warning(
            key
        )
        return super().get(key, default)

    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            Sequence[
                "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch"
            ]
        ] = None,
        match_labels: Optional[Mapping[str, str]] = None,
    ):
        """
        A label query over a set of resources, in this case pods.
        If it's null, this PodAffinityTerm matches with no Pods.
        :param Sequence['ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArgs'] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param Mapping[str, str] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
               map is equivalent to an element of matchExpressions, whose key field is "key", the
               operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        Sequence[
            "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch"
        ]
    ]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, str]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")


@pulumi.output_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector(
    dict
):
    """
    A label query over the set of namespaces that the term applies to.
    The term is applied to the union of the namespaces selected by this field
    and the ones listed in the namespaces field.
    null selector and null or empty namespaces list means "this pod's namespace".
    An empty selector ({}) matches all namespaces.
    """

    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "matchExpressions":
            suggest = "match_expressions"
        elif key == "matchLabels":
            suggest = "match_labels"

        if suggest:
            pulumi.log.warn(
                f"Key '{key}' not found in ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector. Access the value via the '{suggest}' property getter instead."
            )

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector.__key_warning(
            key
        )
        return super().__getitem__(key)

    def get(self, key: str, default=None) -> Any:
        ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector.__key_warning(
            key
        )
        return super().get(key, default)

    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            Sequence[
                "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions"
            ]
        ] = None,
        match_labels: Optional[Mapping[str, str]] = None,
    ):
        """
        A label query over the set of namespaces that the term applies to.
        The term is applied to the union of the namespaces selected by this field
        and the ones listed in the namespaces field.
        null selector and null or empty namespaces list means "this pod's namespace".
        An empty selector ({}) matches all namespaces.
        :param Sequence['ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs'] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param Mapping[str, str] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
               map is equivalent to an element of matchExpressions, whose key field is "key", the
               operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        Sequence[
            "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions"
        ]
    ]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, str]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")


@pulumi.output_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions(
    dict
):
    """
    A label selector requirement is a selector that contains values, a key, and an operator that
    relates the key and values.
    """

    def __init__(
        __self__,
        *,
        key: Optional[str] = None,
        operator: Optional[str] = None,
        values: Optional[Sequence[str]] = None,
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        :param str key: key is the label key that the selector applies to.
        :param str operator: operator represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists and DoesNotExist.
        :param Sequence[str] values: values is an array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. This array is replaced during a strategic
               merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> Optional[str]:
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch(
    dict
):
    """
    A label selector requirement is a selector that contains values, a key, and an operator that
    relates the key and values.
    """

    def __init__(
        __self__,
        *,
        key: Optional[str] = None,
        operator: Optional[str] = None,
        values: Optional[Sequence[str]] = None,
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        :param str key: key is the label key that the selector applies to.
        :param str operator: operator represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists and DoesNotExist.
        :param Sequence[str] values: values is an array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. This array is replaced during a strategic
               merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> Optional[str]:
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch(
    dict
):
    """
    A label query over the set of namespaces that the term applies to.
    The term is applied to the union of the namespaces selected by this field
    and the ones listed in the namespaces field.
    null selector and null or empty namespaces list means "this pod's namespace".
    An empty selector ({}) matches all namespaces.
    """

    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "matchExpressions":
            suggest = "match_expressions"
        elif key == "matchLabels":
            suggest = "match_labels"

        if suggest:
            pulumi.log.warn(
                f"Key '{key}' not found in ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch. Access the value via the '{suggest}' property getter instead."
            )

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch.__key_warning(
            key
        )
        return super().__getitem__(key)

    def get(self, key: str, default=None) -> Any:
        ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch.__key_warning(
            key
        )
        return super().get(key, default)

    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            Sequence[
                "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch"
            ]
        ] = None,
        match_labels: Optional[Mapping[str, str]] = None,
    ):
        """
        A label query over the set of namespaces that the term applies to.
        The term is applied to the union of the namespaces selected by this field
        and the ones listed in the namespaces field.
        null selector and null or empty namespaces list means "this pod's namespace".
        An empty selector ({}) matches all namespaces.
        :param Sequence['ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArgs'] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param Mapping[str, str] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
               map is equivalent to an element of matchExpressions, whose key field is "key", the
               operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        Sequence[
            "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch"
        ]
    ]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, str]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")


@pulumi.output_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch(
    dict
):
    """
    Defines a set of pods (namely those matching the labelSelector
    relative to the given namespace(s)) that this pod should be
    co-located (affinity) or not co-located (anti-affinity) with,
    where co-located is defined as running on a node whose value of
    the label with key <topologyKey> matches that of any node on which
    a pod of the set of pods is running
    """

    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "labelSelector":
            suggest = "label_selector"
        elif key == "matchLabelKeys":
            suggest = "match_label_keys"
        elif key == "mismatchLabelKeys":
            suggest = "mismatch_label_keys"
        elif key == "namespaceSelector":
            suggest = "namespace_selector"
        elif key == "topologyKey":
            suggest = "topology_key"

        if suggest:
            pulumi.log.warn(
                f"Key '{key}' not found in ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch. Access the value via the '{suggest}' property getter instead."
            )

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch.__key_warning(
            key
        )
        return super().__getitem__(key)

    def get(self, key: str, default=None) -> Any:
        ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch.__key_warning(
            key
        )
        return super().get(key, default)

    def __init__(
        __self__,
        *,
        label_selector: Optional[
            "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch"
        ] = None,
        match_label_keys: Optional[Sequence[str]] = None,
        mismatch_label_keys: Optional[Sequence[str]] = None,
        namespace_selector: Optional[
            "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch"
        ] = None,
        namespaces: Optional[Sequence[str]] = None,
        topology_key: Optional[str] = None,
    ):
        """
        Defines a set of pods (namely those matching the labelSelector
        relative to the given namespace(s)) that this pod should be
        co-located (affinity) or not co-located (anti-affinity) with,
        where co-located is defined as running on a node whose value of
        the label with key <topologyKey> matches that of any node on which
        a pod of the set of pods is running
        :param Sequence[str] match_label_keys: MatchLabelKeys is a set of pod label keys to select which pods will
               be taken into consideration. The keys are used to lookup values from the
               incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
               to select the group of existing pods which pods will be taken into consideration
               for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
               pod labels will be ignored. The default value is empty.
               The same key is forbidden to exist in both matchLabelKeys and labelSelector.
               Also, matchLabelKeys cannot be set when labelSelector isn't set.
               This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        :param Sequence[str] mismatch_label_keys: MismatchLabelKeys is a set of pod label keys to select which pods will
               be taken into consideration. The keys are used to lookup values from the
               incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
               to select the group of existing pods which pods will be taken into consideration
               for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
               pod labels will be ignored. The default value is empty.
               The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
               Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
               This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        :param Sequence[str] namespaces: namespaces specifies a static list of namespace names that the term applies to.
               The term is applied to the union of the namespaces listed in this field
               and the ones selected by namespaceSelector.
               null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        :param str topology_key: This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
               the labelSelector in the specified namespaces, where co-located is defined as running on a node
               whose value of the label with key topologyKey matches that of any node on which any of the
               selected pods is running.
               Empty topologyKey is not allowed.
        """
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if match_label_keys is not None:
            pulumi.set(__self__, "match_label_keys", match_label_keys)
        if mismatch_label_keys is not None:
            pulumi.set(__self__, "mismatch_label_keys", mismatch_label_keys)
        if namespace_selector is not None:
            pulumi.set(__self__, "namespace_selector", namespace_selector)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)
        if topology_key is not None:
            pulumi.set(__self__, "topology_key", topology_key)

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(
        self,
    ) -> Optional[
        "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch"
    ]:
        return pulumi.get(self, "label_selector")

    @property
    @pulumi.getter(name="matchLabelKeys")
    def match_label_keys(self) -> Optional[Sequence[str]]:
        """
        MatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both matchLabelKeys and labelSelector.
        Also, matchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        return pulumi.get(self, "match_label_keys")

    @property
    @pulumi.getter(name="mismatchLabelKeys")
    def mismatch_label_keys(self) -> Optional[Sequence[str]]:
        """
        MismatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
        Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        return pulumi.get(self, "mismatch_label_keys")

    @property
    @pulumi.getter(name="namespaceSelector")
    def namespace_selector(
        self,
    ) -> Optional[
        "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch"
    ]:
        return pulumi.get(self, "namespace_selector")

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[Sequence[str]]:
        """
        namespaces specifies a static list of namespace names that the term applies to.
        The term is applied to the union of the namespaces listed in this field
        and the ones selected by namespaceSelector.
        null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        """
        return pulumi.get(self, "namespaces")

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> Optional[str]:
        """
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
        the labelSelector in the specified namespaces, where co-located is defined as running on a node
        whose value of the label with key topologyKey matches that of any node on which any of the
        selected pods is running.
        Empty topologyKey is not allowed.
        """
        return pulumi.get(self, "topology_key")


@pulumi.output_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinity(
    dict
):
    """
    Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
    """

    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "preferredDuringSchedulingIgnoredDuringExecution":
            suggest = "preferred_during_scheduling_ignored_during_execution"
        elif key == "requiredDuringSchedulingIgnoredDuringExecution":
            suggest = "required_during_scheduling_ignored_during_execution"

        if suggest:
            pulumi.log.warn(
                f"Key '{key}' not found in ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinity. Access the value via the '{suggest}' property getter instead."
            )

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinity.__key_warning(
            key
        )
        return super().__getitem__(key)

    def get(self, key: str, default=None) -> Any:
        ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinity.__key_warning(
            key
        )
        return super().get(key, default)

    def __init__(
        __self__,
        *,
        preferred_during_scheduling_ignored_during_execution: Optional[
            Sequence[
                "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution"
            ]
        ] = None,
        required_during_scheduling_ignored_during_execution: Optional[
            Sequence[
                "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution"
            ]
        ] = None,
    ):
        """
        Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
        :param Sequence['ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs'] preferred_during_scheduling_ignored_during_execution: The scheduler will prefer to schedule pods to nodes that satisfy
               the anti-affinity expressions specified by this field, but it may choose
               a node that violates one or more of the expressions. The node that is
               most preferred is the one with the greatest sum of weights, i.e.
               for each node that meets all of the scheduling requirements (resource
               request, requiredDuringScheduling anti-affinity expressions, etc.),
               compute a sum by iterating through the elements of this field and adding
               "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
               node(s) with the highest sum are the most preferred.
        :param Sequence['ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs'] required_during_scheduling_ignored_during_execution: If the anti-affinity requirements specified by this field are not met at
               scheduling time, the pod will not be scheduled onto the node.
               If the anti-affinity requirements specified by this field cease to be met
               at some point during pod execution (e.g. due to a pod label update), the
               system may or may not try to eventually evict the pod from its node.
               When there are multiple elements, the lists of nodes corresponding to each
               podAffinityTerm are intersected, i.e. all terms must be satisfied.
        """
        if preferred_during_scheduling_ignored_during_execution is not None:
            pulumi.set(
                __self__,
                "preferred_during_scheduling_ignored_during_execution",
                preferred_during_scheduling_ignored_during_execution,
            )
        if required_during_scheduling_ignored_during_execution is not None:
            pulumi.set(
                __self__,
                "required_during_scheduling_ignored_during_execution",
                required_during_scheduling_ignored_during_execution,
            )

    @property
    @pulumi.getter(name="preferredDuringSchedulingIgnoredDuringExecution")
    def preferred_during_scheduling_ignored_during_execution(
        self,
    ) -> Optional[
        Sequence[
            "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution"
        ]
    ]:
        """
        The scheduler will prefer to schedule pods to nodes that satisfy
        the anti-affinity expressions specified by this field, but it may choose
        a node that violates one or more of the expressions. The node that is
        most preferred is the one with the greatest sum of weights, i.e.
        for each node that meets all of the scheduling requirements (resource
        request, requiredDuringScheduling anti-affinity expressions, etc.),
        compute a sum by iterating through the elements of this field and adding
        "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
        node(s) with the highest sum are the most preferred.
        """
        return pulumi.get(self, "preferred_during_scheduling_ignored_during_execution")

    @property
    @pulumi.getter(name="requiredDuringSchedulingIgnoredDuringExecution")
    def required_during_scheduling_ignored_during_execution(
        self,
    ) -> Optional[
        Sequence[
            "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution"
        ]
    ]:
        """
        If the anti-affinity requirements specified by this field are not met at
        scheduling time, the pod will not be scheduled onto the node.
        If the anti-affinity requirements specified by this field cease to be met
        at some point during pod execution (e.g. due to a pod label update), the
        system may or may not try to eventually evict the pod from its node.
        When there are multiple elements, the lists of nodes corresponding to each
        podAffinityTerm are intersected, i.e. all terms must be satisfied.
        """
        return pulumi.get(self, "required_during_scheduling_ignored_during_execution")


@pulumi.output_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPatch(
    dict
):
    """
    Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
    """

    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "preferredDuringSchedulingIgnoredDuringExecution":
            suggest = "preferred_during_scheduling_ignored_during_execution"
        elif key == "requiredDuringSchedulingIgnoredDuringExecution":
            suggest = "required_during_scheduling_ignored_during_execution"

        if suggest:
            pulumi.log.warn(
                f"Key '{key}' not found in ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPatch. Access the value via the '{suggest}' property getter instead."
            )

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPatch.__key_warning(
            key
        )
        return super().__getitem__(key)

    def get(self, key: str, default=None) -> Any:
        ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPatch.__key_warning(
            key
        )
        return super().get(key, default)

    def __init__(
        __self__,
        *,
        preferred_during_scheduling_ignored_during_execution: Optional[
            Sequence[
                "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch"
            ]
        ] = None,
        required_during_scheduling_ignored_during_execution: Optional[
            Sequence[
                "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch"
            ]
        ] = None,
    ):
        """
        Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
        :param Sequence['ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgs'] preferred_during_scheduling_ignored_during_execution: The scheduler will prefer to schedule pods to nodes that satisfy
               the anti-affinity expressions specified by this field, but it may choose
               a node that violates one or more of the expressions. The node that is
               most preferred is the one with the greatest sum of weights, i.e.
               for each node that meets all of the scheduling requirements (resource
               request, requiredDuringScheduling anti-affinity expressions, etc.),
               compute a sum by iterating through the elements of this field and adding
               "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
               node(s) with the highest sum are the most preferred.
        :param Sequence['ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgs'] required_during_scheduling_ignored_during_execution: If the anti-affinity requirements specified by this field are not met at
               scheduling time, the pod will not be scheduled onto the node.
               If the anti-affinity requirements specified by this field cease to be met
               at some point during pod execution (e.g. due to a pod label update), the
               system may or may not try to eventually evict the pod from its node.
               When there are multiple elements, the lists of nodes corresponding to each
               podAffinityTerm are intersected, i.e. all terms must be satisfied.
        """
        if preferred_during_scheduling_ignored_during_execution is not None:
            pulumi.set(
                __self__,
                "preferred_during_scheduling_ignored_during_execution",
                preferred_during_scheduling_ignored_during_execution,
            )
        if required_during_scheduling_ignored_during_execution is not None:
            pulumi.set(
                __self__,
                "required_during_scheduling_ignored_during_execution",
                required_during_scheduling_ignored_during_execution,
            )

    @property
    @pulumi.getter(name="preferredDuringSchedulingIgnoredDuringExecution")
    def preferred_during_scheduling_ignored_during_execution(
        self,
    ) -> Optional[
        Sequence[
            "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch"
        ]
    ]:
        """
        The scheduler will prefer to schedule pods to nodes that satisfy
        the anti-affinity expressions specified by this field, but it may choose
        a node that violates one or more of the expressions. The node that is
        most preferred is the one with the greatest sum of weights, i.e.
        for each node that meets all of the scheduling requirements (resource
        request, requiredDuringScheduling anti-affinity expressions, etc.),
        compute a sum by iterating through the elements of this field and adding
        "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
        node(s) with the highest sum are the most preferred.
        """
        return pulumi.get(self, "preferred_during_scheduling_ignored_during_execution")

    @property
    @pulumi.getter(name="requiredDuringSchedulingIgnoredDuringExecution")
    def required_during_scheduling_ignored_during_execution(
        self,
    ) -> Optional[
        Sequence[
            "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch"
        ]
    ]:
        """
        If the anti-affinity requirements specified by this field are not met at
        scheduling time, the pod will not be scheduled onto the node.
        If the anti-affinity requirements specified by this field cease to be met
        at some point during pod execution (e.g. due to a pod label update), the
        system may or may not try to eventually evict the pod from its node.
        When there are multiple elements, the lists of nodes corresponding to each
        podAffinityTerm are intersected, i.e. all terms must be satisfied.
        """
        return pulumi.get(self, "required_during_scheduling_ignored_during_execution")


@pulumi.output_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution(
    dict
):
    """
    The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
    """

    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "podAffinityTerm":
            suggest = "pod_affinity_term"

        if suggest:
            pulumi.log.warn(
                f"Key '{key}' not found in ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution. Access the value via the '{suggest}' property getter instead."
            )

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution.__key_warning(
            key
        )
        return super().__getitem__(key)

    def get(self, key: str, default=None) -> Any:
        ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution.__key_warning(
            key
        )
        return super().get(key, default)

    def __init__(
        __self__,
        *,
        pod_affinity_term: Optional[
            "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm"
        ] = None,
        weight: Optional[int] = None,
    ):
        """
        The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
        :param int weight: weight associated with matching the corresponding podAffinityTerm,
               in the range 1-100.
        """
        if pod_affinity_term is not None:
            pulumi.set(__self__, "pod_affinity_term", pod_affinity_term)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter(name="podAffinityTerm")
    def pod_affinity_term(
        self,
    ) -> Optional[
        "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm"
    ]:
        return pulumi.get(self, "pod_affinity_term")

    @property
    @pulumi.getter
    def weight(self) -> Optional[int]:
        """
        weight associated with matching the corresponding podAffinityTerm,
        in the range 1-100.
        """
        return pulumi.get(self, "weight")


@pulumi.output_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch(
    dict
):
    """
    The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
    """

    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "podAffinityTerm":
            suggest = "pod_affinity_term"

        if suggest:
            pulumi.log.warn(
                f"Key '{key}' not found in ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch. Access the value via the '{suggest}' property getter instead."
            )

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch.__key_warning(
            key
        )
        return super().__getitem__(key)

    def get(self, key: str, default=None) -> Any:
        ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch.__key_warning(
            key
        )
        return super().get(key, default)

    def __init__(
        __self__,
        *,
        pod_affinity_term: Optional[
            "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch"
        ] = None,
        weight: Optional[int] = None,
    ):
        """
        The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
        :param int weight: weight associated with matching the corresponding podAffinityTerm,
               in the range 1-100.
        """
        if pod_affinity_term is not None:
            pulumi.set(__self__, "pod_affinity_term", pod_affinity_term)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter(name="podAffinityTerm")
    def pod_affinity_term(
        self,
    ) -> Optional[
        "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch"
    ]:
        return pulumi.get(self, "pod_affinity_term")

    @property
    @pulumi.getter
    def weight(self) -> Optional[int]:
        """
        weight associated with matching the corresponding podAffinityTerm,
        in the range 1-100.
        """
        return pulumi.get(self, "weight")


@pulumi.output_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm(
    dict
):
    """
    Required. A pod affinity term, associated with the corresponding weight.
    """

    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "labelSelector":
            suggest = "label_selector"
        elif key == "matchLabelKeys":
            suggest = "match_label_keys"
        elif key == "mismatchLabelKeys":
            suggest = "mismatch_label_keys"
        elif key == "namespaceSelector":
            suggest = "namespace_selector"
        elif key == "topologyKey":
            suggest = "topology_key"

        if suggest:
            pulumi.log.warn(
                f"Key '{key}' not found in ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm. Access the value via the '{suggest}' property getter instead."
            )

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm.__key_warning(
            key
        )
        return super().__getitem__(key)

    def get(self, key: str, default=None) -> Any:
        ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm.__key_warning(
            key
        )
        return super().get(key, default)

    def __init__(
        __self__,
        *,
        label_selector: Optional[
            "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector"
        ] = None,
        match_label_keys: Optional[Sequence[str]] = None,
        mismatch_label_keys: Optional[Sequence[str]] = None,
        namespace_selector: Optional[
            "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector"
        ] = None,
        namespaces: Optional[Sequence[str]] = None,
        topology_key: Optional[str] = None,
    ):
        """
        Required. A pod affinity term, associated with the corresponding weight.
        :param Sequence[str] match_label_keys: MatchLabelKeys is a set of pod label keys to select which pods will
               be taken into consideration. The keys are used to lookup values from the
               incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
               to select the group of existing pods which pods will be taken into consideration
               for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
               pod labels will be ignored. The default value is empty.
               The same key is forbidden to exist in both matchLabelKeys and labelSelector.
               Also, matchLabelKeys cannot be set when labelSelector isn't set.
               This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        :param Sequence[str] mismatch_label_keys: MismatchLabelKeys is a set of pod label keys to select which pods will
               be taken into consideration. The keys are used to lookup values from the
               incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
               to select the group of existing pods which pods will be taken into consideration
               for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
               pod labels will be ignored. The default value is empty.
               The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
               Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
               This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        :param Sequence[str] namespaces: namespaces specifies a static list of namespace names that the term applies to.
               The term is applied to the union of the namespaces listed in this field
               and the ones selected by namespaceSelector.
               null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        :param str topology_key: This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
               the labelSelector in the specified namespaces, where co-located is defined as running on a node
               whose value of the label with key topologyKey matches that of any node on which any of the
               selected pods is running.
               Empty topologyKey is not allowed.
        """
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if match_label_keys is not None:
            pulumi.set(__self__, "match_label_keys", match_label_keys)
        if mismatch_label_keys is not None:
            pulumi.set(__self__, "mismatch_label_keys", mismatch_label_keys)
        if namespace_selector is not None:
            pulumi.set(__self__, "namespace_selector", namespace_selector)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)
        if topology_key is not None:
            pulumi.set(__self__, "topology_key", topology_key)

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(
        self,
    ) -> Optional[
        "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector"
    ]:
        return pulumi.get(self, "label_selector")

    @property
    @pulumi.getter(name="matchLabelKeys")
    def match_label_keys(self) -> Optional[Sequence[str]]:
        """
        MatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both matchLabelKeys and labelSelector.
        Also, matchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        return pulumi.get(self, "match_label_keys")

    @property
    @pulumi.getter(name="mismatchLabelKeys")
    def mismatch_label_keys(self) -> Optional[Sequence[str]]:
        """
        MismatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
        Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        return pulumi.get(self, "mismatch_label_keys")

    @property
    @pulumi.getter(name="namespaceSelector")
    def namespace_selector(
        self,
    ) -> Optional[
        "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector"
    ]:
        return pulumi.get(self, "namespace_selector")

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[Sequence[str]]:
        """
        namespaces specifies a static list of namespace names that the term applies to.
        The term is applied to the union of the namespaces listed in this field
        and the ones selected by namespaceSelector.
        null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        """
        return pulumi.get(self, "namespaces")

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> Optional[str]:
        """
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
        the labelSelector in the specified namespaces, where co-located is defined as running on a node
        whose value of the label with key topologyKey matches that of any node on which any of the
        selected pods is running.
        Empty topologyKey is not allowed.
        """
        return pulumi.get(self, "topology_key")


@pulumi.output_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector(
    dict
):
    """
    A label query over a set of resources, in this case pods.
    If it's null, this PodAffinityTerm matches with no Pods.
    """

    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "matchExpressions":
            suggest = "match_expressions"
        elif key == "matchLabels":
            suggest = "match_labels"

        if suggest:
            pulumi.log.warn(
                f"Key '{key}' not found in ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector. Access the value via the '{suggest}' property getter instead."
            )

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector.__key_warning(
            key
        )
        return super().__getitem__(key)

    def get(self, key: str, default=None) -> Any:
        ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector.__key_warning(
            key
        )
        return super().get(key, default)

    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            Sequence[
                "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions"
            ]
        ] = None,
        match_labels: Optional[Mapping[str, str]] = None,
    ):
        """
        A label query over a set of resources, in this case pods.
        If it's null, this PodAffinityTerm matches with no Pods.
        :param Sequence['ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs'] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param Mapping[str, str] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
               map is equivalent to an element of matchExpressions, whose key field is "key", the
               operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        Sequence[
            "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions"
        ]
    ]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, str]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")


@pulumi.output_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions(
    dict
):
    """
    A label selector requirement is a selector that contains values, a key, and an operator that
    relates the key and values.
    """

    def __init__(
        __self__,
        *,
        key: Optional[str] = None,
        operator: Optional[str] = None,
        values: Optional[Sequence[str]] = None,
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        :param str key: key is the label key that the selector applies to.
        :param str operator: operator represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists and DoesNotExist.
        :param Sequence[str] values: values is an array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. This array is replaced during a strategic
               merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> Optional[str]:
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch(
    dict
):
    """
    A label selector requirement is a selector that contains values, a key, and an operator that
    relates the key and values.
    """

    def __init__(
        __self__,
        *,
        key: Optional[str] = None,
        operator: Optional[str] = None,
        values: Optional[Sequence[str]] = None,
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        :param str key: key is the label key that the selector applies to.
        :param str operator: operator represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists and DoesNotExist.
        :param Sequence[str] values: values is an array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. This array is replaced during a strategic
               merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> Optional[str]:
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch(
    dict
):
    """
    A label query over a set of resources, in this case pods.
    If it's null, this PodAffinityTerm matches with no Pods.
    """

    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "matchExpressions":
            suggest = "match_expressions"
        elif key == "matchLabels":
            suggest = "match_labels"

        if suggest:
            pulumi.log.warn(
                f"Key '{key}' not found in ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch. Access the value via the '{suggest}' property getter instead."
            )

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch.__key_warning(
            key
        )
        return super().__getitem__(key)

    def get(self, key: str, default=None) -> Any:
        ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch.__key_warning(
            key
        )
        return super().get(key, default)

    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            Sequence[
                "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch"
            ]
        ] = None,
        match_labels: Optional[Mapping[str, str]] = None,
    ):
        """
        A label query over a set of resources, in this case pods.
        If it's null, this PodAffinityTerm matches with no Pods.
        :param Sequence['ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArgs'] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param Mapping[str, str] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
               map is equivalent to an element of matchExpressions, whose key field is "key", the
               operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        Sequence[
            "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch"
        ]
    ]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, str]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")


@pulumi.output_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector(
    dict
):
    """
    A label query over the set of namespaces that the term applies to.
    The term is applied to the union of the namespaces selected by this field
    and the ones listed in the namespaces field.
    null selector and null or empty namespaces list means "this pod's namespace".
    An empty selector ({}) matches all namespaces.
    """

    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "matchExpressions":
            suggest = "match_expressions"
        elif key == "matchLabels":
            suggest = "match_labels"

        if suggest:
            pulumi.log.warn(
                f"Key '{key}' not found in ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector. Access the value via the '{suggest}' property getter instead."
            )

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector.__key_warning(
            key
        )
        return super().__getitem__(key)

    def get(self, key: str, default=None) -> Any:
        ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector.__key_warning(
            key
        )
        return super().get(key, default)

    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            Sequence[
                "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions"
            ]
        ] = None,
        match_labels: Optional[Mapping[str, str]] = None,
    ):
        """
        A label query over the set of namespaces that the term applies to.
        The term is applied to the union of the namespaces selected by this field
        and the ones listed in the namespaces field.
        null selector and null or empty namespaces list means "this pod's namespace".
        An empty selector ({}) matches all namespaces.
        :param Sequence['ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs'] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param Mapping[str, str] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
               map is equivalent to an element of matchExpressions, whose key field is "key", the
               operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        Sequence[
            "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions"
        ]
    ]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, str]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")


@pulumi.output_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions(
    dict
):
    """
    A label selector requirement is a selector that contains values, a key, and an operator that
    relates the key and values.
    """

    def __init__(
        __self__,
        *,
        key: Optional[str] = None,
        operator: Optional[str] = None,
        values: Optional[Sequence[str]] = None,
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        :param str key: key is the label key that the selector applies to.
        :param str operator: operator represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists and DoesNotExist.
        :param Sequence[str] values: values is an array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. This array is replaced during a strategic
               merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> Optional[str]:
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch(
    dict
):
    """
    A label selector requirement is a selector that contains values, a key, and an operator that
    relates the key and values.
    """

    def __init__(
        __self__,
        *,
        key: Optional[str] = None,
        operator: Optional[str] = None,
        values: Optional[Sequence[str]] = None,
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        :param str key: key is the label key that the selector applies to.
        :param str operator: operator represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists and DoesNotExist.
        :param Sequence[str] values: values is an array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. This array is replaced during a strategic
               merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> Optional[str]:
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch(
    dict
):
    """
    A label query over the set of namespaces that the term applies to.
    The term is applied to the union of the namespaces selected by this field
    and the ones listed in the namespaces field.
    null selector and null or empty namespaces list means "this pod's namespace".
    An empty selector ({}) matches all namespaces.
    """

    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "matchExpressions":
            suggest = "match_expressions"
        elif key == "matchLabels":
            suggest = "match_labels"

        if suggest:
            pulumi.log.warn(
                f"Key '{key}' not found in ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch. Access the value via the '{suggest}' property getter instead."
            )

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch.__key_warning(
            key
        )
        return super().__getitem__(key)

    def get(self, key: str, default=None) -> Any:
        ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch.__key_warning(
            key
        )
        return super().get(key, default)

    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            Sequence[
                "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch"
            ]
        ] = None,
        match_labels: Optional[Mapping[str, str]] = None,
    ):
        """
        A label query over the set of namespaces that the term applies to.
        The term is applied to the union of the namespaces selected by this field
        and the ones listed in the namespaces field.
        null selector and null or empty namespaces list means "this pod's namespace".
        An empty selector ({}) matches all namespaces.
        :param Sequence['ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArgs'] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param Mapping[str, str] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
               map is equivalent to an element of matchExpressions, whose key field is "key", the
               operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        Sequence[
            "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch"
        ]
    ]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, str]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")


@pulumi.output_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch(
    dict
):
    """
    Required. A pod affinity term, associated with the corresponding weight.
    """

    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "labelSelector":
            suggest = "label_selector"
        elif key == "matchLabelKeys":
            suggest = "match_label_keys"
        elif key == "mismatchLabelKeys":
            suggest = "mismatch_label_keys"
        elif key == "namespaceSelector":
            suggest = "namespace_selector"
        elif key == "topologyKey":
            suggest = "topology_key"

        if suggest:
            pulumi.log.warn(
                f"Key '{key}' not found in ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch. Access the value via the '{suggest}' property getter instead."
            )

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch.__key_warning(
            key
        )
        return super().__getitem__(key)

    def get(self, key: str, default=None) -> Any:
        ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch.__key_warning(
            key
        )
        return super().get(key, default)

    def __init__(
        __self__,
        *,
        label_selector: Optional[
            "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch"
        ] = None,
        match_label_keys: Optional[Sequence[str]] = None,
        mismatch_label_keys: Optional[Sequence[str]] = None,
        namespace_selector: Optional[
            "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch"
        ] = None,
        namespaces: Optional[Sequence[str]] = None,
        topology_key: Optional[str] = None,
    ):
        """
        Required. A pod affinity term, associated with the corresponding weight.
        :param Sequence[str] match_label_keys: MatchLabelKeys is a set of pod label keys to select which pods will
               be taken into consideration. The keys are used to lookup values from the
               incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
               to select the group of existing pods which pods will be taken into consideration
               for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
               pod labels will be ignored. The default value is empty.
               The same key is forbidden to exist in both matchLabelKeys and labelSelector.
               Also, matchLabelKeys cannot be set when labelSelector isn't set.
               This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        :param Sequence[str] mismatch_label_keys: MismatchLabelKeys is a set of pod label keys to select which pods will
               be taken into consideration. The keys are used to lookup values from the
               incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
               to select the group of existing pods which pods will be taken into consideration
               for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
               pod labels will be ignored. The default value is empty.
               The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
               Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
               This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        :param Sequence[str] namespaces: namespaces specifies a static list of namespace names that the term applies to.
               The term is applied to the union of the namespaces listed in this field
               and the ones selected by namespaceSelector.
               null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        :param str topology_key: This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
               the labelSelector in the specified namespaces, where co-located is defined as running on a node
               whose value of the label with key topologyKey matches that of any node on which any of the
               selected pods is running.
               Empty topologyKey is not allowed.
        """
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if match_label_keys is not None:
            pulumi.set(__self__, "match_label_keys", match_label_keys)
        if mismatch_label_keys is not None:
            pulumi.set(__self__, "mismatch_label_keys", mismatch_label_keys)
        if namespace_selector is not None:
            pulumi.set(__self__, "namespace_selector", namespace_selector)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)
        if topology_key is not None:
            pulumi.set(__self__, "topology_key", topology_key)

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(
        self,
    ) -> Optional[
        "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch"
    ]:
        return pulumi.get(self, "label_selector")

    @property
    @pulumi.getter(name="matchLabelKeys")
    def match_label_keys(self) -> Optional[Sequence[str]]:
        """
        MatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both matchLabelKeys and labelSelector.
        Also, matchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        return pulumi.get(self, "match_label_keys")

    @property
    @pulumi.getter(name="mismatchLabelKeys")
    def mismatch_label_keys(self) -> Optional[Sequence[str]]:
        """
        MismatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
        Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        return pulumi.get(self, "mismatch_label_keys")

    @property
    @pulumi.getter(name="namespaceSelector")
    def namespace_selector(
        self,
    ) -> Optional[
        "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch"
    ]:
        return pulumi.get(self, "namespace_selector")

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[Sequence[str]]:
        """
        namespaces specifies a static list of namespace names that the term applies to.
        The term is applied to the union of the namespaces listed in this field
        and the ones selected by namespaceSelector.
        null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        """
        return pulumi.get(self, "namespaces")

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> Optional[str]:
        """
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
        the labelSelector in the specified namespaces, where co-located is defined as running on a node
        whose value of the label with key topologyKey matches that of any node on which any of the
        selected pods is running.
        Empty topologyKey is not allowed.
        """
        return pulumi.get(self, "topology_key")


@pulumi.output_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution(
    dict
):
    """
    Defines a set of pods (namely those matching the labelSelector
    relative to the given namespace(s)) that this pod should be
    co-located (affinity) or not co-located (anti-affinity) with,
    where co-located is defined as running on a node whose value of
    the label with key <topologyKey> matches that of any node on which
    a pod of the set of pods is running
    """

    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "labelSelector":
            suggest = "label_selector"
        elif key == "matchLabelKeys":
            suggest = "match_label_keys"
        elif key == "mismatchLabelKeys":
            suggest = "mismatch_label_keys"
        elif key == "namespaceSelector":
            suggest = "namespace_selector"
        elif key == "topologyKey":
            suggest = "topology_key"

        if suggest:
            pulumi.log.warn(
                f"Key '{key}' not found in ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution. Access the value via the '{suggest}' property getter instead."
            )

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution.__key_warning(
            key
        )
        return super().__getitem__(key)

    def get(self, key: str, default=None) -> Any:
        ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution.__key_warning(
            key
        )
        return super().get(key, default)

    def __init__(
        __self__,
        *,
        label_selector: Optional[
            "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector"
        ] = None,
        match_label_keys: Optional[Sequence[str]] = None,
        mismatch_label_keys: Optional[Sequence[str]] = None,
        namespace_selector: Optional[
            "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector"
        ] = None,
        namespaces: Optional[Sequence[str]] = None,
        topology_key: Optional[str] = None,
    ):
        """
        Defines a set of pods (namely those matching the labelSelector
        relative to the given namespace(s)) that this pod should be
        co-located (affinity) or not co-located (anti-affinity) with,
        where co-located is defined as running on a node whose value of
        the label with key <topologyKey> matches that of any node on which
        a pod of the set of pods is running
        :param Sequence[str] match_label_keys: MatchLabelKeys is a set of pod label keys to select which pods will
               be taken into consideration. The keys are used to lookup values from the
               incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
               to select the group of existing pods which pods will be taken into consideration
               for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
               pod labels will be ignored. The default value is empty.
               The same key is forbidden to exist in both matchLabelKeys and labelSelector.
               Also, matchLabelKeys cannot be set when labelSelector isn't set.
               This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        :param Sequence[str] mismatch_label_keys: MismatchLabelKeys is a set of pod label keys to select which pods will
               be taken into consideration. The keys are used to lookup values from the
               incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
               to select the group of existing pods which pods will be taken into consideration
               for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
               pod labels will be ignored. The default value is empty.
               The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
               Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
               This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        :param Sequence[str] namespaces: namespaces specifies a static list of namespace names that the term applies to.
               The term is applied to the union of the namespaces listed in this field
               and the ones selected by namespaceSelector.
               null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        :param str topology_key: This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
               the labelSelector in the specified namespaces, where co-located is defined as running on a node
               whose value of the label with key topologyKey matches that of any node on which any of the
               selected pods is running.
               Empty topologyKey is not allowed.
        """
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if match_label_keys is not None:
            pulumi.set(__self__, "match_label_keys", match_label_keys)
        if mismatch_label_keys is not None:
            pulumi.set(__self__, "mismatch_label_keys", mismatch_label_keys)
        if namespace_selector is not None:
            pulumi.set(__self__, "namespace_selector", namespace_selector)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)
        if topology_key is not None:
            pulumi.set(__self__, "topology_key", topology_key)

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(
        self,
    ) -> Optional[
        "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector"
    ]:
        return pulumi.get(self, "label_selector")

    @property
    @pulumi.getter(name="matchLabelKeys")
    def match_label_keys(self) -> Optional[Sequence[str]]:
        """
        MatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both matchLabelKeys and labelSelector.
        Also, matchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        return pulumi.get(self, "match_label_keys")

    @property
    @pulumi.getter(name="mismatchLabelKeys")
    def mismatch_label_keys(self) -> Optional[Sequence[str]]:
        """
        MismatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
        Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        return pulumi.get(self, "mismatch_label_keys")

    @property
    @pulumi.getter(name="namespaceSelector")
    def namespace_selector(
        self,
    ) -> Optional[
        "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector"
    ]:
        return pulumi.get(self, "namespace_selector")

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[Sequence[str]]:
        """
        namespaces specifies a static list of namespace names that the term applies to.
        The term is applied to the union of the namespaces listed in this field
        and the ones selected by namespaceSelector.
        null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        """
        return pulumi.get(self, "namespaces")

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> Optional[str]:
        """
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
        the labelSelector in the specified namespaces, where co-located is defined as running on a node
        whose value of the label with key topologyKey matches that of any node on which any of the
        selected pods is running.
        Empty topologyKey is not allowed.
        """
        return pulumi.get(self, "topology_key")


@pulumi.output_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector(
    dict
):
    """
    A label query over a set of resources, in this case pods.
    If it's null, this PodAffinityTerm matches with no Pods.
    """

    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "matchExpressions":
            suggest = "match_expressions"
        elif key == "matchLabels":
            suggest = "match_labels"

        if suggest:
            pulumi.log.warn(
                f"Key '{key}' not found in ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector. Access the value via the '{suggest}' property getter instead."
            )

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector.__key_warning(
            key
        )
        return super().__getitem__(key)

    def get(self, key: str, default=None) -> Any:
        ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector.__key_warning(
            key
        )
        return super().get(key, default)

    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            Sequence[
                "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions"
            ]
        ] = None,
        match_labels: Optional[Mapping[str, str]] = None,
    ):
        """
        A label query over a set of resources, in this case pods.
        If it's null, this PodAffinityTerm matches with no Pods.
        :param Sequence['ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs'] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param Mapping[str, str] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
               map is equivalent to an element of matchExpressions, whose key field is "key", the
               operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        Sequence[
            "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions"
        ]
    ]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, str]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")


@pulumi.output_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions(
    dict
):
    """
    A label selector requirement is a selector that contains values, a key, and an operator that
    relates the key and values.
    """

    def __init__(
        __self__,
        *,
        key: Optional[str] = None,
        operator: Optional[str] = None,
        values: Optional[Sequence[str]] = None,
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        :param str key: key is the label key that the selector applies to.
        :param str operator: operator represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists and DoesNotExist.
        :param Sequence[str] values: values is an array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. This array is replaced during a strategic
               merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> Optional[str]:
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch(
    dict
):
    """
    A label selector requirement is a selector that contains values, a key, and an operator that
    relates the key and values.
    """

    def __init__(
        __self__,
        *,
        key: Optional[str] = None,
        operator: Optional[str] = None,
        values: Optional[Sequence[str]] = None,
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        :param str key: key is the label key that the selector applies to.
        :param str operator: operator represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists and DoesNotExist.
        :param Sequence[str] values: values is an array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. This array is replaced during a strategic
               merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> Optional[str]:
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch(
    dict
):
    """
    A label query over a set of resources, in this case pods.
    If it's null, this PodAffinityTerm matches with no Pods.
    """

    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "matchExpressions":
            suggest = "match_expressions"
        elif key == "matchLabels":
            suggest = "match_labels"

        if suggest:
            pulumi.log.warn(
                f"Key '{key}' not found in ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch. Access the value via the '{suggest}' property getter instead."
            )

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch.__key_warning(
            key
        )
        return super().__getitem__(key)

    def get(self, key: str, default=None) -> Any:
        ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch.__key_warning(
            key
        )
        return super().get(key, default)

    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            Sequence[
                "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch"
            ]
        ] = None,
        match_labels: Optional[Mapping[str, str]] = None,
    ):
        """
        A label query over a set of resources, in this case pods.
        If it's null, this PodAffinityTerm matches with no Pods.
        :param Sequence['ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArgs'] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param Mapping[str, str] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
               map is equivalent to an element of matchExpressions, whose key field is "key", the
               operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        Sequence[
            "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch"
        ]
    ]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, str]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")


@pulumi.output_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector(
    dict
):
    """
    A label query over the set of namespaces that the term applies to.
    The term is applied to the union of the namespaces selected by this field
    and the ones listed in the namespaces field.
    null selector and null or empty namespaces list means "this pod's namespace".
    An empty selector ({}) matches all namespaces.
    """

    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "matchExpressions":
            suggest = "match_expressions"
        elif key == "matchLabels":
            suggest = "match_labels"

        if suggest:
            pulumi.log.warn(
                f"Key '{key}' not found in ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector. Access the value via the '{suggest}' property getter instead."
            )

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector.__key_warning(
            key
        )
        return super().__getitem__(key)

    def get(self, key: str, default=None) -> Any:
        ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector.__key_warning(
            key
        )
        return super().get(key, default)

    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            Sequence[
                "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions"
            ]
        ] = None,
        match_labels: Optional[Mapping[str, str]] = None,
    ):
        """
        A label query over the set of namespaces that the term applies to.
        The term is applied to the union of the namespaces selected by this field
        and the ones listed in the namespaces field.
        null selector and null or empty namespaces list means "this pod's namespace".
        An empty selector ({}) matches all namespaces.
        :param Sequence['ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs'] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param Mapping[str, str] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
               map is equivalent to an element of matchExpressions, whose key field is "key", the
               operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        Sequence[
            "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions"
        ]
    ]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, str]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")


@pulumi.output_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions(
    dict
):
    """
    A label selector requirement is a selector that contains values, a key, and an operator that
    relates the key and values.
    """

    def __init__(
        __self__,
        *,
        key: Optional[str] = None,
        operator: Optional[str] = None,
        values: Optional[Sequence[str]] = None,
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        :param str key: key is the label key that the selector applies to.
        :param str operator: operator represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists and DoesNotExist.
        :param Sequence[str] values: values is an array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. This array is replaced during a strategic
               merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> Optional[str]:
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch(
    dict
):
    """
    A label selector requirement is a selector that contains values, a key, and an operator that
    relates the key and values.
    """

    def __init__(
        __self__,
        *,
        key: Optional[str] = None,
        operator: Optional[str] = None,
        values: Optional[Sequence[str]] = None,
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        :param str key: key is the label key that the selector applies to.
        :param str operator: operator represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists and DoesNotExist.
        :param Sequence[str] values: values is an array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. This array is replaced during a strategic
               merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> Optional[str]:
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch(
    dict
):
    """
    A label query over the set of namespaces that the term applies to.
    The term is applied to the union of the namespaces selected by this field
    and the ones listed in the namespaces field.
    null selector and null or empty namespaces list means "this pod's namespace".
    An empty selector ({}) matches all namespaces.
    """

    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "matchExpressions":
            suggest = "match_expressions"
        elif key == "matchLabels":
            suggest = "match_labels"

        if suggest:
            pulumi.log.warn(
                f"Key '{key}' not found in ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch. Access the value via the '{suggest}' property getter instead."
            )

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch.__key_warning(
            key
        )
        return super().__getitem__(key)

    def get(self, key: str, default=None) -> Any:
        ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch.__key_warning(
            key
        )
        return super().get(key, default)

    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            Sequence[
                "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch"
            ]
        ] = None,
        match_labels: Optional[Mapping[str, str]] = None,
    ):
        """
        A label query over the set of namespaces that the term applies to.
        The term is applied to the union of the namespaces selected by this field
        and the ones listed in the namespaces field.
        null selector and null or empty namespaces list means "this pod's namespace".
        An empty selector ({}) matches all namespaces.
        :param Sequence['ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArgs'] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param Mapping[str, str] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
               map is equivalent to an element of matchExpressions, whose key field is "key", the
               operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        Sequence[
            "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch"
        ]
    ]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, str]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")


@pulumi.output_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch(
    dict
):
    """
    Defines a set of pods (namely those matching the labelSelector
    relative to the given namespace(s)) that this pod should be
    co-located (affinity) or not co-located (anti-affinity) with,
    where co-located is defined as running on a node whose value of
    the label with key <topologyKey> matches that of any node on which
    a pod of the set of pods is running
    """

    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "labelSelector":
            suggest = "label_selector"
        elif key == "matchLabelKeys":
            suggest = "match_label_keys"
        elif key == "mismatchLabelKeys":
            suggest = "mismatch_label_keys"
        elif key == "namespaceSelector":
            suggest = "namespace_selector"
        elif key == "topologyKey":
            suggest = "topology_key"

        if suggest:
            pulumi.log.warn(
                f"Key '{key}' not found in ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch. Access the value via the '{suggest}' property getter instead."
            )

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch.__key_warning(
            key
        )
        return super().__getitem__(key)

    def get(self, key: str, default=None) -> Any:
        ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch.__key_warning(
            key
        )
        return super().get(key, default)

    def __init__(
        __self__,
        *,
        label_selector: Optional[
            "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch"
        ] = None,
        match_label_keys: Optional[Sequence[str]] = None,
        mismatch_label_keys: Optional[Sequence[str]] = None,
        namespace_selector: Optional[
            "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch"
        ] = None,
        namespaces: Optional[Sequence[str]] = None,
        topology_key: Optional[str] = None,
    ):
        """
        Defines a set of pods (namely those matching the labelSelector
        relative to the given namespace(s)) that this pod should be
        co-located (affinity) or not co-located (anti-affinity) with,
        where co-located is defined as running on a node whose value of
        the label with key <topologyKey> matches that of any node on which
        a pod of the set of pods is running
        :param Sequence[str] match_label_keys: MatchLabelKeys is a set of pod label keys to select which pods will
               be taken into consideration. The keys are used to lookup values from the
               incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
               to select the group of existing pods which pods will be taken into consideration
               for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
               pod labels will be ignored. The default value is empty.
               The same key is forbidden to exist in both matchLabelKeys and labelSelector.
               Also, matchLabelKeys cannot be set when labelSelector isn't set.
               This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        :param Sequence[str] mismatch_label_keys: MismatchLabelKeys is a set of pod label keys to select which pods will
               be taken into consideration. The keys are used to lookup values from the
               incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
               to select the group of existing pods which pods will be taken into consideration
               for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
               pod labels will be ignored. The default value is empty.
               The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
               Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
               This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        :param Sequence[str] namespaces: namespaces specifies a static list of namespace names that the term applies to.
               The term is applied to the union of the namespaces listed in this field
               and the ones selected by namespaceSelector.
               null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        :param str topology_key: This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
               the labelSelector in the specified namespaces, where co-located is defined as running on a node
               whose value of the label with key topologyKey matches that of any node on which any of the
               selected pods is running.
               Empty topologyKey is not allowed.
        """
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if match_label_keys is not None:
            pulumi.set(__self__, "match_label_keys", match_label_keys)
        if mismatch_label_keys is not None:
            pulumi.set(__self__, "mismatch_label_keys", mismatch_label_keys)
        if namespace_selector is not None:
            pulumi.set(__self__, "namespace_selector", namespace_selector)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)
        if topology_key is not None:
            pulumi.set(__self__, "topology_key", topology_key)

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(
        self,
    ) -> Optional[
        "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch"
    ]:
        return pulumi.get(self, "label_selector")

    @property
    @pulumi.getter(name="matchLabelKeys")
    def match_label_keys(self) -> Optional[Sequence[str]]:
        """
        MatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both matchLabelKeys and labelSelector.
        Also, matchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        return pulumi.get(self, "match_label_keys")

    @property
    @pulumi.getter(name="mismatchLabelKeys")
    def mismatch_label_keys(self) -> Optional[Sequence[str]]:
        """
        MismatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
        Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        return pulumi.get(self, "mismatch_label_keys")

    @property
    @pulumi.getter(name="namespaceSelector")
    def namespace_selector(
        self,
    ) -> Optional[
        "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch"
    ]:
        return pulumi.get(self, "namespace_selector")

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[Sequence[str]]:
        """
        namespaces specifies a static list of namespace names that the term applies to.
        The term is applied to the union of the namespaces listed in this field
        and the ones selected by namespaceSelector.
        null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        """
        return pulumi.get(self, "namespaces")

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> Optional[str]:
        """
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
        the labelSelector in the specified namespaces, where co-located is defined as running on a node
        whose value of the label with key topologyKey matches that of any node on which any of the
        selected pods is running.
        Empty topologyKey is not allowed.
        """
        return pulumi.get(self, "topology_key")


@pulumi.output_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecImagePullSecrets(dict):
    """
    LocalObjectReference contains enough information to let you locate the
    referenced object inside the same namespace.
    """

    def __init__(__self__, *, name: Optional[str] = None):
        """
        LocalObjectReference contains enough information to let you locate the
        referenced object inside the same namespace.
        :param str name: Name of the referent.
               This field is effectively required, but due to backwards compatibility is
               allowed to be empty. Instances of this type with an empty value here are
               almost certainly wrong.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecImagePullSecretsPatch(
    dict
):
    """
    LocalObjectReference contains enough information to let you locate the
    referenced object inside the same namespace.
    """

    def __init__(__self__, *, name: Optional[str] = None):
        """
        LocalObjectReference contains enough information to let you locate the
        referenced object inside the same namespace.
        :param str name: Name of the referent.
               This field is effectively required, but due to backwards compatibility is
               allowed to be empty. Instances of this type with an empty value here are
               almost certainly wrong.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecPatch(dict):
    """
    PodSpec defines overrides for the HTTP01 challenge solver pod.
    Check ACMEChallengeSolverHTTP01IngressPodSpec to find out currently supported fields.
    All other fields will be ignored.
    """

    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imagePullSecrets":
            suggest = "image_pull_secrets"
        elif key == "nodeSelector":
            suggest = "node_selector"
        elif key == "priorityClassName":
            suggest = "priority_class_name"
        elif key == "securityContext":
            suggest = "security_context"
        elif key == "serviceAccountName":
            suggest = "service_account_name"

        if suggest:
            pulumi.log.warn(
                f"Key '{key}' not found in ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecPatch. Access the value via the '{suggest}' property getter instead."
            )

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecPatch.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default=None) -> Any:
        ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecPatch.__key_warning(key)
        return super().get(key, default)

    def __init__(
        __self__,
        *,
        affinity: Optional[
            "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPatch"
        ] = None,
        image_pull_secrets: Optional[
            Sequence[
                "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecImagePullSecretsPatch"
            ]
        ] = None,
        node_selector: Optional[Mapping[str, str]] = None,
        priority_class_name: Optional[str] = None,
        security_context: Optional[
            "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextPatch"
        ] = None,
        service_account_name: Optional[str] = None,
        tolerations: Optional[
            Sequence[
                "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecTolerationsPatch"
            ]
        ] = None,
    ):
        """
        PodSpec defines overrides for the HTTP01 challenge solver pod.
        Check ACMEChallengeSolverHTTP01IngressPodSpec to find out currently supported fields.
        All other fields will be ignored.
        :param Sequence['ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecImagePullSecretsPatchArgs'] image_pull_secrets: If specified, the pod's imagePullSecrets
        :param Mapping[str, str] node_selector: NodeSelector is a selector which must be true for the pod to fit on a node.
               Selector which must match a node's labels for the pod to be scheduled on that node.
               More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
        :param str priority_class_name: If specified, the pod's priorityClassName.
        :param str service_account_name: If specified, the pod's service account
        :param Sequence['ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecTolerationsPatchArgs'] tolerations: If specified, the pod's tolerations.
        """
        if affinity is not None:
            pulumi.set(__self__, "affinity", affinity)
        if image_pull_secrets is not None:
            pulumi.set(__self__, "image_pull_secrets", image_pull_secrets)
        if node_selector is not None:
            pulumi.set(__self__, "node_selector", node_selector)
        if priority_class_name is not None:
            pulumi.set(__self__, "priority_class_name", priority_class_name)
        if security_context is not None:
            pulumi.set(__self__, "security_context", security_context)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tolerations is not None:
            pulumi.set(__self__, "tolerations", tolerations)

    @property
    @pulumi.getter
    def affinity(
        self,
    ) -> Optional[
        "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPatch"
    ]:
        return pulumi.get(self, "affinity")

    @property
    @pulumi.getter(name="imagePullSecrets")
    def image_pull_secrets(
        self,
    ) -> Optional[
        Sequence[
            "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecImagePullSecretsPatch"
        ]
    ]:
        """
        If specified, the pod's imagePullSecrets
        """
        return pulumi.get(self, "image_pull_secrets")

    @property
    @pulumi.getter(name="nodeSelector")
    def node_selector(self) -> Optional[Mapping[str, str]]:
        """
        NodeSelector is a selector which must be true for the pod to fit on a node.
        Selector which must match a node's labels for the pod to be scheduled on that node.
        More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
        """
        return pulumi.get(self, "node_selector")

    @property
    @pulumi.getter(name="priorityClassName")
    def priority_class_name(self) -> Optional[str]:
        """
        If specified, the pod's priorityClassName.
        """
        return pulumi.get(self, "priority_class_name")

    @property
    @pulumi.getter(name="securityContext")
    def security_context(
        self,
    ) -> Optional[
        "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextPatch"
    ]:
        return pulumi.get(self, "security_context")

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[str]:
        """
        If specified, the pod's service account
        """
        return pulumi.get(self, "service_account_name")

    @property
    @pulumi.getter
    def tolerations(
        self,
    ) -> Optional[
        Sequence[
            "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecTolerationsPatch"
        ]
    ]:
        """
        If specified, the pod's tolerations.
        """
        return pulumi.get(self, "tolerations")


@pulumi.output_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecSecurityContext(dict):
    """
    If specified, the pod's security context
    """

    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fsGroup":
            suggest = "fs_group"
        elif key == "fsGroupChangePolicy":
            suggest = "fs_group_change_policy"
        elif key == "runAsGroup":
            suggest = "run_as_group"
        elif key == "runAsNonRoot":
            suggest = "run_as_non_root"
        elif key == "runAsUser":
            suggest = "run_as_user"
        elif key == "seLinuxOptions":
            suggest = "se_linux_options"
        elif key == "seccompProfile":
            suggest = "seccomp_profile"
        elif key == "supplementalGroups":
            suggest = "supplemental_groups"

        if suggest:
            pulumi.log.warn(
                f"Key '{key}' not found in ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecSecurityContext. Access the value via the '{suggest}' property getter instead."
            )

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecSecurityContext.__key_warning(
            key
        )
        return super().__getitem__(key)

    def get(self, key: str, default=None) -> Any:
        ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecSecurityContext.__key_warning(
            key
        )
        return super().get(key, default)

    def __init__(
        __self__,
        *,
        fs_group: Optional[int] = None,
        fs_group_change_policy: Optional[str] = None,
        run_as_group: Optional[int] = None,
        run_as_non_root: Optional[bool] = None,
        run_as_user: Optional[int] = None,
        se_linux_options: Optional[
            "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSeLinuxOptions"
        ] = None,
        seccomp_profile: Optional[
            "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSeccompProfile"
        ] = None,
        supplemental_groups: Optional[Sequence[int]] = None,
        sysctls: Optional[
            Sequence[
                "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSysctls"
            ]
        ] = None,
    ):
        """
        If specified, the pod's security context
        :param int fs_group: A special supplemental group that applies to all containers in a pod.
               Some volume types allow the Kubelet to change the ownership of that volume
               to be owned by the pod:

               1. The owning GID will be the FSGroup
               2. The setgid bit is set (new files created in the volume will be owned by FSGroup)
               3. The permission bits are OR'd with rw-rw----

               If unset, the Kubelet will not modify the ownership and permissions of any volume.
               Note that this field cannot be set when spec.os.name is windows.
        :param str fs_group_change_policy: fsGroupChangePolicy defines behavior of changing ownership and permission of the volume
               before being exposed inside Pod. This field will only apply to
               volume types which support fsGroup based ownership(and permissions).
               It will have no effect on ephemeral volume types such as: secret, configmaps
               and emptydir.
               Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used.
               Note that this field cannot be set when spec.os.name is windows.
        :param int run_as_group: The GID to run the entrypoint of the container process.
               Uses runtime default if unset.
               May also be set in SecurityContext.  If set in both SecurityContext and
               PodSecurityContext, the value specified in SecurityContext takes precedence
               for that container.
               Note that this field cannot be set when spec.os.name is windows.
        :param bool run_as_non_root: Indicates that the container must run as a non-root user.
               If true, the Kubelet will validate the image at runtime to ensure that it
               does not run as UID 0 (root) and fail to start the container if it does.
               If unset or false, no such validation will be performed.
               May also be set in SecurityContext.  If set in both SecurityContext and
               PodSecurityContext, the value specified in SecurityContext takes precedence.
        :param int run_as_user: The UID to run the entrypoint of the container process.
               Defaults to user specified in image metadata if unspecified.
               May also be set in SecurityContext.  If set in both SecurityContext and
               PodSecurityContext, the value specified in SecurityContext takes precedence
               for that container.
               Note that this field cannot be set when spec.os.name is windows.
        :param Sequence[int] supplemental_groups: A list of groups applied to the first process run in each container, in addition
               to the container's primary GID, the fsGroup (if specified), and group memberships
               defined in the container image for the uid of the container process. If unspecified,
               no additional groups are added to any container. Note that group memberships
               defined in the container image for the uid of the container process are still effective,
               even if they are not included in this list.
               Note that this field cannot be set when spec.os.name is windows.
        :param Sequence['ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSysctlsArgs'] sysctls: Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported
               sysctls (by the container runtime) might fail to launch.
               Note that this field cannot be set when spec.os.name is windows.
        """
        if fs_group is not None:
            pulumi.set(__self__, "fs_group", fs_group)
        if fs_group_change_policy is not None:
            pulumi.set(__self__, "fs_group_change_policy", fs_group_change_policy)
        if run_as_group is not None:
            pulumi.set(__self__, "run_as_group", run_as_group)
        if run_as_non_root is not None:
            pulumi.set(__self__, "run_as_non_root", run_as_non_root)
        if run_as_user is not None:
            pulumi.set(__self__, "run_as_user", run_as_user)
        if se_linux_options is not None:
            pulumi.set(__self__, "se_linux_options", se_linux_options)
        if seccomp_profile is not None:
            pulumi.set(__self__, "seccomp_profile", seccomp_profile)
        if supplemental_groups is not None:
            pulumi.set(__self__, "supplemental_groups", supplemental_groups)
        if sysctls is not None:
            pulumi.set(__self__, "sysctls", sysctls)

    @property
    @pulumi.getter(name="fsGroup")
    def fs_group(self) -> Optional[int]:
        """
        A special supplemental group that applies to all containers in a pod.
        Some volume types allow the Kubelet to change the ownership of that volume
        to be owned by the pod:

        1. The owning GID will be the FSGroup
        2. The setgid bit is set (new files created in the volume will be owned by FSGroup)
        3. The permission bits are OR'd with rw-rw----

        If unset, the Kubelet will not modify the ownership and permissions of any volume.
        Note that this field cannot be set when spec.os.name is windows.
        """
        return pulumi.get(self, "fs_group")

    @property
    @pulumi.getter(name="fsGroupChangePolicy")
    def fs_group_change_policy(self) -> Optional[str]:
        """
        fsGroupChangePolicy defines behavior of changing ownership and permission of the volume
        before being exposed inside Pod. This field will only apply to
        volume types which support fsGroup based ownership(and permissions).
        It will have no effect on ephemeral volume types such as: secret, configmaps
        and emptydir.
        Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used.
        Note that this field cannot be set when spec.os.name is windows.
        """
        return pulumi.get(self, "fs_group_change_policy")

    @property
    @pulumi.getter(name="runAsGroup")
    def run_as_group(self) -> Optional[int]:
        """
        The GID to run the entrypoint of the container process.
        Uses runtime default if unset.
        May also be set in SecurityContext.  If set in both SecurityContext and
        PodSecurityContext, the value specified in SecurityContext takes precedence
        for that container.
        Note that this field cannot be set when spec.os.name is windows.
        """
        return pulumi.get(self, "run_as_group")

    @property
    @pulumi.getter(name="runAsNonRoot")
    def run_as_non_root(self) -> Optional[bool]:
        """
        Indicates that the container must run as a non-root user.
        If true, the Kubelet will validate the image at runtime to ensure that it
        does not run as UID 0 (root) and fail to start the container if it does.
        If unset or false, no such validation will be performed.
        May also be set in SecurityContext.  If set in both SecurityContext and
        PodSecurityContext, the value specified in SecurityContext takes precedence.
        """
        return pulumi.get(self, "run_as_non_root")

    @property
    @pulumi.getter(name="runAsUser")
    def run_as_user(self) -> Optional[int]:
        """
        The UID to run the entrypoint of the container process.
        Defaults to user specified in image metadata if unspecified.
        May also be set in SecurityContext.  If set in both SecurityContext and
        PodSecurityContext, the value specified in SecurityContext takes precedence
        for that container.
        Note that this field cannot be set when spec.os.name is windows.
        """
        return pulumi.get(self, "run_as_user")

    @property
    @pulumi.getter(name="seLinuxOptions")
    def se_linux_options(
        self,
    ) -> Optional[
        "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSeLinuxOptions"
    ]:
        return pulumi.get(self, "se_linux_options")

    @property
    @pulumi.getter(name="seccompProfile")
    def seccomp_profile(
        self,
    ) -> Optional[
        "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSeccompProfile"
    ]:
        return pulumi.get(self, "seccomp_profile")

    @property
    @pulumi.getter(name="supplementalGroups")
    def supplemental_groups(self) -> Optional[Sequence[int]]:
        """
        A list of groups applied to the first process run in each container, in addition
        to the container's primary GID, the fsGroup (if specified), and group memberships
        defined in the container image for the uid of the container process. If unspecified,
        no additional groups are added to any container. Note that group memberships
        defined in the container image for the uid of the container process are still effective,
        even if they are not included in this list.
        Note that this field cannot be set when spec.os.name is windows.
        """
        return pulumi.get(self, "supplemental_groups")

    @property
    @pulumi.getter
    def sysctls(
        self,
    ) -> Optional[
        Sequence[
            "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSysctls"
        ]
    ]:
        """
        Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported
        sysctls (by the container runtime) might fail to launch.
        Note that this field cannot be set when spec.os.name is windows.
        """
        return pulumi.get(self, "sysctls")


@pulumi.output_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextPatch(
    dict
):
    """
    If specified, the pod's security context
    """

    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fsGroup":
            suggest = "fs_group"
        elif key == "fsGroupChangePolicy":
            suggest = "fs_group_change_policy"
        elif key == "runAsGroup":
            suggest = "run_as_group"
        elif key == "runAsNonRoot":
            suggest = "run_as_non_root"
        elif key == "runAsUser":
            suggest = "run_as_user"
        elif key == "seLinuxOptions":
            suggest = "se_linux_options"
        elif key == "seccompProfile":
            suggest = "seccomp_profile"
        elif key == "supplementalGroups":
            suggest = "supplemental_groups"

        if suggest:
            pulumi.log.warn(
                f"Key '{key}' not found in ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextPatch. Access the value via the '{suggest}' property getter instead."
            )

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextPatch.__key_warning(
            key
        )
        return super().__getitem__(key)

    def get(self, key: str, default=None) -> Any:
        ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextPatch.__key_warning(
            key
        )
        return super().get(key, default)

    def __init__(
        __self__,
        *,
        fs_group: Optional[int] = None,
        fs_group_change_policy: Optional[str] = None,
        run_as_group: Optional[int] = None,
        run_as_non_root: Optional[bool] = None,
        run_as_user: Optional[int] = None,
        se_linux_options: Optional[
            "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSeLinuxOptionsPatch"
        ] = None,
        seccomp_profile: Optional[
            "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSeccompProfilePatch"
        ] = None,
        supplemental_groups: Optional[Sequence[int]] = None,
        sysctls: Optional[
            Sequence[
                "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSysctlsPatch"
            ]
        ] = None,
    ):
        """
        If specified, the pod's security context
        :param int fs_group: A special supplemental group that applies to all containers in a pod.
               Some volume types allow the Kubelet to change the ownership of that volume
               to be owned by the pod:

               1. The owning GID will be the FSGroup
               2. The setgid bit is set (new files created in the volume will be owned by FSGroup)
               3. The permission bits are OR'd with rw-rw----

               If unset, the Kubelet will not modify the ownership and permissions of any volume.
               Note that this field cannot be set when spec.os.name is windows.
        :param str fs_group_change_policy: fsGroupChangePolicy defines behavior of changing ownership and permission of the volume
               before being exposed inside Pod. This field will only apply to
               volume types which support fsGroup based ownership(and permissions).
               It will have no effect on ephemeral volume types such as: secret, configmaps
               and emptydir.
               Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used.
               Note that this field cannot be set when spec.os.name is windows.
        :param int run_as_group: The GID to run the entrypoint of the container process.
               Uses runtime default if unset.
               May also be set in SecurityContext.  If set in both SecurityContext and
               PodSecurityContext, the value specified in SecurityContext takes precedence
               for that container.
               Note that this field cannot be set when spec.os.name is windows.
        :param bool run_as_non_root: Indicates that the container must run as a non-root user.
               If true, the Kubelet will validate the image at runtime to ensure that it
               does not run as UID 0 (root) and fail to start the container if it does.
               If unset or false, no such validation will be performed.
               May also be set in SecurityContext.  If set in both SecurityContext and
               PodSecurityContext, the value specified in SecurityContext takes precedence.
        :param int run_as_user: The UID to run the entrypoint of the container process.
               Defaults to user specified in image metadata if unspecified.
               May also be set in SecurityContext.  If set in both SecurityContext and
               PodSecurityContext, the value specified in SecurityContext takes precedence
               for that container.
               Note that this field cannot be set when spec.os.name is windows.
        :param Sequence[int] supplemental_groups: A list of groups applied to the first process run in each container, in addition
               to the container's primary GID, the fsGroup (if specified), and group memberships
               defined in the container image for the uid of the container process. If unspecified,
               no additional groups are added to any container. Note that group memberships
               defined in the container image for the uid of the container process are still effective,
               even if they are not included in this list.
               Note that this field cannot be set when spec.os.name is windows.
        :param Sequence['ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSysctlsPatchArgs'] sysctls: Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported
               sysctls (by the container runtime) might fail to launch.
               Note that this field cannot be set when spec.os.name is windows.
        """
        if fs_group is not None:
            pulumi.set(__self__, "fs_group", fs_group)
        if fs_group_change_policy is not None:
            pulumi.set(__self__, "fs_group_change_policy", fs_group_change_policy)
        if run_as_group is not None:
            pulumi.set(__self__, "run_as_group", run_as_group)
        if run_as_non_root is not None:
            pulumi.set(__self__, "run_as_non_root", run_as_non_root)
        if run_as_user is not None:
            pulumi.set(__self__, "run_as_user", run_as_user)
        if se_linux_options is not None:
            pulumi.set(__self__, "se_linux_options", se_linux_options)
        if seccomp_profile is not None:
            pulumi.set(__self__, "seccomp_profile", seccomp_profile)
        if supplemental_groups is not None:
            pulumi.set(__self__, "supplemental_groups", supplemental_groups)
        if sysctls is not None:
            pulumi.set(__self__, "sysctls", sysctls)

    @property
    @pulumi.getter(name="fsGroup")
    def fs_group(self) -> Optional[int]:
        """
        A special supplemental group that applies to all containers in a pod.
        Some volume types allow the Kubelet to change the ownership of that volume
        to be owned by the pod:

        1. The owning GID will be the FSGroup
        2. The setgid bit is set (new files created in the volume will be owned by FSGroup)
        3. The permission bits are OR'd with rw-rw----

        If unset, the Kubelet will not modify the ownership and permissions of any volume.
        Note that this field cannot be set when spec.os.name is windows.
        """
        return pulumi.get(self, "fs_group")

    @property
    @pulumi.getter(name="fsGroupChangePolicy")
    def fs_group_change_policy(self) -> Optional[str]:
        """
        fsGroupChangePolicy defines behavior of changing ownership and permission of the volume
        before being exposed inside Pod. This field will only apply to
        volume types which support fsGroup based ownership(and permissions).
        It will have no effect on ephemeral volume types such as: secret, configmaps
        and emptydir.
        Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used.
        Note that this field cannot be set when spec.os.name is windows.
        """
        return pulumi.get(self, "fs_group_change_policy")

    @property
    @pulumi.getter(name="runAsGroup")
    def run_as_group(self) -> Optional[int]:
        """
        The GID to run the entrypoint of the container process.
        Uses runtime default if unset.
        May also be set in SecurityContext.  If set in both SecurityContext and
        PodSecurityContext, the value specified in SecurityContext takes precedence
        for that container.
        Note that this field cannot be set when spec.os.name is windows.
        """
        return pulumi.get(self, "run_as_group")

    @property
    @pulumi.getter(name="runAsNonRoot")
    def run_as_non_root(self) -> Optional[bool]:
        """
        Indicates that the container must run as a non-root user.
        If true, the Kubelet will validate the image at runtime to ensure that it
        does not run as UID 0 (root) and fail to start the container if it does.
        If unset or false, no such validation will be performed.
        May also be set in SecurityContext.  If set in both SecurityContext and
        PodSecurityContext, the value specified in SecurityContext takes precedence.
        """
        return pulumi.get(self, "run_as_non_root")

    @property
    @pulumi.getter(name="runAsUser")
    def run_as_user(self) -> Optional[int]:
        """
        The UID to run the entrypoint of the container process.
        Defaults to user specified in image metadata if unspecified.
        May also be set in SecurityContext.  If set in both SecurityContext and
        PodSecurityContext, the value specified in SecurityContext takes precedence
        for that container.
        Note that this field cannot be set when spec.os.name is windows.
        """
        return pulumi.get(self, "run_as_user")

    @property
    @pulumi.getter(name="seLinuxOptions")
    def se_linux_options(
        self,
    ) -> Optional[
        "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSeLinuxOptionsPatch"
    ]:
        return pulumi.get(self, "se_linux_options")

    @property
    @pulumi.getter(name="seccompProfile")
    def seccomp_profile(
        self,
    ) -> Optional[
        "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSeccompProfilePatch"
    ]:
        return pulumi.get(self, "seccomp_profile")

    @property
    @pulumi.getter(name="supplementalGroups")
    def supplemental_groups(self) -> Optional[Sequence[int]]:
        """
        A list of groups applied to the first process run in each container, in addition
        to the container's primary GID, the fsGroup (if specified), and group memberships
        defined in the container image for the uid of the container process. If unspecified,
        no additional groups are added to any container. Note that group memberships
        defined in the container image for the uid of the container process are still effective,
        even if they are not included in this list.
        Note that this field cannot be set when spec.os.name is windows.
        """
        return pulumi.get(self, "supplemental_groups")

    @property
    @pulumi.getter
    def sysctls(
        self,
    ) -> Optional[
        Sequence[
            "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSysctlsPatch"
        ]
    ]:
        """
        Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported
        sysctls (by the container runtime) might fail to launch.
        Note that this field cannot be set when spec.os.name is windows.
        """
        return pulumi.get(self, "sysctls")


@pulumi.output_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSeLinuxOptions(
    dict
):
    """
    The SELinux context to be applied to all containers.
    If unspecified, the container runtime will allocate a random SELinux context for each
    container.  May also be set in SecurityContext.  If set in
    both SecurityContext and PodSecurityContext, the value specified in SecurityContext
    takes precedence for that container.
    Note that this field cannot be set when spec.os.name is windows.
    """

    def __init__(
        __self__,
        *,
        level: Optional[str] = None,
        role: Optional[str] = None,
        type: Optional[str] = None,
        user: Optional[str] = None,
    ):
        """
        The SELinux context to be applied to all containers.
        If unspecified, the container runtime will allocate a random SELinux context for each
        container.  May also be set in SecurityContext.  If set in
        both SecurityContext and PodSecurityContext, the value specified in SecurityContext
        takes precedence for that container.
        Note that this field cannot be set when spec.os.name is windows.
        :param str level: Level is SELinux level label that applies to the container.
        :param str role: Role is a SELinux role label that applies to the container.
        :param str type: Type is a SELinux type label that applies to the container.
        :param str user: User is a SELinux user label that applies to the container.
        """
        if level is not None:
            pulumi.set(__self__, "level", level)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        """
        Level is SELinux level label that applies to the container.
        """
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def role(self) -> Optional[str]:
        """
        Role is a SELinux role label that applies to the container.
        """
        return pulumi.get(self, "role")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Type is a SELinux type label that applies to the container.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def user(self) -> Optional[str]:
        """
        User is a SELinux user label that applies to the container.
        """
        return pulumi.get(self, "user")


@pulumi.output_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSeLinuxOptionsPatch(
    dict
):
    """
    The SELinux context to be applied to all containers.
    If unspecified, the container runtime will allocate a random SELinux context for each
    container.  May also be set in SecurityContext.  If set in
    both SecurityContext and PodSecurityContext, the value specified in SecurityContext
    takes precedence for that container.
    Note that this field cannot be set when spec.os.name is windows.
    """

    def __init__(
        __self__,
        *,
        level: Optional[str] = None,
        role: Optional[str] = None,
        type: Optional[str] = None,
        user: Optional[str] = None,
    ):
        """
        The SELinux context to be applied to all containers.
        If unspecified, the container runtime will allocate a random SELinux context for each
        container.  May also be set in SecurityContext.  If set in
        both SecurityContext and PodSecurityContext, the value specified in SecurityContext
        takes precedence for that container.
        Note that this field cannot be set when spec.os.name is windows.
        :param str level: Level is SELinux level label that applies to the container.
        :param str role: Role is a SELinux role label that applies to the container.
        :param str type: Type is a SELinux type label that applies to the container.
        :param str user: User is a SELinux user label that applies to the container.
        """
        if level is not None:
            pulumi.set(__self__, "level", level)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        """
        Level is SELinux level label that applies to the container.
        """
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def role(self) -> Optional[str]:
        """
        Role is a SELinux role label that applies to the container.
        """
        return pulumi.get(self, "role")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Type is a SELinux type label that applies to the container.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def user(self) -> Optional[str]:
        """
        User is a SELinux user label that applies to the container.
        """
        return pulumi.get(self, "user")


@pulumi.output_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSeccompProfile(
    dict
):
    """
    The seccomp options to use by the containers in this pod.
    Note that this field cannot be set when spec.os.name is windows.
    """

    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "localhostProfile":
            suggest = "localhost_profile"

        if suggest:
            pulumi.log.warn(
                f"Key '{key}' not found in ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSeccompProfile. Access the value via the '{suggest}' property getter instead."
            )

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSeccompProfile.__key_warning(
            key
        )
        return super().__getitem__(key)

    def get(self, key: str, default=None) -> Any:
        ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSeccompProfile.__key_warning(
            key
        )
        return super().get(key, default)

    def __init__(
        __self__, *, localhost_profile: Optional[str] = None, type: Optional[str] = None
    ):
        """
        The seccomp options to use by the containers in this pod.
        Note that this field cannot be set when spec.os.name is windows.
        :param str localhost_profile: localhostProfile indicates a profile defined in a file on the node should be used.
               The profile must be preconfigured on the node to work.
               Must be a descending path, relative to the kubelet's configured seccomp profile location.
               Must be set if type is "Localhost". Must NOT be set for any other type.
        :param str type: type indicates which kind of seccomp profile will be applied.
               Valid options are:

               Localhost - a profile defined in a file on the node should be used.
               RuntimeDefault - the container runtime default profile should be used.
               Unconfined - no profile should be applied.
        """
        if localhost_profile is not None:
            pulumi.set(__self__, "localhost_profile", localhost_profile)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="localhostProfile")
    def localhost_profile(self) -> Optional[str]:
        """
        localhostProfile indicates a profile defined in a file on the node should be used.
        The profile must be preconfigured on the node to work.
        Must be a descending path, relative to the kubelet's configured seccomp profile location.
        Must be set if type is "Localhost". Must NOT be set for any other type.
        """
        return pulumi.get(self, "localhost_profile")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        type indicates which kind of seccomp profile will be applied.
        Valid options are:

        Localhost - a profile defined in a file on the node should be used.
        RuntimeDefault - the container runtime default profile should be used.
        Unconfined - no profile should be applied.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSeccompProfilePatch(
    dict
):
    """
    The seccomp options to use by the containers in this pod.
    Note that this field cannot be set when spec.os.name is windows.
    """

    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "localhostProfile":
            suggest = "localhost_profile"

        if suggest:
            pulumi.log.warn(
                f"Key '{key}' not found in ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSeccompProfilePatch. Access the value via the '{suggest}' property getter instead."
            )

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSeccompProfilePatch.__key_warning(
            key
        )
        return super().__getitem__(key)

    def get(self, key: str, default=None) -> Any:
        ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSeccompProfilePatch.__key_warning(
            key
        )
        return super().get(key, default)

    def __init__(
        __self__, *, localhost_profile: Optional[str] = None, type: Optional[str] = None
    ):
        """
        The seccomp options to use by the containers in this pod.
        Note that this field cannot be set when spec.os.name is windows.
        :param str localhost_profile: localhostProfile indicates a profile defined in a file on the node should be used.
               The profile must be preconfigured on the node to work.
               Must be a descending path, relative to the kubelet's configured seccomp profile location.
               Must be set if type is "Localhost". Must NOT be set for any other type.
        :param str type: type indicates which kind of seccomp profile will be applied.
               Valid options are:

               Localhost - a profile defined in a file on the node should be used.
               RuntimeDefault - the container runtime default profile should be used.
               Unconfined - no profile should be applied.
        """
        if localhost_profile is not None:
            pulumi.set(__self__, "localhost_profile", localhost_profile)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="localhostProfile")
    def localhost_profile(self) -> Optional[str]:
        """
        localhostProfile indicates a profile defined in a file on the node should be used.
        The profile must be preconfigured on the node to work.
        Must be a descending path, relative to the kubelet's configured seccomp profile location.
        Must be set if type is "Localhost". Must NOT be set for any other type.
        """
        return pulumi.get(self, "localhost_profile")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        type indicates which kind of seccomp profile will be applied.
        Valid options are:

        Localhost - a profile defined in a file on the node should be used.
        RuntimeDefault - the container runtime default profile should be used.
        Unconfined - no profile should be applied.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSysctls(
    dict
):
    """
    Sysctl defines a kernel parameter to be set
    """

    def __init__(__self__, *, name: Optional[str] = None, value: Optional[str] = None):
        """
        Sysctl defines a kernel parameter to be set
        :param str name: Name of a property to set
        :param str value: Value of a property to set
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of a property to set
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of a property to set
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSysctlsPatch(
    dict
):
    """
    Sysctl defines a kernel parameter to be set
    """

    def __init__(__self__, *, name: Optional[str] = None, value: Optional[str] = None):
        """
        Sysctl defines a kernel parameter to be set
        :param str name: Name of a property to set
        :param str value: Value of a property to set
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of a property to set
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of a property to set
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecTolerations(dict):
    """
    The pod this Toleration is attached to tolerates any taint that matches
    the triple <key,value,effect> using the matching operator <operator>.
    """

    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "tolerationSeconds":
            suggest = "toleration_seconds"

        if suggest:
            pulumi.log.warn(
                f"Key '{key}' not found in ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecTolerations. Access the value via the '{suggest}' property getter instead."
            )

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecTolerations.__key_warning(
            key
        )
        return super().__getitem__(key)

    def get(self, key: str, default=None) -> Any:
        ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecTolerations.__key_warning(
            key
        )
        return super().get(key, default)

    def __init__(
        __self__,
        *,
        effect: Optional[str] = None,
        key: Optional[str] = None,
        operator: Optional[str] = None,
        toleration_seconds: Optional[int] = None,
        value: Optional[str] = None,
    ):
        """
        The pod this Toleration is attached to tolerates any taint that matches
        the triple <key,value,effect> using the matching operator <operator>.
        :param str effect: Effect indicates the taint effect to match. Empty means match all taint effects.
               When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
        :param str key: Key is the taint key that the toleration applies to. Empty means match all taint keys.
               If the key is empty, operator must be Exists; this combination means to match all values and all keys.
        :param str operator: Operator represents a key's relationship to the value.
               Valid operators are Exists and Equal. Defaults to Equal.
               Exists is equivalent to wildcard for value, so that a pod can
               tolerate all taints of a particular category.
        :param int toleration_seconds: TolerationSeconds represents the period of time the toleration (which must be
               of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,
               it is not set, which means tolerate the taint forever (do not evict). Zero and
               negative values will be treated as 0 (evict immediately) by the system.
        :param str value: Value is the taint value the toleration matches to.
               If the operator is Exists, the value should be empty, otherwise just a regular string.
        """
        if effect is not None:
            pulumi.set(__self__, "effect", effect)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if toleration_seconds is not None:
            pulumi.set(__self__, "toleration_seconds", toleration_seconds)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def effect(self) -> Optional[str]:
        """
        Effect indicates the taint effect to match. Empty means match all taint effects.
        When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
        """
        return pulumi.get(self, "effect")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        Key is the taint key that the toleration applies to. Empty means match all taint keys.
        If the key is empty, operator must be Exists; this combination means to match all values and all keys.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> Optional[str]:
        """
        Operator represents a key's relationship to the value.
        Valid operators are Exists and Equal. Defaults to Equal.
        Exists is equivalent to wildcard for value, so that a pod can
        tolerate all taints of a particular category.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter(name="tolerationSeconds")
    def toleration_seconds(self) -> Optional[int]:
        """
        TolerationSeconds represents the period of time the toleration (which must be
        of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,
        it is not set, which means tolerate the taint forever (do not evict). Zero and
        negative values will be treated as 0 (evict immediately) by the system.
        """
        return pulumi.get(self, "toleration_seconds")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value is the taint value the toleration matches to.
        If the operator is Exists, the value should be empty, otherwise just a regular string.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecTolerationsPatch(dict):
    """
    The pod this Toleration is attached to tolerates any taint that matches
    the triple <key,value,effect> using the matching operator <operator>.
    """

    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "tolerationSeconds":
            suggest = "toleration_seconds"

        if suggest:
            pulumi.log.warn(
                f"Key '{key}' not found in ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecTolerationsPatch. Access the value via the '{suggest}' property getter instead."
            )

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecTolerationsPatch.__key_warning(
            key
        )
        return super().__getitem__(key)

    def get(self, key: str, default=None) -> Any:
        ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecTolerationsPatch.__key_warning(
            key
        )
        return super().get(key, default)

    def __init__(
        __self__,
        *,
        effect: Optional[str] = None,
        key: Optional[str] = None,
        operator: Optional[str] = None,
        toleration_seconds: Optional[int] = None,
        value: Optional[str] = None,
    ):
        """
        The pod this Toleration is attached to tolerates any taint that matches
        the triple <key,value,effect> using the matching operator <operator>.
        :param str effect: Effect indicates the taint effect to match. Empty means match all taint effects.
               When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
        :param str key: Key is the taint key that the toleration applies to. Empty means match all taint keys.
               If the key is empty, operator must be Exists; this combination means to match all values and all keys.
        :param str operator: Operator represents a key's relationship to the value.
               Valid operators are Exists and Equal. Defaults to Equal.
               Exists is equivalent to wildcard for value, so that a pod can
               tolerate all taints of a particular category.
        :param int toleration_seconds: TolerationSeconds represents the period of time the toleration (which must be
               of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,
               it is not set, which means tolerate the taint forever (do not evict). Zero and
               negative values will be treated as 0 (evict immediately) by the system.
        :param str value: Value is the taint value the toleration matches to.
               If the operator is Exists, the value should be empty, otherwise just a regular string.
        """
        if effect is not None:
            pulumi.set(__self__, "effect", effect)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if toleration_seconds is not None:
            pulumi.set(__self__, "toleration_seconds", toleration_seconds)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def effect(self) -> Optional[str]:
        """
        Effect indicates the taint effect to match. Empty means match all taint effects.
        When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
        """
        return pulumi.get(self, "effect")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        Key is the taint key that the toleration applies to. Empty means match all taint keys.
        If the key is empty, operator must be Exists; this combination means to match all values and all keys.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> Optional[str]:
        """
        Operator represents a key's relationship to the value.
        Valid operators are Exists and Equal. Defaults to Equal.
        Exists is equivalent to wildcard for value, so that a pod can
        tolerate all taints of a particular category.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter(name="tolerationSeconds")
    def toleration_seconds(self) -> Optional[int]:
        """
        TolerationSeconds represents the period of time the toleration (which must be
        of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,
        it is not set, which means tolerate the taint forever (do not evict). Zero and
        negative values will be treated as 0 (evict immediately) by the system.
        """
        return pulumi.get(self, "toleration_seconds")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value is the taint value the toleration matches to.
        If the operator is Exists, the value should be empty, otherwise just a regular string.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ChallengeSpecSolverHttp01Ingress(dict):
    """
    The ingress based HTTP01 challenge solver will solve challenges by
    creating or modifying Ingress resources in order to route requests for
    '/.well-known/acme-challenge/XYZ' to 'challenge solver' pods that are
    provisioned by cert-manager for each Challenge to be completed.
    """

    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "class":
            suggest = "class_"
        elif key == "ingressClassName":
            suggest = "ingress_class_name"
        elif key == "ingressTemplate":
            suggest = "ingress_template"
        elif key == "podTemplate":
            suggest = "pod_template"
        elif key == "serviceType":
            suggest = "service_type"

        if suggest:
            pulumi.log.warn(
                f"Key '{key}' not found in ChallengeSpecSolverHttp01Ingress. Access the value via the '{suggest}' property getter instead."
            )

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverHttp01Ingress.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default=None) -> Any:
        ChallengeSpecSolverHttp01Ingress.__key_warning(key)
        return super().get(key, default)

    def __init__(
        __self__,
        *,
        class_: Optional[str] = None,
        ingress_class_name: Optional[str] = None,
        ingress_template: Optional[
            "outputs.ChallengeSpecSolverHttp01IngressIngressTemplate"
        ] = None,
        name: Optional[str] = None,
        pod_template: Optional[
            "outputs.ChallengeSpecSolverHttp01IngressPodTemplate"
        ] = None,
        service_type: Optional[str] = None,
    ):
        """
        The ingress based HTTP01 challenge solver will solve challenges by
        creating or modifying Ingress resources in order to route requests for
        '/.well-known/acme-challenge/XYZ' to 'challenge solver' pods that are
        provisioned by cert-manager for each Challenge to be completed.
        :param str class_: This field configures the annotation `kubernetes.io/ingress.class` when
               creating Ingress resources to solve ACME challenges that use this
               challenge solver. Only one of `class`, `name` or `ingressClassName` may
               be specified.
        :param str ingress_class_name: This field configures the field `ingressClassName` on the created Ingress
               resources used to solve ACME challenges that use this challenge solver.
               This is the recommended way of configuring the ingress class. Only one of
               `class`, `name` or `ingressClassName` may be specified.
        :param str name: The name of the ingress resource that should have ACME challenge solving
               routes inserted into it in order to solve HTTP01 challenges.
               This is typically used in conjunction with ingress controllers like
               ingress-gce, which maintains a 1:1 mapping between external IPs and
               ingress resources. Only one of `class`, `name` or `ingressClassName` may
               be specified.
        :param str service_type: Optional service type for Kubernetes solver service. Supported values
               are NodePort or ClusterIP. If unset, defaults to NodePort.
        """
        if class_ is not None:
            pulumi.set(__self__, "class_", class_)
        if ingress_class_name is not None:
            pulumi.set(__self__, "ingress_class_name", ingress_class_name)
        if ingress_template is not None:
            pulumi.set(__self__, "ingress_template", ingress_template)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if pod_template is not None:
            pulumi.set(__self__, "pod_template", pod_template)
        if service_type is not None:
            pulumi.set(__self__, "service_type", service_type)

    @property
    @pulumi.getter(name="class")
    def class_(self) -> Optional[str]:
        """
        This field configures the annotation `kubernetes.io/ingress.class` when
        creating Ingress resources to solve ACME challenges that use this
        challenge solver. Only one of `class`, `name` or `ingressClassName` may
        be specified.
        """
        return pulumi.get(self, "class_")

    @property
    @pulumi.getter(name="ingressClassName")
    def ingress_class_name(self) -> Optional[str]:
        """
        This field configures the field `ingressClassName` on the created Ingress
        resources used to solve ACME challenges that use this challenge solver.
        This is the recommended way of configuring the ingress class. Only one of
        `class`, `name` or `ingressClassName` may be specified.
        """
        return pulumi.get(self, "ingress_class_name")

    @property
    @pulumi.getter(name="ingressTemplate")
    def ingress_template(
        self,
    ) -> Optional["outputs.ChallengeSpecSolverHttp01IngressIngressTemplate"]:
        return pulumi.get(self, "ingress_template")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name of the ingress resource that should have ACME challenge solving
        routes inserted into it in order to solve HTTP01 challenges.
        This is typically used in conjunction with ingress controllers like
        ingress-gce, which maintains a 1:1 mapping between external IPs and
        ingress resources. Only one of `class`, `name` or `ingressClassName` may
        be specified.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="podTemplate")
    def pod_template(
        self,
    ) -> Optional["outputs.ChallengeSpecSolverHttp01IngressPodTemplate"]:
        return pulumi.get(self, "pod_template")

    @property
    @pulumi.getter(name="serviceType")
    def service_type(self) -> Optional[str]:
        """
        Optional service type for Kubernetes solver service. Supported values
        are NodePort or ClusterIP. If unset, defaults to NodePort.
        """
        return pulumi.get(self, "service_type")


@pulumi.output_type
class ChallengeSpecSolverHttp01IngressIngressTemplate(dict):
    """
    Optional ingress template used to configure the ACME challenge solver
    ingress used for HTTP01 challenges.
    """

    def __init__(
        __self__,
        *,
        metadata: Optional[
            "outputs.ChallengeSpecSolverHttp01IngressIngressTemplateMetadata"
        ] = None,
    ):
        """
        Optional ingress template used to configure the ACME challenge solver
        ingress used for HTTP01 challenges.
        """
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)

    @property
    @pulumi.getter
    def metadata(
        self,
    ) -> Optional["outputs.ChallengeSpecSolverHttp01IngressIngressTemplateMetadata"]:
        return pulumi.get(self, "metadata")


@pulumi.output_type
class ChallengeSpecSolverHttp01IngressIngressTemplateMetadata(dict):
    """
    ObjectMeta overrides for the ingress used to solve HTTP01 challenges.
    Only the 'labels' and 'annotations' fields may be set.
    If labels or annotations overlap with in-built values, the values here
    will override the in-built values.
    """

    def __init__(
        __self__,
        *,
        annotations: Optional[Mapping[str, str]] = None,
        labels: Optional[Mapping[str, str]] = None,
    ):
        """
        ObjectMeta overrides for the ingress used to solve HTTP01 challenges.
        Only the 'labels' and 'annotations' fields may be set.
        If labels or annotations overlap with in-built values, the values here
        will override the in-built values.
        :param Mapping[str, str] annotations: Annotations that should be added to the created ACME HTTP01 solver ingress.
        :param Mapping[str, str] labels: Labels that should be added to the created ACME HTTP01 solver ingress.
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        """
        Annotations that should be added to the created ACME HTTP01 solver ingress.
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        """
        Labels that should be added to the created ACME HTTP01 solver ingress.
        """
        return pulumi.get(self, "labels")


@pulumi.output_type
class ChallengeSpecSolverHttp01IngressIngressTemplateMetadataPatch(dict):
    """
    ObjectMeta overrides for the ingress used to solve HTTP01 challenges.
    Only the 'labels' and 'annotations' fields may be set.
    If labels or annotations overlap with in-built values, the values here
    will override the in-built values.
    """

    def __init__(
        __self__,
        *,
        annotations: Optional[Mapping[str, str]] = None,
        labels: Optional[Mapping[str, str]] = None,
    ):
        """
        ObjectMeta overrides for the ingress used to solve HTTP01 challenges.
        Only the 'labels' and 'annotations' fields may be set.
        If labels or annotations overlap with in-built values, the values here
        will override the in-built values.
        :param Mapping[str, str] annotations: Annotations that should be added to the created ACME HTTP01 solver ingress.
        :param Mapping[str, str] labels: Labels that should be added to the created ACME HTTP01 solver ingress.
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        """
        Annotations that should be added to the created ACME HTTP01 solver ingress.
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        """
        Labels that should be added to the created ACME HTTP01 solver ingress.
        """
        return pulumi.get(self, "labels")


@pulumi.output_type
class ChallengeSpecSolverHttp01IngressIngressTemplatePatch(dict):
    """
    Optional ingress template used to configure the ACME challenge solver
    ingress used for HTTP01 challenges.
    """

    def __init__(
        __self__,
        *,
        metadata: Optional[
            "outputs.ChallengeSpecSolverHttp01IngressIngressTemplateMetadataPatch"
        ] = None,
    ):
        """
        Optional ingress template used to configure the ACME challenge solver
        ingress used for HTTP01 challenges.
        """
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)

    @property
    @pulumi.getter
    def metadata(
        self,
    ) -> Optional[
        "outputs.ChallengeSpecSolverHttp01IngressIngressTemplateMetadataPatch"
    ]:
        return pulumi.get(self, "metadata")


@pulumi.output_type
class ChallengeSpecSolverHttp01IngressPatch(dict):
    """
    The ingress based HTTP01 challenge solver will solve challenges by
    creating or modifying Ingress resources in order to route requests for
    '/.well-known/acme-challenge/XYZ' to 'challenge solver' pods that are
    provisioned by cert-manager for each Challenge to be completed.
    """

    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "class":
            suggest = "class_"
        elif key == "ingressClassName":
            suggest = "ingress_class_name"
        elif key == "ingressTemplate":
            suggest = "ingress_template"
        elif key == "podTemplate":
            suggest = "pod_template"
        elif key == "serviceType":
            suggest = "service_type"

        if suggest:
            pulumi.log.warn(
                f"Key '{key}' not found in ChallengeSpecSolverHttp01IngressPatch. Access the value via the '{suggest}' property getter instead."
            )

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverHttp01IngressPatch.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default=None) -> Any:
        ChallengeSpecSolverHttp01IngressPatch.__key_warning(key)
        return super().get(key, default)

    def __init__(
        __self__,
        *,
        class_: Optional[str] = None,
        ingress_class_name: Optional[str] = None,
        ingress_template: Optional[
            "outputs.ChallengeSpecSolverHttp01IngressIngressTemplatePatch"
        ] = None,
        name: Optional[str] = None,
        pod_template: Optional[
            "outputs.ChallengeSpecSolverHttp01IngressPodTemplatePatch"
        ] = None,
        service_type: Optional[str] = None,
    ):
        """
        The ingress based HTTP01 challenge solver will solve challenges by
        creating or modifying Ingress resources in order to route requests for
        '/.well-known/acme-challenge/XYZ' to 'challenge solver' pods that are
        provisioned by cert-manager for each Challenge to be completed.
        :param str class_: This field configures the annotation `kubernetes.io/ingress.class` when
               creating Ingress resources to solve ACME challenges that use this
               challenge solver. Only one of `class`, `name` or `ingressClassName` may
               be specified.
        :param str ingress_class_name: This field configures the field `ingressClassName` on the created Ingress
               resources used to solve ACME challenges that use this challenge solver.
               This is the recommended way of configuring the ingress class. Only one of
               `class`, `name` or `ingressClassName` may be specified.
        :param str name: The name of the ingress resource that should have ACME challenge solving
               routes inserted into it in order to solve HTTP01 challenges.
               This is typically used in conjunction with ingress controllers like
               ingress-gce, which maintains a 1:1 mapping between external IPs and
               ingress resources. Only one of `class`, `name` or `ingressClassName` may
               be specified.
        :param str service_type: Optional service type for Kubernetes solver service. Supported values
               are NodePort or ClusterIP. If unset, defaults to NodePort.
        """
        if class_ is not None:
            pulumi.set(__self__, "class_", class_)
        if ingress_class_name is not None:
            pulumi.set(__self__, "ingress_class_name", ingress_class_name)
        if ingress_template is not None:
            pulumi.set(__self__, "ingress_template", ingress_template)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if pod_template is not None:
            pulumi.set(__self__, "pod_template", pod_template)
        if service_type is not None:
            pulumi.set(__self__, "service_type", service_type)

    @property
    @pulumi.getter(name="class")
    def class_(self) -> Optional[str]:
        """
        This field configures the annotation `kubernetes.io/ingress.class` when
        creating Ingress resources to solve ACME challenges that use this
        challenge solver. Only one of `class`, `name` or `ingressClassName` may
        be specified.
        """
        return pulumi.get(self, "class_")

    @property
    @pulumi.getter(name="ingressClassName")
    def ingress_class_name(self) -> Optional[str]:
        """
        This field configures the field `ingressClassName` on the created Ingress
        resources used to solve ACME challenges that use this challenge solver.
        This is the recommended way of configuring the ingress class. Only one of
        `class`, `name` or `ingressClassName` may be specified.
        """
        return pulumi.get(self, "ingress_class_name")

    @property
    @pulumi.getter(name="ingressTemplate")
    def ingress_template(
        self,
    ) -> Optional["outputs.ChallengeSpecSolverHttp01IngressIngressTemplatePatch"]:
        return pulumi.get(self, "ingress_template")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name of the ingress resource that should have ACME challenge solving
        routes inserted into it in order to solve HTTP01 challenges.
        This is typically used in conjunction with ingress controllers like
        ingress-gce, which maintains a 1:1 mapping between external IPs and
        ingress resources. Only one of `class`, `name` or `ingressClassName` may
        be specified.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="podTemplate")
    def pod_template(
        self,
    ) -> Optional["outputs.ChallengeSpecSolverHttp01IngressPodTemplatePatch"]:
        return pulumi.get(self, "pod_template")

    @property
    @pulumi.getter(name="serviceType")
    def service_type(self) -> Optional[str]:
        """
        Optional service type for Kubernetes solver service. Supported values
        are NodePort or ClusterIP. If unset, defaults to NodePort.
        """
        return pulumi.get(self, "service_type")


@pulumi.output_type
class ChallengeSpecSolverHttp01IngressPodTemplate(dict):
    """
    Optional pod template used to configure the ACME challenge solver pods
    used for HTTP01 challenges.
    """

    def __init__(
        __self__,
        *,
        metadata: Optional[
            "outputs.ChallengeSpecSolverHttp01IngressPodTemplateMetadata"
        ] = None,
        spec: Optional[
            "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpec"
        ] = None,
    ):
        """
        Optional pod template used to configure the ACME challenge solver pods
        used for HTTP01 challenges.
        """
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if spec is not None:
            pulumi.set(__self__, "spec", spec)

    @property
    @pulumi.getter
    def metadata(
        self,
    ) -> Optional["outputs.ChallengeSpecSolverHttp01IngressPodTemplateMetadata"]:
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def spec(
        self,
    ) -> Optional["outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpec"]:
        return pulumi.get(self, "spec")


@pulumi.output_type
class ChallengeSpecSolverHttp01IngressPodTemplateMetadata(dict):
    """
    ObjectMeta overrides for the pod used to solve HTTP01 challenges.
    Only the 'labels' and 'annotations' fields may be set.
    If labels or annotations overlap with in-built values, the values here
    will override the in-built values.
    """

    def __init__(
        __self__,
        *,
        annotations: Optional[Mapping[str, str]] = None,
        labels: Optional[Mapping[str, str]] = None,
    ):
        """
        ObjectMeta overrides for the pod used to solve HTTP01 challenges.
        Only the 'labels' and 'annotations' fields may be set.
        If labels or annotations overlap with in-built values, the values here
        will override the in-built values.
        :param Mapping[str, str] annotations: Annotations that should be added to the created ACME HTTP01 solver pods.
        :param Mapping[str, str] labels: Labels that should be added to the created ACME HTTP01 solver pods.
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        """
        Annotations that should be added to the created ACME HTTP01 solver pods.
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        """
        Labels that should be added to the created ACME HTTP01 solver pods.
        """
        return pulumi.get(self, "labels")


@pulumi.output_type
class ChallengeSpecSolverHttp01IngressPodTemplateMetadataPatch(dict):
    """
    ObjectMeta overrides for the pod used to solve HTTP01 challenges.
    Only the 'labels' and 'annotations' fields may be set.
    If labels or annotations overlap with in-built values, the values here
    will override the in-built values.
    """

    def __init__(
        __self__,
        *,
        annotations: Optional[Mapping[str, str]] = None,
        labels: Optional[Mapping[str, str]] = None,
    ):
        """
        ObjectMeta overrides for the pod used to solve HTTP01 challenges.
        Only the 'labels' and 'annotations' fields may be set.
        If labels or annotations overlap with in-built values, the values here
        will override the in-built values.
        :param Mapping[str, str] annotations: Annotations that should be added to the created ACME HTTP01 solver pods.
        :param Mapping[str, str] labels: Labels that should be added to the created ACME HTTP01 solver pods.
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        """
        Annotations that should be added to the created ACME HTTP01 solver pods.
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        """
        Labels that should be added to the created ACME HTTP01 solver pods.
        """
        return pulumi.get(self, "labels")


@pulumi.output_type
class ChallengeSpecSolverHttp01IngressPodTemplatePatch(dict):
    """
    Optional pod template used to configure the ACME challenge solver pods
    used for HTTP01 challenges.
    """

    def __init__(
        __self__,
        *,
        metadata: Optional[
            "outputs.ChallengeSpecSolverHttp01IngressPodTemplateMetadataPatch"
        ] = None,
        spec: Optional[
            "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecPatch"
        ] = None,
    ):
        """
        Optional pod template used to configure the ACME challenge solver pods
        used for HTTP01 challenges.
        """
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if spec is not None:
            pulumi.set(__self__, "spec", spec)

    @property
    @pulumi.getter
    def metadata(
        self,
    ) -> Optional["outputs.ChallengeSpecSolverHttp01IngressPodTemplateMetadataPatch"]:
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def spec(
        self,
    ) -> Optional["outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecPatch"]:
        return pulumi.get(self, "spec")


@pulumi.output_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpec(dict):
    """
    PodSpec defines overrides for the HTTP01 challenge solver pod.
    Check ACMEChallengeSolverHTTP01IngressPodSpec to find out currently supported fields.
    All other fields will be ignored.
    """

    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imagePullSecrets":
            suggest = "image_pull_secrets"
        elif key == "nodeSelector":
            suggest = "node_selector"
        elif key == "priorityClassName":
            suggest = "priority_class_name"
        elif key == "securityContext":
            suggest = "security_context"
        elif key == "serviceAccountName":
            suggest = "service_account_name"

        if suggest:
            pulumi.log.warn(
                f"Key '{key}' not found in ChallengeSpecSolverHttp01IngressPodTemplateSpec. Access the value via the '{suggest}' property getter instead."
            )

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverHttp01IngressPodTemplateSpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default=None) -> Any:
        ChallengeSpecSolverHttp01IngressPodTemplateSpec.__key_warning(key)
        return super().get(key, default)

    def __init__(
        __self__,
        *,
        affinity: Optional[
            "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinity"
        ] = None,
        image_pull_secrets: Optional[
            Sequence[
                "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecImagePullSecrets"
            ]
        ] = None,
        node_selector: Optional[Mapping[str, str]] = None,
        priority_class_name: Optional[str] = None,
        security_context: Optional[
            "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecSecurityContext"
        ] = None,
        service_account_name: Optional[str] = None,
        tolerations: Optional[
            Sequence[
                "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecTolerations"
            ]
        ] = None,
    ):
        """
        PodSpec defines overrides for the HTTP01 challenge solver pod.
        Check ACMEChallengeSolverHTTP01IngressPodSpec to find out currently supported fields.
        All other fields will be ignored.
        :param Sequence['ChallengeSpecSolverHttp01IngressPodTemplateSpecImagePullSecretsArgs'] image_pull_secrets: If specified, the pod's imagePullSecrets
        :param Mapping[str, str] node_selector: NodeSelector is a selector which must be true for the pod to fit on a node.
               Selector which must match a node's labels for the pod to be scheduled on that node.
               More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
        :param str priority_class_name: If specified, the pod's priorityClassName.
        :param str service_account_name: If specified, the pod's service account
        :param Sequence['ChallengeSpecSolverHttp01IngressPodTemplateSpecTolerationsArgs'] tolerations: If specified, the pod's tolerations.
        """
        if affinity is not None:
            pulumi.set(__self__, "affinity", affinity)
        if image_pull_secrets is not None:
            pulumi.set(__self__, "image_pull_secrets", image_pull_secrets)
        if node_selector is not None:
            pulumi.set(__self__, "node_selector", node_selector)
        if priority_class_name is not None:
            pulumi.set(__self__, "priority_class_name", priority_class_name)
        if security_context is not None:
            pulumi.set(__self__, "security_context", security_context)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tolerations is not None:
            pulumi.set(__self__, "tolerations", tolerations)

    @property
    @pulumi.getter
    def affinity(
        self,
    ) -> Optional["outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinity"]:
        return pulumi.get(self, "affinity")

    @property
    @pulumi.getter(name="imagePullSecrets")
    def image_pull_secrets(
        self,
    ) -> Optional[
        Sequence[
            "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecImagePullSecrets"
        ]
    ]:
        """
        If specified, the pod's imagePullSecrets
        """
        return pulumi.get(self, "image_pull_secrets")

    @property
    @pulumi.getter(name="nodeSelector")
    def node_selector(self) -> Optional[Mapping[str, str]]:
        """
        NodeSelector is a selector which must be true for the pod to fit on a node.
        Selector which must match a node's labels for the pod to be scheduled on that node.
        More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
        """
        return pulumi.get(self, "node_selector")

    @property
    @pulumi.getter(name="priorityClassName")
    def priority_class_name(self) -> Optional[str]:
        """
        If specified, the pod's priorityClassName.
        """
        return pulumi.get(self, "priority_class_name")

    @property
    @pulumi.getter(name="securityContext")
    def security_context(
        self,
    ) -> Optional[
        "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecSecurityContext"
    ]:
        return pulumi.get(self, "security_context")

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[str]:
        """
        If specified, the pod's service account
        """
        return pulumi.get(self, "service_account_name")

    @property
    @pulumi.getter
    def tolerations(
        self,
    ) -> Optional[
        Sequence["outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecTolerations"]
    ]:
        """
        If specified, the pod's tolerations.
        """
        return pulumi.get(self, "tolerations")


@pulumi.output_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinity(dict):
    """
    If specified, the pod's scheduling constraints
    """

    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "nodeAffinity":
            suggest = "node_affinity"
        elif key == "podAffinity":
            suggest = "pod_affinity"
        elif key == "podAntiAffinity":
            suggest = "pod_anti_affinity"

        if suggest:
            pulumi.log.warn(
                f"Key '{key}' not found in ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinity. Access the value via the '{suggest}' property getter instead."
            )

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinity.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default=None) -> Any:
        ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinity.__key_warning(key)
        return super().get(key, default)

    def __init__(
        __self__,
        *,
        node_affinity: Optional[
            "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinity"
        ] = None,
        pod_affinity: Optional[
            "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinity"
        ] = None,
        pod_anti_affinity: Optional[
            "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinity"
        ] = None,
    ):
        """
        If specified, the pod's scheduling constraints
        """
        if node_affinity is not None:
            pulumi.set(__self__, "node_affinity", node_affinity)
        if pod_affinity is not None:
            pulumi.set(__self__, "pod_affinity", pod_affinity)
        if pod_anti_affinity is not None:
            pulumi.set(__self__, "pod_anti_affinity", pod_anti_affinity)

    @property
    @pulumi.getter(name="nodeAffinity")
    def node_affinity(
        self,
    ) -> Optional[
        "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinity"
    ]:
        return pulumi.get(self, "node_affinity")

    @property
    @pulumi.getter(name="podAffinity")
    def pod_affinity(
        self,
    ) -> Optional[
        "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinity"
    ]:
        return pulumi.get(self, "pod_affinity")

    @property
    @pulumi.getter(name="podAntiAffinity")
    def pod_anti_affinity(
        self,
    ) -> Optional[
        "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinity"
    ]:
        return pulumi.get(self, "pod_anti_affinity")


@pulumi.output_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinity(dict):
    """
    Describes node affinity scheduling rules for the pod.
    """

    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "preferredDuringSchedulingIgnoredDuringExecution":
            suggest = "preferred_during_scheduling_ignored_during_execution"
        elif key == "requiredDuringSchedulingIgnoredDuringExecution":
            suggest = "required_during_scheduling_ignored_during_execution"

        if suggest:
            pulumi.log.warn(
                f"Key '{key}' not found in ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinity. Access the value via the '{suggest}' property getter instead."
            )

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinity.__key_warning(
            key
        )
        return super().__getitem__(key)

    def get(self, key: str, default=None) -> Any:
        ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinity.__key_warning(
            key
        )
        return super().get(key, default)

    def __init__(
        __self__,
        *,
        preferred_during_scheduling_ignored_during_execution: Optional[
            Sequence[
                "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution"
            ]
        ] = None,
        required_during_scheduling_ignored_during_execution: Optional[
            "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution"
        ] = None,
    ):
        """
        Describes node affinity scheduling rules for the pod.
        :param Sequence['ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs'] preferred_during_scheduling_ignored_during_execution: The scheduler will prefer to schedule pods to nodes that satisfy
               the affinity expressions specified by this field, but it may choose
               a node that violates one or more of the expressions. The node that is
               most preferred is the one with the greatest sum of weights, i.e.
               for each node that meets all of the scheduling requirements (resource
               request, requiredDuringScheduling affinity expressions, etc.),
               compute a sum by iterating through the elements of this field and adding
               "weight" to the sum if the node matches the corresponding matchExpressions; the
               node(s) with the highest sum are the most preferred.
        """
        if preferred_during_scheduling_ignored_during_execution is not None:
            pulumi.set(
                __self__,
                "preferred_during_scheduling_ignored_during_execution",
                preferred_during_scheduling_ignored_during_execution,
            )
        if required_during_scheduling_ignored_during_execution is not None:
            pulumi.set(
                __self__,
                "required_during_scheduling_ignored_during_execution",
                required_during_scheduling_ignored_during_execution,
            )

    @property
    @pulumi.getter(name="preferredDuringSchedulingIgnoredDuringExecution")
    def preferred_during_scheduling_ignored_during_execution(
        self,
    ) -> Optional[
        Sequence[
            "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution"
        ]
    ]:
        """
        The scheduler will prefer to schedule pods to nodes that satisfy
        the affinity expressions specified by this field, but it may choose
        a node that violates one or more of the expressions. The node that is
        most preferred is the one with the greatest sum of weights, i.e.
        for each node that meets all of the scheduling requirements (resource
        request, requiredDuringScheduling affinity expressions, etc.),
        compute a sum by iterating through the elements of this field and adding
        "weight" to the sum if the node matches the corresponding matchExpressions; the
        node(s) with the highest sum are the most preferred.
        """
        return pulumi.get(self, "preferred_during_scheduling_ignored_during_execution")

    @property
    @pulumi.getter(name="requiredDuringSchedulingIgnoredDuringExecution")
    def required_during_scheduling_ignored_during_execution(
        self,
    ) -> Optional[
        "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution"
    ]:
        return pulumi.get(self, "required_during_scheduling_ignored_during_execution")


@pulumi.output_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPatch(dict):
    """
    Describes node affinity scheduling rules for the pod.
    """

    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "preferredDuringSchedulingIgnoredDuringExecution":
            suggest = "preferred_during_scheduling_ignored_during_execution"
        elif key == "requiredDuringSchedulingIgnoredDuringExecution":
            suggest = "required_during_scheduling_ignored_during_execution"

        if suggest:
            pulumi.log.warn(
                f"Key '{key}' not found in ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPatch. Access the value via the '{suggest}' property getter instead."
            )

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPatch.__key_warning(
            key
        )
        return super().__getitem__(key)

    def get(self, key: str, default=None) -> Any:
        ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPatch.__key_warning(
            key
        )
        return super().get(key, default)

    def __init__(
        __self__,
        *,
        preferred_during_scheduling_ignored_during_execution: Optional[
            Sequence[
                "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch"
            ]
        ] = None,
        required_during_scheduling_ignored_during_execution: Optional[
            "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch"
        ] = None,
    ):
        """
        Describes node affinity scheduling rules for the pod.
        :param Sequence['ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgs'] preferred_during_scheduling_ignored_during_execution: The scheduler will prefer to schedule pods to nodes that satisfy
               the affinity expressions specified by this field, but it may choose
               a node that violates one or more of the expressions. The node that is
               most preferred is the one with the greatest sum of weights, i.e.
               for each node that meets all of the scheduling requirements (resource
               request, requiredDuringScheduling affinity expressions, etc.),
               compute a sum by iterating through the elements of this field and adding
               "weight" to the sum if the node matches the corresponding matchExpressions; the
               node(s) with the highest sum are the most preferred.
        """
        if preferred_during_scheduling_ignored_during_execution is not None:
            pulumi.set(
                __self__,
                "preferred_during_scheduling_ignored_during_execution",
                preferred_during_scheduling_ignored_during_execution,
            )
        if required_during_scheduling_ignored_during_execution is not None:
            pulumi.set(
                __self__,
                "required_during_scheduling_ignored_during_execution",
                required_during_scheduling_ignored_during_execution,
            )

    @property
    @pulumi.getter(name="preferredDuringSchedulingIgnoredDuringExecution")
    def preferred_during_scheduling_ignored_during_execution(
        self,
    ) -> Optional[
        Sequence[
            "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch"
        ]
    ]:
        """
        The scheduler will prefer to schedule pods to nodes that satisfy
        the affinity expressions specified by this field, but it may choose
        a node that violates one or more of the expressions. The node that is
        most preferred is the one with the greatest sum of weights, i.e.
        for each node that meets all of the scheduling requirements (resource
        request, requiredDuringScheduling affinity expressions, etc.),
        compute a sum by iterating through the elements of this field and adding
        "weight" to the sum if the node matches the corresponding matchExpressions; the
        node(s) with the highest sum are the most preferred.
        """
        return pulumi.get(self, "preferred_during_scheduling_ignored_during_execution")

    @property
    @pulumi.getter(name="requiredDuringSchedulingIgnoredDuringExecution")
    def required_during_scheduling_ignored_during_execution(
        self,
    ) -> Optional[
        "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch"
    ]:
        return pulumi.get(self, "required_during_scheduling_ignored_during_execution")


@pulumi.output_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution(
    dict
):
    """
    An empty preferred scheduling term matches all objects with implicit weight 0
    (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
    """

    def __init__(
        __self__,
        *,
        preference: Optional[
            "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference"
        ] = None,
        weight: Optional[int] = None,
    ):
        """
        An empty preferred scheduling term matches all objects with implicit weight 0
        (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
        :param int weight: Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
        """
        if preference is not None:
            pulumi.set(__self__, "preference", preference)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def preference(
        self,
    ) -> Optional[
        "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference"
    ]:
        return pulumi.get(self, "preference")

    @property
    @pulumi.getter
    def weight(self) -> Optional[int]:
        """
        Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
        """
        return pulumi.get(self, "weight")


@pulumi.output_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch(
    dict
):
    """
    An empty preferred scheduling term matches all objects with implicit weight 0
    (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
    """

    def __init__(
        __self__,
        *,
        preference: Optional[
            "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatch"
        ] = None,
        weight: Optional[int] = None,
    ):
        """
        An empty preferred scheduling term matches all objects with implicit weight 0
        (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
        :param int weight: Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
        """
        if preference is not None:
            pulumi.set(__self__, "preference", preference)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def preference(
        self,
    ) -> Optional[
        "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatch"
    ]:
        return pulumi.get(self, "preference")

    @property
    @pulumi.getter
    def weight(self) -> Optional[int]:
        """
        Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
        """
        return pulumi.get(self, "weight")


@pulumi.output_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference(
    dict
):
    """
    A node selector term, associated with the corresponding weight.
    """

    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "matchExpressions":
            suggest = "match_expressions"
        elif key == "matchFields":
            suggest = "match_fields"

        if suggest:
            pulumi.log.warn(
                f"Key '{key}' not found in ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference. Access the value via the '{suggest}' property getter instead."
            )

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference.__key_warning(
            key
        )
        return super().__getitem__(key)

    def get(self, key: str, default=None) -> Any:
        ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference.__key_warning(
            key
        )
        return super().get(key, default)

    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            Sequence[
                "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions"
            ]
        ] = None,
        match_fields: Optional[
            Sequence[
                "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields"
            ]
        ] = None,
    ):
        """
        A node selector term, associated with the corresponding weight.
        :param Sequence['ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgs'] match_expressions: A list of node selector requirements by node's labels.
        :param Sequence['ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgs'] match_fields: A list of node selector requirements by node's fields.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_fields is not None:
            pulumi.set(__self__, "match_fields", match_fields)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        Sequence[
            "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions"
        ]
    ]:
        """
        A list of node selector requirements by node's labels.
        """
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchFields")
    def match_fields(
        self,
    ) -> Optional[
        Sequence[
            "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields"
        ]
    ]:
        """
        A list of node selector requirements by node's fields.
        """
        return pulumi.get(self, "match_fields")


@pulumi.output_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions(
    dict
):
    """
    A node selector requirement is a selector that contains values, a key, and an operator
    that relates the key and values.
    """

    def __init__(
        __self__,
        *,
        key: Optional[str] = None,
        operator: Optional[str] = None,
        values: Optional[Sequence[str]] = None,
    ):
        """
        A node selector requirement is a selector that contains values, a key, and an operator
        that relates the key and values.
        :param str key: The label key that the selector applies to.
        :param str operator: Represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        :param Sequence[str] values: An array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. If the operator is Gt or Lt, the values
               array must have a single element, which will be interpreted as an integer.
               This array is replaced during a strategic merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> Optional[str]:
        """
        Represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        """
        An array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. If the operator is Gt or Lt, the values
        array must have a single element, which will be interpreted as an integer.
        This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatch(
    dict
):
    """
    A node selector requirement is a selector that contains values, a key, and an operator
    that relates the key and values.
    """

    def __init__(
        __self__,
        *,
        key: Optional[str] = None,
        operator: Optional[str] = None,
        values: Optional[Sequence[str]] = None,
    ):
        """
        A node selector requirement is a selector that contains values, a key, and an operator
        that relates the key and values.
        :param str key: The label key that the selector applies to.
        :param str operator: Represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        :param Sequence[str] values: An array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. If the operator is Gt or Lt, the values
               array must have a single element, which will be interpreted as an integer.
               This array is replaced during a strategic merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> Optional[str]:
        """
        Represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        """
        An array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. If the operator is Gt or Lt, the values
        array must have a single element, which will be interpreted as an integer.
        This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields(
    dict
):
    """
    A node selector requirement is a selector that contains values, a key, and an operator
    that relates the key and values.
    """

    def __init__(
        __self__,
        *,
        key: Optional[str] = None,
        operator: Optional[str] = None,
        values: Optional[Sequence[str]] = None,
    ):
        """
        A node selector requirement is a selector that contains values, a key, and an operator
        that relates the key and values.
        :param str key: The label key that the selector applies to.
        :param str operator: Represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        :param Sequence[str] values: An array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. If the operator is Gt or Lt, the values
               array must have a single element, which will be interpreted as an integer.
               This array is replaced during a strategic merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> Optional[str]:
        """
        Represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        """
        An array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. If the operator is Gt or Lt, the values
        array must have a single element, which will be interpreted as an integer.
        This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatch(
    dict
):
    """
    A node selector requirement is a selector that contains values, a key, and an operator
    that relates the key and values.
    """

    def __init__(
        __self__,
        *,
        key: Optional[str] = None,
        operator: Optional[str] = None,
        values: Optional[Sequence[str]] = None,
    ):
        """
        A node selector requirement is a selector that contains values, a key, and an operator
        that relates the key and values.
        :param str key: The label key that the selector applies to.
        :param str operator: Represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        :param Sequence[str] values: An array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. If the operator is Gt or Lt, the values
               array must have a single element, which will be interpreted as an integer.
               This array is replaced during a strategic merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> Optional[str]:
        """
        Represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        """
        An array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. If the operator is Gt or Lt, the values
        array must have a single element, which will be interpreted as an integer.
        This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatch(
    dict
):
    """
    A node selector term, associated with the corresponding weight.
    """

    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "matchExpressions":
            suggest = "match_expressions"
        elif key == "matchFields":
            suggest = "match_fields"

        if suggest:
            pulumi.log.warn(
                f"Key '{key}' not found in ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatch. Access the value via the '{suggest}' property getter instead."
            )

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatch.__key_warning(
            key
        )
        return super().__getitem__(key)

    def get(self, key: str, default=None) -> Any:
        ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatch.__key_warning(
            key
        )
        return super().get(key, default)

    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            Sequence[
                "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatch"
            ]
        ] = None,
        match_fields: Optional[
            Sequence[
                "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatch"
            ]
        ] = None,
    ):
        """
        A node selector term, associated with the corresponding weight.
        :param Sequence['ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatchArgs'] match_expressions: A list of node selector requirements by node's labels.
        :param Sequence['ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatchArgs'] match_fields: A list of node selector requirements by node's fields.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_fields is not None:
            pulumi.set(__self__, "match_fields", match_fields)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        Sequence[
            "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatch"
        ]
    ]:
        """
        A list of node selector requirements by node's labels.
        """
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchFields")
    def match_fields(
        self,
    ) -> Optional[
        Sequence[
            "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatch"
        ]
    ]:
        """
        A list of node selector requirements by node's fields.
        """
        return pulumi.get(self, "match_fields")


@pulumi.output_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution(
    dict
):
    """
    If the affinity requirements specified by this field are not met at
    scheduling time, the pod will not be scheduled onto the node.
    If the affinity requirements specified by this field cease to be met
    at some point during pod execution (e.g. due to an update), the system
    may or may not try to eventually evict the pod from its node.
    """

    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "nodeSelectorTerms":
            suggest = "node_selector_terms"

        if suggest:
            pulumi.log.warn(
                f"Key '{key}' not found in ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution. Access the value via the '{suggest}' property getter instead."
            )

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution.__key_warning(
            key
        )
        return super().__getitem__(key)

    def get(self, key: str, default=None) -> Any:
        ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution.__key_warning(
            key
        )
        return super().get(key, default)

    def __init__(
        __self__,
        *,
        node_selector_terms: Optional[
            Sequence[
                "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms"
            ]
        ] = None,
    ):
        """
        If the affinity requirements specified by this field are not met at
        scheduling time, the pod will not be scheduled onto the node.
        If the affinity requirements specified by this field cease to be met
        at some point during pod execution (e.g. due to an update), the system
        may or may not try to eventually evict the pod from its node.
        :param Sequence['ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgs'] node_selector_terms: Required. A list of node selector terms. The terms are ORed.
        """
        if node_selector_terms is not None:
            pulumi.set(__self__, "node_selector_terms", node_selector_terms)

    @property
    @pulumi.getter(name="nodeSelectorTerms")
    def node_selector_terms(
        self,
    ) -> Optional[
        Sequence[
            "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms"
        ]
    ]:
        """
        Required. A list of node selector terms. The terms are ORed.
        """
        return pulumi.get(self, "node_selector_terms")


@pulumi.output_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms(
    dict
):
    """
    A null or empty node selector term matches no objects. The requirements of
    them are ANDed.
    The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
    """

    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "matchExpressions":
            suggest = "match_expressions"
        elif key == "matchFields":
            suggest = "match_fields"

        if suggest:
            pulumi.log.warn(
                f"Key '{key}' not found in ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms. Access the value via the '{suggest}' property getter instead."
            )

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms.__key_warning(
            key
        )
        return super().__getitem__(key)

    def get(self, key: str, default=None) -> Any:
        ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms.__key_warning(
            key
        )
        return super().get(key, default)

    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            Sequence[
                "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions"
            ]
        ] = None,
        match_fields: Optional[
            Sequence[
                "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields"
            ]
        ] = None,
    ):
        """
        A null or empty node selector term matches no objects. The requirements of
        them are ANDed.
        The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
        :param Sequence['ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgs'] match_expressions: A list of node selector requirements by node's labels.
        :param Sequence['ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgs'] match_fields: A list of node selector requirements by node's fields.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_fields is not None:
            pulumi.set(__self__, "match_fields", match_fields)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        Sequence[
            "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions"
        ]
    ]:
        """
        A list of node selector requirements by node's labels.
        """
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchFields")
    def match_fields(
        self,
    ) -> Optional[
        Sequence[
            "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields"
        ]
    ]:
        """
        A list of node selector requirements by node's fields.
        """
        return pulumi.get(self, "match_fields")


@pulumi.output_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions(
    dict
):
    """
    A node selector requirement is a selector that contains values, a key, and an operator
    that relates the key and values.
    """

    def __init__(
        __self__,
        *,
        key: Optional[str] = None,
        operator: Optional[str] = None,
        values: Optional[Sequence[str]] = None,
    ):
        """
        A node selector requirement is a selector that contains values, a key, and an operator
        that relates the key and values.
        :param str key: The label key that the selector applies to.
        :param str operator: Represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        :param Sequence[str] values: An array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. If the operator is Gt or Lt, the values
               array must have a single element, which will be interpreted as an integer.
               This array is replaced during a strategic merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> Optional[str]:
        """
        Represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        """
        An array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. If the operator is Gt or Lt, the values
        array must have a single element, which will be interpreted as an integer.
        This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatch(
    dict
):
    """
    A node selector requirement is a selector that contains values, a key, and an operator
    that relates the key and values.
    """

    def __init__(
        __self__,
        *,
        key: Optional[str] = None,
        operator: Optional[str] = None,
        values: Optional[Sequence[str]] = None,
    ):
        """
        A node selector requirement is a selector that contains values, a key, and an operator
        that relates the key and values.
        :param str key: The label key that the selector applies to.
        :param str operator: Represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        :param Sequence[str] values: An array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. If the operator is Gt or Lt, the values
               array must have a single element, which will be interpreted as an integer.
               This array is replaced during a strategic merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> Optional[str]:
        """
        Represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        """
        An array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. If the operator is Gt or Lt, the values
        array must have a single element, which will be interpreted as an integer.
        This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields(
    dict
):
    """
    A node selector requirement is a selector that contains values, a key, and an operator
    that relates the key and values.
    """

    def __init__(
        __self__,
        *,
        key: Optional[str] = None,
        operator: Optional[str] = None,
        values: Optional[Sequence[str]] = None,
    ):
        """
        A node selector requirement is a selector that contains values, a key, and an operator
        that relates the key and values.
        :param str key: The label key that the selector applies to.
        :param str operator: Represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        :param Sequence[str] values: An array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. If the operator is Gt or Lt, the values
               array must have a single element, which will be interpreted as an integer.
               This array is replaced during a strategic merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> Optional[str]:
        """
        Represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        """
        An array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. If the operator is Gt or Lt, the values
        array must have a single element, which will be interpreted as an integer.
        This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatch(
    dict
):
    """
    A node selector requirement is a selector that contains values, a key, and an operator
    that relates the key and values.
    """

    def __init__(
        __self__,
        *,
        key: Optional[str] = None,
        operator: Optional[str] = None,
        values: Optional[Sequence[str]] = None,
    ):
        """
        A node selector requirement is a selector that contains values, a key, and an operator
        that relates the key and values.
        :param str key: The label key that the selector applies to.
        :param str operator: Represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        :param Sequence[str] values: An array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. If the operator is Gt or Lt, the values
               array must have a single element, which will be interpreted as an integer.
               This array is replaced during a strategic merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> Optional[str]:
        """
        Represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        """
        An array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. If the operator is Gt or Lt, the values
        array must have a single element, which will be interpreted as an integer.
        This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatch(
    dict
):
    """
    A null or empty node selector term matches no objects. The requirements of
    them are ANDed.
    The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
    """

    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "matchExpressions":
            suggest = "match_expressions"
        elif key == "matchFields":
            suggest = "match_fields"

        if suggest:
            pulumi.log.warn(
                f"Key '{key}' not found in ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatch. Access the value via the '{suggest}' property getter instead."
            )

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatch.__key_warning(
            key
        )
        return super().__getitem__(key)

    def get(self, key: str, default=None) -> Any:
        ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatch.__key_warning(
            key
        )
        return super().get(key, default)

    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            Sequence[
                "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatch"
            ]
        ] = None,
        match_fields: Optional[
            Sequence[
                "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatch"
            ]
        ] = None,
    ):
        """
        A null or empty node selector term matches no objects. The requirements of
        them are ANDed.
        The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
        :param Sequence['ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatchArgs'] match_expressions: A list of node selector requirements by node's labels.
        :param Sequence['ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatchArgs'] match_fields: A list of node selector requirements by node's fields.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_fields is not None:
            pulumi.set(__self__, "match_fields", match_fields)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        Sequence[
            "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatch"
        ]
    ]:
        """
        A list of node selector requirements by node's labels.
        """
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchFields")
    def match_fields(
        self,
    ) -> Optional[
        Sequence[
            "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatch"
        ]
    ]:
        """
        A list of node selector requirements by node's fields.
        """
        return pulumi.get(self, "match_fields")


@pulumi.output_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch(
    dict
):
    """
    If the affinity requirements specified by this field are not met at
    scheduling time, the pod will not be scheduled onto the node.
    If the affinity requirements specified by this field cease to be met
    at some point during pod execution (e.g. due to an update), the system
    may or may not try to eventually evict the pod from its node.
    """

    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "nodeSelectorTerms":
            suggest = "node_selector_terms"

        if suggest:
            pulumi.log.warn(
                f"Key '{key}' not found in ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch. Access the value via the '{suggest}' property getter instead."
            )

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch.__key_warning(
            key
        )
        return super().__getitem__(key)

    def get(self, key: str, default=None) -> Any:
        ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch.__key_warning(
            key
        )
        return super().get(key, default)

    def __init__(
        __self__,
        *,
        node_selector_terms: Optional[
            Sequence[
                "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatch"
            ]
        ] = None,
    ):
        """
        If the affinity requirements specified by this field are not met at
        scheduling time, the pod will not be scheduled onto the node.
        If the affinity requirements specified by this field cease to be met
        at some point during pod execution (e.g. due to an update), the system
        may or may not try to eventually evict the pod from its node.
        :param Sequence['ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatchArgs'] node_selector_terms: Required. A list of node selector terms. The terms are ORed.
        """
        if node_selector_terms is not None:
            pulumi.set(__self__, "node_selector_terms", node_selector_terms)

    @property
    @pulumi.getter(name="nodeSelectorTerms")
    def node_selector_terms(
        self,
    ) -> Optional[
        Sequence[
            "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatch"
        ]
    ]:
        """
        Required. A list of node selector terms. The terms are ORed.
        """
        return pulumi.get(self, "node_selector_terms")


@pulumi.output_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPatch(dict):
    """
    If specified, the pod's scheduling constraints
    """

    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "nodeAffinity":
            suggest = "node_affinity"
        elif key == "podAffinity":
            suggest = "pod_affinity"
        elif key == "podAntiAffinity":
            suggest = "pod_anti_affinity"

        if suggest:
            pulumi.log.warn(
                f"Key '{key}' not found in ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPatch. Access the value via the '{suggest}' property getter instead."
            )

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPatch.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default=None) -> Any:
        ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPatch.__key_warning(key)
        return super().get(key, default)

    def __init__(
        __self__,
        *,
        node_affinity: Optional[
            "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPatch"
        ] = None,
        pod_affinity: Optional[
            "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPatch"
        ] = None,
        pod_anti_affinity: Optional[
            "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPatch"
        ] = None,
    ):
        """
        If specified, the pod's scheduling constraints
        """
        if node_affinity is not None:
            pulumi.set(__self__, "node_affinity", node_affinity)
        if pod_affinity is not None:
            pulumi.set(__self__, "pod_affinity", pod_affinity)
        if pod_anti_affinity is not None:
            pulumi.set(__self__, "pod_anti_affinity", pod_anti_affinity)

    @property
    @pulumi.getter(name="nodeAffinity")
    def node_affinity(
        self,
    ) -> Optional[
        "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPatch"
    ]:
        return pulumi.get(self, "node_affinity")

    @property
    @pulumi.getter(name="podAffinity")
    def pod_affinity(
        self,
    ) -> Optional[
        "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPatch"
    ]:
        return pulumi.get(self, "pod_affinity")

    @property
    @pulumi.getter(name="podAntiAffinity")
    def pod_anti_affinity(
        self,
    ) -> Optional[
        "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPatch"
    ]:
        return pulumi.get(self, "pod_anti_affinity")


@pulumi.output_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinity(dict):
    """
    Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
    """

    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "preferredDuringSchedulingIgnoredDuringExecution":
            suggest = "preferred_during_scheduling_ignored_during_execution"
        elif key == "requiredDuringSchedulingIgnoredDuringExecution":
            suggest = "required_during_scheduling_ignored_during_execution"

        if suggest:
            pulumi.log.warn(
                f"Key '{key}' not found in ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinity. Access the value via the '{suggest}' property getter instead."
            )

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinity.__key_warning(
            key
        )
        return super().__getitem__(key)

    def get(self, key: str, default=None) -> Any:
        ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinity.__key_warning(
            key
        )
        return super().get(key, default)

    def __init__(
        __self__,
        *,
        preferred_during_scheduling_ignored_during_execution: Optional[
            Sequence[
                "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution"
            ]
        ] = None,
        required_during_scheduling_ignored_during_execution: Optional[
            Sequence[
                "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution"
            ]
        ] = None,
    ):
        """
        Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
        :param Sequence['ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs'] preferred_during_scheduling_ignored_during_execution: The scheduler will prefer to schedule pods to nodes that satisfy
               the affinity expressions specified by this field, but it may choose
               a node that violates one or more of the expressions. The node that is
               most preferred is the one with the greatest sum of weights, i.e.
               for each node that meets all of the scheduling requirements (resource
               request, requiredDuringScheduling affinity expressions, etc.),
               compute a sum by iterating through the elements of this field and adding
               "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
               node(s) with the highest sum are the most preferred.
        :param Sequence['ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs'] required_during_scheduling_ignored_during_execution: If the affinity requirements specified by this field are not met at
               scheduling time, the pod will not be scheduled onto the node.
               If the affinity requirements specified by this field cease to be met
               at some point during pod execution (e.g. due to a pod label update), the
               system may or may not try to eventually evict the pod from its node.
               When there are multiple elements, the lists of nodes corresponding to each
               podAffinityTerm are intersected, i.e. all terms must be satisfied.
        """
        if preferred_during_scheduling_ignored_during_execution is not None:
            pulumi.set(
                __self__,
                "preferred_during_scheduling_ignored_during_execution",
                preferred_during_scheduling_ignored_during_execution,
            )
        if required_during_scheduling_ignored_during_execution is not None:
            pulumi.set(
                __self__,
                "required_during_scheduling_ignored_during_execution",
                required_during_scheduling_ignored_during_execution,
            )

    @property
    @pulumi.getter(name="preferredDuringSchedulingIgnoredDuringExecution")
    def preferred_during_scheduling_ignored_during_execution(
        self,
    ) -> Optional[
        Sequence[
            "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution"
        ]
    ]:
        """
        The scheduler will prefer to schedule pods to nodes that satisfy
        the affinity expressions specified by this field, but it may choose
        a node that violates one or more of the expressions. The node that is
        most preferred is the one with the greatest sum of weights, i.e.
        for each node that meets all of the scheduling requirements (resource
        request, requiredDuringScheduling affinity expressions, etc.),
        compute a sum by iterating through the elements of this field and adding
        "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
        node(s) with the highest sum are the most preferred.
        """
        return pulumi.get(self, "preferred_during_scheduling_ignored_during_execution")

    @property
    @pulumi.getter(name="requiredDuringSchedulingIgnoredDuringExecution")
    def required_during_scheduling_ignored_during_execution(
        self,
    ) -> Optional[
        Sequence[
            "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution"
        ]
    ]:
        """
        If the affinity requirements specified by this field are not met at
        scheduling time, the pod will not be scheduled onto the node.
        If the affinity requirements specified by this field cease to be met
        at some point during pod execution (e.g. due to a pod label update), the
        system may or may not try to eventually evict the pod from its node.
        When there are multiple elements, the lists of nodes corresponding to each
        podAffinityTerm are intersected, i.e. all terms must be satisfied.
        """
        return pulumi.get(self, "required_during_scheduling_ignored_during_execution")


@pulumi.output_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPatch(dict):
    """
    Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
    """

    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "preferredDuringSchedulingIgnoredDuringExecution":
            suggest = "preferred_during_scheduling_ignored_during_execution"
        elif key == "requiredDuringSchedulingIgnoredDuringExecution":
            suggest = "required_during_scheduling_ignored_during_execution"

        if suggest:
            pulumi.log.warn(
                f"Key '{key}' not found in ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPatch. Access the value via the '{suggest}' property getter instead."
            )

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPatch.__key_warning(
            key
        )
        return super().__getitem__(key)

    def get(self, key: str, default=None) -> Any:
        ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPatch.__key_warning(
            key
        )
        return super().get(key, default)

    def __init__(
        __self__,
        *,
        preferred_during_scheduling_ignored_during_execution: Optional[
            Sequence[
                "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch"
            ]
        ] = None,
        required_during_scheduling_ignored_during_execution: Optional[
            Sequence[
                "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch"
            ]
        ] = None,
    ):
        """
        Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
        :param Sequence['ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgs'] preferred_during_scheduling_ignored_during_execution: The scheduler will prefer to schedule pods to nodes that satisfy
               the affinity expressions specified by this field, but it may choose
               a node that violates one or more of the expressions. The node that is
               most preferred is the one with the greatest sum of weights, i.e.
               for each node that meets all of the scheduling requirements (resource
               request, requiredDuringScheduling affinity expressions, etc.),
               compute a sum by iterating through the elements of this field and adding
               "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
               node(s) with the highest sum are the most preferred.
        :param Sequence['ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgs'] required_during_scheduling_ignored_during_execution: If the affinity requirements specified by this field are not met at
               scheduling time, the pod will not be scheduled onto the node.
               If the affinity requirements specified by this field cease to be met
               at some point during pod execution (e.g. due to a pod label update), the
               system may or may not try to eventually evict the pod from its node.
               When there are multiple elements, the lists of nodes corresponding to each
               podAffinityTerm are intersected, i.e. all terms must be satisfied.
        """
        if preferred_during_scheduling_ignored_during_execution is not None:
            pulumi.set(
                __self__,
                "preferred_during_scheduling_ignored_during_execution",
                preferred_during_scheduling_ignored_during_execution,
            )
        if required_during_scheduling_ignored_during_execution is not None:
            pulumi.set(
                __self__,
                "required_during_scheduling_ignored_during_execution",
                required_during_scheduling_ignored_during_execution,
            )

    @property
    @pulumi.getter(name="preferredDuringSchedulingIgnoredDuringExecution")
    def preferred_during_scheduling_ignored_during_execution(
        self,
    ) -> Optional[
        Sequence[
            "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch"
        ]
    ]:
        """
        The scheduler will prefer to schedule pods to nodes that satisfy
        the affinity expressions specified by this field, but it may choose
        a node that violates one or more of the expressions. The node that is
        most preferred is the one with the greatest sum of weights, i.e.
        for each node that meets all of the scheduling requirements (resource
        request, requiredDuringScheduling affinity expressions, etc.),
        compute a sum by iterating through the elements of this field and adding
        "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
        node(s) with the highest sum are the most preferred.
        """
        return pulumi.get(self, "preferred_during_scheduling_ignored_during_execution")

    @property
    @pulumi.getter(name="requiredDuringSchedulingIgnoredDuringExecution")
    def required_during_scheduling_ignored_during_execution(
        self,
    ) -> Optional[
        Sequence[
            "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch"
        ]
    ]:
        """
        If the affinity requirements specified by this field are not met at
        scheduling time, the pod will not be scheduled onto the node.
        If the affinity requirements specified by this field cease to be met
        at some point during pod execution (e.g. due to a pod label update), the
        system may or may not try to eventually evict the pod from its node.
        When there are multiple elements, the lists of nodes corresponding to each
        podAffinityTerm are intersected, i.e. all terms must be satisfied.
        """
        return pulumi.get(self, "required_during_scheduling_ignored_during_execution")


@pulumi.output_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution(
    dict
):
    """
    The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
    """

    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "podAffinityTerm":
            suggest = "pod_affinity_term"

        if suggest:
            pulumi.log.warn(
                f"Key '{key}' not found in ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution. Access the value via the '{suggest}' property getter instead."
            )

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution.__key_warning(
            key
        )
        return super().__getitem__(key)

    def get(self, key: str, default=None) -> Any:
        ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution.__key_warning(
            key
        )
        return super().get(key, default)

    def __init__(
        __self__,
        *,
        pod_affinity_term: Optional[
            "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm"
        ] = None,
        weight: Optional[int] = None,
    ):
        """
        The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
        :param int weight: weight associated with matching the corresponding podAffinityTerm,
               in the range 1-100.
        """
        if pod_affinity_term is not None:
            pulumi.set(__self__, "pod_affinity_term", pod_affinity_term)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter(name="podAffinityTerm")
    def pod_affinity_term(
        self,
    ) -> Optional[
        "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm"
    ]:
        return pulumi.get(self, "pod_affinity_term")

    @property
    @pulumi.getter
    def weight(self) -> Optional[int]:
        """
        weight associated with matching the corresponding podAffinityTerm,
        in the range 1-100.
        """
        return pulumi.get(self, "weight")


@pulumi.output_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch(
    dict
):
    """
    The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
    """

    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "podAffinityTerm":
            suggest = "pod_affinity_term"

        if suggest:
            pulumi.log.warn(
                f"Key '{key}' not found in ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch. Access the value via the '{suggest}' property getter instead."
            )

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch.__key_warning(
            key
        )
        return super().__getitem__(key)

    def get(self, key: str, default=None) -> Any:
        ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch.__key_warning(
            key
        )
        return super().get(key, default)

    def __init__(
        __self__,
        *,
        pod_affinity_term: Optional[
            "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch"
        ] = None,
        weight: Optional[int] = None,
    ):
        """
        The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
        :param int weight: weight associated with matching the corresponding podAffinityTerm,
               in the range 1-100.
        """
        if pod_affinity_term is not None:
            pulumi.set(__self__, "pod_affinity_term", pod_affinity_term)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter(name="podAffinityTerm")
    def pod_affinity_term(
        self,
    ) -> Optional[
        "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch"
    ]:
        return pulumi.get(self, "pod_affinity_term")

    @property
    @pulumi.getter
    def weight(self) -> Optional[int]:
        """
        weight associated with matching the corresponding podAffinityTerm,
        in the range 1-100.
        """
        return pulumi.get(self, "weight")


@pulumi.output_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm(
    dict
):
    """
    Required. A pod affinity term, associated with the corresponding weight.
    """

    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "labelSelector":
            suggest = "label_selector"
        elif key == "matchLabelKeys":
            suggest = "match_label_keys"
        elif key == "mismatchLabelKeys":
            suggest = "mismatch_label_keys"
        elif key == "namespaceSelector":
            suggest = "namespace_selector"
        elif key == "topologyKey":
            suggest = "topology_key"

        if suggest:
            pulumi.log.warn(
                f"Key '{key}' not found in ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm. Access the value via the '{suggest}' property getter instead."
            )

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm.__key_warning(
            key
        )
        return super().__getitem__(key)

    def get(self, key: str, default=None) -> Any:
        ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm.__key_warning(
            key
        )
        return super().get(key, default)

    def __init__(
        __self__,
        *,
        label_selector: Optional[
            "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector"
        ] = None,
        match_label_keys: Optional[Sequence[str]] = None,
        mismatch_label_keys: Optional[Sequence[str]] = None,
        namespace_selector: Optional[
            "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector"
        ] = None,
        namespaces: Optional[Sequence[str]] = None,
        topology_key: Optional[str] = None,
    ):
        """
        Required. A pod affinity term, associated with the corresponding weight.
        :param Sequence[str] match_label_keys: MatchLabelKeys is a set of pod label keys to select which pods will
               be taken into consideration. The keys are used to lookup values from the
               incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
               to select the group of existing pods which pods will be taken into consideration
               for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
               pod labels will be ignored. The default value is empty.
               The same key is forbidden to exist in both matchLabelKeys and labelSelector.
               Also, matchLabelKeys cannot be set when labelSelector isn't set.
               This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        :param Sequence[str] mismatch_label_keys: MismatchLabelKeys is a set of pod label keys to select which pods will
               be taken into consideration. The keys are used to lookup values from the
               incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
               to select the group of existing pods which pods will be taken into consideration
               for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
               pod labels will be ignored. The default value is empty.
               The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
               Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
               This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        :param Sequence[str] namespaces: namespaces specifies a static list of namespace names that the term applies to.
               The term is applied to the union of the namespaces listed in this field
               and the ones selected by namespaceSelector.
               null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        :param str topology_key: This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
               the labelSelector in the specified namespaces, where co-located is defined as running on a node
               whose value of the label with key topologyKey matches that of any node on which any of the
               selected pods is running.
               Empty topologyKey is not allowed.
        """
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if match_label_keys is not None:
            pulumi.set(__self__, "match_label_keys", match_label_keys)
        if mismatch_label_keys is not None:
            pulumi.set(__self__, "mismatch_label_keys", mismatch_label_keys)
        if namespace_selector is not None:
            pulumi.set(__self__, "namespace_selector", namespace_selector)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)
        if topology_key is not None:
            pulumi.set(__self__, "topology_key", topology_key)

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(
        self,
    ) -> Optional[
        "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector"
    ]:
        return pulumi.get(self, "label_selector")

    @property
    @pulumi.getter(name="matchLabelKeys")
    def match_label_keys(self) -> Optional[Sequence[str]]:
        """
        MatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both matchLabelKeys and labelSelector.
        Also, matchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        return pulumi.get(self, "match_label_keys")

    @property
    @pulumi.getter(name="mismatchLabelKeys")
    def mismatch_label_keys(self) -> Optional[Sequence[str]]:
        """
        MismatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
        Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        return pulumi.get(self, "mismatch_label_keys")

    @property
    @pulumi.getter(name="namespaceSelector")
    def namespace_selector(
        self,
    ) -> Optional[
        "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector"
    ]:
        return pulumi.get(self, "namespace_selector")

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[Sequence[str]]:
        """
        namespaces specifies a static list of namespace names that the term applies to.
        The term is applied to the union of the namespaces listed in this field
        and the ones selected by namespaceSelector.
        null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        """
        return pulumi.get(self, "namespaces")

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> Optional[str]:
        """
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
        the labelSelector in the specified namespaces, where co-located is defined as running on a node
        whose value of the label with key topologyKey matches that of any node on which any of the
        selected pods is running.
        Empty topologyKey is not allowed.
        """
        return pulumi.get(self, "topology_key")


@pulumi.output_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector(
    dict
):
    """
    A label query over a set of resources, in this case pods.
    If it's null, this PodAffinityTerm matches with no Pods.
    """

    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "matchExpressions":
            suggest = "match_expressions"
        elif key == "matchLabels":
            suggest = "match_labels"

        if suggest:
            pulumi.log.warn(
                f"Key '{key}' not found in ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector. Access the value via the '{suggest}' property getter instead."
            )

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector.__key_warning(
            key
        )
        return super().__getitem__(key)

    def get(self, key: str, default=None) -> Any:
        ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector.__key_warning(
            key
        )
        return super().get(key, default)

    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            Sequence[
                "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions"
            ]
        ] = None,
        match_labels: Optional[Mapping[str, str]] = None,
    ):
        """
        A label query over a set of resources, in this case pods.
        If it's null, this PodAffinityTerm matches with no Pods.
        :param Sequence['ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs'] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param Mapping[str, str] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
               map is equivalent to an element of matchExpressions, whose key field is "key", the
               operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        Sequence[
            "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions"
        ]
    ]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, str]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")


@pulumi.output_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions(
    dict
):
    """
    A label selector requirement is a selector that contains values, a key, and an operator that
    relates the key and values.
    """

    def __init__(
        __self__,
        *,
        key: Optional[str] = None,
        operator: Optional[str] = None,
        values: Optional[Sequence[str]] = None,
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        :param str key: key is the label key that the selector applies to.
        :param str operator: operator represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists and DoesNotExist.
        :param Sequence[str] values: values is an array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. This array is replaced during a strategic
               merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> Optional[str]:
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch(
    dict
):
    """
    A label selector requirement is a selector that contains values, a key, and an operator that
    relates the key and values.
    """

    def __init__(
        __self__,
        *,
        key: Optional[str] = None,
        operator: Optional[str] = None,
        values: Optional[Sequence[str]] = None,
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        :param str key: key is the label key that the selector applies to.
        :param str operator: operator represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists and DoesNotExist.
        :param Sequence[str] values: values is an array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. This array is replaced during a strategic
               merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> Optional[str]:
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch(
    dict
):
    """
    A label query over a set of resources, in this case pods.
    If it's null, this PodAffinityTerm matches with no Pods.
    """

    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "matchExpressions":
            suggest = "match_expressions"
        elif key == "matchLabels":
            suggest = "match_labels"

        if suggest:
            pulumi.log.warn(
                f"Key '{key}' not found in ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch. Access the value via the '{suggest}' property getter instead."
            )

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch.__key_warning(
            key
        )
        return super().__getitem__(key)

    def get(self, key: str, default=None) -> Any:
        ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch.__key_warning(
            key
        )
        return super().get(key, default)

    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            Sequence[
                "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch"
            ]
        ] = None,
        match_labels: Optional[Mapping[str, str]] = None,
    ):
        """
        A label query over a set of resources, in this case pods.
        If it's null, this PodAffinityTerm matches with no Pods.
        :param Sequence['ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArgs'] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param Mapping[str, str] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
               map is equivalent to an element of matchExpressions, whose key field is "key", the
               operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        Sequence[
            "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch"
        ]
    ]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, str]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")


@pulumi.output_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector(
    dict
):
    """
    A label query over the set of namespaces that the term applies to.
    The term is applied to the union of the namespaces selected by this field
    and the ones listed in the namespaces field.
    null selector and null or empty namespaces list means "this pod's namespace".
    An empty selector ({}) matches all namespaces.
    """

    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "matchExpressions":
            suggest = "match_expressions"
        elif key == "matchLabels":
            suggest = "match_labels"

        if suggest:
            pulumi.log.warn(
                f"Key '{key}' not found in ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector. Access the value via the '{suggest}' property getter instead."
            )

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector.__key_warning(
            key
        )
        return super().__getitem__(key)

    def get(self, key: str, default=None) -> Any:
        ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector.__key_warning(
            key
        )
        return super().get(key, default)

    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            Sequence[
                "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions"
            ]
        ] = None,
        match_labels: Optional[Mapping[str, str]] = None,
    ):
        """
        A label query over the set of namespaces that the term applies to.
        The term is applied to the union of the namespaces selected by this field
        and the ones listed in the namespaces field.
        null selector and null or empty namespaces list means "this pod's namespace".
        An empty selector ({}) matches all namespaces.
        :param Sequence['ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs'] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param Mapping[str, str] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
               map is equivalent to an element of matchExpressions, whose key field is "key", the
               operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        Sequence[
            "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions"
        ]
    ]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, str]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")


@pulumi.output_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions(
    dict
):
    """
    A label selector requirement is a selector that contains values, a key, and an operator that
    relates the key and values.
    """

    def __init__(
        __self__,
        *,
        key: Optional[str] = None,
        operator: Optional[str] = None,
        values: Optional[Sequence[str]] = None,
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        :param str key: key is the label key that the selector applies to.
        :param str operator: operator represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists and DoesNotExist.
        :param Sequence[str] values: values is an array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. This array is replaced during a strategic
               merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> Optional[str]:
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch(
    dict
):
    """
    A label selector requirement is a selector that contains values, a key, and an operator that
    relates the key and values.
    """

    def __init__(
        __self__,
        *,
        key: Optional[str] = None,
        operator: Optional[str] = None,
        values: Optional[Sequence[str]] = None,
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        :param str key: key is the label key that the selector applies to.
        :param str operator: operator represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists and DoesNotExist.
        :param Sequence[str] values: values is an array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. This array is replaced during a strategic
               merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> Optional[str]:
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch(
    dict
):
    """
    A label query over the set of namespaces that the term applies to.
    The term is applied to the union of the namespaces selected by this field
    and the ones listed in the namespaces field.
    null selector and null or empty namespaces list means "this pod's namespace".
    An empty selector ({}) matches all namespaces.
    """

    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "matchExpressions":
            suggest = "match_expressions"
        elif key == "matchLabels":
            suggest = "match_labels"

        if suggest:
            pulumi.log.warn(
                f"Key '{key}' not found in ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch. Access the value via the '{suggest}' property getter instead."
            )

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch.__key_warning(
            key
        )
        return super().__getitem__(key)

    def get(self, key: str, default=None) -> Any:
        ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch.__key_warning(
            key
        )
        return super().get(key, default)

    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            Sequence[
                "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch"
            ]
        ] = None,
        match_labels: Optional[Mapping[str, str]] = None,
    ):
        """
        A label query over the set of namespaces that the term applies to.
        The term is applied to the union of the namespaces selected by this field
        and the ones listed in the namespaces field.
        null selector and null or empty namespaces list means "this pod's namespace".
        An empty selector ({}) matches all namespaces.
        :param Sequence['ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArgs'] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param Mapping[str, str] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
               map is equivalent to an element of matchExpressions, whose key field is "key", the
               operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        Sequence[
            "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch"
        ]
    ]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, str]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")


@pulumi.output_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch(
    dict
):
    """
    Required. A pod affinity term, associated with the corresponding weight.
    """

    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "labelSelector":
            suggest = "label_selector"
        elif key == "matchLabelKeys":
            suggest = "match_label_keys"
        elif key == "mismatchLabelKeys":
            suggest = "mismatch_label_keys"
        elif key == "namespaceSelector":
            suggest = "namespace_selector"
        elif key == "topologyKey":
            suggest = "topology_key"

        if suggest:
            pulumi.log.warn(
                f"Key '{key}' not found in ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch. Access the value via the '{suggest}' property getter instead."
            )

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch.__key_warning(
            key
        )
        return super().__getitem__(key)

    def get(self, key: str, default=None) -> Any:
        ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch.__key_warning(
            key
        )
        return super().get(key, default)

    def __init__(
        __self__,
        *,
        label_selector: Optional[
            "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch"
        ] = None,
        match_label_keys: Optional[Sequence[str]] = None,
        mismatch_label_keys: Optional[Sequence[str]] = None,
        namespace_selector: Optional[
            "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch"
        ] = None,
        namespaces: Optional[Sequence[str]] = None,
        topology_key: Optional[str] = None,
    ):
        """
        Required. A pod affinity term, associated with the corresponding weight.
        :param Sequence[str] match_label_keys: MatchLabelKeys is a set of pod label keys to select which pods will
               be taken into consideration. The keys are used to lookup values from the
               incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
               to select the group of existing pods which pods will be taken into consideration
               for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
               pod labels will be ignored. The default value is empty.
               The same key is forbidden to exist in both matchLabelKeys and labelSelector.
               Also, matchLabelKeys cannot be set when labelSelector isn't set.
               This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        :param Sequence[str] mismatch_label_keys: MismatchLabelKeys is a set of pod label keys to select which pods will
               be taken into consideration. The keys are used to lookup values from the
               incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
               to select the group of existing pods which pods will be taken into consideration
               for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
               pod labels will be ignored. The default value is empty.
               The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
               Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
               This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        :param Sequence[str] namespaces: namespaces specifies a static list of namespace names that the term applies to.
               The term is applied to the union of the namespaces listed in this field
               and the ones selected by namespaceSelector.
               null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        :param str topology_key: This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
               the labelSelector in the specified namespaces, where co-located is defined as running on a node
               whose value of the label with key topologyKey matches that of any node on which any of the
               selected pods is running.
               Empty topologyKey is not allowed.
        """
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if match_label_keys is not None:
            pulumi.set(__self__, "match_label_keys", match_label_keys)
        if mismatch_label_keys is not None:
            pulumi.set(__self__, "mismatch_label_keys", mismatch_label_keys)
        if namespace_selector is not None:
            pulumi.set(__self__, "namespace_selector", namespace_selector)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)
        if topology_key is not None:
            pulumi.set(__self__, "topology_key", topology_key)

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(
        self,
    ) -> Optional[
        "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch"
    ]:
        return pulumi.get(self, "label_selector")

    @property
    @pulumi.getter(name="matchLabelKeys")
    def match_label_keys(self) -> Optional[Sequence[str]]:
        """
        MatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both matchLabelKeys and labelSelector.
        Also, matchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        return pulumi.get(self, "match_label_keys")

    @property
    @pulumi.getter(name="mismatchLabelKeys")
    def mismatch_label_keys(self) -> Optional[Sequence[str]]:
        """
        MismatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
        Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        return pulumi.get(self, "mismatch_label_keys")

    @property
    @pulumi.getter(name="namespaceSelector")
    def namespace_selector(
        self,
    ) -> Optional[
        "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch"
    ]:
        return pulumi.get(self, "namespace_selector")

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[Sequence[str]]:
        """
        namespaces specifies a static list of namespace names that the term applies to.
        The term is applied to the union of the namespaces listed in this field
        and the ones selected by namespaceSelector.
        null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        """
        return pulumi.get(self, "namespaces")

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> Optional[str]:
        """
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
        the labelSelector in the specified namespaces, where co-located is defined as running on a node
        whose value of the label with key topologyKey matches that of any node on which any of the
        selected pods is running.
        Empty topologyKey is not allowed.
        """
        return pulumi.get(self, "topology_key")


@pulumi.output_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution(
    dict
):
    """
    Defines a set of pods (namely those matching the labelSelector
    relative to the given namespace(s)) that this pod should be
    co-located (affinity) or not co-located (anti-affinity) with,
    where co-located is defined as running on a node whose value of
    the label with key <topologyKey> matches that of any node on which
    a pod of the set of pods is running
    """

    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "labelSelector":
            suggest = "label_selector"
        elif key == "matchLabelKeys":
            suggest = "match_label_keys"
        elif key == "mismatchLabelKeys":
            suggest = "mismatch_label_keys"
        elif key == "namespaceSelector":
            suggest = "namespace_selector"
        elif key == "topologyKey":
            suggest = "topology_key"

        if suggest:
            pulumi.log.warn(
                f"Key '{key}' not found in ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution. Access the value via the '{suggest}' property getter instead."
            )

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution.__key_warning(
            key
        )
        return super().__getitem__(key)

    def get(self, key: str, default=None) -> Any:
        ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution.__key_warning(
            key
        )
        return super().get(key, default)

    def __init__(
        __self__,
        *,
        label_selector: Optional[
            "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector"
        ] = None,
        match_label_keys: Optional[Sequence[str]] = None,
        mismatch_label_keys: Optional[Sequence[str]] = None,
        namespace_selector: Optional[
            "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector"
        ] = None,
        namespaces: Optional[Sequence[str]] = None,
        topology_key: Optional[str] = None,
    ):
        """
        Defines a set of pods (namely those matching the labelSelector
        relative to the given namespace(s)) that this pod should be
        co-located (affinity) or not co-located (anti-affinity) with,
        where co-located is defined as running on a node whose value of
        the label with key <topologyKey> matches that of any node on which
        a pod of the set of pods is running
        :param Sequence[str] match_label_keys: MatchLabelKeys is a set of pod label keys to select which pods will
               be taken into consideration. The keys are used to lookup values from the
               incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
               to select the group of existing pods which pods will be taken into consideration
               for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
               pod labels will be ignored. The default value is empty.
               The same key is forbidden to exist in both matchLabelKeys and labelSelector.
               Also, matchLabelKeys cannot be set when labelSelector isn't set.
               This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        :param Sequence[str] mismatch_label_keys: MismatchLabelKeys is a set of pod label keys to select which pods will
               be taken into consideration. The keys are used to lookup values from the
               incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
               to select the group of existing pods which pods will be taken into consideration
               for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
               pod labels will be ignored. The default value is empty.
               The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
               Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
               This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        :param Sequence[str] namespaces: namespaces specifies a static list of namespace names that the term applies to.
               The term is applied to the union of the namespaces listed in this field
               and the ones selected by namespaceSelector.
               null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        :param str topology_key: This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
               the labelSelector in the specified namespaces, where co-located is defined as running on a node
               whose value of the label with key topologyKey matches that of any node on which any of the
               selected pods is running.
               Empty topologyKey is not allowed.
        """
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if match_label_keys is not None:
            pulumi.set(__self__, "match_label_keys", match_label_keys)
        if mismatch_label_keys is not None:
            pulumi.set(__self__, "mismatch_label_keys", mismatch_label_keys)
        if namespace_selector is not None:
            pulumi.set(__self__, "namespace_selector", namespace_selector)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)
        if topology_key is not None:
            pulumi.set(__self__, "topology_key", topology_key)

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(
        self,
    ) -> Optional[
        "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector"
    ]:
        return pulumi.get(self, "label_selector")

    @property
    @pulumi.getter(name="matchLabelKeys")
    def match_label_keys(self) -> Optional[Sequence[str]]:
        """
        MatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both matchLabelKeys and labelSelector.
        Also, matchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        return pulumi.get(self, "match_label_keys")

    @property
    @pulumi.getter(name="mismatchLabelKeys")
    def mismatch_label_keys(self) -> Optional[Sequence[str]]:
        """
        MismatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
        Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        return pulumi.get(self, "mismatch_label_keys")

    @property
    @pulumi.getter(name="namespaceSelector")
    def namespace_selector(
        self,
    ) -> Optional[
        "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector"
    ]:
        return pulumi.get(self, "namespace_selector")

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[Sequence[str]]:
        """
        namespaces specifies a static list of namespace names that the term applies to.
        The term is applied to the union of the namespaces listed in this field
        and the ones selected by namespaceSelector.
        null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        """
        return pulumi.get(self, "namespaces")

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> Optional[str]:
        """
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
        the labelSelector in the specified namespaces, where co-located is defined as running on a node
        whose value of the label with key topologyKey matches that of any node on which any of the
        selected pods is running.
        Empty topologyKey is not allowed.
        """
        return pulumi.get(self, "topology_key")


@pulumi.output_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector(
    dict
):
    """
    A label query over a set of resources, in this case pods.
    If it's null, this PodAffinityTerm matches with no Pods.
    """

    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "matchExpressions":
            suggest = "match_expressions"
        elif key == "matchLabels":
            suggest = "match_labels"

        if suggest:
            pulumi.log.warn(
                f"Key '{key}' not found in ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector. Access the value via the '{suggest}' property getter instead."
            )

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector.__key_warning(
            key
        )
        return super().__getitem__(key)

    def get(self, key: str, default=None) -> Any:
        ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector.__key_warning(
            key
        )
        return super().get(key, default)

    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            Sequence[
                "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions"
            ]
        ] = None,
        match_labels: Optional[Mapping[str, str]] = None,
    ):
        """
        A label query over a set of resources, in this case pods.
        If it's null, this PodAffinityTerm matches with no Pods.
        :param Sequence['ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs'] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param Mapping[str, str] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
               map is equivalent to an element of matchExpressions, whose key field is "key", the
               operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        Sequence[
            "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions"
        ]
    ]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, str]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")


@pulumi.output_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions(
    dict
):
    """
    A label selector requirement is a selector that contains values, a key, and an operator that
    relates the key and values.
    """

    def __init__(
        __self__,
        *,
        key: Optional[str] = None,
        operator: Optional[str] = None,
        values: Optional[Sequence[str]] = None,
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        :param str key: key is the label key that the selector applies to.
        :param str operator: operator represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists and DoesNotExist.
        :param Sequence[str] values: values is an array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. This array is replaced during a strategic
               merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> Optional[str]:
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch(
    dict
):
    """
    A label selector requirement is a selector that contains values, a key, and an operator that
    relates the key and values.
    """

    def __init__(
        __self__,
        *,
        key: Optional[str] = None,
        operator: Optional[str] = None,
        values: Optional[Sequence[str]] = None,
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        :param str key: key is the label key that the selector applies to.
        :param str operator: operator represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists and DoesNotExist.
        :param Sequence[str] values: values is an array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. This array is replaced during a strategic
               merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> Optional[str]:
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch(
    dict
):
    """
    A label query over a set of resources, in this case pods.
    If it's null, this PodAffinityTerm matches with no Pods.
    """

    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "matchExpressions":
            suggest = "match_expressions"
        elif key == "matchLabels":
            suggest = "match_labels"

        if suggest:
            pulumi.log.warn(
                f"Key '{key}' not found in ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch. Access the value via the '{suggest}' property getter instead."
            )

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch.__key_warning(
            key
        )
        return super().__getitem__(key)

    def get(self, key: str, default=None) -> Any:
        ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch.__key_warning(
            key
        )
        return super().get(key, default)

    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            Sequence[
                "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch"
            ]
        ] = None,
        match_labels: Optional[Mapping[str, str]] = None,
    ):
        """
        A label query over a set of resources, in this case pods.
        If it's null, this PodAffinityTerm matches with no Pods.
        :param Sequence['ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArgs'] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param Mapping[str, str] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
               map is equivalent to an element of matchExpressions, whose key field is "key", the
               operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        Sequence[
            "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch"
        ]
    ]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, str]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")


@pulumi.output_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector(
    dict
):
    """
    A label query over the set of namespaces that the term applies to.
    The term is applied to the union of the namespaces selected by this field
    and the ones listed in the namespaces field.
    null selector and null or empty namespaces list means "this pod's namespace".
    An empty selector ({}) matches all namespaces.
    """

    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "matchExpressions":
            suggest = "match_expressions"
        elif key == "matchLabels":
            suggest = "match_labels"

        if suggest:
            pulumi.log.warn(
                f"Key '{key}' not found in ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector. Access the value via the '{suggest}' property getter instead."
            )

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector.__key_warning(
            key
        )
        return super().__getitem__(key)

    def get(self, key: str, default=None) -> Any:
        ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector.__key_warning(
            key
        )
        return super().get(key, default)

    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            Sequence[
                "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions"
            ]
        ] = None,
        match_labels: Optional[Mapping[str, str]] = None,
    ):
        """
        A label query over the set of namespaces that the term applies to.
        The term is applied to the union of the namespaces selected by this field
        and the ones listed in the namespaces field.
        null selector and null or empty namespaces list means "this pod's namespace".
        An empty selector ({}) matches all namespaces.
        :param Sequence['ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs'] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param Mapping[str, str] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
               map is equivalent to an element of matchExpressions, whose key field is "key", the
               operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        Sequence[
            "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions"
        ]
    ]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, str]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")


@pulumi.output_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions(
    dict
):
    """
    A label selector requirement is a selector that contains values, a key, and an operator that
    relates the key and values.
    """

    def __init__(
        __self__,
        *,
        key: Optional[str] = None,
        operator: Optional[str] = None,
        values: Optional[Sequence[str]] = None,
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        :param str key: key is the label key that the selector applies to.
        :param str operator: operator represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists and DoesNotExist.
        :param Sequence[str] values: values is an array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. This array is replaced during a strategic
               merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> Optional[str]:
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch(
    dict
):
    """
    A label selector requirement is a selector that contains values, a key, and an operator that
    relates the key and values.
    """

    def __init__(
        __self__,
        *,
        key: Optional[str] = None,
        operator: Optional[str] = None,
        values: Optional[Sequence[str]] = None,
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        :param str key: key is the label key that the selector applies to.
        :param str operator: operator represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists and DoesNotExist.
        :param Sequence[str] values: values is an array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. This array is replaced during a strategic
               merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> Optional[str]:
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch(
    dict
):
    """
    A label query over the set of namespaces that the term applies to.
    The term is applied to the union of the namespaces selected by this field
    and the ones listed in the namespaces field.
    null selector and null or empty namespaces list means "this pod's namespace".
    An empty selector ({}) matches all namespaces.
    """

    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "matchExpressions":
            suggest = "match_expressions"
        elif key == "matchLabels":
            suggest = "match_labels"

        if suggest:
            pulumi.log.warn(
                f"Key '{key}' not found in ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch. Access the value via the '{suggest}' property getter instead."
            )

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch.__key_warning(
            key
        )
        return super().__getitem__(key)

    def get(self, key: str, default=None) -> Any:
        ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch.__key_warning(
            key
        )
        return super().get(key, default)

    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            Sequence[
                "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch"
            ]
        ] = None,
        match_labels: Optional[Mapping[str, str]] = None,
    ):
        """
        A label query over the set of namespaces that the term applies to.
        The term is applied to the union of the namespaces selected by this field
        and the ones listed in the namespaces field.
        null selector and null or empty namespaces list means "this pod's namespace".
        An empty selector ({}) matches all namespaces.
        :param Sequence['ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArgs'] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param Mapping[str, str] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
               map is equivalent to an element of matchExpressions, whose key field is "key", the
               operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        Sequence[
            "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch"
        ]
    ]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, str]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")


@pulumi.output_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch(
    dict
):
    """
    Defines a set of pods (namely those matching the labelSelector
    relative to the given namespace(s)) that this pod should be
    co-located (affinity) or not co-located (anti-affinity) with,
    where co-located is defined as running on a node whose value of
    the label with key <topologyKey> matches that of any node on which
    a pod of the set of pods is running
    """

    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "labelSelector":
            suggest = "label_selector"
        elif key == "matchLabelKeys":
            suggest = "match_label_keys"
        elif key == "mismatchLabelKeys":
            suggest = "mismatch_label_keys"
        elif key == "namespaceSelector":
            suggest = "namespace_selector"
        elif key == "topologyKey":
            suggest = "topology_key"

        if suggest:
            pulumi.log.warn(
                f"Key '{key}' not found in ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch. Access the value via the '{suggest}' property getter instead."
            )

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch.__key_warning(
            key
        )
        return super().__getitem__(key)

    def get(self, key: str, default=None) -> Any:
        ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch.__key_warning(
            key
        )
        return super().get(key, default)

    def __init__(
        __self__,
        *,
        label_selector: Optional[
            "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch"
        ] = None,
        match_label_keys: Optional[Sequence[str]] = None,
        mismatch_label_keys: Optional[Sequence[str]] = None,
        namespace_selector: Optional[
            "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch"
        ] = None,
        namespaces: Optional[Sequence[str]] = None,
        topology_key: Optional[str] = None,
    ):
        """
        Defines a set of pods (namely those matching the labelSelector
        relative to the given namespace(s)) that this pod should be
        co-located (affinity) or not co-located (anti-affinity) with,
        where co-located is defined as running on a node whose value of
        the label with key <topologyKey> matches that of any node on which
        a pod of the set of pods is running
        :param Sequence[str] match_label_keys: MatchLabelKeys is a set of pod label keys to select which pods will
               be taken into consideration. The keys are used to lookup values from the
               incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
               to select the group of existing pods which pods will be taken into consideration
               for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
               pod labels will be ignored. The default value is empty.
               The same key is forbidden to exist in both matchLabelKeys and labelSelector.
               Also, matchLabelKeys cannot be set when labelSelector isn't set.
               This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        :param Sequence[str] mismatch_label_keys: MismatchLabelKeys is a set of pod label keys to select which pods will
               be taken into consideration. The keys are used to lookup values from the
               incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
               to select the group of existing pods which pods will be taken into consideration
               for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
               pod labels will be ignored. The default value is empty.
               The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
               Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
               This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        :param Sequence[str] namespaces: namespaces specifies a static list of namespace names that the term applies to.
               The term is applied to the union of the namespaces listed in this field
               and the ones selected by namespaceSelector.
               null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        :param str topology_key: This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
               the labelSelector in the specified namespaces, where co-located is defined as running on a node
               whose value of the label with key topologyKey matches that of any node on which any of the
               selected pods is running.
               Empty topologyKey is not allowed.
        """
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if match_label_keys is not None:
            pulumi.set(__self__, "match_label_keys", match_label_keys)
        if mismatch_label_keys is not None:
            pulumi.set(__self__, "mismatch_label_keys", mismatch_label_keys)
        if namespace_selector is not None:
            pulumi.set(__self__, "namespace_selector", namespace_selector)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)
        if topology_key is not None:
            pulumi.set(__self__, "topology_key", topology_key)

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(
        self,
    ) -> Optional[
        "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch"
    ]:
        return pulumi.get(self, "label_selector")

    @property
    @pulumi.getter(name="matchLabelKeys")
    def match_label_keys(self) -> Optional[Sequence[str]]:
        """
        MatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both matchLabelKeys and labelSelector.
        Also, matchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        return pulumi.get(self, "match_label_keys")

    @property
    @pulumi.getter(name="mismatchLabelKeys")
    def mismatch_label_keys(self) -> Optional[Sequence[str]]:
        """
        MismatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
        Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        return pulumi.get(self, "mismatch_label_keys")

    @property
    @pulumi.getter(name="namespaceSelector")
    def namespace_selector(
        self,
    ) -> Optional[
        "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch"
    ]:
        return pulumi.get(self, "namespace_selector")

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[Sequence[str]]:
        """
        namespaces specifies a static list of namespace names that the term applies to.
        The term is applied to the union of the namespaces listed in this field
        and the ones selected by namespaceSelector.
        null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        """
        return pulumi.get(self, "namespaces")

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> Optional[str]:
        """
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
        the labelSelector in the specified namespaces, where co-located is defined as running on a node
        whose value of the label with key topologyKey matches that of any node on which any of the
        selected pods is running.
        Empty topologyKey is not allowed.
        """
        return pulumi.get(self, "topology_key")


@pulumi.output_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinity(dict):
    """
    Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
    """

    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "preferredDuringSchedulingIgnoredDuringExecution":
            suggest = "preferred_during_scheduling_ignored_during_execution"
        elif key == "requiredDuringSchedulingIgnoredDuringExecution":
            suggest = "required_during_scheduling_ignored_during_execution"

        if suggest:
            pulumi.log.warn(
                f"Key '{key}' not found in ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinity. Access the value via the '{suggest}' property getter instead."
            )

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinity.__key_warning(
            key
        )
        return super().__getitem__(key)

    def get(self, key: str, default=None) -> Any:
        ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinity.__key_warning(
            key
        )
        return super().get(key, default)

    def __init__(
        __self__,
        *,
        preferred_during_scheduling_ignored_during_execution: Optional[
            Sequence[
                "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution"
            ]
        ] = None,
        required_during_scheduling_ignored_during_execution: Optional[
            Sequence[
                "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution"
            ]
        ] = None,
    ):
        """
        Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
        :param Sequence['ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs'] preferred_during_scheduling_ignored_during_execution: The scheduler will prefer to schedule pods to nodes that satisfy
               the anti-affinity expressions specified by this field, but it may choose
               a node that violates one or more of the expressions. The node that is
               most preferred is the one with the greatest sum of weights, i.e.
               for each node that meets all of the scheduling requirements (resource
               request, requiredDuringScheduling anti-affinity expressions, etc.),
               compute a sum by iterating through the elements of this field and adding
               "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
               node(s) with the highest sum are the most preferred.
        :param Sequence['ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs'] required_during_scheduling_ignored_during_execution: If the anti-affinity requirements specified by this field are not met at
               scheduling time, the pod will not be scheduled onto the node.
               If the anti-affinity requirements specified by this field cease to be met
               at some point during pod execution (e.g. due to a pod label update), the
               system may or may not try to eventually evict the pod from its node.
               When there are multiple elements, the lists of nodes corresponding to each
               podAffinityTerm are intersected, i.e. all terms must be satisfied.
        """
        if preferred_during_scheduling_ignored_during_execution is not None:
            pulumi.set(
                __self__,
                "preferred_during_scheduling_ignored_during_execution",
                preferred_during_scheduling_ignored_during_execution,
            )
        if required_during_scheduling_ignored_during_execution is not None:
            pulumi.set(
                __self__,
                "required_during_scheduling_ignored_during_execution",
                required_during_scheduling_ignored_during_execution,
            )

    @property
    @pulumi.getter(name="preferredDuringSchedulingIgnoredDuringExecution")
    def preferred_during_scheduling_ignored_during_execution(
        self,
    ) -> Optional[
        Sequence[
            "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution"
        ]
    ]:
        """
        The scheduler will prefer to schedule pods to nodes that satisfy
        the anti-affinity expressions specified by this field, but it may choose
        a node that violates one or more of the expressions. The node that is
        most preferred is the one with the greatest sum of weights, i.e.
        for each node that meets all of the scheduling requirements (resource
        request, requiredDuringScheduling anti-affinity expressions, etc.),
        compute a sum by iterating through the elements of this field and adding
        "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
        node(s) with the highest sum are the most preferred.
        """
        return pulumi.get(self, "preferred_during_scheduling_ignored_during_execution")

    @property
    @pulumi.getter(name="requiredDuringSchedulingIgnoredDuringExecution")
    def required_during_scheduling_ignored_during_execution(
        self,
    ) -> Optional[
        Sequence[
            "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution"
        ]
    ]:
        """
        If the anti-affinity requirements specified by this field are not met at
        scheduling time, the pod will not be scheduled onto the node.
        If the anti-affinity requirements specified by this field cease to be met
        at some point during pod execution (e.g. due to a pod label update), the
        system may or may not try to eventually evict the pod from its node.
        When there are multiple elements, the lists of nodes corresponding to each
        podAffinityTerm are intersected, i.e. all terms must be satisfied.
        """
        return pulumi.get(self, "required_during_scheduling_ignored_during_execution")


@pulumi.output_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPatch(dict):
    """
    Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
    """

    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "preferredDuringSchedulingIgnoredDuringExecution":
            suggest = "preferred_during_scheduling_ignored_during_execution"
        elif key == "requiredDuringSchedulingIgnoredDuringExecution":
            suggest = "required_during_scheduling_ignored_during_execution"

        if suggest:
            pulumi.log.warn(
                f"Key '{key}' not found in ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPatch. Access the value via the '{suggest}' property getter instead."
            )

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPatch.__key_warning(
            key
        )
        return super().__getitem__(key)

    def get(self, key: str, default=None) -> Any:
        ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPatch.__key_warning(
            key
        )
        return super().get(key, default)

    def __init__(
        __self__,
        *,
        preferred_during_scheduling_ignored_during_execution: Optional[
            Sequence[
                "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch"
            ]
        ] = None,
        required_during_scheduling_ignored_during_execution: Optional[
            Sequence[
                "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch"
            ]
        ] = None,
    ):
        """
        Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
        :param Sequence['ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgs'] preferred_during_scheduling_ignored_during_execution: The scheduler will prefer to schedule pods to nodes that satisfy
               the anti-affinity expressions specified by this field, but it may choose
               a node that violates one or more of the expressions. The node that is
               most preferred is the one with the greatest sum of weights, i.e.
               for each node that meets all of the scheduling requirements (resource
               request, requiredDuringScheduling anti-affinity expressions, etc.),
               compute a sum by iterating through the elements of this field and adding
               "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
               node(s) with the highest sum are the most preferred.
        :param Sequence['ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgs'] required_during_scheduling_ignored_during_execution: If the anti-affinity requirements specified by this field are not met at
               scheduling time, the pod will not be scheduled onto the node.
               If the anti-affinity requirements specified by this field cease to be met
               at some point during pod execution (e.g. due to a pod label update), the
               system may or may not try to eventually evict the pod from its node.
               When there are multiple elements, the lists of nodes corresponding to each
               podAffinityTerm are intersected, i.e. all terms must be satisfied.
        """
        if preferred_during_scheduling_ignored_during_execution is not None:
            pulumi.set(
                __self__,
                "preferred_during_scheduling_ignored_during_execution",
                preferred_during_scheduling_ignored_during_execution,
            )
        if required_during_scheduling_ignored_during_execution is not None:
            pulumi.set(
                __self__,
                "required_during_scheduling_ignored_during_execution",
                required_during_scheduling_ignored_during_execution,
            )

    @property
    @pulumi.getter(name="preferredDuringSchedulingIgnoredDuringExecution")
    def preferred_during_scheduling_ignored_during_execution(
        self,
    ) -> Optional[
        Sequence[
            "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch"
        ]
    ]:
        """
        The scheduler will prefer to schedule pods to nodes that satisfy
        the anti-affinity expressions specified by this field, but it may choose
        a node that violates one or more of the expressions. The node that is
        most preferred is the one with the greatest sum of weights, i.e.
        for each node that meets all of the scheduling requirements (resource
        request, requiredDuringScheduling anti-affinity expressions, etc.),
        compute a sum by iterating through the elements of this field and adding
        "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
        node(s) with the highest sum are the most preferred.
        """
        return pulumi.get(self, "preferred_during_scheduling_ignored_during_execution")

    @property
    @pulumi.getter(name="requiredDuringSchedulingIgnoredDuringExecution")
    def required_during_scheduling_ignored_during_execution(
        self,
    ) -> Optional[
        Sequence[
            "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch"
        ]
    ]:
        """
        If the anti-affinity requirements specified by this field are not met at
        scheduling time, the pod will not be scheduled onto the node.
        If the anti-affinity requirements specified by this field cease to be met
        at some point during pod execution (e.g. due to a pod label update), the
        system may or may not try to eventually evict the pod from its node.
        When there are multiple elements, the lists of nodes corresponding to each
        podAffinityTerm are intersected, i.e. all terms must be satisfied.
        """
        return pulumi.get(self, "required_during_scheduling_ignored_during_execution")


@pulumi.output_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution(
    dict
):
    """
    The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
    """

    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "podAffinityTerm":
            suggest = "pod_affinity_term"

        if suggest:
            pulumi.log.warn(
                f"Key '{key}' not found in ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution. Access the value via the '{suggest}' property getter instead."
            )

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution.__key_warning(
            key
        )
        return super().__getitem__(key)

    def get(self, key: str, default=None) -> Any:
        ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution.__key_warning(
            key
        )
        return super().get(key, default)

    def __init__(
        __self__,
        *,
        pod_affinity_term: Optional[
            "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm"
        ] = None,
        weight: Optional[int] = None,
    ):
        """
        The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
        :param int weight: weight associated with matching the corresponding podAffinityTerm,
               in the range 1-100.
        """
        if pod_affinity_term is not None:
            pulumi.set(__self__, "pod_affinity_term", pod_affinity_term)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter(name="podAffinityTerm")
    def pod_affinity_term(
        self,
    ) -> Optional[
        "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm"
    ]:
        return pulumi.get(self, "pod_affinity_term")

    @property
    @pulumi.getter
    def weight(self) -> Optional[int]:
        """
        weight associated with matching the corresponding podAffinityTerm,
        in the range 1-100.
        """
        return pulumi.get(self, "weight")


@pulumi.output_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch(
    dict
):
    """
    The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
    """

    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "podAffinityTerm":
            suggest = "pod_affinity_term"

        if suggest:
            pulumi.log.warn(
                f"Key '{key}' not found in ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch. Access the value via the '{suggest}' property getter instead."
            )

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch.__key_warning(
            key
        )
        return super().__getitem__(key)

    def get(self, key: str, default=None) -> Any:
        ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch.__key_warning(
            key
        )
        return super().get(key, default)

    def __init__(
        __self__,
        *,
        pod_affinity_term: Optional[
            "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch"
        ] = None,
        weight: Optional[int] = None,
    ):
        """
        The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
        :param int weight: weight associated with matching the corresponding podAffinityTerm,
               in the range 1-100.
        """
        if pod_affinity_term is not None:
            pulumi.set(__self__, "pod_affinity_term", pod_affinity_term)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter(name="podAffinityTerm")
    def pod_affinity_term(
        self,
    ) -> Optional[
        "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch"
    ]:
        return pulumi.get(self, "pod_affinity_term")

    @property
    @pulumi.getter
    def weight(self) -> Optional[int]:
        """
        weight associated with matching the corresponding podAffinityTerm,
        in the range 1-100.
        """
        return pulumi.get(self, "weight")


@pulumi.output_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm(
    dict
):
    """
    Required. A pod affinity term, associated with the corresponding weight.
    """

    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "labelSelector":
            suggest = "label_selector"
        elif key == "matchLabelKeys":
            suggest = "match_label_keys"
        elif key == "mismatchLabelKeys":
            suggest = "mismatch_label_keys"
        elif key == "namespaceSelector":
            suggest = "namespace_selector"
        elif key == "topologyKey":
            suggest = "topology_key"

        if suggest:
            pulumi.log.warn(
                f"Key '{key}' not found in ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm. Access the value via the '{suggest}' property getter instead."
            )

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm.__key_warning(
            key
        )
        return super().__getitem__(key)

    def get(self, key: str, default=None) -> Any:
        ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm.__key_warning(
            key
        )
        return super().get(key, default)

    def __init__(
        __self__,
        *,
        label_selector: Optional[
            "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector"
        ] = None,
        match_label_keys: Optional[Sequence[str]] = None,
        mismatch_label_keys: Optional[Sequence[str]] = None,
        namespace_selector: Optional[
            "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector"
        ] = None,
        namespaces: Optional[Sequence[str]] = None,
        topology_key: Optional[str] = None,
    ):
        """
        Required. A pod affinity term, associated with the corresponding weight.
        :param Sequence[str] match_label_keys: MatchLabelKeys is a set of pod label keys to select which pods will
               be taken into consideration. The keys are used to lookup values from the
               incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
               to select the group of existing pods which pods will be taken into consideration
               for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
               pod labels will be ignored. The default value is empty.
               The same key is forbidden to exist in both matchLabelKeys and labelSelector.
               Also, matchLabelKeys cannot be set when labelSelector isn't set.
               This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        :param Sequence[str] mismatch_label_keys: MismatchLabelKeys is a set of pod label keys to select which pods will
               be taken into consideration. The keys are used to lookup values from the
               incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
               to select the group of existing pods which pods will be taken into consideration
               for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
               pod labels will be ignored. The default value is empty.
               The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
               Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
               This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        :param Sequence[str] namespaces: namespaces specifies a static list of namespace names that the term applies to.
               The term is applied to the union of the namespaces listed in this field
               and the ones selected by namespaceSelector.
               null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        :param str topology_key: This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
               the labelSelector in the specified namespaces, where co-located is defined as running on a node
               whose value of the label with key topologyKey matches that of any node on which any of the
               selected pods is running.
               Empty topologyKey is not allowed.
        """
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if match_label_keys is not None:
            pulumi.set(__self__, "match_label_keys", match_label_keys)
        if mismatch_label_keys is not None:
            pulumi.set(__self__, "mismatch_label_keys", mismatch_label_keys)
        if namespace_selector is not None:
            pulumi.set(__self__, "namespace_selector", namespace_selector)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)
        if topology_key is not None:
            pulumi.set(__self__, "topology_key", topology_key)

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(
        self,
    ) -> Optional[
        "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector"
    ]:
        return pulumi.get(self, "label_selector")

    @property
    @pulumi.getter(name="matchLabelKeys")
    def match_label_keys(self) -> Optional[Sequence[str]]:
        """
        MatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both matchLabelKeys and labelSelector.
        Also, matchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        return pulumi.get(self, "match_label_keys")

    @property
    @pulumi.getter(name="mismatchLabelKeys")
    def mismatch_label_keys(self) -> Optional[Sequence[str]]:
        """
        MismatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
        Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        return pulumi.get(self, "mismatch_label_keys")

    @property
    @pulumi.getter(name="namespaceSelector")
    def namespace_selector(
        self,
    ) -> Optional[
        "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector"
    ]:
        return pulumi.get(self, "namespace_selector")

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[Sequence[str]]:
        """
        namespaces specifies a static list of namespace names that the term applies to.
        The term is applied to the union of the namespaces listed in this field
        and the ones selected by namespaceSelector.
        null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        """
        return pulumi.get(self, "namespaces")

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> Optional[str]:
        """
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
        the labelSelector in the specified namespaces, where co-located is defined as running on a node
        whose value of the label with key topologyKey matches that of any node on which any of the
        selected pods is running.
        Empty topologyKey is not allowed.
        """
        return pulumi.get(self, "topology_key")


@pulumi.output_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector(
    dict
):
    """
    A label query over a set of resources, in this case pods.
    If it's null, this PodAffinityTerm matches with no Pods.
    """

    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "matchExpressions":
            suggest = "match_expressions"
        elif key == "matchLabels":
            suggest = "match_labels"

        if suggest:
            pulumi.log.warn(
                f"Key '{key}' not found in ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector. Access the value via the '{suggest}' property getter instead."
            )

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector.__key_warning(
            key
        )
        return super().__getitem__(key)

    def get(self, key: str, default=None) -> Any:
        ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector.__key_warning(
            key
        )
        return super().get(key, default)

    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            Sequence[
                "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions"
            ]
        ] = None,
        match_labels: Optional[Mapping[str, str]] = None,
    ):
        """
        A label query over a set of resources, in this case pods.
        If it's null, this PodAffinityTerm matches with no Pods.
        :param Sequence['ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs'] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param Mapping[str, str] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
               map is equivalent to an element of matchExpressions, whose key field is "key", the
               operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        Sequence[
            "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions"
        ]
    ]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, str]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")


@pulumi.output_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions(
    dict
):
    """
    A label selector requirement is a selector that contains values, a key, and an operator that
    relates the key and values.
    """

    def __init__(
        __self__,
        *,
        key: Optional[str] = None,
        operator: Optional[str] = None,
        values: Optional[Sequence[str]] = None,
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        :param str key: key is the label key that the selector applies to.
        :param str operator: operator represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists and DoesNotExist.
        :param Sequence[str] values: values is an array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. This array is replaced during a strategic
               merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> Optional[str]:
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch(
    dict
):
    """
    A label selector requirement is a selector that contains values, a key, and an operator that
    relates the key and values.
    """

    def __init__(
        __self__,
        *,
        key: Optional[str] = None,
        operator: Optional[str] = None,
        values: Optional[Sequence[str]] = None,
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        :param str key: key is the label key that the selector applies to.
        :param str operator: operator represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists and DoesNotExist.
        :param Sequence[str] values: values is an array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. This array is replaced during a strategic
               merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> Optional[str]:
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch(
    dict
):
    """
    A label query over a set of resources, in this case pods.
    If it's null, this PodAffinityTerm matches with no Pods.
    """

    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "matchExpressions":
            suggest = "match_expressions"
        elif key == "matchLabels":
            suggest = "match_labels"

        if suggest:
            pulumi.log.warn(
                f"Key '{key}' not found in ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch. Access the value via the '{suggest}' property getter instead."
            )

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch.__key_warning(
            key
        )
        return super().__getitem__(key)

    def get(self, key: str, default=None) -> Any:
        ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch.__key_warning(
            key
        )
        return super().get(key, default)

    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            Sequence[
                "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch"
            ]
        ] = None,
        match_labels: Optional[Mapping[str, str]] = None,
    ):
        """
        A label query over a set of resources, in this case pods.
        If it's null, this PodAffinityTerm matches with no Pods.
        :param Sequence['ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArgs'] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param Mapping[str, str] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
               map is equivalent to an element of matchExpressions, whose key field is "key", the
               operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        Sequence[
            "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch"
        ]
    ]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, str]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")


@pulumi.output_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector(
    dict
):
    """
    A label query over the set of namespaces that the term applies to.
    The term is applied to the union of the namespaces selected by this field
    and the ones listed in the namespaces field.
    null selector and null or empty namespaces list means "this pod's namespace".
    An empty selector ({}) matches all namespaces.
    """

    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "matchExpressions":
            suggest = "match_expressions"
        elif key == "matchLabels":
            suggest = "match_labels"

        if suggest:
            pulumi.log.warn(
                f"Key '{key}' not found in ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector. Access the value via the '{suggest}' property getter instead."
            )

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector.__key_warning(
            key
        )
        return super().__getitem__(key)

    def get(self, key: str, default=None) -> Any:
        ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector.__key_warning(
            key
        )
        return super().get(key, default)

    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            Sequence[
                "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions"
            ]
        ] = None,
        match_labels: Optional[Mapping[str, str]] = None,
    ):
        """
        A label query over the set of namespaces that the term applies to.
        The term is applied to the union of the namespaces selected by this field
        and the ones listed in the namespaces field.
        null selector and null or empty namespaces list means "this pod's namespace".
        An empty selector ({}) matches all namespaces.
        :param Sequence['ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs'] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param Mapping[str, str] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
               map is equivalent to an element of matchExpressions, whose key field is "key", the
               operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        Sequence[
            "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions"
        ]
    ]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, str]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")


@pulumi.output_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions(
    dict
):
    """
    A label selector requirement is a selector that contains values, a key, and an operator that
    relates the key and values.
    """

    def __init__(
        __self__,
        *,
        key: Optional[str] = None,
        operator: Optional[str] = None,
        values: Optional[Sequence[str]] = None,
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        :param str key: key is the label key that the selector applies to.
        :param str operator: operator represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists and DoesNotExist.
        :param Sequence[str] values: values is an array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. This array is replaced during a strategic
               merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> Optional[str]:
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch(
    dict
):
    """
    A label selector requirement is a selector that contains values, a key, and an operator that
    relates the key and values.
    """

    def __init__(
        __self__,
        *,
        key: Optional[str] = None,
        operator: Optional[str] = None,
        values: Optional[Sequence[str]] = None,
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        :param str key: key is the label key that the selector applies to.
        :param str operator: operator represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists and DoesNotExist.
        :param Sequence[str] values: values is an array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. This array is replaced during a strategic
               merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> Optional[str]:
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch(
    dict
):
    """
    A label query over the set of namespaces that the term applies to.
    The term is applied to the union of the namespaces selected by this field
    and the ones listed in the namespaces field.
    null selector and null or empty namespaces list means "this pod's namespace".
    An empty selector ({}) matches all namespaces.
    """

    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "matchExpressions":
            suggest = "match_expressions"
        elif key == "matchLabels":
            suggest = "match_labels"

        if suggest:
            pulumi.log.warn(
                f"Key '{key}' not found in ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch. Access the value via the '{suggest}' property getter instead."
            )

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch.__key_warning(
            key
        )
        return super().__getitem__(key)

    def get(self, key: str, default=None) -> Any:
        ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch.__key_warning(
            key
        )
        return super().get(key, default)

    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            Sequence[
                "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch"
            ]
        ] = None,
        match_labels: Optional[Mapping[str, str]] = None,
    ):
        """
        A label query over the set of namespaces that the term applies to.
        The term is applied to the union of the namespaces selected by this field
        and the ones listed in the namespaces field.
        null selector and null or empty namespaces list means "this pod's namespace".
        An empty selector ({}) matches all namespaces.
        :param Sequence['ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArgs'] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param Mapping[str, str] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
               map is equivalent to an element of matchExpressions, whose key field is "key", the
               operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        Sequence[
            "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch"
        ]
    ]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, str]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")


@pulumi.output_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch(
    dict
):
    """
    Required. A pod affinity term, associated with the corresponding weight.
    """

    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "labelSelector":
            suggest = "label_selector"
        elif key == "matchLabelKeys":
            suggest = "match_label_keys"
        elif key == "mismatchLabelKeys":
            suggest = "mismatch_label_keys"
        elif key == "namespaceSelector":
            suggest = "namespace_selector"
        elif key == "topologyKey":
            suggest = "topology_key"

        if suggest:
            pulumi.log.warn(
                f"Key '{key}' not found in ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch. Access the value via the '{suggest}' property getter instead."
            )

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch.__key_warning(
            key
        )
        return super().__getitem__(key)

    def get(self, key: str, default=None) -> Any:
        ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch.__key_warning(
            key
        )
        return super().get(key, default)

    def __init__(
        __self__,
        *,
        label_selector: Optional[
            "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch"
        ] = None,
        match_label_keys: Optional[Sequence[str]] = None,
        mismatch_label_keys: Optional[Sequence[str]] = None,
        namespace_selector: Optional[
            "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch"
        ] = None,
        namespaces: Optional[Sequence[str]] = None,
        topology_key: Optional[str] = None,
    ):
        """
        Required. A pod affinity term, associated with the corresponding weight.
        :param Sequence[str] match_label_keys: MatchLabelKeys is a set of pod label keys to select which pods will
               be taken into consideration. The keys are used to lookup values from the
               incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
               to select the group of existing pods which pods will be taken into consideration
               for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
               pod labels will be ignored. The default value is empty.
               The same key is forbidden to exist in both matchLabelKeys and labelSelector.
               Also, matchLabelKeys cannot be set when labelSelector isn't set.
               This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        :param Sequence[str] mismatch_label_keys: MismatchLabelKeys is a set of pod label keys to select which pods will
               be taken into consideration. The keys are used to lookup values from the
               incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
               to select the group of existing pods which pods will be taken into consideration
               for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
               pod labels will be ignored. The default value is empty.
               The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
               Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
               This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        :param Sequence[str] namespaces: namespaces specifies a static list of namespace names that the term applies to.
               The term is applied to the union of the namespaces listed in this field
               and the ones selected by namespaceSelector.
               null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        :param str topology_key: This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
               the labelSelector in the specified namespaces, where co-located is defined as running on a node
               whose value of the label with key topologyKey matches that of any node on which any of the
               selected pods is running.
               Empty topologyKey is not allowed.
        """
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if match_label_keys is not None:
            pulumi.set(__self__, "match_label_keys", match_label_keys)
        if mismatch_label_keys is not None:
            pulumi.set(__self__, "mismatch_label_keys", mismatch_label_keys)
        if namespace_selector is not None:
            pulumi.set(__self__, "namespace_selector", namespace_selector)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)
        if topology_key is not None:
            pulumi.set(__self__, "topology_key", topology_key)

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(
        self,
    ) -> Optional[
        "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch"
    ]:
        return pulumi.get(self, "label_selector")

    @property
    @pulumi.getter(name="matchLabelKeys")
    def match_label_keys(self) -> Optional[Sequence[str]]:
        """
        MatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both matchLabelKeys and labelSelector.
        Also, matchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        return pulumi.get(self, "match_label_keys")

    @property
    @pulumi.getter(name="mismatchLabelKeys")
    def mismatch_label_keys(self) -> Optional[Sequence[str]]:
        """
        MismatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
        Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        return pulumi.get(self, "mismatch_label_keys")

    @property
    @pulumi.getter(name="namespaceSelector")
    def namespace_selector(
        self,
    ) -> Optional[
        "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch"
    ]:
        return pulumi.get(self, "namespace_selector")

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[Sequence[str]]:
        """
        namespaces specifies a static list of namespace names that the term applies to.
        The term is applied to the union of the namespaces listed in this field
        and the ones selected by namespaceSelector.
        null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        """
        return pulumi.get(self, "namespaces")

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> Optional[str]:
        """
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
        the labelSelector in the specified namespaces, where co-located is defined as running on a node
        whose value of the label with key topologyKey matches that of any node on which any of the
        selected pods is running.
        Empty topologyKey is not allowed.
        """
        return pulumi.get(self, "topology_key")


@pulumi.output_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution(
    dict
):
    """
    Defines a set of pods (namely those matching the labelSelector
    relative to the given namespace(s)) that this pod should be
    co-located (affinity) or not co-located (anti-affinity) with,
    where co-located is defined as running on a node whose value of
    the label with key <topologyKey> matches that of any node on which
    a pod of the set of pods is running
    """

    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "labelSelector":
            suggest = "label_selector"
        elif key == "matchLabelKeys":
            suggest = "match_label_keys"
        elif key == "mismatchLabelKeys":
            suggest = "mismatch_label_keys"
        elif key == "namespaceSelector":
            suggest = "namespace_selector"
        elif key == "topologyKey":
            suggest = "topology_key"

        if suggest:
            pulumi.log.warn(
                f"Key '{key}' not found in ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution. Access the value via the '{suggest}' property getter instead."
            )

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution.__key_warning(
            key
        )
        return super().__getitem__(key)

    def get(self, key: str, default=None) -> Any:
        ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution.__key_warning(
            key
        )
        return super().get(key, default)

    def __init__(
        __self__,
        *,
        label_selector: Optional[
            "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector"
        ] = None,
        match_label_keys: Optional[Sequence[str]] = None,
        mismatch_label_keys: Optional[Sequence[str]] = None,
        namespace_selector: Optional[
            "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector"
        ] = None,
        namespaces: Optional[Sequence[str]] = None,
        topology_key: Optional[str] = None,
    ):
        """
        Defines a set of pods (namely those matching the labelSelector
        relative to the given namespace(s)) that this pod should be
        co-located (affinity) or not co-located (anti-affinity) with,
        where co-located is defined as running on a node whose value of
        the label with key <topologyKey> matches that of any node on which
        a pod of the set of pods is running
        :param Sequence[str] match_label_keys: MatchLabelKeys is a set of pod label keys to select which pods will
               be taken into consideration. The keys are used to lookup values from the
               incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
               to select the group of existing pods which pods will be taken into consideration
               for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
               pod labels will be ignored. The default value is empty.
               The same key is forbidden to exist in both matchLabelKeys and labelSelector.
               Also, matchLabelKeys cannot be set when labelSelector isn't set.
               This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        :param Sequence[str] mismatch_label_keys: MismatchLabelKeys is a set of pod label keys to select which pods will
               be taken into consideration. The keys are used to lookup values from the
               incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
               to select the group of existing pods which pods will be taken into consideration
               for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
               pod labels will be ignored. The default value is empty.
               The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
               Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
               This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        :param Sequence[str] namespaces: namespaces specifies a static list of namespace names that the term applies to.
               The term is applied to the union of the namespaces listed in this field
               and the ones selected by namespaceSelector.
               null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        :param str topology_key: This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
               the labelSelector in the specified namespaces, where co-located is defined as running on a node
               whose value of the label with key topologyKey matches that of any node on which any of the
               selected pods is running.
               Empty topologyKey is not allowed.
        """
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if match_label_keys is not None:
            pulumi.set(__self__, "match_label_keys", match_label_keys)
        if mismatch_label_keys is not None:
            pulumi.set(__self__, "mismatch_label_keys", mismatch_label_keys)
        if namespace_selector is not None:
            pulumi.set(__self__, "namespace_selector", namespace_selector)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)
        if topology_key is not None:
            pulumi.set(__self__, "topology_key", topology_key)

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(
        self,
    ) -> Optional[
        "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector"
    ]:
        return pulumi.get(self, "label_selector")

    @property
    @pulumi.getter(name="matchLabelKeys")
    def match_label_keys(self) -> Optional[Sequence[str]]:
        """
        MatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both matchLabelKeys and labelSelector.
        Also, matchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        return pulumi.get(self, "match_label_keys")

    @property
    @pulumi.getter(name="mismatchLabelKeys")
    def mismatch_label_keys(self) -> Optional[Sequence[str]]:
        """
        MismatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
        Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        return pulumi.get(self, "mismatch_label_keys")

    @property
    @pulumi.getter(name="namespaceSelector")
    def namespace_selector(
        self,
    ) -> Optional[
        "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector"
    ]:
        return pulumi.get(self, "namespace_selector")

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[Sequence[str]]:
        """
        namespaces specifies a static list of namespace names that the term applies to.
        The term is applied to the union of the namespaces listed in this field
        and the ones selected by namespaceSelector.
        null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        """
        return pulumi.get(self, "namespaces")

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> Optional[str]:
        """
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
        the labelSelector in the specified namespaces, where co-located is defined as running on a node
        whose value of the label with key topologyKey matches that of any node on which any of the
        selected pods is running.
        Empty topologyKey is not allowed.
        """
        return pulumi.get(self, "topology_key")


@pulumi.output_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector(
    dict
):
    """
    A label query over a set of resources, in this case pods.
    If it's null, this PodAffinityTerm matches with no Pods.
    """

    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "matchExpressions":
            suggest = "match_expressions"
        elif key == "matchLabels":
            suggest = "match_labels"

        if suggest:
            pulumi.log.warn(
                f"Key '{key}' not found in ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector. Access the value via the '{suggest}' property getter instead."
            )

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector.__key_warning(
            key
        )
        return super().__getitem__(key)

    def get(self, key: str, default=None) -> Any:
        ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector.__key_warning(
            key
        )
        return super().get(key, default)

    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            Sequence[
                "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions"
            ]
        ] = None,
        match_labels: Optional[Mapping[str, str]] = None,
    ):
        """
        A label query over a set of resources, in this case pods.
        If it's null, this PodAffinityTerm matches with no Pods.
        :param Sequence['ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs'] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param Mapping[str, str] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
               map is equivalent to an element of matchExpressions, whose key field is "key", the
               operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        Sequence[
            "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions"
        ]
    ]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, str]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")


@pulumi.output_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions(
    dict
):
    """
    A label selector requirement is a selector that contains values, a key, and an operator that
    relates the key and values.
    """

    def __init__(
        __self__,
        *,
        key: Optional[str] = None,
        operator: Optional[str] = None,
        values: Optional[Sequence[str]] = None,
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        :param str key: key is the label key that the selector applies to.
        :param str operator: operator represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists and DoesNotExist.
        :param Sequence[str] values: values is an array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. This array is replaced during a strategic
               merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> Optional[str]:
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch(
    dict
):
    """
    A label selector requirement is a selector that contains values, a key, and an operator that
    relates the key and values.
    """

    def __init__(
        __self__,
        *,
        key: Optional[str] = None,
        operator: Optional[str] = None,
        values: Optional[Sequence[str]] = None,
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        :param str key: key is the label key that the selector applies to.
        :param str operator: operator represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists and DoesNotExist.
        :param Sequence[str] values: values is an array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. This array is replaced during a strategic
               merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> Optional[str]:
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch(
    dict
):
    """
    A label query over a set of resources, in this case pods.
    If it's null, this PodAffinityTerm matches with no Pods.
    """

    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "matchExpressions":
            suggest = "match_expressions"
        elif key == "matchLabels":
            suggest = "match_labels"

        if suggest:
            pulumi.log.warn(
                f"Key '{key}' not found in ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch. Access the value via the '{suggest}' property getter instead."
            )

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch.__key_warning(
            key
        )
        return super().__getitem__(key)

    def get(self, key: str, default=None) -> Any:
        ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch.__key_warning(
            key
        )
        return super().get(key, default)

    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            Sequence[
                "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch"
            ]
        ] = None,
        match_labels: Optional[Mapping[str, str]] = None,
    ):
        """
        A label query over a set of resources, in this case pods.
        If it's null, this PodAffinityTerm matches with no Pods.
        :param Sequence['ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArgs'] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param Mapping[str, str] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
               map is equivalent to an element of matchExpressions, whose key field is "key", the
               operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        Sequence[
            "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch"
        ]
    ]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, str]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")


@pulumi.output_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector(
    dict
):
    """
    A label query over the set of namespaces that the term applies to.
    The term is applied to the union of the namespaces selected by this field
    and the ones listed in the namespaces field.
    null selector and null or empty namespaces list means "this pod's namespace".
    An empty selector ({}) matches all namespaces.
    """

    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "matchExpressions":
            suggest = "match_expressions"
        elif key == "matchLabels":
            suggest = "match_labels"

        if suggest:
            pulumi.log.warn(
                f"Key '{key}' not found in ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector. Access the value via the '{suggest}' property getter instead."
            )

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector.__key_warning(
            key
        )
        return super().__getitem__(key)

    def get(self, key: str, default=None) -> Any:
        ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector.__key_warning(
            key
        )
        return super().get(key, default)

    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            Sequence[
                "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions"
            ]
        ] = None,
        match_labels: Optional[Mapping[str, str]] = None,
    ):
        """
        A label query over the set of namespaces that the term applies to.
        The term is applied to the union of the namespaces selected by this field
        and the ones listed in the namespaces field.
        null selector and null or empty namespaces list means "this pod's namespace".
        An empty selector ({}) matches all namespaces.
        :param Sequence['ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs'] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param Mapping[str, str] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
               map is equivalent to an element of matchExpressions, whose key field is "key", the
               operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        Sequence[
            "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions"
        ]
    ]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, str]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")


@pulumi.output_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions(
    dict
):
    """
    A label selector requirement is a selector that contains values, a key, and an operator that
    relates the key and values.
    """

    def __init__(
        __self__,
        *,
        key: Optional[str] = None,
        operator: Optional[str] = None,
        values: Optional[Sequence[str]] = None,
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        :param str key: key is the label key that the selector applies to.
        :param str operator: operator represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists and DoesNotExist.
        :param Sequence[str] values: values is an array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. This array is replaced during a strategic
               merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> Optional[str]:
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch(
    dict
):
    """
    A label selector requirement is a selector that contains values, a key, and an operator that
    relates the key and values.
    """

    def __init__(
        __self__,
        *,
        key: Optional[str] = None,
        operator: Optional[str] = None,
        values: Optional[Sequence[str]] = None,
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        :param str key: key is the label key that the selector applies to.
        :param str operator: operator represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists and DoesNotExist.
        :param Sequence[str] values: values is an array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. This array is replaced during a strategic
               merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> Optional[str]:
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch(
    dict
):
    """
    A label query over the set of namespaces that the term applies to.
    The term is applied to the union of the namespaces selected by this field
    and the ones listed in the namespaces field.
    null selector and null or empty namespaces list means "this pod's namespace".
    An empty selector ({}) matches all namespaces.
    """

    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "matchExpressions":
            suggest = "match_expressions"
        elif key == "matchLabels":
            suggest = "match_labels"

        if suggest:
            pulumi.log.warn(
                f"Key '{key}' not found in ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch. Access the value via the '{suggest}' property getter instead."
            )

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch.__key_warning(
            key
        )
        return super().__getitem__(key)

    def get(self, key: str, default=None) -> Any:
        ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch.__key_warning(
            key
        )
        return super().get(key, default)

    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            Sequence[
                "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch"
            ]
        ] = None,
        match_labels: Optional[Mapping[str, str]] = None,
    ):
        """
        A label query over the set of namespaces that the term applies to.
        The term is applied to the union of the namespaces selected by this field
        and the ones listed in the namespaces field.
        null selector and null or empty namespaces list means "this pod's namespace".
        An empty selector ({}) matches all namespaces.
        :param Sequence['ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArgs'] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param Mapping[str, str] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
               map is equivalent to an element of matchExpressions, whose key field is "key", the
               operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        Sequence[
            "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch"
        ]
    ]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, str]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")


@pulumi.output_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch(
    dict
):
    """
    Defines a set of pods (namely those matching the labelSelector
    relative to the given namespace(s)) that this pod should be
    co-located (affinity) or not co-located (anti-affinity) with,
    where co-located is defined as running on a node whose value of
    the label with key <topologyKey> matches that of any node on which
    a pod of the set of pods is running
    """

    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "labelSelector":
            suggest = "label_selector"
        elif key == "matchLabelKeys":
            suggest = "match_label_keys"
        elif key == "mismatchLabelKeys":
            suggest = "mismatch_label_keys"
        elif key == "namespaceSelector":
            suggest = "namespace_selector"
        elif key == "topologyKey":
            suggest = "topology_key"

        if suggest:
            pulumi.log.warn(
                f"Key '{key}' not found in ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch. Access the value via the '{suggest}' property getter instead."
            )

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch.__key_warning(
            key
        )
        return super().__getitem__(key)

    def get(self, key: str, default=None) -> Any:
        ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch.__key_warning(
            key
        )
        return super().get(key, default)

    def __init__(
        __self__,
        *,
        label_selector: Optional[
            "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch"
        ] = None,
        match_label_keys: Optional[Sequence[str]] = None,
        mismatch_label_keys: Optional[Sequence[str]] = None,
        namespace_selector: Optional[
            "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch"
        ] = None,
        namespaces: Optional[Sequence[str]] = None,
        topology_key: Optional[str] = None,
    ):
        """
        Defines a set of pods (namely those matching the labelSelector
        relative to the given namespace(s)) that this pod should be
        co-located (affinity) or not co-located (anti-affinity) with,
        where co-located is defined as running on a node whose value of
        the label with key <topologyKey> matches that of any node on which
        a pod of the set of pods is running
        :param Sequence[str] match_label_keys: MatchLabelKeys is a set of pod label keys to select which pods will
               be taken into consideration. The keys are used to lookup values from the
               incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
               to select the group of existing pods which pods will be taken into consideration
               for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
               pod labels will be ignored. The default value is empty.
               The same key is forbidden to exist in both matchLabelKeys and labelSelector.
               Also, matchLabelKeys cannot be set when labelSelector isn't set.
               This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        :param Sequence[str] mismatch_label_keys: MismatchLabelKeys is a set of pod label keys to select which pods will
               be taken into consideration. The keys are used to lookup values from the
               incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
               to select the group of existing pods which pods will be taken into consideration
               for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
               pod labels will be ignored. The default value is empty.
               The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
               Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
               This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        :param Sequence[str] namespaces: namespaces specifies a static list of namespace names that the term applies to.
               The term is applied to the union of the namespaces listed in this field
               and the ones selected by namespaceSelector.
               null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        :param str topology_key: This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
               the labelSelector in the specified namespaces, where co-located is defined as running on a node
               whose value of the label with key topologyKey matches that of any node on which any of the
               selected pods is running.
               Empty topologyKey is not allowed.
        """
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if match_label_keys is not None:
            pulumi.set(__self__, "match_label_keys", match_label_keys)
        if mismatch_label_keys is not None:
            pulumi.set(__self__, "mismatch_label_keys", mismatch_label_keys)
        if namespace_selector is not None:
            pulumi.set(__self__, "namespace_selector", namespace_selector)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)
        if topology_key is not None:
            pulumi.set(__self__, "topology_key", topology_key)

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(
        self,
    ) -> Optional[
        "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch"
    ]:
        return pulumi.get(self, "label_selector")

    @property
    @pulumi.getter(name="matchLabelKeys")
    def match_label_keys(self) -> Optional[Sequence[str]]:
        """
        MatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both matchLabelKeys and labelSelector.
        Also, matchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        return pulumi.get(self, "match_label_keys")

    @property
    @pulumi.getter(name="mismatchLabelKeys")
    def mismatch_label_keys(self) -> Optional[Sequence[str]]:
        """
        MismatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
        Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        return pulumi.get(self, "mismatch_label_keys")

    @property
    @pulumi.getter(name="namespaceSelector")
    def namespace_selector(
        self,
    ) -> Optional[
        "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch"
    ]:
        return pulumi.get(self, "namespace_selector")

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[Sequence[str]]:
        """
        namespaces specifies a static list of namespace names that the term applies to.
        The term is applied to the union of the namespaces listed in this field
        and the ones selected by namespaceSelector.
        null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        """
        return pulumi.get(self, "namespaces")

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> Optional[str]:
        """
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
        the labelSelector in the specified namespaces, where co-located is defined as running on a node
        whose value of the label with key topologyKey matches that of any node on which any of the
        selected pods is running.
        Empty topologyKey is not allowed.
        """
        return pulumi.get(self, "topology_key")


@pulumi.output_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecImagePullSecrets(dict):
    """
    LocalObjectReference contains enough information to let you locate the
    referenced object inside the same namespace.
    """

    def __init__(__self__, *, name: Optional[str] = None):
        """
        LocalObjectReference contains enough information to let you locate the
        referenced object inside the same namespace.
        :param str name: Name of the referent.
               This field is effectively required, but due to backwards compatibility is
               allowed to be empty. Instances of this type with an empty value here are
               almost certainly wrong.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecImagePullSecretsPatch(dict):
    """
    LocalObjectReference contains enough information to let you locate the
    referenced object inside the same namespace.
    """

    def __init__(__self__, *, name: Optional[str] = None):
        """
        LocalObjectReference contains enough information to let you locate the
        referenced object inside the same namespace.
        :param str name: Name of the referent.
               This field is effectively required, but due to backwards compatibility is
               allowed to be empty. Instances of this type with an empty value here are
               almost certainly wrong.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecPatch(dict):
    """
    PodSpec defines overrides for the HTTP01 challenge solver pod.
    Check ACMEChallengeSolverHTTP01IngressPodSpec to find out currently supported fields.
    All other fields will be ignored.
    """

    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imagePullSecrets":
            suggest = "image_pull_secrets"
        elif key == "nodeSelector":
            suggest = "node_selector"
        elif key == "priorityClassName":
            suggest = "priority_class_name"
        elif key == "securityContext":
            suggest = "security_context"
        elif key == "serviceAccountName":
            suggest = "service_account_name"

        if suggest:
            pulumi.log.warn(
                f"Key '{key}' not found in ChallengeSpecSolverHttp01IngressPodTemplateSpecPatch. Access the value via the '{suggest}' property getter instead."
            )

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverHttp01IngressPodTemplateSpecPatch.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default=None) -> Any:
        ChallengeSpecSolverHttp01IngressPodTemplateSpecPatch.__key_warning(key)
        return super().get(key, default)

    def __init__(
        __self__,
        *,
        affinity: Optional[
            "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPatch"
        ] = None,
        image_pull_secrets: Optional[
            Sequence[
                "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecImagePullSecretsPatch"
            ]
        ] = None,
        node_selector: Optional[Mapping[str, str]] = None,
        priority_class_name: Optional[str] = None,
        security_context: Optional[
            "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecSecurityContextPatch"
        ] = None,
        service_account_name: Optional[str] = None,
        tolerations: Optional[
            Sequence[
                "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecTolerationsPatch"
            ]
        ] = None,
    ):
        """
        PodSpec defines overrides for the HTTP01 challenge solver pod.
        Check ACMEChallengeSolverHTTP01IngressPodSpec to find out currently supported fields.
        All other fields will be ignored.
        :param Sequence['ChallengeSpecSolverHttp01IngressPodTemplateSpecImagePullSecretsPatchArgs'] image_pull_secrets: If specified, the pod's imagePullSecrets
        :param Mapping[str, str] node_selector: NodeSelector is a selector which must be true for the pod to fit on a node.
               Selector which must match a node's labels for the pod to be scheduled on that node.
               More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
        :param str priority_class_name: If specified, the pod's priorityClassName.
        :param str service_account_name: If specified, the pod's service account
        :param Sequence['ChallengeSpecSolverHttp01IngressPodTemplateSpecTolerationsPatchArgs'] tolerations: If specified, the pod's tolerations.
        """
        if affinity is not None:
            pulumi.set(__self__, "affinity", affinity)
        if image_pull_secrets is not None:
            pulumi.set(__self__, "image_pull_secrets", image_pull_secrets)
        if node_selector is not None:
            pulumi.set(__self__, "node_selector", node_selector)
        if priority_class_name is not None:
            pulumi.set(__self__, "priority_class_name", priority_class_name)
        if security_context is not None:
            pulumi.set(__self__, "security_context", security_context)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tolerations is not None:
            pulumi.set(__self__, "tolerations", tolerations)

    @property
    @pulumi.getter
    def affinity(
        self,
    ) -> Optional[
        "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPatch"
    ]:
        return pulumi.get(self, "affinity")

    @property
    @pulumi.getter(name="imagePullSecrets")
    def image_pull_secrets(
        self,
    ) -> Optional[
        Sequence[
            "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecImagePullSecretsPatch"
        ]
    ]:
        """
        If specified, the pod's imagePullSecrets
        """
        return pulumi.get(self, "image_pull_secrets")

    @property
    @pulumi.getter(name="nodeSelector")
    def node_selector(self) -> Optional[Mapping[str, str]]:
        """
        NodeSelector is a selector which must be true for the pod to fit on a node.
        Selector which must match a node's labels for the pod to be scheduled on that node.
        More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
        """
        return pulumi.get(self, "node_selector")

    @property
    @pulumi.getter(name="priorityClassName")
    def priority_class_name(self) -> Optional[str]:
        """
        If specified, the pod's priorityClassName.
        """
        return pulumi.get(self, "priority_class_name")

    @property
    @pulumi.getter(name="securityContext")
    def security_context(
        self,
    ) -> Optional[
        "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecSecurityContextPatch"
    ]:
        return pulumi.get(self, "security_context")

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[str]:
        """
        If specified, the pod's service account
        """
        return pulumi.get(self, "service_account_name")

    @property
    @pulumi.getter
    def tolerations(
        self,
    ) -> Optional[
        Sequence[
            "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecTolerationsPatch"
        ]
    ]:
        """
        If specified, the pod's tolerations.
        """
        return pulumi.get(self, "tolerations")


@pulumi.output_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecSecurityContext(dict):
    """
    If specified, the pod's security context
    """

    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fsGroup":
            suggest = "fs_group"
        elif key == "fsGroupChangePolicy":
            suggest = "fs_group_change_policy"
        elif key == "runAsGroup":
            suggest = "run_as_group"
        elif key == "runAsNonRoot":
            suggest = "run_as_non_root"
        elif key == "runAsUser":
            suggest = "run_as_user"
        elif key == "seLinuxOptions":
            suggest = "se_linux_options"
        elif key == "seccompProfile":
            suggest = "seccomp_profile"
        elif key == "supplementalGroups":
            suggest = "supplemental_groups"

        if suggest:
            pulumi.log.warn(
                f"Key '{key}' not found in ChallengeSpecSolverHttp01IngressPodTemplateSpecSecurityContext. Access the value via the '{suggest}' property getter instead."
            )

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverHttp01IngressPodTemplateSpecSecurityContext.__key_warning(
            key
        )
        return super().__getitem__(key)

    def get(self, key: str, default=None) -> Any:
        ChallengeSpecSolverHttp01IngressPodTemplateSpecSecurityContext.__key_warning(
            key
        )
        return super().get(key, default)

    def __init__(
        __self__,
        *,
        fs_group: Optional[int] = None,
        fs_group_change_policy: Optional[str] = None,
        run_as_group: Optional[int] = None,
        run_as_non_root: Optional[bool] = None,
        run_as_user: Optional[int] = None,
        se_linux_options: Optional[
            "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecSecurityContextSeLinuxOptions"
        ] = None,
        seccomp_profile: Optional[
            "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecSecurityContextSeccompProfile"
        ] = None,
        supplemental_groups: Optional[Sequence[int]] = None,
        sysctls: Optional[
            Sequence[
                "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecSecurityContextSysctls"
            ]
        ] = None,
    ):
        """
        If specified, the pod's security context
        :param int fs_group: A special supplemental group that applies to all containers in a pod.
               Some volume types allow the Kubelet to change the ownership of that volume
               to be owned by the pod:

               1. The owning GID will be the FSGroup
               2. The setgid bit is set (new files created in the volume will be owned by FSGroup)
               3. The permission bits are OR'd with rw-rw----

               If unset, the Kubelet will not modify the ownership and permissions of any volume.
               Note that this field cannot be set when spec.os.name is windows.
        :param str fs_group_change_policy: fsGroupChangePolicy defines behavior of changing ownership and permission of the volume
               before being exposed inside Pod. This field will only apply to
               volume types which support fsGroup based ownership(and permissions).
               It will have no effect on ephemeral volume types such as: secret, configmaps
               and emptydir.
               Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used.
               Note that this field cannot be set when spec.os.name is windows.
        :param int run_as_group: The GID to run the entrypoint of the container process.
               Uses runtime default if unset.
               May also be set in SecurityContext.  If set in both SecurityContext and
               PodSecurityContext, the value specified in SecurityContext takes precedence
               for that container.
               Note that this field cannot be set when spec.os.name is windows.
        :param bool run_as_non_root: Indicates that the container must run as a non-root user.
               If true, the Kubelet will validate the image at runtime to ensure that it
               does not run as UID 0 (root) and fail to start the container if it does.
               If unset or false, no such validation will be performed.
               May also be set in SecurityContext.  If set in both SecurityContext and
               PodSecurityContext, the value specified in SecurityContext takes precedence.
        :param int run_as_user: The UID to run the entrypoint of the container process.
               Defaults to user specified in image metadata if unspecified.
               May also be set in SecurityContext.  If set in both SecurityContext and
               PodSecurityContext, the value specified in SecurityContext takes precedence
               for that container.
               Note that this field cannot be set when spec.os.name is windows.
        :param Sequence[int] supplemental_groups: A list of groups applied to the first process run in each container, in addition
               to the container's primary GID, the fsGroup (if specified), and group memberships
               defined in the container image for the uid of the container process. If unspecified,
               no additional groups are added to any container. Note that group memberships
               defined in the container image for the uid of the container process are still effective,
               even if they are not included in this list.
               Note that this field cannot be set when spec.os.name is windows.
        :param Sequence['ChallengeSpecSolverHttp01IngressPodTemplateSpecSecurityContextSysctlsArgs'] sysctls: Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported
               sysctls (by the container runtime) might fail to launch.
               Note that this field cannot be set when spec.os.name is windows.
        """
        if fs_group is not None:
            pulumi.set(__self__, "fs_group", fs_group)
        if fs_group_change_policy is not None:
            pulumi.set(__self__, "fs_group_change_policy", fs_group_change_policy)
        if run_as_group is not None:
            pulumi.set(__self__, "run_as_group", run_as_group)
        if run_as_non_root is not None:
            pulumi.set(__self__, "run_as_non_root", run_as_non_root)
        if run_as_user is not None:
            pulumi.set(__self__, "run_as_user", run_as_user)
        if se_linux_options is not None:
            pulumi.set(__self__, "se_linux_options", se_linux_options)
        if seccomp_profile is not None:
            pulumi.set(__self__, "seccomp_profile", seccomp_profile)
        if supplemental_groups is not None:
            pulumi.set(__self__, "supplemental_groups", supplemental_groups)
        if sysctls is not None:
            pulumi.set(__self__, "sysctls", sysctls)

    @property
    @pulumi.getter(name="fsGroup")
    def fs_group(self) -> Optional[int]:
        """
        A special supplemental group that applies to all containers in a pod.
        Some volume types allow the Kubelet to change the ownership of that volume
        to be owned by the pod:

        1. The owning GID will be the FSGroup
        2. The setgid bit is set (new files created in the volume will be owned by FSGroup)
        3. The permission bits are OR'd with rw-rw----

        If unset, the Kubelet will not modify the ownership and permissions of any volume.
        Note that this field cannot be set when spec.os.name is windows.
        """
        return pulumi.get(self, "fs_group")

    @property
    @pulumi.getter(name="fsGroupChangePolicy")
    def fs_group_change_policy(self) -> Optional[str]:
        """
        fsGroupChangePolicy defines behavior of changing ownership and permission of the volume
        before being exposed inside Pod. This field will only apply to
        volume types which support fsGroup based ownership(and permissions).
        It will have no effect on ephemeral volume types such as: secret, configmaps
        and emptydir.
        Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used.
        Note that this field cannot be set when spec.os.name is windows.
        """
        return pulumi.get(self, "fs_group_change_policy")

    @property
    @pulumi.getter(name="runAsGroup")
    def run_as_group(self) -> Optional[int]:
        """
        The GID to run the entrypoint of the container process.
        Uses runtime default if unset.
        May also be set in SecurityContext.  If set in both SecurityContext and
        PodSecurityContext, the value specified in SecurityContext takes precedence
        for that container.
        Note that this field cannot be set when spec.os.name is windows.
        """
        return pulumi.get(self, "run_as_group")

    @property
    @pulumi.getter(name="runAsNonRoot")
    def run_as_non_root(self) -> Optional[bool]:
        """
        Indicates that the container must run as a non-root user.
        If true, the Kubelet will validate the image at runtime to ensure that it
        does not run as UID 0 (root) and fail to start the container if it does.
        If unset or false, no such validation will be performed.
        May also be set in SecurityContext.  If set in both SecurityContext and
        PodSecurityContext, the value specified in SecurityContext takes precedence.
        """
        return pulumi.get(self, "run_as_non_root")

    @property
    @pulumi.getter(name="runAsUser")
    def run_as_user(self) -> Optional[int]:
        """
        The UID to run the entrypoint of the container process.
        Defaults to user specified in image metadata if unspecified.
        May also be set in SecurityContext.  If set in both SecurityContext and
        PodSecurityContext, the value specified in SecurityContext takes precedence
        for that container.
        Note that this field cannot be set when spec.os.name is windows.
        """
        return pulumi.get(self, "run_as_user")

    @property
    @pulumi.getter(name="seLinuxOptions")
    def se_linux_options(
        self,
    ) -> Optional[
        "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecSecurityContextSeLinuxOptions"
    ]:
        return pulumi.get(self, "se_linux_options")

    @property
    @pulumi.getter(name="seccompProfile")
    def seccomp_profile(
        self,
    ) -> Optional[
        "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecSecurityContextSeccompProfile"
    ]:
        return pulumi.get(self, "seccomp_profile")

    @property
    @pulumi.getter(name="supplementalGroups")
    def supplemental_groups(self) -> Optional[Sequence[int]]:
        """
        A list of groups applied to the first process run in each container, in addition
        to the container's primary GID, the fsGroup (if specified), and group memberships
        defined in the container image for the uid of the container process. If unspecified,
        no additional groups are added to any container. Note that group memberships
        defined in the container image for the uid of the container process are still effective,
        even if they are not included in this list.
        Note that this field cannot be set when spec.os.name is windows.
        """
        return pulumi.get(self, "supplemental_groups")

    @property
    @pulumi.getter
    def sysctls(
        self,
    ) -> Optional[
        Sequence[
            "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecSecurityContextSysctls"
        ]
    ]:
        """
        Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported
        sysctls (by the container runtime) might fail to launch.
        Note that this field cannot be set when spec.os.name is windows.
        """
        return pulumi.get(self, "sysctls")


@pulumi.output_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecSecurityContextPatch(dict):
    """
    If specified, the pod's security context
    """

    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fsGroup":
            suggest = "fs_group"
        elif key == "fsGroupChangePolicy":
            suggest = "fs_group_change_policy"
        elif key == "runAsGroup":
            suggest = "run_as_group"
        elif key == "runAsNonRoot":
            suggest = "run_as_non_root"
        elif key == "runAsUser":
            suggest = "run_as_user"
        elif key == "seLinuxOptions":
            suggest = "se_linux_options"
        elif key == "seccompProfile":
            suggest = "seccomp_profile"
        elif key == "supplementalGroups":
            suggest = "supplemental_groups"

        if suggest:
            pulumi.log.warn(
                f"Key '{key}' not found in ChallengeSpecSolverHttp01IngressPodTemplateSpecSecurityContextPatch. Access the value via the '{suggest}' property getter instead."
            )

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverHttp01IngressPodTemplateSpecSecurityContextPatch.__key_warning(
            key
        )
        return super().__getitem__(key)

    def get(self, key: str, default=None) -> Any:
        ChallengeSpecSolverHttp01IngressPodTemplateSpecSecurityContextPatch.__key_warning(
            key
        )
        return super().get(key, default)

    def __init__(
        __self__,
        *,
        fs_group: Optional[int] = None,
        fs_group_change_policy: Optional[str] = None,
        run_as_group: Optional[int] = None,
        run_as_non_root: Optional[bool] = None,
        run_as_user: Optional[int] = None,
        se_linux_options: Optional[
            "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecSecurityContextSeLinuxOptionsPatch"
        ] = None,
        seccomp_profile: Optional[
            "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecSecurityContextSeccompProfilePatch"
        ] = None,
        supplemental_groups: Optional[Sequence[int]] = None,
        sysctls: Optional[
            Sequence[
                "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecSecurityContextSysctlsPatch"
            ]
        ] = None,
    ):
        """
        If specified, the pod's security context
        :param int fs_group: A special supplemental group that applies to all containers in a pod.
               Some volume types allow the Kubelet to change the ownership of that volume
               to be owned by the pod:

               1. The owning GID will be the FSGroup
               2. The setgid bit is set (new files created in the volume will be owned by FSGroup)
               3. The permission bits are OR'd with rw-rw----

               If unset, the Kubelet will not modify the ownership and permissions of any volume.
               Note that this field cannot be set when spec.os.name is windows.
        :param str fs_group_change_policy: fsGroupChangePolicy defines behavior of changing ownership and permission of the volume
               before being exposed inside Pod. This field will only apply to
               volume types which support fsGroup based ownership(and permissions).
               It will have no effect on ephemeral volume types such as: secret, configmaps
               and emptydir.
               Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used.
               Note that this field cannot be set when spec.os.name is windows.
        :param int run_as_group: The GID to run the entrypoint of the container process.
               Uses runtime default if unset.
               May also be set in SecurityContext.  If set in both SecurityContext and
               PodSecurityContext, the value specified in SecurityContext takes precedence
               for that container.
               Note that this field cannot be set when spec.os.name is windows.
        :param bool run_as_non_root: Indicates that the container must run as a non-root user.
               If true, the Kubelet will validate the image at runtime to ensure that it
               does not run as UID 0 (root) and fail to start the container if it does.
               If unset or false, no such validation will be performed.
               May also be set in SecurityContext.  If set in both SecurityContext and
               PodSecurityContext, the value specified in SecurityContext takes precedence.
        :param int run_as_user: The UID to run the entrypoint of the container process.
               Defaults to user specified in image metadata if unspecified.
               May also be set in SecurityContext.  If set in both SecurityContext and
               PodSecurityContext, the value specified in SecurityContext takes precedence
               for that container.
               Note that this field cannot be set when spec.os.name is windows.
        :param Sequence[int] supplemental_groups: A list of groups applied to the first process run in each container, in addition
               to the container's primary GID, the fsGroup (if specified), and group memberships
               defined in the container image for the uid of the container process. If unspecified,
               no additional groups are added to any container. Note that group memberships
               defined in the container image for the uid of the container process are still effective,
               even if they are not included in this list.
               Note that this field cannot be set when spec.os.name is windows.
        :param Sequence['ChallengeSpecSolverHttp01IngressPodTemplateSpecSecurityContextSysctlsPatchArgs'] sysctls: Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported
               sysctls (by the container runtime) might fail to launch.
               Note that this field cannot be set when spec.os.name is windows.
        """
        if fs_group is not None:
            pulumi.set(__self__, "fs_group", fs_group)
        if fs_group_change_policy is not None:
            pulumi.set(__self__, "fs_group_change_policy", fs_group_change_policy)
        if run_as_group is not None:
            pulumi.set(__self__, "run_as_group", run_as_group)
        if run_as_non_root is not None:
            pulumi.set(__self__, "run_as_non_root", run_as_non_root)
        if run_as_user is not None:
            pulumi.set(__self__, "run_as_user", run_as_user)
        if se_linux_options is not None:
            pulumi.set(__self__, "se_linux_options", se_linux_options)
        if seccomp_profile is not None:
            pulumi.set(__self__, "seccomp_profile", seccomp_profile)
        if supplemental_groups is not None:
            pulumi.set(__self__, "supplemental_groups", supplemental_groups)
        if sysctls is not None:
            pulumi.set(__self__, "sysctls", sysctls)

    @property
    @pulumi.getter(name="fsGroup")
    def fs_group(self) -> Optional[int]:
        """
        A special supplemental group that applies to all containers in a pod.
        Some volume types allow the Kubelet to change the ownership of that volume
        to be owned by the pod:

        1. The owning GID will be the FSGroup
        2. The setgid bit is set (new files created in the volume will be owned by FSGroup)
        3. The permission bits are OR'd with rw-rw----

        If unset, the Kubelet will not modify the ownership and permissions of any volume.
        Note that this field cannot be set when spec.os.name is windows.
        """
        return pulumi.get(self, "fs_group")

    @property
    @pulumi.getter(name="fsGroupChangePolicy")
    def fs_group_change_policy(self) -> Optional[str]:
        """
        fsGroupChangePolicy defines behavior of changing ownership and permission of the volume
        before being exposed inside Pod. This field will only apply to
        volume types which support fsGroup based ownership(and permissions).
        It will have no effect on ephemeral volume types such as: secret, configmaps
        and emptydir.
        Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used.
        Note that this field cannot be set when spec.os.name is windows.
        """
        return pulumi.get(self, "fs_group_change_policy")

    @property
    @pulumi.getter(name="runAsGroup")
    def run_as_group(self) -> Optional[int]:
        """
        The GID to run the entrypoint of the container process.
        Uses runtime default if unset.
        May also be set in SecurityContext.  If set in both SecurityContext and
        PodSecurityContext, the value specified in SecurityContext takes precedence
        for that container.
        Note that this field cannot be set when spec.os.name is windows.
        """
        return pulumi.get(self, "run_as_group")

    @property
    @pulumi.getter(name="runAsNonRoot")
    def run_as_non_root(self) -> Optional[bool]:
        """
        Indicates that the container must run as a non-root user.
        If true, the Kubelet will validate the image at runtime to ensure that it
        does not run as UID 0 (root) and fail to start the container if it does.
        If unset or false, no such validation will be performed.
        May also be set in SecurityContext.  If set in both SecurityContext and
        PodSecurityContext, the value specified in SecurityContext takes precedence.
        """
        return pulumi.get(self, "run_as_non_root")

    @property
    @pulumi.getter(name="runAsUser")
    def run_as_user(self) -> Optional[int]:
        """
        The UID to run the entrypoint of the container process.
        Defaults to user specified in image metadata if unspecified.
        May also be set in SecurityContext.  If set in both SecurityContext and
        PodSecurityContext, the value specified in SecurityContext takes precedence
        for that container.
        Note that this field cannot be set when spec.os.name is windows.
        """
        return pulumi.get(self, "run_as_user")

    @property
    @pulumi.getter(name="seLinuxOptions")
    def se_linux_options(
        self,
    ) -> Optional[
        "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecSecurityContextSeLinuxOptionsPatch"
    ]:
        return pulumi.get(self, "se_linux_options")

    @property
    @pulumi.getter(name="seccompProfile")
    def seccomp_profile(
        self,
    ) -> Optional[
        "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecSecurityContextSeccompProfilePatch"
    ]:
        return pulumi.get(self, "seccomp_profile")

    @property
    @pulumi.getter(name="supplementalGroups")
    def supplemental_groups(self) -> Optional[Sequence[int]]:
        """
        A list of groups applied to the first process run in each container, in addition
        to the container's primary GID, the fsGroup (if specified), and group memberships
        defined in the container image for the uid of the container process. If unspecified,
        no additional groups are added to any container. Note that group memberships
        defined in the container image for the uid of the container process are still effective,
        even if they are not included in this list.
        Note that this field cannot be set when spec.os.name is windows.
        """
        return pulumi.get(self, "supplemental_groups")

    @property
    @pulumi.getter
    def sysctls(
        self,
    ) -> Optional[
        Sequence[
            "outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecSecurityContextSysctlsPatch"
        ]
    ]:
        """
        Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported
        sysctls (by the container runtime) might fail to launch.
        Note that this field cannot be set when spec.os.name is windows.
        """
        return pulumi.get(self, "sysctls")


@pulumi.output_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecSecurityContextSeLinuxOptions(
    dict
):
    """
    The SELinux context to be applied to all containers.
    If unspecified, the container runtime will allocate a random SELinux context for each
    container.  May also be set in SecurityContext.  If set in
    both SecurityContext and PodSecurityContext, the value specified in SecurityContext
    takes precedence for that container.
    Note that this field cannot be set when spec.os.name is windows.
    """

    def __init__(
        __self__,
        *,
        level: Optional[str] = None,
        role: Optional[str] = None,
        type: Optional[str] = None,
        user: Optional[str] = None,
    ):
        """
        The SELinux context to be applied to all containers.
        If unspecified, the container runtime will allocate a random SELinux context for each
        container.  May also be set in SecurityContext.  If set in
        both SecurityContext and PodSecurityContext, the value specified in SecurityContext
        takes precedence for that container.
        Note that this field cannot be set when spec.os.name is windows.
        :param str level: Level is SELinux level label that applies to the container.
        :param str role: Role is a SELinux role label that applies to the container.
        :param str type: Type is a SELinux type label that applies to the container.
        :param str user: User is a SELinux user label that applies to the container.
        """
        if level is not None:
            pulumi.set(__self__, "level", level)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        """
        Level is SELinux level label that applies to the container.
        """
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def role(self) -> Optional[str]:
        """
        Role is a SELinux role label that applies to the container.
        """
        return pulumi.get(self, "role")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Type is a SELinux type label that applies to the container.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def user(self) -> Optional[str]:
        """
        User is a SELinux user label that applies to the container.
        """
        return pulumi.get(self, "user")


@pulumi.output_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecSecurityContextSeLinuxOptionsPatch(
    dict
):
    """
    The SELinux context to be applied to all containers.
    If unspecified, the container runtime will allocate a random SELinux context for each
    container.  May also be set in SecurityContext.  If set in
    both SecurityContext and PodSecurityContext, the value specified in SecurityContext
    takes precedence for that container.
    Note that this field cannot be set when spec.os.name is windows.
    """

    def __init__(
        __self__,
        *,
        level: Optional[str] = None,
        role: Optional[str] = None,
        type: Optional[str] = None,
        user: Optional[str] = None,
    ):
        """
        The SELinux context to be applied to all containers.
        If unspecified, the container runtime will allocate a random SELinux context for each
        container.  May also be set in SecurityContext.  If set in
        both SecurityContext and PodSecurityContext, the value specified in SecurityContext
        takes precedence for that container.
        Note that this field cannot be set when spec.os.name is windows.
        :param str level: Level is SELinux level label that applies to the container.
        :param str role: Role is a SELinux role label that applies to the container.
        :param str type: Type is a SELinux type label that applies to the container.
        :param str user: User is a SELinux user label that applies to the container.
        """
        if level is not None:
            pulumi.set(__self__, "level", level)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        """
        Level is SELinux level label that applies to the container.
        """
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def role(self) -> Optional[str]:
        """
        Role is a SELinux role label that applies to the container.
        """
        return pulumi.get(self, "role")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Type is a SELinux type label that applies to the container.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def user(self) -> Optional[str]:
        """
        User is a SELinux user label that applies to the container.
        """
        return pulumi.get(self, "user")


@pulumi.output_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecSecurityContextSeccompProfile(
    dict
):
    """
    The seccomp options to use by the containers in this pod.
    Note that this field cannot be set when spec.os.name is windows.
    """

    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "localhostProfile":
            suggest = "localhost_profile"

        if suggest:
            pulumi.log.warn(
                f"Key '{key}' not found in ChallengeSpecSolverHttp01IngressPodTemplateSpecSecurityContextSeccompProfile. Access the value via the '{suggest}' property getter instead."
            )

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverHttp01IngressPodTemplateSpecSecurityContextSeccompProfile.__key_warning(
            key
        )
        return super().__getitem__(key)

    def get(self, key: str, default=None) -> Any:
        ChallengeSpecSolverHttp01IngressPodTemplateSpecSecurityContextSeccompProfile.__key_warning(
            key
        )
        return super().get(key, default)

    def __init__(
        __self__, *, localhost_profile: Optional[str] = None, type: Optional[str] = None
    ):
        """
        The seccomp options to use by the containers in this pod.
        Note that this field cannot be set when spec.os.name is windows.
        :param str localhost_profile: localhostProfile indicates a profile defined in a file on the node should be used.
               The profile must be preconfigured on the node to work.
               Must be a descending path, relative to the kubelet's configured seccomp profile location.
               Must be set if type is "Localhost". Must NOT be set for any other type.
        :param str type: type indicates which kind of seccomp profile will be applied.
               Valid options are:

               Localhost - a profile defined in a file on the node should be used.
               RuntimeDefault - the container runtime default profile should be used.
               Unconfined - no profile should be applied.
        """
        if localhost_profile is not None:
            pulumi.set(__self__, "localhost_profile", localhost_profile)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="localhostProfile")
    def localhost_profile(self) -> Optional[str]:
        """
        localhostProfile indicates a profile defined in a file on the node should be used.
        The profile must be preconfigured on the node to work.
        Must be a descending path, relative to the kubelet's configured seccomp profile location.
        Must be set if type is "Localhost". Must NOT be set for any other type.
        """
        return pulumi.get(self, "localhost_profile")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        type indicates which kind of seccomp profile will be applied.
        Valid options are:

        Localhost - a profile defined in a file on the node should be used.
        RuntimeDefault - the container runtime default profile should be used.
        Unconfined - no profile should be applied.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecSecurityContextSeccompProfilePatch(
    dict
):
    """
    The seccomp options to use by the containers in this pod.
    Note that this field cannot be set when spec.os.name is windows.
    """

    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "localhostProfile":
            suggest = "localhost_profile"

        if suggest:
            pulumi.log.warn(
                f"Key '{key}' not found in ChallengeSpecSolverHttp01IngressPodTemplateSpecSecurityContextSeccompProfilePatch. Access the value via the '{suggest}' property getter instead."
            )

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverHttp01IngressPodTemplateSpecSecurityContextSeccompProfilePatch.__key_warning(
            key
        )
        return super().__getitem__(key)

    def get(self, key: str, default=None) -> Any:
        ChallengeSpecSolverHttp01IngressPodTemplateSpecSecurityContextSeccompProfilePatch.__key_warning(
            key
        )
        return super().get(key, default)

    def __init__(
        __self__, *, localhost_profile: Optional[str] = None, type: Optional[str] = None
    ):
        """
        The seccomp options to use by the containers in this pod.
        Note that this field cannot be set when spec.os.name is windows.
        :param str localhost_profile: localhostProfile indicates a profile defined in a file on the node should be used.
               The profile must be preconfigured on the node to work.
               Must be a descending path, relative to the kubelet's configured seccomp profile location.
               Must be set if type is "Localhost". Must NOT be set for any other type.
        :param str type: type indicates which kind of seccomp profile will be applied.
               Valid options are:

               Localhost - a profile defined in a file on the node should be used.
               RuntimeDefault - the container runtime default profile should be used.
               Unconfined - no profile should be applied.
        """
        if localhost_profile is not None:
            pulumi.set(__self__, "localhost_profile", localhost_profile)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="localhostProfile")
    def localhost_profile(self) -> Optional[str]:
        """
        localhostProfile indicates a profile defined in a file on the node should be used.
        The profile must be preconfigured on the node to work.
        Must be a descending path, relative to the kubelet's configured seccomp profile location.
        Must be set if type is "Localhost". Must NOT be set for any other type.
        """
        return pulumi.get(self, "localhost_profile")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        type indicates which kind of seccomp profile will be applied.
        Valid options are:

        Localhost - a profile defined in a file on the node should be used.
        RuntimeDefault - the container runtime default profile should be used.
        Unconfined - no profile should be applied.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecSecurityContextSysctls(dict):
    """
    Sysctl defines a kernel parameter to be set
    """

    def __init__(__self__, *, name: Optional[str] = None, value: Optional[str] = None):
        """
        Sysctl defines a kernel parameter to be set
        :param str name: Name of a property to set
        :param str value: Value of a property to set
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of a property to set
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of a property to set
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecSecurityContextSysctlsPatch(dict):
    """
    Sysctl defines a kernel parameter to be set
    """

    def __init__(__self__, *, name: Optional[str] = None, value: Optional[str] = None):
        """
        Sysctl defines a kernel parameter to be set
        :param str name: Name of a property to set
        :param str value: Value of a property to set
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of a property to set
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of a property to set
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecTolerations(dict):
    """
    The pod this Toleration is attached to tolerates any taint that matches
    the triple <key,value,effect> using the matching operator <operator>.
    """

    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "tolerationSeconds":
            suggest = "toleration_seconds"

        if suggest:
            pulumi.log.warn(
                f"Key '{key}' not found in ChallengeSpecSolverHttp01IngressPodTemplateSpecTolerations. Access the value via the '{suggest}' property getter instead."
            )

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverHttp01IngressPodTemplateSpecTolerations.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default=None) -> Any:
        ChallengeSpecSolverHttp01IngressPodTemplateSpecTolerations.__key_warning(key)
        return super().get(key, default)

    def __init__(
        __self__,
        *,
        effect: Optional[str] = None,
        key: Optional[str] = None,
        operator: Optional[str] = None,
        toleration_seconds: Optional[int] = None,
        value: Optional[str] = None,
    ):
        """
        The pod this Toleration is attached to tolerates any taint that matches
        the triple <key,value,effect> using the matching operator <operator>.
        :param str effect: Effect indicates the taint effect to match. Empty means match all taint effects.
               When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
        :param str key: Key is the taint key that the toleration applies to. Empty means match all taint keys.
               If the key is empty, operator must be Exists; this combination means to match all values and all keys.
        :param str operator: Operator represents a key's relationship to the value.
               Valid operators are Exists and Equal. Defaults to Equal.
               Exists is equivalent to wildcard for value, so that a pod can
               tolerate all taints of a particular category.
        :param int toleration_seconds: TolerationSeconds represents the period of time the toleration (which must be
               of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,
               it is not set, which means tolerate the taint forever (do not evict). Zero and
               negative values will be treated as 0 (evict immediately) by the system.
        :param str value: Value is the taint value the toleration matches to.
               If the operator is Exists, the value should be empty, otherwise just a regular string.
        """
        if effect is not None:
            pulumi.set(__self__, "effect", effect)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if toleration_seconds is not None:
            pulumi.set(__self__, "toleration_seconds", toleration_seconds)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def effect(self) -> Optional[str]:
        """
        Effect indicates the taint effect to match. Empty means match all taint effects.
        When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
        """
        return pulumi.get(self, "effect")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        Key is the taint key that the toleration applies to. Empty means match all taint keys.
        If the key is empty, operator must be Exists; this combination means to match all values and all keys.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> Optional[str]:
        """
        Operator represents a key's relationship to the value.
        Valid operators are Exists and Equal. Defaults to Equal.
        Exists is equivalent to wildcard for value, so that a pod can
        tolerate all taints of a particular category.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter(name="tolerationSeconds")
    def toleration_seconds(self) -> Optional[int]:
        """
        TolerationSeconds represents the period of time the toleration (which must be
        of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,
        it is not set, which means tolerate the taint forever (do not evict). Zero and
        negative values will be treated as 0 (evict immediately) by the system.
        """
        return pulumi.get(self, "toleration_seconds")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value is the taint value the toleration matches to.
        If the operator is Exists, the value should be empty, otherwise just a regular string.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecTolerationsPatch(dict):
    """
    The pod this Toleration is attached to tolerates any taint that matches
    the triple <key,value,effect> using the matching operator <operator>.
    """

    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "tolerationSeconds":
            suggest = "toleration_seconds"

        if suggest:
            pulumi.log.warn(
                f"Key '{key}' not found in ChallengeSpecSolverHttp01IngressPodTemplateSpecTolerationsPatch. Access the value via the '{suggest}' property getter instead."
            )

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverHttp01IngressPodTemplateSpecTolerationsPatch.__key_warning(
            key
        )
        return super().__getitem__(key)

    def get(self, key: str, default=None) -> Any:
        ChallengeSpecSolverHttp01IngressPodTemplateSpecTolerationsPatch.__key_warning(
            key
        )
        return super().get(key, default)

    def __init__(
        __self__,
        *,
        effect: Optional[str] = None,
        key: Optional[str] = None,
        operator: Optional[str] = None,
        toleration_seconds: Optional[int] = None,
        value: Optional[str] = None,
    ):
        """
        The pod this Toleration is attached to tolerates any taint that matches
        the triple <key,value,effect> using the matching operator <operator>.
        :param str effect: Effect indicates the taint effect to match. Empty means match all taint effects.
               When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
        :param str key: Key is the taint key that the toleration applies to. Empty means match all taint keys.
               If the key is empty, operator must be Exists; this combination means to match all values and all keys.
        :param str operator: Operator represents a key's relationship to the value.
               Valid operators are Exists and Equal. Defaults to Equal.
               Exists is equivalent to wildcard for value, so that a pod can
               tolerate all taints of a particular category.
        :param int toleration_seconds: TolerationSeconds represents the period of time the toleration (which must be
               of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,
               it is not set, which means tolerate the taint forever (do not evict). Zero and
               negative values will be treated as 0 (evict immediately) by the system.
        :param str value: Value is the taint value the toleration matches to.
               If the operator is Exists, the value should be empty, otherwise just a regular string.
        """
        if effect is not None:
            pulumi.set(__self__, "effect", effect)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if toleration_seconds is not None:
            pulumi.set(__self__, "toleration_seconds", toleration_seconds)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def effect(self) -> Optional[str]:
        """
        Effect indicates the taint effect to match. Empty means match all taint effects.
        When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
        """
        return pulumi.get(self, "effect")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        Key is the taint key that the toleration applies to. Empty means match all taint keys.
        If the key is empty, operator must be Exists; this combination means to match all values and all keys.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> Optional[str]:
        """
        Operator represents a key's relationship to the value.
        Valid operators are Exists and Equal. Defaults to Equal.
        Exists is equivalent to wildcard for value, so that a pod can
        tolerate all taints of a particular category.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter(name="tolerationSeconds")
    def toleration_seconds(self) -> Optional[int]:
        """
        TolerationSeconds represents the period of time the toleration (which must be
        of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,
        it is not set, which means tolerate the taint forever (do not evict). Zero and
        negative values will be treated as 0 (evict immediately) by the system.
        """
        return pulumi.get(self, "toleration_seconds")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value is the taint value the toleration matches to.
        If the operator is Exists, the value should be empty, otherwise just a regular string.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ChallengeSpecSolverHttp01Patch(dict):
    """
    Configures cert-manager to attempt to complete authorizations by
    performing the HTTP01 challenge flow.
    It is not possible to obtain certificates for wildcard domain names
    (e.g. `*.example.com`) using the HTTP01 challenge mechanism.
    """

    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "gatewayHTTPRoute":
            suggest = "gateway_http_route"

        if suggest:
            pulumi.log.warn(
                f"Key '{key}' not found in ChallengeSpecSolverHttp01Patch. Access the value via the '{suggest}' property getter instead."
            )

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverHttp01Patch.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default=None) -> Any:
        ChallengeSpecSolverHttp01Patch.__key_warning(key)
        return super().get(key, default)

    def __init__(
        __self__,
        *,
        gateway_http_route: Optional[
            "outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePatch"
        ] = None,
        ingress: Optional["outputs.ChallengeSpecSolverHttp01IngressPatch"] = None,
    ):
        """
        Configures cert-manager to attempt to complete authorizations by
        performing the HTTP01 challenge flow.
        It is not possible to obtain certificates for wildcard domain names
        (e.g. `*.example.com`) using the HTTP01 challenge mechanism.
        """
        if gateway_http_route is not None:
            pulumi.set(__self__, "gateway_http_route", gateway_http_route)
        if ingress is not None:
            pulumi.set(__self__, "ingress", ingress)

    @property
    @pulumi.getter(name="gatewayHTTPRoute")
    def gateway_http_route(
        self,
    ) -> Optional["outputs.ChallengeSpecSolverHttp01GatewayHTTPRoutePatch"]:
        return pulumi.get(self, "gateway_http_route")

    @property
    @pulumi.getter
    def ingress(self) -> Optional["outputs.ChallengeSpecSolverHttp01IngressPatch"]:
        return pulumi.get(self, "ingress")


@pulumi.output_type
class ChallengeSpecSolverPatch(dict):
    """
    Contains the domain solving configuration that should be used to
    solve this challenge resource.
    """

    def __init__(
        __self__,
        *,
        dns01: Optional["outputs.ChallengeSpecSolverDns01Patch"] = None,
        http01: Optional["outputs.ChallengeSpecSolverHttp01Patch"] = None,
        selector: Optional["outputs.ChallengeSpecSolverSelectorPatch"] = None,
    ):
        """
        Contains the domain solving configuration that should be used to
        solve this challenge resource.
        """
        if dns01 is not None:
            pulumi.set(__self__, "dns01", dns01)
        if http01 is not None:
            pulumi.set(__self__, "http01", http01)
        if selector is not None:
            pulumi.set(__self__, "selector", selector)

    @property
    @pulumi.getter
    def dns01(self) -> Optional["outputs.ChallengeSpecSolverDns01Patch"]:
        return pulumi.get(self, "dns01")

    @property
    @pulumi.getter
    def http01(self) -> Optional["outputs.ChallengeSpecSolverHttp01Patch"]:
        return pulumi.get(self, "http01")

    @property
    @pulumi.getter
    def selector(self) -> Optional["outputs.ChallengeSpecSolverSelectorPatch"]:
        return pulumi.get(self, "selector")


@pulumi.output_type
class ChallengeSpecSolverSelector(dict):
    """
    Selector selects a set of DNSNames on the Certificate resource that
    should be solved using this challenge solver.
    If not specified, the solver will be treated as the 'default' solver
    with the lowest priority, i.e. if any other solver has a more specific
    match, it will be used instead.
    """

    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dnsNames":
            suggest = "dns_names"
        elif key == "dnsZones":
            suggest = "dns_zones"
        elif key == "matchLabels":
            suggest = "match_labels"

        if suggest:
            pulumi.log.warn(
                f"Key '{key}' not found in ChallengeSpecSolverSelector. Access the value via the '{suggest}' property getter instead."
            )

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverSelector.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default=None) -> Any:
        ChallengeSpecSolverSelector.__key_warning(key)
        return super().get(key, default)

    def __init__(
        __self__,
        *,
        dns_names: Optional[Sequence[str]] = None,
        dns_zones: Optional[Sequence[str]] = None,
        match_labels: Optional[Mapping[str, str]] = None,
    ):
        """
        Selector selects a set of DNSNames on the Certificate resource that
        should be solved using this challenge solver.
        If not specified, the solver will be treated as the 'default' solver
        with the lowest priority, i.e. if any other solver has a more specific
        match, it will be used instead.
        :param Sequence[str] dns_names: List of DNSNames that this solver will be used to solve.
               If specified and a match is found, a dnsNames selector will take
               precedence over a dnsZones selector.
               If multiple solvers match with the same dnsNames value, the solver
               with the most matching labels in matchLabels will be selected.
               If neither has more matches, the solver defined earlier in the list
               will be selected.
        :param Sequence[str] dns_zones: List of DNSZones that this solver will be used to solve.
               The most specific DNS zone match specified here will take precedence
               over other DNS zone matches, so a solver specifying sys.example.com
               will be selected over one specifying example.com for the domain
               www.sys.example.com.
               If multiple solvers match with the same dnsZones value, the solver
               with the most matching labels in matchLabels will be selected.
               If neither has more matches, the solver defined earlier in the list
               will be selected.
        :param Mapping[str, str] match_labels: A label selector that is used to refine the set of certificate's that
               this challenge solver will apply to.
        """
        if dns_names is not None:
            pulumi.set(__self__, "dns_names", dns_names)
        if dns_zones is not None:
            pulumi.set(__self__, "dns_zones", dns_zones)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="dnsNames")
    def dns_names(self) -> Optional[Sequence[str]]:
        """
        List of DNSNames that this solver will be used to solve.
        If specified and a match is found, a dnsNames selector will take
        precedence over a dnsZones selector.
        If multiple solvers match with the same dnsNames value, the solver
        with the most matching labels in matchLabels will be selected.
        If neither has more matches, the solver defined earlier in the list
        will be selected.
        """
        return pulumi.get(self, "dns_names")

    @property
    @pulumi.getter(name="dnsZones")
    def dns_zones(self) -> Optional[Sequence[str]]:
        """
        List of DNSZones that this solver will be used to solve.
        The most specific DNS zone match specified here will take precedence
        over other DNS zone matches, so a solver specifying sys.example.com
        will be selected over one specifying example.com for the domain
        www.sys.example.com.
        If multiple solvers match with the same dnsZones value, the solver
        with the most matching labels in matchLabels will be selected.
        If neither has more matches, the solver defined earlier in the list
        will be selected.
        """
        return pulumi.get(self, "dns_zones")

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, str]]:
        """
        A label selector that is used to refine the set of certificate's that
        this challenge solver will apply to.
        """
        return pulumi.get(self, "match_labels")


@pulumi.output_type
class ChallengeSpecSolverSelectorPatch(dict):
    """
    Selector selects a set of DNSNames on the Certificate resource that
    should be solved using this challenge solver.
    If not specified, the solver will be treated as the 'default' solver
    with the lowest priority, i.e. if any other solver has a more specific
    match, it will be used instead.
    """

    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dnsNames":
            suggest = "dns_names"
        elif key == "dnsZones":
            suggest = "dns_zones"
        elif key == "matchLabels":
            suggest = "match_labels"

        if suggest:
            pulumi.log.warn(
                f"Key '{key}' not found in ChallengeSpecSolverSelectorPatch. Access the value via the '{suggest}' property getter instead."
            )

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverSelectorPatch.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default=None) -> Any:
        ChallengeSpecSolverSelectorPatch.__key_warning(key)
        return super().get(key, default)

    def __init__(
        __self__,
        *,
        dns_names: Optional[Sequence[str]] = None,
        dns_zones: Optional[Sequence[str]] = None,
        match_labels: Optional[Mapping[str, str]] = None,
    ):
        """
        Selector selects a set of DNSNames on the Certificate resource that
        should be solved using this challenge solver.
        If not specified, the solver will be treated as the 'default' solver
        with the lowest priority, i.e. if any other solver has a more specific
        match, it will be used instead.
        :param Sequence[str] dns_names: List of DNSNames that this solver will be used to solve.
               If specified and a match is found, a dnsNames selector will take
               precedence over a dnsZones selector.
               If multiple solvers match with the same dnsNames value, the solver
               with the most matching labels in matchLabels will be selected.
               If neither has more matches, the solver defined earlier in the list
               will be selected.
        :param Sequence[str] dns_zones: List of DNSZones that this solver will be used to solve.
               The most specific DNS zone match specified here will take precedence
               over other DNS zone matches, so a solver specifying sys.example.com
               will be selected over one specifying example.com for the domain
               www.sys.example.com.
               If multiple solvers match with the same dnsZones value, the solver
               with the most matching labels in matchLabels will be selected.
               If neither has more matches, the solver defined earlier in the list
               will be selected.
        :param Mapping[str, str] match_labels: A label selector that is used to refine the set of certificate's that
               this challenge solver will apply to.
        """
        if dns_names is not None:
            pulumi.set(__self__, "dns_names", dns_names)
        if dns_zones is not None:
            pulumi.set(__self__, "dns_zones", dns_zones)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="dnsNames")
    def dns_names(self) -> Optional[Sequence[str]]:
        """
        List of DNSNames that this solver will be used to solve.
        If specified and a match is found, a dnsNames selector will take
        precedence over a dnsZones selector.
        If multiple solvers match with the same dnsNames value, the solver
        with the most matching labels in matchLabels will be selected.
        If neither has more matches, the solver defined earlier in the list
        will be selected.
        """
        return pulumi.get(self, "dns_names")

    @property
    @pulumi.getter(name="dnsZones")
    def dns_zones(self) -> Optional[Sequence[str]]:
        """
        List of DNSZones that this solver will be used to solve.
        The most specific DNS zone match specified here will take precedence
        over other DNS zone matches, so a solver specifying sys.example.com
        will be selected over one specifying example.com for the domain
        www.sys.example.com.
        If multiple solvers match with the same dnsZones value, the solver
        with the most matching labels in matchLabels will be selected.
        If neither has more matches, the solver defined earlier in the list
        will be selected.
        """
        return pulumi.get(self, "dns_zones")

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, str]]:
        """
        A label selector that is used to refine the set of certificate's that
        this challenge solver will apply to.
        """
        return pulumi.get(self, "match_labels")


@pulumi.output_type
class ChallengeStatus(dict):
    def __init__(
        __self__,
        *,
        presented: Optional[bool] = None,
        processing: Optional[bool] = None,
        reason: Optional[str] = None,
        state: Optional[str] = None,
    ):
        """
        :param bool presented: presented will be set to true if the challenge values for this challenge
               are currently 'presented'.
               This *does not* imply the self check is passing. Only that the values
               have been 'submitted' for the appropriate challenge mechanism (i.e. the
               DNS01 TXT record has been presented, or the HTTP01 configuration has been
               configured).
        :param bool processing: Used to denote whether this challenge should be processed or not.
               This field will only be set to true by the 'scheduling' component.
               It will only be set to false by the 'challenges' controller, after the
               challenge has reached a final state or timed out.
               If this field is set to false, the challenge controller will not take
               any more action.
        :param str reason: Contains human readable information on why the Challenge is in the
               current state.
        :param str state: Contains the current 'state' of the challenge.
               If not set, the state of the challenge is unknown.
        """
        if presented is not None:
            pulumi.set(__self__, "presented", presented)
        if processing is not None:
            pulumi.set(__self__, "processing", processing)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def presented(self) -> Optional[bool]:
        """
        presented will be set to true if the challenge values for this challenge
        are currently 'presented'.
        This *does not* imply the self check is passing. Only that the values
        have been 'submitted' for the appropriate challenge mechanism (i.e. the
        DNS01 TXT record has been presented, or the HTTP01 configuration has been
        configured).
        """
        return pulumi.get(self, "presented")

    @property
    @pulumi.getter
    def processing(self) -> Optional[bool]:
        """
        Used to denote whether this challenge should be processed or not.
        This field will only be set to true by the 'scheduling' component.
        It will only be set to false by the 'challenges' controller, after the
        challenge has reached a final state or timed out.
        If this field is set to false, the challenge controller will not take
        any more action.
        """
        return pulumi.get(self, "processing")

    @property
    @pulumi.getter
    def reason(self) -> Optional[str]:
        """
        Contains human readable information on why the Challenge is in the
        current state.
        """
        return pulumi.get(self, "reason")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        """
        Contains the current 'state' of the challenge.
        If not set, the state of the challenge is unknown.
        """
        return pulumi.get(self, "state")


@pulumi.output_type
class ChallengeStatusPatch(dict):
    def __init__(
        __self__,
        *,
        presented: Optional[bool] = None,
        processing: Optional[bool] = None,
        reason: Optional[str] = None,
        state: Optional[str] = None,
    ):
        """
        :param bool presented: presented will be set to true if the challenge values for this challenge
               are currently 'presented'.
               This *does not* imply the self check is passing. Only that the values
               have been 'submitted' for the appropriate challenge mechanism (i.e. the
               DNS01 TXT record has been presented, or the HTTP01 configuration has been
               configured).
        :param bool processing: Used to denote whether this challenge should be processed or not.
               This field will only be set to true by the 'scheduling' component.
               It will only be set to false by the 'challenges' controller, after the
               challenge has reached a final state or timed out.
               If this field is set to false, the challenge controller will not take
               any more action.
        :param str reason: Contains human readable information on why the Challenge is in the
               current state.
        :param str state: Contains the current 'state' of the challenge.
               If not set, the state of the challenge is unknown.
        """
        if presented is not None:
            pulumi.set(__self__, "presented", presented)
        if processing is not None:
            pulumi.set(__self__, "processing", processing)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def presented(self) -> Optional[bool]:
        """
        presented will be set to true if the challenge values for this challenge
        are currently 'presented'.
        This *does not* imply the self check is passing. Only that the values
        have been 'submitted' for the appropriate challenge mechanism (i.e. the
        DNS01 TXT record has been presented, or the HTTP01 configuration has been
        configured).
        """
        return pulumi.get(self, "presented")

    @property
    @pulumi.getter
    def processing(self) -> Optional[bool]:
        """
        Used to denote whether this challenge should be processed or not.
        This field will only be set to true by the 'scheduling' component.
        It will only be set to false by the 'challenges' controller, after the
        challenge has reached a final state or timed out.
        If this field is set to false, the challenge controller will not take
        any more action.
        """
        return pulumi.get(self, "processing")

    @property
    @pulumi.getter
    def reason(self) -> Optional[str]:
        """
        Contains human readable information on why the Challenge is in the
        current state.
        """
        return pulumi.get(self, "reason")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        """
        Contains the current 'state' of the challenge.
        If not set, the state of the challenge is unknown.
        """
        return pulumi.get(self, "state")


@pulumi.output_type
class Order(dict):
    """
    Order is a type to represent an Order with an ACME server
    """

    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiVersion":
            suggest = "api_version"

        if suggest:
            pulumi.log.warn(
                f"Key '{key}' not found in Order. Access the value via the '{suggest}' property getter instead."
            )

    def __getitem__(self, key: str) -> Any:
        Order.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default=None) -> Any:
        Order.__key_warning(key)
        return super().get(key, default)

    def __init__(
        __self__,
        *,
        api_version: Optional[str] = None,
        kind: Optional[str] = None,
        metadata: Optional["_meta.v1.outputs.ObjectMeta"] = None,
        spec: Optional["outputs.OrderSpec"] = None,
        status: Optional["outputs.OrderStatus"] = None,
    ):
        """
        Order is a type to represent an Order with an ACME server
        :param str api_version: APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
        :param str kind: Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        :param '_meta.v1.ObjectMetaArgs' metadata: Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
        """
        if api_version is not None:
            pulumi.set(__self__, "api_version", "acme.cert-manager.io/v1")
        if kind is not None:
            pulumi.set(__self__, "kind", "Order")
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if spec is not None:
            pulumi.set(__self__, "spec", spec)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[str]:
        """
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
        """
        return pulumi.get(self, "api_version")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def metadata(self) -> Optional["_meta.v1.outputs.ObjectMeta"]:
        """
        Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def spec(self) -> Optional["outputs.OrderSpec"]:
        return pulumi.get(self, "spec")

    @property
    @pulumi.getter
    def status(self) -> Optional["outputs.OrderStatus"]:
        return pulumi.get(self, "status")


@pulumi.output_type
class OrderSpec(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "commonName":
            suggest = "common_name"
        elif key == "dnsNames":
            suggest = "dns_names"
        elif key == "ipAddresses":
            suggest = "ip_addresses"
        elif key == "issuerRef":
            suggest = "issuer_ref"

        if suggest:
            pulumi.log.warn(
                f"Key '{key}' not found in OrderSpec. Access the value via the '{suggest}' property getter instead."
            )

    def __getitem__(self, key: str) -> Any:
        OrderSpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default=None) -> Any:
        OrderSpec.__key_warning(key)
        return super().get(key, default)

    def __init__(
        __self__,
        *,
        common_name: Optional[str] = None,
        dns_names: Optional[Sequence[str]] = None,
        duration: Optional[str] = None,
        ip_addresses: Optional[Sequence[str]] = None,
        issuer_ref: Optional["outputs.OrderSpecIssuerRef"] = None,
        request: Optional[str] = None,
    ):
        """
        :param str common_name: CommonName is the common name as specified on the DER encoded CSR.
               If specified, this value must also be present in `dnsNames` or `ipAddresses`.
               This field must match the corresponding field on the DER encoded CSR.
        :param Sequence[str] dns_names: DNSNames is a list of DNS names that should be included as part of the Order
               validation process.
               This field must match the corresponding field on the DER encoded CSR.
        :param str duration: Duration is the duration for the not after date for the requested certificate.
               this is set on order creation as pe the ACME spec.
        :param Sequence[str] ip_addresses: IPAddresses is a list of IP addresses that should be included as part of the Order
               validation process.
               This field must match the corresponding field on the DER encoded CSR.
        :param str request: Certificate signing request bytes in DER encoding.
               This will be used when finalizing the order.
               This field must be set on the order.
        """
        if common_name is not None:
            pulumi.set(__self__, "common_name", common_name)
        if dns_names is not None:
            pulumi.set(__self__, "dns_names", dns_names)
        if duration is not None:
            pulumi.set(__self__, "duration", duration)
        if ip_addresses is not None:
            pulumi.set(__self__, "ip_addresses", ip_addresses)
        if issuer_ref is not None:
            pulumi.set(__self__, "issuer_ref", issuer_ref)
        if request is not None:
            pulumi.set(__self__, "request", request)

    @property
    @pulumi.getter(name="commonName")
    def common_name(self) -> Optional[str]:
        """
        CommonName is the common name as specified on the DER encoded CSR.
        If specified, this value must also be present in `dnsNames` or `ipAddresses`.
        This field must match the corresponding field on the DER encoded CSR.
        """
        return pulumi.get(self, "common_name")

    @property
    @pulumi.getter(name="dnsNames")
    def dns_names(self) -> Optional[Sequence[str]]:
        """
        DNSNames is a list of DNS names that should be included as part of the Order
        validation process.
        This field must match the corresponding field on the DER encoded CSR.
        """
        return pulumi.get(self, "dns_names")

    @property
    @pulumi.getter
    def duration(self) -> Optional[str]:
        """
        Duration is the duration for the not after date for the requested certificate.
        this is set on order creation as pe the ACME spec.
        """
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter(name="ipAddresses")
    def ip_addresses(self) -> Optional[Sequence[str]]:
        """
        IPAddresses is a list of IP addresses that should be included as part of the Order
        validation process.
        This field must match the corresponding field on the DER encoded CSR.
        """
        return pulumi.get(self, "ip_addresses")

    @property
    @pulumi.getter(name="issuerRef")
    def issuer_ref(self) -> Optional["outputs.OrderSpecIssuerRef"]:
        return pulumi.get(self, "issuer_ref")

    @property
    @pulumi.getter
    def request(self) -> Optional[str]:
        """
        Certificate signing request bytes in DER encoding.
        This will be used when finalizing the order.
        This field must be set on the order.
        """
        return pulumi.get(self, "request")


@pulumi.output_type
class OrderSpecIssuerRef(dict):
    """
    IssuerRef references a properly configured ACME-type Issuer which should
    be used to create this Order.
    If the Issuer does not exist, processing will be retried.
    If the Issuer is not an 'ACME' Issuer, an error will be returned and the
    Order will be marked as failed.
    """

    def __init__(
        __self__,
        *,
        group: Optional[str] = None,
        kind: Optional[str] = None,
        name: Optional[str] = None,
    ):
        """
        IssuerRef references a properly configured ACME-type Issuer which should
        be used to create this Order.
        If the Issuer does not exist, processing will be retried.
        If the Issuer is not an 'ACME' Issuer, an error will be returned and the
        Order will be marked as failed.
        :param str group: Group of the resource being referred to.
        :param str kind: Kind of the resource being referred to.
        :param str name: Name of the resource being referred to.
        """
        if group is not None:
            pulumi.set(__self__, "group", group)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def group(self) -> Optional[str]:
        """
        Group of the resource being referred to.
        """
        return pulumi.get(self, "group")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        Kind of the resource being referred to.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the resource being referred to.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class OrderSpecIssuerRefPatch(dict):
    """
    IssuerRef references a properly configured ACME-type Issuer which should
    be used to create this Order.
    If the Issuer does not exist, processing will be retried.
    If the Issuer is not an 'ACME' Issuer, an error will be returned and the
    Order will be marked as failed.
    """

    def __init__(
        __self__,
        *,
        group: Optional[str] = None,
        kind: Optional[str] = None,
        name: Optional[str] = None,
    ):
        """
        IssuerRef references a properly configured ACME-type Issuer which should
        be used to create this Order.
        If the Issuer does not exist, processing will be retried.
        If the Issuer is not an 'ACME' Issuer, an error will be returned and the
        Order will be marked as failed.
        :param str group: Group of the resource being referred to.
        :param str kind: Kind of the resource being referred to.
        :param str name: Name of the resource being referred to.
        """
        if group is not None:
            pulumi.set(__self__, "group", group)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def group(self) -> Optional[str]:
        """
        Group of the resource being referred to.
        """
        return pulumi.get(self, "group")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        Kind of the resource being referred to.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the resource being referred to.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class OrderSpecPatch(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "commonName":
            suggest = "common_name"
        elif key == "dnsNames":
            suggest = "dns_names"
        elif key == "ipAddresses":
            suggest = "ip_addresses"
        elif key == "issuerRef":
            suggest = "issuer_ref"

        if suggest:
            pulumi.log.warn(
                f"Key '{key}' not found in OrderSpecPatch. Access the value via the '{suggest}' property getter instead."
            )

    def __getitem__(self, key: str) -> Any:
        OrderSpecPatch.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default=None) -> Any:
        OrderSpecPatch.__key_warning(key)
        return super().get(key, default)

    def __init__(
        __self__,
        *,
        common_name: Optional[str] = None,
        dns_names: Optional[Sequence[str]] = None,
        duration: Optional[str] = None,
        ip_addresses: Optional[Sequence[str]] = None,
        issuer_ref: Optional["outputs.OrderSpecIssuerRefPatch"] = None,
        request: Optional[str] = None,
    ):
        """
        :param str common_name: CommonName is the common name as specified on the DER encoded CSR.
               If specified, this value must also be present in `dnsNames` or `ipAddresses`.
               This field must match the corresponding field on the DER encoded CSR.
        :param Sequence[str] dns_names: DNSNames is a list of DNS names that should be included as part of the Order
               validation process.
               This field must match the corresponding field on the DER encoded CSR.
        :param str duration: Duration is the duration for the not after date for the requested certificate.
               this is set on order creation as pe the ACME spec.
        :param Sequence[str] ip_addresses: IPAddresses is a list of IP addresses that should be included as part of the Order
               validation process.
               This field must match the corresponding field on the DER encoded CSR.
        :param str request: Certificate signing request bytes in DER encoding.
               This will be used when finalizing the order.
               This field must be set on the order.
        """
        if common_name is not None:
            pulumi.set(__self__, "common_name", common_name)
        if dns_names is not None:
            pulumi.set(__self__, "dns_names", dns_names)
        if duration is not None:
            pulumi.set(__self__, "duration", duration)
        if ip_addresses is not None:
            pulumi.set(__self__, "ip_addresses", ip_addresses)
        if issuer_ref is not None:
            pulumi.set(__self__, "issuer_ref", issuer_ref)
        if request is not None:
            pulumi.set(__self__, "request", request)

    @property
    @pulumi.getter(name="commonName")
    def common_name(self) -> Optional[str]:
        """
        CommonName is the common name as specified on the DER encoded CSR.
        If specified, this value must also be present in `dnsNames` or `ipAddresses`.
        This field must match the corresponding field on the DER encoded CSR.
        """
        return pulumi.get(self, "common_name")

    @property
    @pulumi.getter(name="dnsNames")
    def dns_names(self) -> Optional[Sequence[str]]:
        """
        DNSNames is a list of DNS names that should be included as part of the Order
        validation process.
        This field must match the corresponding field on the DER encoded CSR.
        """
        return pulumi.get(self, "dns_names")

    @property
    @pulumi.getter
    def duration(self) -> Optional[str]:
        """
        Duration is the duration for the not after date for the requested certificate.
        this is set on order creation as pe the ACME spec.
        """
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter(name="ipAddresses")
    def ip_addresses(self) -> Optional[Sequence[str]]:
        """
        IPAddresses is a list of IP addresses that should be included as part of the Order
        validation process.
        This field must match the corresponding field on the DER encoded CSR.
        """
        return pulumi.get(self, "ip_addresses")

    @property
    @pulumi.getter(name="issuerRef")
    def issuer_ref(self) -> Optional["outputs.OrderSpecIssuerRefPatch"]:
        return pulumi.get(self, "issuer_ref")

    @property
    @pulumi.getter
    def request(self) -> Optional[str]:
        """
        Certificate signing request bytes in DER encoding.
        This will be used when finalizing the order.
        This field must be set on the order.
        """
        return pulumi.get(self, "request")


@pulumi.output_type
class OrderStatus(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "failureTime":
            suggest = "failure_time"
        elif key == "finalizeURL":
            suggest = "finalize_url"

        if suggest:
            pulumi.log.warn(
                f"Key '{key}' not found in OrderStatus. Access the value via the '{suggest}' property getter instead."
            )

    def __getitem__(self, key: str) -> Any:
        OrderStatus.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default=None) -> Any:
        OrderStatus.__key_warning(key)
        return super().get(key, default)

    def __init__(
        __self__,
        *,
        authorizations: Optional[Sequence["outputs.OrderStatusAuthorizations"]] = None,
        certificate: Optional[str] = None,
        failure_time: Optional[str] = None,
        finalize_url: Optional[str] = None,
        reason: Optional[str] = None,
        state: Optional[str] = None,
        url: Optional[str] = None,
    ):
        """
        :param Sequence['OrderStatusAuthorizationsArgs'] authorizations: Authorizations contains data returned from the ACME server on what
               authorizations must be completed in order to validate the DNS names
               specified on the Order.
        :param str certificate: Certificate is a copy of the PEM encoded certificate for this Order.
               This field will be populated after the order has been successfully
               finalized with the ACME server, and the order has transitioned to the
               'valid' state.
        :param str failure_time: FailureTime stores the time that this order failed.
               This is used to influence garbage collection and back-off.
        :param str finalize_url: FinalizeURL of the Order.
               This is used to obtain certificates for this order once it has been completed.
        :param str reason: Reason optionally provides more information about a why the order is in
               the current state.
        :param str state: State contains the current state of this Order resource.
               States 'success' and 'expired' are 'final'
        :param str url: URL of the Order.
               This will initially be empty when the resource is first created.
               The Order controller will populate this field when the Order is first processed.
               This field will be immutable after it is initially set.
        """
        if authorizations is not None:
            pulumi.set(__self__, "authorizations", authorizations)
        if certificate is not None:
            pulumi.set(__self__, "certificate", certificate)
        if failure_time is not None:
            pulumi.set(__self__, "failure_time", failure_time)
        if finalize_url is not None:
            pulumi.set(__self__, "finalize_url", finalize_url)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def authorizations(self) -> Optional[Sequence["outputs.OrderStatusAuthorizations"]]:
        """
        Authorizations contains data returned from the ACME server on what
        authorizations must be completed in order to validate the DNS names
        specified on the Order.
        """
        return pulumi.get(self, "authorizations")

    @property
    @pulumi.getter
    def certificate(self) -> Optional[str]:
        """
        Certificate is a copy of the PEM encoded certificate for this Order.
        This field will be populated after the order has been successfully
        finalized with the ACME server, and the order has transitioned to the
        'valid' state.
        """
        return pulumi.get(self, "certificate")

    @property
    @pulumi.getter(name="failureTime")
    def failure_time(self) -> Optional[str]:
        """
        FailureTime stores the time that this order failed.
        This is used to influence garbage collection and back-off.
        """
        return pulumi.get(self, "failure_time")

    @property
    @pulumi.getter(name="finalizeURL")
    def finalize_url(self) -> Optional[str]:
        """
        FinalizeURL of the Order.
        This is used to obtain certificates for this order once it has been completed.
        """
        return pulumi.get(self, "finalize_url")

    @property
    @pulumi.getter
    def reason(self) -> Optional[str]:
        """
        Reason optionally provides more information about a why the order is in
        the current state.
        """
        return pulumi.get(self, "reason")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        """
        State contains the current state of this Order resource.
        States 'success' and 'expired' are 'final'
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        """
        URL of the Order.
        This will initially be empty when the resource is first created.
        The Order controller will populate this field when the Order is first processed.
        This field will be immutable after it is initially set.
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class OrderStatusAuthorizations(dict):
    """
    ACMEAuthorization contains data returned from the ACME server on an
    authorization that must be completed in order validate a DNS name on an ACME
    Order resource.
    """

    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "initialState":
            suggest = "initial_state"

        if suggest:
            pulumi.log.warn(
                f"Key '{key}' not found in OrderStatusAuthorizations. Access the value via the '{suggest}' property getter instead."
            )

    def __getitem__(self, key: str) -> Any:
        OrderStatusAuthorizations.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default=None) -> Any:
        OrderStatusAuthorizations.__key_warning(key)
        return super().get(key, default)

    def __init__(
        __self__,
        *,
        challenges: Optional[
            Sequence["outputs.OrderStatusAuthorizationsChallenges"]
        ] = None,
        identifier: Optional[str] = None,
        initial_state: Optional[str] = None,
        url: Optional[str] = None,
        wildcard: Optional[bool] = None,
    ):
        """
        ACMEAuthorization contains data returned from the ACME server on an
        authorization that must be completed in order validate a DNS name on an ACME
        Order resource.
        :param Sequence['OrderStatusAuthorizationsChallengesArgs'] challenges: Challenges specifies the challenge types offered by the ACME server.
               One of these challenge types will be selected when validating the DNS
               name and an appropriate Challenge resource will be created to perform
               the ACME challenge process.
        :param str identifier: Identifier is the DNS name to be validated as part of this authorization
        :param str initial_state: InitialState is the initial state of the ACME authorization when first
               fetched from the ACME server.
               If an Authorization is already 'valid', the Order controller will not
               create a Challenge resource for the authorization. This will occur when
               working with an ACME server that enables 'authz reuse' (such as Let's
               Encrypt's production endpoint).
               If not set and 'identifier' is set, the state is assumed to be pending
               and a Challenge will be created.
        :param str url: URL is the URL of the Authorization that must be completed
        :param bool wildcard: Wildcard will be true if this authorization is for a wildcard DNS name.
               If this is true, the identifier will be the *non-wildcard* version of
               the DNS name.
               For example, if '*.example.com' is the DNS name being validated, this
               field will be 'true' and the 'identifier' field will be 'example.com'.
        """
        if challenges is not None:
            pulumi.set(__self__, "challenges", challenges)
        if identifier is not None:
            pulumi.set(__self__, "identifier", identifier)
        if initial_state is not None:
            pulumi.set(__self__, "initial_state", initial_state)
        if url is not None:
            pulumi.set(__self__, "url", url)
        if wildcard is not None:
            pulumi.set(__self__, "wildcard", wildcard)

    @property
    @pulumi.getter
    def challenges(
        self,
    ) -> Optional[Sequence["outputs.OrderStatusAuthorizationsChallenges"]]:
        """
        Challenges specifies the challenge types offered by the ACME server.
        One of these challenge types will be selected when validating the DNS
        name and an appropriate Challenge resource will be created to perform
        the ACME challenge process.
        """
        return pulumi.get(self, "challenges")

    @property
    @pulumi.getter
    def identifier(self) -> Optional[str]:
        """
        Identifier is the DNS name to be validated as part of this authorization
        """
        return pulumi.get(self, "identifier")

    @property
    @pulumi.getter(name="initialState")
    def initial_state(self) -> Optional[str]:
        """
        InitialState is the initial state of the ACME authorization when first
        fetched from the ACME server.
        If an Authorization is already 'valid', the Order controller will not
        create a Challenge resource for the authorization. This will occur when
        working with an ACME server that enables 'authz reuse' (such as Let's
        Encrypt's production endpoint).
        If not set and 'identifier' is set, the state is assumed to be pending
        and a Challenge will be created.
        """
        return pulumi.get(self, "initial_state")

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        """
        URL is the URL of the Authorization that must be completed
        """
        return pulumi.get(self, "url")

    @property
    @pulumi.getter
    def wildcard(self) -> Optional[bool]:
        """
        Wildcard will be true if this authorization is for a wildcard DNS name.
        If this is true, the identifier will be the *non-wildcard* version of
        the DNS name.
        For example, if '*.example.com' is the DNS name being validated, this
        field will be 'true' and the 'identifier' field will be 'example.com'.
        """
        return pulumi.get(self, "wildcard")


@pulumi.output_type
class OrderStatusAuthorizationsChallenges(dict):
    """
    Challenge specifies a challenge offered by the ACME server for an Order.
    An appropriate Challenge resource can be created to perform the ACME
    challenge process.
    """

    def __init__(
        __self__,
        *,
        token: Optional[str] = None,
        type: Optional[str] = None,
        url: Optional[str] = None,
    ):
        """
        Challenge specifies a challenge offered by the ACME server for an Order.
        An appropriate Challenge resource can be created to perform the ACME
        challenge process.
        :param str token: Token is the token that must be presented for this challenge.
               This is used to compute the 'key' that must also be presented.
        :param str type: Type is the type of challenge being offered, e.g. 'http-01', 'dns-01',
               'tls-sni-01', etc.
               This is the raw value retrieved from the ACME server.
               Only 'http-01' and 'dns-01' are supported by cert-manager, other values
               will be ignored.
        :param str url: URL is the URL of this challenge. It can be used to retrieve additional
               metadata about the Challenge from the ACME server.
        """
        if token is not None:
            pulumi.set(__self__, "token", token)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def token(self) -> Optional[str]:
        """
        Token is the token that must be presented for this challenge.
        This is used to compute the 'key' that must also be presented.
        """
        return pulumi.get(self, "token")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Type is the type of challenge being offered, e.g. 'http-01', 'dns-01',
        'tls-sni-01', etc.
        This is the raw value retrieved from the ACME server.
        Only 'http-01' and 'dns-01' are supported by cert-manager, other values
        will be ignored.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        """
        URL is the URL of this challenge. It can be used to retrieve additional
        metadata about the Challenge from the ACME server.
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class OrderStatusAuthorizationsChallengesPatch(dict):
    """
    Challenge specifies a challenge offered by the ACME server for an Order.
    An appropriate Challenge resource can be created to perform the ACME
    challenge process.
    """

    def __init__(
        __self__,
        *,
        token: Optional[str] = None,
        type: Optional[str] = None,
        url: Optional[str] = None,
    ):
        """
        Challenge specifies a challenge offered by the ACME server for an Order.
        An appropriate Challenge resource can be created to perform the ACME
        challenge process.
        :param str token: Token is the token that must be presented for this challenge.
               This is used to compute the 'key' that must also be presented.
        :param str type: Type is the type of challenge being offered, e.g. 'http-01', 'dns-01',
               'tls-sni-01', etc.
               This is the raw value retrieved from the ACME server.
               Only 'http-01' and 'dns-01' are supported by cert-manager, other values
               will be ignored.
        :param str url: URL is the URL of this challenge. It can be used to retrieve additional
               metadata about the Challenge from the ACME server.
        """
        if token is not None:
            pulumi.set(__self__, "token", token)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def token(self) -> Optional[str]:
        """
        Token is the token that must be presented for this challenge.
        This is used to compute the 'key' that must also be presented.
        """
        return pulumi.get(self, "token")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Type is the type of challenge being offered, e.g. 'http-01', 'dns-01',
        'tls-sni-01', etc.
        This is the raw value retrieved from the ACME server.
        Only 'http-01' and 'dns-01' are supported by cert-manager, other values
        will be ignored.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        """
        URL is the URL of this challenge. It can be used to retrieve additional
        metadata about the Challenge from the ACME server.
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class OrderStatusAuthorizationsPatch(dict):
    """
    ACMEAuthorization contains data returned from the ACME server on an
    authorization that must be completed in order validate a DNS name on an ACME
    Order resource.
    """

    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "initialState":
            suggest = "initial_state"

        if suggest:
            pulumi.log.warn(
                f"Key '{key}' not found in OrderStatusAuthorizationsPatch. Access the value via the '{suggest}' property getter instead."
            )

    def __getitem__(self, key: str) -> Any:
        OrderStatusAuthorizationsPatch.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default=None) -> Any:
        OrderStatusAuthorizationsPatch.__key_warning(key)
        return super().get(key, default)

    def __init__(
        __self__,
        *,
        challenges: Optional[
            Sequence["outputs.OrderStatusAuthorizationsChallengesPatch"]
        ] = None,
        identifier: Optional[str] = None,
        initial_state: Optional[str] = None,
        url: Optional[str] = None,
        wildcard: Optional[bool] = None,
    ):
        """
        ACMEAuthorization contains data returned from the ACME server on an
        authorization that must be completed in order validate a DNS name on an ACME
        Order resource.
        :param Sequence['OrderStatusAuthorizationsChallengesPatchArgs'] challenges: Challenges specifies the challenge types offered by the ACME server.
               One of these challenge types will be selected when validating the DNS
               name and an appropriate Challenge resource will be created to perform
               the ACME challenge process.
        :param str identifier: Identifier is the DNS name to be validated as part of this authorization
        :param str initial_state: InitialState is the initial state of the ACME authorization when first
               fetched from the ACME server.
               If an Authorization is already 'valid', the Order controller will not
               create a Challenge resource for the authorization. This will occur when
               working with an ACME server that enables 'authz reuse' (such as Let's
               Encrypt's production endpoint).
               If not set and 'identifier' is set, the state is assumed to be pending
               and a Challenge will be created.
        :param str url: URL is the URL of the Authorization that must be completed
        :param bool wildcard: Wildcard will be true if this authorization is for a wildcard DNS name.
               If this is true, the identifier will be the *non-wildcard* version of
               the DNS name.
               For example, if '*.example.com' is the DNS name being validated, this
               field will be 'true' and the 'identifier' field will be 'example.com'.
        """
        if challenges is not None:
            pulumi.set(__self__, "challenges", challenges)
        if identifier is not None:
            pulumi.set(__self__, "identifier", identifier)
        if initial_state is not None:
            pulumi.set(__self__, "initial_state", initial_state)
        if url is not None:
            pulumi.set(__self__, "url", url)
        if wildcard is not None:
            pulumi.set(__self__, "wildcard", wildcard)

    @property
    @pulumi.getter
    def challenges(
        self,
    ) -> Optional[Sequence["outputs.OrderStatusAuthorizationsChallengesPatch"]]:
        """
        Challenges specifies the challenge types offered by the ACME server.
        One of these challenge types will be selected when validating the DNS
        name and an appropriate Challenge resource will be created to perform
        the ACME challenge process.
        """
        return pulumi.get(self, "challenges")

    @property
    @pulumi.getter
    def identifier(self) -> Optional[str]:
        """
        Identifier is the DNS name to be validated as part of this authorization
        """
        return pulumi.get(self, "identifier")

    @property
    @pulumi.getter(name="initialState")
    def initial_state(self) -> Optional[str]:
        """
        InitialState is the initial state of the ACME authorization when first
        fetched from the ACME server.
        If an Authorization is already 'valid', the Order controller will not
        create a Challenge resource for the authorization. This will occur when
        working with an ACME server that enables 'authz reuse' (such as Let's
        Encrypt's production endpoint).
        If not set and 'identifier' is set, the state is assumed to be pending
        and a Challenge will be created.
        """
        return pulumi.get(self, "initial_state")

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        """
        URL is the URL of the Authorization that must be completed
        """
        return pulumi.get(self, "url")

    @property
    @pulumi.getter
    def wildcard(self) -> Optional[bool]:
        """
        Wildcard will be true if this authorization is for a wildcard DNS name.
        If this is true, the identifier will be the *non-wildcard* version of
        the DNS name.
        For example, if '*.example.com' is the DNS name being validated, this
        field will be 'true' and the 'identifier' field will be 'example.com'.
        """
        return pulumi.get(self, "wildcard")


@pulumi.output_type
class OrderStatusPatch(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "failureTime":
            suggest = "failure_time"
        elif key == "finalizeURL":
            suggest = "finalize_url"

        if suggest:
            pulumi.log.warn(
                f"Key '{key}' not found in OrderStatusPatch. Access the value via the '{suggest}' property getter instead."
            )

    def __getitem__(self, key: str) -> Any:
        OrderStatusPatch.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default=None) -> Any:
        OrderStatusPatch.__key_warning(key)
        return super().get(key, default)

    def __init__(
        __self__,
        *,
        authorizations: Optional[
            Sequence["outputs.OrderStatusAuthorizationsPatch"]
        ] = None,
        certificate: Optional[str] = None,
        failure_time: Optional[str] = None,
        finalize_url: Optional[str] = None,
        reason: Optional[str] = None,
        state: Optional[str] = None,
        url: Optional[str] = None,
    ):
        """
        :param Sequence['OrderStatusAuthorizationsPatchArgs'] authorizations: Authorizations contains data returned from the ACME server on what
               authorizations must be completed in order to validate the DNS names
               specified on the Order.
        :param str certificate: Certificate is a copy of the PEM encoded certificate for this Order.
               This field will be populated after the order has been successfully
               finalized with the ACME server, and the order has transitioned to the
               'valid' state.
        :param str failure_time: FailureTime stores the time that this order failed.
               This is used to influence garbage collection and back-off.
        :param str finalize_url: FinalizeURL of the Order.
               This is used to obtain certificates for this order once it has been completed.
        :param str reason: Reason optionally provides more information about a why the order is in
               the current state.
        :param str state: State contains the current state of this Order resource.
               States 'success' and 'expired' are 'final'
        :param str url: URL of the Order.
               This will initially be empty when the resource is first created.
               The Order controller will populate this field when the Order is first processed.
               This field will be immutable after it is initially set.
        """
        if authorizations is not None:
            pulumi.set(__self__, "authorizations", authorizations)
        if certificate is not None:
            pulumi.set(__self__, "certificate", certificate)
        if failure_time is not None:
            pulumi.set(__self__, "failure_time", failure_time)
        if finalize_url is not None:
            pulumi.set(__self__, "finalize_url", finalize_url)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def authorizations(
        self,
    ) -> Optional[Sequence["outputs.OrderStatusAuthorizationsPatch"]]:
        """
        Authorizations contains data returned from the ACME server on what
        authorizations must be completed in order to validate the DNS names
        specified on the Order.
        """
        return pulumi.get(self, "authorizations")

    @property
    @pulumi.getter
    def certificate(self) -> Optional[str]:
        """
        Certificate is a copy of the PEM encoded certificate for this Order.
        This field will be populated after the order has been successfully
        finalized with the ACME server, and the order has transitioned to the
        'valid' state.
        """
        return pulumi.get(self, "certificate")

    @property
    @pulumi.getter(name="failureTime")
    def failure_time(self) -> Optional[str]:
        """
        FailureTime stores the time that this order failed.
        This is used to influence garbage collection and back-off.
        """
        return pulumi.get(self, "failure_time")

    @property
    @pulumi.getter(name="finalizeURL")
    def finalize_url(self) -> Optional[str]:
        """
        FinalizeURL of the Order.
        This is used to obtain certificates for this order once it has been completed.
        """
        return pulumi.get(self, "finalize_url")

    @property
    @pulumi.getter
    def reason(self) -> Optional[str]:
        """
        Reason optionally provides more information about a why the order is in
        the current state.
        """
        return pulumi.get(self, "reason")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        """
        State contains the current state of this Order resource.
        States 'success' and 'expired' are 'final'
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        """
        URL of the Order.
        This will initially be empty when the resource is first created.
        The Order controller will populate this field when the Order is first processed.
        This field will be immutable after it is initially set.
        """
        return pulumi.get(self, "url")
