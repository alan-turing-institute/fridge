# coding=utf-8
# *** WARNING: this file was generated by crd2pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload

if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from ... import _utilities
from ... import meta as _meta

__all__ = [
    "CertificateRequestSpecIssuerRefPatchArgs",
    "CertificateRequestSpecIssuerRefPatchArgsDict",
    "CertificateRequestSpecIssuerRefArgs",
    "CertificateRequestSpecIssuerRefArgsDict",
    "CertificateRequestSpecPatchArgs",
    "CertificateRequestSpecPatchArgsDict",
    "CertificateRequestSpecArgs",
    "CertificateRequestSpecArgsDict",
    "CertificateRequestStatusConditionsArgs",
    "CertificateRequestStatusConditionsArgsDict",
    "CertificateRequestStatusArgs",
    "CertificateRequestStatusArgsDict",
    "CertificateRequestArgs",
    "CertificateRequestArgsDict",
    "CertificateSpecAdditionalOutputFormatsPatchArgs",
    "CertificateSpecAdditionalOutputFormatsPatchArgsDict",
    "CertificateSpecAdditionalOutputFormatsArgs",
    "CertificateSpecAdditionalOutputFormatsArgsDict",
    "CertificateSpecIssuerRefPatchArgs",
    "CertificateSpecIssuerRefPatchArgsDict",
    "CertificateSpecIssuerRefArgs",
    "CertificateSpecIssuerRefArgsDict",
    "CertificateSpecKeystoresJksPasswordSecretRefPatchArgs",
    "CertificateSpecKeystoresJksPasswordSecretRefPatchArgsDict",
    "CertificateSpecKeystoresJksPasswordSecretRefArgs",
    "CertificateSpecKeystoresJksPasswordSecretRefArgsDict",
    "CertificateSpecKeystoresJksPatchArgs",
    "CertificateSpecKeystoresJksPatchArgsDict",
    "CertificateSpecKeystoresJksArgs",
    "CertificateSpecKeystoresJksArgsDict",
    "CertificateSpecKeystoresPatchArgs",
    "CertificateSpecKeystoresPatchArgsDict",
    "CertificateSpecKeystoresPkcs12PasswordSecretRefPatchArgs",
    "CertificateSpecKeystoresPkcs12PasswordSecretRefPatchArgsDict",
    "CertificateSpecKeystoresPkcs12PasswordSecretRefArgs",
    "CertificateSpecKeystoresPkcs12PasswordSecretRefArgsDict",
    "CertificateSpecKeystoresPkcs12PatchArgs",
    "CertificateSpecKeystoresPkcs12PatchArgsDict",
    "CertificateSpecKeystoresPkcs12Args",
    "CertificateSpecKeystoresPkcs12ArgsDict",
    "CertificateSpecKeystoresArgs",
    "CertificateSpecKeystoresArgsDict",
    "CertificateSpecNameConstraintsExcludedPatchArgs",
    "CertificateSpecNameConstraintsExcludedPatchArgsDict",
    "CertificateSpecNameConstraintsExcludedArgs",
    "CertificateSpecNameConstraintsExcludedArgsDict",
    "CertificateSpecNameConstraintsPatchArgs",
    "CertificateSpecNameConstraintsPatchArgsDict",
    "CertificateSpecNameConstraintsPermittedPatchArgs",
    "CertificateSpecNameConstraintsPermittedPatchArgsDict",
    "CertificateSpecNameConstraintsPermittedArgs",
    "CertificateSpecNameConstraintsPermittedArgsDict",
    "CertificateSpecNameConstraintsArgs",
    "CertificateSpecNameConstraintsArgsDict",
    "CertificateSpecOtherNamesPatchArgs",
    "CertificateSpecOtherNamesPatchArgsDict",
    "CertificateSpecOtherNamesArgs",
    "CertificateSpecOtherNamesArgsDict",
    "CertificateSpecPatchArgs",
    "CertificateSpecPatchArgsDict",
    "CertificateSpecPrivateKeyPatchArgs",
    "CertificateSpecPrivateKeyPatchArgsDict",
    "CertificateSpecPrivateKeyArgs",
    "CertificateSpecPrivateKeyArgsDict",
    "CertificateSpecSecretTemplatePatchArgs",
    "CertificateSpecSecretTemplatePatchArgsDict",
    "CertificateSpecSecretTemplateArgs",
    "CertificateSpecSecretTemplateArgsDict",
    "CertificateSpecSubjectPatchArgs",
    "CertificateSpecSubjectPatchArgsDict",
    "CertificateSpecSubjectArgs",
    "CertificateSpecSubjectArgsDict",
    "CertificateSpecArgs",
    "CertificateSpecArgsDict",
    "CertificateStatusConditionsArgs",
    "CertificateStatusConditionsArgsDict",
    "CertificateStatusArgs",
    "CertificateStatusArgsDict",
    "CertificateArgs",
    "CertificateArgsDict",
    "ClusterIssuerSpecAcmeExternalAccountBindingKeySecretRefPatchArgs",
    "ClusterIssuerSpecAcmeExternalAccountBindingKeySecretRefPatchArgsDict",
    "ClusterIssuerSpecAcmeExternalAccountBindingKeySecretRefArgs",
    "ClusterIssuerSpecAcmeExternalAccountBindingKeySecretRefArgsDict",
    "ClusterIssuerSpecAcmeExternalAccountBindingPatchArgs",
    "ClusterIssuerSpecAcmeExternalAccountBindingPatchArgsDict",
    "ClusterIssuerSpecAcmeExternalAccountBindingArgs",
    "ClusterIssuerSpecAcmeExternalAccountBindingArgsDict",
    "ClusterIssuerSpecAcmePatchArgs",
    "ClusterIssuerSpecAcmePatchArgsDict",
    "ClusterIssuerSpecAcmePrivateKeySecretRefPatchArgs",
    "ClusterIssuerSpecAcmePrivateKeySecretRefPatchArgsDict",
    "ClusterIssuerSpecAcmePrivateKeySecretRefArgs",
    "ClusterIssuerSpecAcmePrivateKeySecretRefArgsDict",
    "ClusterIssuerSpecAcmeSolversDns01AcmeDNSAccountSecretRefPatchArgs",
    "ClusterIssuerSpecAcmeSolversDns01AcmeDNSAccountSecretRefPatchArgsDict",
    "ClusterIssuerSpecAcmeSolversDns01AcmeDNSAccountSecretRefArgs",
    "ClusterIssuerSpecAcmeSolversDns01AcmeDNSAccountSecretRefArgsDict",
    "ClusterIssuerSpecAcmeSolversDns01AcmeDNSPatchArgs",
    "ClusterIssuerSpecAcmeSolversDns01AcmeDNSPatchArgsDict",
    "ClusterIssuerSpecAcmeSolversDns01AcmeDNSArgs",
    "ClusterIssuerSpecAcmeSolversDns01AcmeDNSArgsDict",
    "ClusterIssuerSpecAcmeSolversDns01AkamaiAccessTokenSecretRefPatchArgs",
    "ClusterIssuerSpecAcmeSolversDns01AkamaiAccessTokenSecretRefPatchArgsDict",
    "ClusterIssuerSpecAcmeSolversDns01AkamaiAccessTokenSecretRefArgs",
    "ClusterIssuerSpecAcmeSolversDns01AkamaiAccessTokenSecretRefArgsDict",
    "ClusterIssuerSpecAcmeSolversDns01AkamaiClientSecretSecretRefPatchArgs",
    "ClusterIssuerSpecAcmeSolversDns01AkamaiClientSecretSecretRefPatchArgsDict",
    "ClusterIssuerSpecAcmeSolversDns01AkamaiClientSecretSecretRefArgs",
    "ClusterIssuerSpecAcmeSolversDns01AkamaiClientSecretSecretRefArgsDict",
    "ClusterIssuerSpecAcmeSolversDns01AkamaiClientTokenSecretRefPatchArgs",
    "ClusterIssuerSpecAcmeSolversDns01AkamaiClientTokenSecretRefPatchArgsDict",
    "ClusterIssuerSpecAcmeSolversDns01AkamaiClientTokenSecretRefArgs",
    "ClusterIssuerSpecAcmeSolversDns01AkamaiClientTokenSecretRefArgsDict",
    "ClusterIssuerSpecAcmeSolversDns01AkamaiPatchArgs",
    "ClusterIssuerSpecAcmeSolversDns01AkamaiPatchArgsDict",
    "ClusterIssuerSpecAcmeSolversDns01AkamaiArgs",
    "ClusterIssuerSpecAcmeSolversDns01AkamaiArgsDict",
    "ClusterIssuerSpecAcmeSolversDns01AzureDNSClientSecretSecretRefPatchArgs",
    "ClusterIssuerSpecAcmeSolversDns01AzureDNSClientSecretSecretRefPatchArgsDict",
    "ClusterIssuerSpecAcmeSolversDns01AzureDNSClientSecretSecretRefArgs",
    "ClusterIssuerSpecAcmeSolversDns01AzureDNSClientSecretSecretRefArgsDict",
    "ClusterIssuerSpecAcmeSolversDns01AzureDNSManagedIdentityPatchArgs",
    "ClusterIssuerSpecAcmeSolversDns01AzureDNSManagedIdentityPatchArgsDict",
    "ClusterIssuerSpecAcmeSolversDns01AzureDNSManagedIdentityArgs",
    "ClusterIssuerSpecAcmeSolversDns01AzureDNSManagedIdentityArgsDict",
    "ClusterIssuerSpecAcmeSolversDns01AzureDNSPatchArgs",
    "ClusterIssuerSpecAcmeSolversDns01AzureDNSPatchArgsDict",
    "ClusterIssuerSpecAcmeSolversDns01AzureDNSArgs",
    "ClusterIssuerSpecAcmeSolversDns01AzureDNSArgsDict",
    "ClusterIssuerSpecAcmeSolversDns01CloudDNSPatchArgs",
    "ClusterIssuerSpecAcmeSolversDns01CloudDNSPatchArgsDict",
    "ClusterIssuerSpecAcmeSolversDns01CloudDNSServiceAccountSecretRefPatchArgs",
    "ClusterIssuerSpecAcmeSolversDns01CloudDNSServiceAccountSecretRefPatchArgsDict",
    "ClusterIssuerSpecAcmeSolversDns01CloudDNSServiceAccountSecretRefArgs",
    "ClusterIssuerSpecAcmeSolversDns01CloudDNSServiceAccountSecretRefArgsDict",
    "ClusterIssuerSpecAcmeSolversDns01CloudDNSArgs",
    "ClusterIssuerSpecAcmeSolversDns01CloudDNSArgsDict",
    "ClusterIssuerSpecAcmeSolversDns01CloudflareApiKeySecretRefPatchArgs",
    "ClusterIssuerSpecAcmeSolversDns01CloudflareApiKeySecretRefPatchArgsDict",
    "ClusterIssuerSpecAcmeSolversDns01CloudflareApiKeySecretRefArgs",
    "ClusterIssuerSpecAcmeSolversDns01CloudflareApiKeySecretRefArgsDict",
    "ClusterIssuerSpecAcmeSolversDns01CloudflareApiTokenSecretRefPatchArgs",
    "ClusterIssuerSpecAcmeSolversDns01CloudflareApiTokenSecretRefPatchArgsDict",
    "ClusterIssuerSpecAcmeSolversDns01CloudflareApiTokenSecretRefArgs",
    "ClusterIssuerSpecAcmeSolversDns01CloudflareApiTokenSecretRefArgsDict",
    "ClusterIssuerSpecAcmeSolversDns01CloudflarePatchArgs",
    "ClusterIssuerSpecAcmeSolversDns01CloudflarePatchArgsDict",
    "ClusterIssuerSpecAcmeSolversDns01CloudflareArgs",
    "ClusterIssuerSpecAcmeSolversDns01CloudflareArgsDict",
    "ClusterIssuerSpecAcmeSolversDns01DigitaloceanPatchArgs",
    "ClusterIssuerSpecAcmeSolversDns01DigitaloceanPatchArgsDict",
    "ClusterIssuerSpecAcmeSolversDns01DigitaloceanTokenSecretRefPatchArgs",
    "ClusterIssuerSpecAcmeSolversDns01DigitaloceanTokenSecretRefPatchArgsDict",
    "ClusterIssuerSpecAcmeSolversDns01DigitaloceanTokenSecretRefArgs",
    "ClusterIssuerSpecAcmeSolversDns01DigitaloceanTokenSecretRefArgsDict",
    "ClusterIssuerSpecAcmeSolversDns01DigitaloceanArgs",
    "ClusterIssuerSpecAcmeSolversDns01DigitaloceanArgsDict",
    "ClusterIssuerSpecAcmeSolversDns01PatchArgs",
    "ClusterIssuerSpecAcmeSolversDns01PatchArgsDict",
    "ClusterIssuerSpecAcmeSolversDns01Rfc2136PatchArgs",
    "ClusterIssuerSpecAcmeSolversDns01Rfc2136PatchArgsDict",
    "ClusterIssuerSpecAcmeSolversDns01Rfc2136TsigSecretSecretRefPatchArgs",
    "ClusterIssuerSpecAcmeSolversDns01Rfc2136TsigSecretSecretRefPatchArgsDict",
    "ClusterIssuerSpecAcmeSolversDns01Rfc2136TsigSecretSecretRefArgs",
    "ClusterIssuerSpecAcmeSolversDns01Rfc2136TsigSecretSecretRefArgsDict",
    "ClusterIssuerSpecAcmeSolversDns01Rfc2136Args",
    "ClusterIssuerSpecAcmeSolversDns01Rfc2136ArgsDict",
    "ClusterIssuerSpecAcmeSolversDns01Route53AccessKeyIDSecretRefPatchArgs",
    "ClusterIssuerSpecAcmeSolversDns01Route53AccessKeyIDSecretRefPatchArgsDict",
    "ClusterIssuerSpecAcmeSolversDns01Route53AccessKeyIDSecretRefArgs",
    "ClusterIssuerSpecAcmeSolversDns01Route53AccessKeyIDSecretRefArgsDict",
    "ClusterIssuerSpecAcmeSolversDns01Route53AuthKubernetesPatchArgs",
    "ClusterIssuerSpecAcmeSolversDns01Route53AuthKubernetesPatchArgsDict",
    "ClusterIssuerSpecAcmeSolversDns01Route53AuthKubernetesServiceAccountRefPatchArgs",
    "ClusterIssuerSpecAcmeSolversDns01Route53AuthKubernetesServiceAccountRefPatchArgsDict",
    "ClusterIssuerSpecAcmeSolversDns01Route53AuthKubernetesServiceAccountRefArgs",
    "ClusterIssuerSpecAcmeSolversDns01Route53AuthKubernetesServiceAccountRefArgsDict",
    "ClusterIssuerSpecAcmeSolversDns01Route53AuthKubernetesArgs",
    "ClusterIssuerSpecAcmeSolversDns01Route53AuthKubernetesArgsDict",
    "ClusterIssuerSpecAcmeSolversDns01Route53AuthPatchArgs",
    "ClusterIssuerSpecAcmeSolversDns01Route53AuthPatchArgsDict",
    "ClusterIssuerSpecAcmeSolversDns01Route53AuthArgs",
    "ClusterIssuerSpecAcmeSolversDns01Route53AuthArgsDict",
    "ClusterIssuerSpecAcmeSolversDns01Route53PatchArgs",
    "ClusterIssuerSpecAcmeSolversDns01Route53PatchArgsDict",
    "ClusterIssuerSpecAcmeSolversDns01Route53SecretAccessKeySecretRefPatchArgs",
    "ClusterIssuerSpecAcmeSolversDns01Route53SecretAccessKeySecretRefPatchArgsDict",
    "ClusterIssuerSpecAcmeSolversDns01Route53SecretAccessKeySecretRefArgs",
    "ClusterIssuerSpecAcmeSolversDns01Route53SecretAccessKeySecretRefArgsDict",
    "ClusterIssuerSpecAcmeSolversDns01Route53Args",
    "ClusterIssuerSpecAcmeSolversDns01Route53ArgsDict",
    "ClusterIssuerSpecAcmeSolversDns01WebhookPatchArgs",
    "ClusterIssuerSpecAcmeSolversDns01WebhookPatchArgsDict",
    "ClusterIssuerSpecAcmeSolversDns01WebhookArgs",
    "ClusterIssuerSpecAcmeSolversDns01WebhookArgsDict",
    "ClusterIssuerSpecAcmeSolversDns01Args",
    "ClusterIssuerSpecAcmeSolversDns01ArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRouteParentRefsPatchArgs",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRouteParentRefsPatchArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRouteParentRefsArgs",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRouteParentRefsArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePatchArgs",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePatchArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateMetadataPatchArgs",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateMetadataPatchArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateMetadataArgs",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateMetadataArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplatePatchArgs",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplatePatchArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPatchArgs",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPatchArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgs",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatchArgs",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatchArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgs",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatchArgs",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatchArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgs",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatchArgs",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatchArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgs",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatchArgs",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatchArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgs",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatchArgs",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatchArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgs",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatchArgs",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatchArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgs",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgs",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityArgs",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPatchArgs",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPatchArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPatchArgs",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPatchArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgs",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArgs",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchArgs",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArgs",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchArgs",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchArgs",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArgs",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchArgs",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArgs",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchArgs",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgs",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityArgs",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPatchArgs",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPatchArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgs",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArgs",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchArgs",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArgs",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchArgs",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchArgs",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArgs",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchArgs",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArgs",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchArgs",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgs",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityArgs",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityArgs",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecImagePullSecretsPatchArgs",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecImagePullSecretsPatchArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecImagePullSecretsArgs",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecImagePullSecretsArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecPatchArgs",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecPatchArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextPatchArgs",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextPatchArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSeLinuxOptionsPatchArgs",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSeLinuxOptionsPatchArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSeLinuxOptionsArgs",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSeLinuxOptionsArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSeccompProfilePatchArgs",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSeccompProfilePatchArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSeccompProfileArgs",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSeccompProfileArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSysctlsPatchArgs",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSysctlsPatchArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSysctlsArgs",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSysctlsArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextArgs",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecTolerationsPatchArgs",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecTolerationsPatchArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecTolerationsArgs",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecTolerationsArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecArgs",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateArgs",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRouteArgs",
    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRouteArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01IngressIngressTemplateMetadataPatchArgs",
    "ClusterIssuerSpecAcmeSolversHttp01IngressIngressTemplateMetadataPatchArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01IngressIngressTemplateMetadataArgs",
    "ClusterIssuerSpecAcmeSolversHttp01IngressIngressTemplateMetadataArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01IngressIngressTemplatePatchArgs",
    "ClusterIssuerSpecAcmeSolversHttp01IngressIngressTemplatePatchArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01IngressIngressTemplateArgs",
    "ClusterIssuerSpecAcmeSolversHttp01IngressIngressTemplateArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPatchArgs",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPatchArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateMetadataPatchArgs",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateMetadataPatchArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateMetadataArgs",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateMetadataArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplatePatchArgs",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplatePatchArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPatchArgs",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPatchArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgs",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatchArgs",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatchArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgs",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatchArgs",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatchArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgs",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatchArgs",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatchArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgs",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatchArgs",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatchArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgs",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatchArgs",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatchArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgs",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatchArgs",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatchArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgs",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgs",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityArgs",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPatchArgs",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPatchArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPatchArgs",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPatchArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgs",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArgs",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchArgs",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArgs",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchArgs",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchArgs",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArgs",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchArgs",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArgs",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchArgs",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgs",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityArgs",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPatchArgs",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPatchArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgs",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArgs",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchArgs",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArgs",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchArgs",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchArgs",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArgs",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchArgs",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArgs",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchArgs",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgs",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityArgs",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityArgs",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecImagePullSecretsPatchArgs",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecImagePullSecretsPatchArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecImagePullSecretsArgs",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecImagePullSecretsArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecPatchArgs",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecPatchArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextPatchArgs",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextPatchArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextSeLinuxOptionsPatchArgs",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextSeLinuxOptionsPatchArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextSeLinuxOptionsArgs",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextSeLinuxOptionsArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextSeccompProfilePatchArgs",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextSeccompProfilePatchArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextSeccompProfileArgs",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextSeccompProfileArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextSysctlsPatchArgs",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextSysctlsPatchArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextSysctlsArgs",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextSysctlsArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextArgs",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecTolerationsPatchArgs",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecTolerationsPatchArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecTolerationsArgs",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecTolerationsArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecArgs",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateArgs",
    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01IngressArgs",
    "ClusterIssuerSpecAcmeSolversHttp01IngressArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01PatchArgs",
    "ClusterIssuerSpecAcmeSolversHttp01PatchArgsDict",
    "ClusterIssuerSpecAcmeSolversHttp01Args",
    "ClusterIssuerSpecAcmeSolversHttp01ArgsDict",
    "ClusterIssuerSpecAcmeSolversPatchArgs",
    "ClusterIssuerSpecAcmeSolversPatchArgsDict",
    "ClusterIssuerSpecAcmeSolversSelectorPatchArgs",
    "ClusterIssuerSpecAcmeSolversSelectorPatchArgsDict",
    "ClusterIssuerSpecAcmeSolversSelectorArgs",
    "ClusterIssuerSpecAcmeSolversSelectorArgsDict",
    "ClusterIssuerSpecAcmeSolversArgs",
    "ClusterIssuerSpecAcmeSolversArgsDict",
    "ClusterIssuerSpecAcmeArgs",
    "ClusterIssuerSpecAcmeArgsDict",
    "ClusterIssuerSpecCaPatchArgs",
    "ClusterIssuerSpecCaPatchArgsDict",
    "ClusterIssuerSpecCaArgs",
    "ClusterIssuerSpecCaArgsDict",
    "ClusterIssuerSpecPatchArgs",
    "ClusterIssuerSpecPatchArgsDict",
    "ClusterIssuerSpecSelfSignedPatchArgs",
    "ClusterIssuerSpecSelfSignedPatchArgsDict",
    "ClusterIssuerSpecSelfSignedArgs",
    "ClusterIssuerSpecSelfSignedArgsDict",
    "ClusterIssuerSpecVaultAuthAppRolePatchArgs",
    "ClusterIssuerSpecVaultAuthAppRolePatchArgsDict",
    "ClusterIssuerSpecVaultAuthAppRoleSecretRefPatchArgs",
    "ClusterIssuerSpecVaultAuthAppRoleSecretRefPatchArgsDict",
    "ClusterIssuerSpecVaultAuthAppRoleSecretRefArgs",
    "ClusterIssuerSpecVaultAuthAppRoleSecretRefArgsDict",
    "ClusterIssuerSpecVaultAuthAppRoleArgs",
    "ClusterIssuerSpecVaultAuthAppRoleArgsDict",
    "ClusterIssuerSpecVaultAuthClientCertificatePatchArgs",
    "ClusterIssuerSpecVaultAuthClientCertificatePatchArgsDict",
    "ClusterIssuerSpecVaultAuthClientCertificateArgs",
    "ClusterIssuerSpecVaultAuthClientCertificateArgsDict",
    "ClusterIssuerSpecVaultAuthKubernetesPatchArgs",
    "ClusterIssuerSpecVaultAuthKubernetesPatchArgsDict",
    "ClusterIssuerSpecVaultAuthKubernetesSecretRefPatchArgs",
    "ClusterIssuerSpecVaultAuthKubernetesSecretRefPatchArgsDict",
    "ClusterIssuerSpecVaultAuthKubernetesSecretRefArgs",
    "ClusterIssuerSpecVaultAuthKubernetesSecretRefArgsDict",
    "ClusterIssuerSpecVaultAuthKubernetesServiceAccountRefPatchArgs",
    "ClusterIssuerSpecVaultAuthKubernetesServiceAccountRefPatchArgsDict",
    "ClusterIssuerSpecVaultAuthKubernetesServiceAccountRefArgs",
    "ClusterIssuerSpecVaultAuthKubernetesServiceAccountRefArgsDict",
    "ClusterIssuerSpecVaultAuthKubernetesArgs",
    "ClusterIssuerSpecVaultAuthKubernetesArgsDict",
    "ClusterIssuerSpecVaultAuthPatchArgs",
    "ClusterIssuerSpecVaultAuthPatchArgsDict",
    "ClusterIssuerSpecVaultAuthTokenSecretRefPatchArgs",
    "ClusterIssuerSpecVaultAuthTokenSecretRefPatchArgsDict",
    "ClusterIssuerSpecVaultAuthTokenSecretRefArgs",
    "ClusterIssuerSpecVaultAuthTokenSecretRefArgsDict",
    "ClusterIssuerSpecVaultAuthArgs",
    "ClusterIssuerSpecVaultAuthArgsDict",
    "ClusterIssuerSpecVaultCaBundleSecretRefPatchArgs",
    "ClusterIssuerSpecVaultCaBundleSecretRefPatchArgsDict",
    "ClusterIssuerSpecVaultCaBundleSecretRefArgs",
    "ClusterIssuerSpecVaultCaBundleSecretRefArgsDict",
    "ClusterIssuerSpecVaultClientCertSecretRefPatchArgs",
    "ClusterIssuerSpecVaultClientCertSecretRefPatchArgsDict",
    "ClusterIssuerSpecVaultClientCertSecretRefArgs",
    "ClusterIssuerSpecVaultClientCertSecretRefArgsDict",
    "ClusterIssuerSpecVaultClientKeySecretRefPatchArgs",
    "ClusterIssuerSpecVaultClientKeySecretRefPatchArgsDict",
    "ClusterIssuerSpecVaultClientKeySecretRefArgs",
    "ClusterIssuerSpecVaultClientKeySecretRefArgsDict",
    "ClusterIssuerSpecVaultPatchArgs",
    "ClusterIssuerSpecVaultPatchArgsDict",
    "ClusterIssuerSpecVaultArgs",
    "ClusterIssuerSpecVaultArgsDict",
    "ClusterIssuerSpecVenafiCloudApiTokenSecretRefPatchArgs",
    "ClusterIssuerSpecVenafiCloudApiTokenSecretRefPatchArgsDict",
    "ClusterIssuerSpecVenafiCloudApiTokenSecretRefArgs",
    "ClusterIssuerSpecVenafiCloudApiTokenSecretRefArgsDict",
    "ClusterIssuerSpecVenafiCloudPatchArgs",
    "ClusterIssuerSpecVenafiCloudPatchArgsDict",
    "ClusterIssuerSpecVenafiCloudArgs",
    "ClusterIssuerSpecVenafiCloudArgsDict",
    "ClusterIssuerSpecVenafiPatchArgs",
    "ClusterIssuerSpecVenafiPatchArgsDict",
    "ClusterIssuerSpecVenafiTppCaBundleSecretRefPatchArgs",
    "ClusterIssuerSpecVenafiTppCaBundleSecretRefPatchArgsDict",
    "ClusterIssuerSpecVenafiTppCaBundleSecretRefArgs",
    "ClusterIssuerSpecVenafiTppCaBundleSecretRefArgsDict",
    "ClusterIssuerSpecVenafiTppCredentialsRefPatchArgs",
    "ClusterIssuerSpecVenafiTppCredentialsRefPatchArgsDict",
    "ClusterIssuerSpecVenafiTppCredentialsRefArgs",
    "ClusterIssuerSpecVenafiTppCredentialsRefArgsDict",
    "ClusterIssuerSpecVenafiTppPatchArgs",
    "ClusterIssuerSpecVenafiTppPatchArgsDict",
    "ClusterIssuerSpecVenafiTppArgs",
    "ClusterIssuerSpecVenafiTppArgsDict",
    "ClusterIssuerSpecVenafiArgs",
    "ClusterIssuerSpecVenafiArgsDict",
    "ClusterIssuerSpecArgs",
    "ClusterIssuerSpecArgsDict",
    "ClusterIssuerStatusAcmeArgs",
    "ClusterIssuerStatusAcmeArgsDict",
    "ClusterIssuerStatusConditionsArgs",
    "ClusterIssuerStatusConditionsArgsDict",
    "ClusterIssuerStatusArgs",
    "ClusterIssuerStatusArgsDict",
    "ClusterIssuerArgs",
    "ClusterIssuerArgsDict",
    "IssuerSpecAcmeExternalAccountBindingKeySecretRefPatchArgs",
    "IssuerSpecAcmeExternalAccountBindingKeySecretRefPatchArgsDict",
    "IssuerSpecAcmeExternalAccountBindingKeySecretRefArgs",
    "IssuerSpecAcmeExternalAccountBindingKeySecretRefArgsDict",
    "IssuerSpecAcmeExternalAccountBindingPatchArgs",
    "IssuerSpecAcmeExternalAccountBindingPatchArgsDict",
    "IssuerSpecAcmeExternalAccountBindingArgs",
    "IssuerSpecAcmeExternalAccountBindingArgsDict",
    "IssuerSpecAcmePatchArgs",
    "IssuerSpecAcmePatchArgsDict",
    "IssuerSpecAcmePrivateKeySecretRefPatchArgs",
    "IssuerSpecAcmePrivateKeySecretRefPatchArgsDict",
    "IssuerSpecAcmePrivateKeySecretRefArgs",
    "IssuerSpecAcmePrivateKeySecretRefArgsDict",
    "IssuerSpecAcmeSolversDns01AcmeDNSAccountSecretRefPatchArgs",
    "IssuerSpecAcmeSolversDns01AcmeDNSAccountSecretRefPatchArgsDict",
    "IssuerSpecAcmeSolversDns01AcmeDNSAccountSecretRefArgs",
    "IssuerSpecAcmeSolversDns01AcmeDNSAccountSecretRefArgsDict",
    "IssuerSpecAcmeSolversDns01AcmeDNSPatchArgs",
    "IssuerSpecAcmeSolversDns01AcmeDNSPatchArgsDict",
    "IssuerSpecAcmeSolversDns01AcmeDNSArgs",
    "IssuerSpecAcmeSolversDns01AcmeDNSArgsDict",
    "IssuerSpecAcmeSolversDns01AkamaiAccessTokenSecretRefPatchArgs",
    "IssuerSpecAcmeSolversDns01AkamaiAccessTokenSecretRefPatchArgsDict",
    "IssuerSpecAcmeSolversDns01AkamaiAccessTokenSecretRefArgs",
    "IssuerSpecAcmeSolversDns01AkamaiAccessTokenSecretRefArgsDict",
    "IssuerSpecAcmeSolversDns01AkamaiClientSecretSecretRefPatchArgs",
    "IssuerSpecAcmeSolversDns01AkamaiClientSecretSecretRefPatchArgsDict",
    "IssuerSpecAcmeSolversDns01AkamaiClientSecretSecretRefArgs",
    "IssuerSpecAcmeSolversDns01AkamaiClientSecretSecretRefArgsDict",
    "IssuerSpecAcmeSolversDns01AkamaiClientTokenSecretRefPatchArgs",
    "IssuerSpecAcmeSolversDns01AkamaiClientTokenSecretRefPatchArgsDict",
    "IssuerSpecAcmeSolversDns01AkamaiClientTokenSecretRefArgs",
    "IssuerSpecAcmeSolversDns01AkamaiClientTokenSecretRefArgsDict",
    "IssuerSpecAcmeSolversDns01AkamaiPatchArgs",
    "IssuerSpecAcmeSolversDns01AkamaiPatchArgsDict",
    "IssuerSpecAcmeSolversDns01AkamaiArgs",
    "IssuerSpecAcmeSolversDns01AkamaiArgsDict",
    "IssuerSpecAcmeSolversDns01AzureDNSClientSecretSecretRefPatchArgs",
    "IssuerSpecAcmeSolversDns01AzureDNSClientSecretSecretRefPatchArgsDict",
    "IssuerSpecAcmeSolversDns01AzureDNSClientSecretSecretRefArgs",
    "IssuerSpecAcmeSolversDns01AzureDNSClientSecretSecretRefArgsDict",
    "IssuerSpecAcmeSolversDns01AzureDNSManagedIdentityPatchArgs",
    "IssuerSpecAcmeSolversDns01AzureDNSManagedIdentityPatchArgsDict",
    "IssuerSpecAcmeSolversDns01AzureDNSManagedIdentityArgs",
    "IssuerSpecAcmeSolversDns01AzureDNSManagedIdentityArgsDict",
    "IssuerSpecAcmeSolversDns01AzureDNSPatchArgs",
    "IssuerSpecAcmeSolversDns01AzureDNSPatchArgsDict",
    "IssuerSpecAcmeSolversDns01AzureDNSArgs",
    "IssuerSpecAcmeSolversDns01AzureDNSArgsDict",
    "IssuerSpecAcmeSolversDns01CloudDNSPatchArgs",
    "IssuerSpecAcmeSolversDns01CloudDNSPatchArgsDict",
    "IssuerSpecAcmeSolversDns01CloudDNSServiceAccountSecretRefPatchArgs",
    "IssuerSpecAcmeSolversDns01CloudDNSServiceAccountSecretRefPatchArgsDict",
    "IssuerSpecAcmeSolversDns01CloudDNSServiceAccountSecretRefArgs",
    "IssuerSpecAcmeSolversDns01CloudDNSServiceAccountSecretRefArgsDict",
    "IssuerSpecAcmeSolversDns01CloudDNSArgs",
    "IssuerSpecAcmeSolversDns01CloudDNSArgsDict",
    "IssuerSpecAcmeSolversDns01CloudflareApiKeySecretRefPatchArgs",
    "IssuerSpecAcmeSolversDns01CloudflareApiKeySecretRefPatchArgsDict",
    "IssuerSpecAcmeSolversDns01CloudflareApiKeySecretRefArgs",
    "IssuerSpecAcmeSolversDns01CloudflareApiKeySecretRefArgsDict",
    "IssuerSpecAcmeSolversDns01CloudflareApiTokenSecretRefPatchArgs",
    "IssuerSpecAcmeSolversDns01CloudflareApiTokenSecretRefPatchArgsDict",
    "IssuerSpecAcmeSolversDns01CloudflareApiTokenSecretRefArgs",
    "IssuerSpecAcmeSolversDns01CloudflareApiTokenSecretRefArgsDict",
    "IssuerSpecAcmeSolversDns01CloudflarePatchArgs",
    "IssuerSpecAcmeSolversDns01CloudflarePatchArgsDict",
    "IssuerSpecAcmeSolversDns01CloudflareArgs",
    "IssuerSpecAcmeSolversDns01CloudflareArgsDict",
    "IssuerSpecAcmeSolversDns01DigitaloceanPatchArgs",
    "IssuerSpecAcmeSolversDns01DigitaloceanPatchArgsDict",
    "IssuerSpecAcmeSolversDns01DigitaloceanTokenSecretRefPatchArgs",
    "IssuerSpecAcmeSolversDns01DigitaloceanTokenSecretRefPatchArgsDict",
    "IssuerSpecAcmeSolversDns01DigitaloceanTokenSecretRefArgs",
    "IssuerSpecAcmeSolversDns01DigitaloceanTokenSecretRefArgsDict",
    "IssuerSpecAcmeSolversDns01DigitaloceanArgs",
    "IssuerSpecAcmeSolversDns01DigitaloceanArgsDict",
    "IssuerSpecAcmeSolversDns01PatchArgs",
    "IssuerSpecAcmeSolversDns01PatchArgsDict",
    "IssuerSpecAcmeSolversDns01Rfc2136PatchArgs",
    "IssuerSpecAcmeSolversDns01Rfc2136PatchArgsDict",
    "IssuerSpecAcmeSolversDns01Rfc2136TsigSecretSecretRefPatchArgs",
    "IssuerSpecAcmeSolversDns01Rfc2136TsigSecretSecretRefPatchArgsDict",
    "IssuerSpecAcmeSolversDns01Rfc2136TsigSecretSecretRefArgs",
    "IssuerSpecAcmeSolversDns01Rfc2136TsigSecretSecretRefArgsDict",
    "IssuerSpecAcmeSolversDns01Rfc2136Args",
    "IssuerSpecAcmeSolversDns01Rfc2136ArgsDict",
    "IssuerSpecAcmeSolversDns01Route53AccessKeyIDSecretRefPatchArgs",
    "IssuerSpecAcmeSolversDns01Route53AccessKeyIDSecretRefPatchArgsDict",
    "IssuerSpecAcmeSolversDns01Route53AccessKeyIDSecretRefArgs",
    "IssuerSpecAcmeSolversDns01Route53AccessKeyIDSecretRefArgsDict",
    "IssuerSpecAcmeSolversDns01Route53AuthKubernetesPatchArgs",
    "IssuerSpecAcmeSolversDns01Route53AuthKubernetesPatchArgsDict",
    "IssuerSpecAcmeSolversDns01Route53AuthKubernetesServiceAccountRefPatchArgs",
    "IssuerSpecAcmeSolversDns01Route53AuthKubernetesServiceAccountRefPatchArgsDict",
    "IssuerSpecAcmeSolversDns01Route53AuthKubernetesServiceAccountRefArgs",
    "IssuerSpecAcmeSolversDns01Route53AuthKubernetesServiceAccountRefArgsDict",
    "IssuerSpecAcmeSolversDns01Route53AuthKubernetesArgs",
    "IssuerSpecAcmeSolversDns01Route53AuthKubernetesArgsDict",
    "IssuerSpecAcmeSolversDns01Route53AuthPatchArgs",
    "IssuerSpecAcmeSolversDns01Route53AuthPatchArgsDict",
    "IssuerSpecAcmeSolversDns01Route53AuthArgs",
    "IssuerSpecAcmeSolversDns01Route53AuthArgsDict",
    "IssuerSpecAcmeSolversDns01Route53PatchArgs",
    "IssuerSpecAcmeSolversDns01Route53PatchArgsDict",
    "IssuerSpecAcmeSolversDns01Route53SecretAccessKeySecretRefPatchArgs",
    "IssuerSpecAcmeSolversDns01Route53SecretAccessKeySecretRefPatchArgsDict",
    "IssuerSpecAcmeSolversDns01Route53SecretAccessKeySecretRefArgs",
    "IssuerSpecAcmeSolversDns01Route53SecretAccessKeySecretRefArgsDict",
    "IssuerSpecAcmeSolversDns01Route53Args",
    "IssuerSpecAcmeSolversDns01Route53ArgsDict",
    "IssuerSpecAcmeSolversDns01WebhookPatchArgs",
    "IssuerSpecAcmeSolversDns01WebhookPatchArgsDict",
    "IssuerSpecAcmeSolversDns01WebhookArgs",
    "IssuerSpecAcmeSolversDns01WebhookArgsDict",
    "IssuerSpecAcmeSolversDns01Args",
    "IssuerSpecAcmeSolversDns01ArgsDict",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRouteParentRefsPatchArgs",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRouteParentRefsPatchArgsDict",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRouteParentRefsArgs",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRouteParentRefsArgsDict",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePatchArgs",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePatchArgsDict",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateMetadataPatchArgs",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateMetadataPatchArgsDict",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateMetadataArgs",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateMetadataArgsDict",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplatePatchArgs",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplatePatchArgsDict",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPatchArgs",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPatchArgsDict",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgs",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgsDict",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatchArgs",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatchArgsDict",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgs",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgsDict",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatchArgs",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatchArgsDict",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgs",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgsDict",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatchArgs",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatchArgsDict",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgs",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgsDict",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgsDict",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatchArgs",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatchArgsDict",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgs",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgsDict",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatchArgs",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatchArgsDict",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgs",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgsDict",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatchArgs",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatchArgsDict",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgs",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgsDict",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgs",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgsDict",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgsDict",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityArgs",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityArgsDict",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPatchArgs",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPatchArgsDict",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPatchArgs",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPatchArgsDict",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgs",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgsDict",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArgs",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArgsDict",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgsDict",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchArgs",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchArgsDict",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgsDict",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArgs",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArgsDict",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgsDict",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchArgs",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchArgsDict",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgsDict",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchArgs",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchArgsDict",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgsDict",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgsDict",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArgs",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArgsDict",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgsDict",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchArgs",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchArgsDict",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgsDict",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArgs",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArgsDict",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgsDict",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchArgs",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchArgsDict",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgsDict",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgs",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgsDict",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgsDict",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityArgs",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityArgsDict",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPatchArgs",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPatchArgsDict",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgs",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgsDict",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArgs",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArgsDict",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgsDict",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchArgs",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchArgsDict",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgsDict",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArgs",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArgsDict",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgsDict",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchArgs",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchArgsDict",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgsDict",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchArgs",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchArgsDict",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgsDict",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgsDict",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArgs",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArgsDict",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgsDict",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchArgs",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchArgsDict",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgsDict",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArgs",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArgsDict",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgsDict",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchArgs",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchArgsDict",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgsDict",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgs",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgsDict",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgsDict",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityArgs",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityArgsDict",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityArgs",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityArgsDict",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecImagePullSecretsPatchArgs",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecImagePullSecretsPatchArgsDict",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecImagePullSecretsArgs",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecImagePullSecretsArgsDict",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecPatchArgs",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecPatchArgsDict",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextPatchArgs",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextPatchArgsDict",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSeLinuxOptionsPatchArgs",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSeLinuxOptionsPatchArgsDict",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSeLinuxOptionsArgs",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSeLinuxOptionsArgsDict",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSeccompProfilePatchArgs",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSeccompProfilePatchArgsDict",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSeccompProfileArgs",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSeccompProfileArgsDict",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSysctlsPatchArgs",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSysctlsPatchArgsDict",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSysctlsArgs",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSysctlsArgsDict",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextArgs",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextArgsDict",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecTolerationsPatchArgs",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecTolerationsPatchArgsDict",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecTolerationsArgs",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecTolerationsArgsDict",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecArgs",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecArgsDict",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateArgs",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateArgsDict",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRouteArgs",
    "IssuerSpecAcmeSolversHttp01GatewayHTTPRouteArgsDict",
    "IssuerSpecAcmeSolversHttp01IngressIngressTemplateMetadataPatchArgs",
    "IssuerSpecAcmeSolversHttp01IngressIngressTemplateMetadataPatchArgsDict",
    "IssuerSpecAcmeSolversHttp01IngressIngressTemplateMetadataArgs",
    "IssuerSpecAcmeSolversHttp01IngressIngressTemplateMetadataArgsDict",
    "IssuerSpecAcmeSolversHttp01IngressIngressTemplatePatchArgs",
    "IssuerSpecAcmeSolversHttp01IngressIngressTemplatePatchArgsDict",
    "IssuerSpecAcmeSolversHttp01IngressIngressTemplateArgs",
    "IssuerSpecAcmeSolversHttp01IngressIngressTemplateArgsDict",
    "IssuerSpecAcmeSolversHttp01IngressPatchArgs",
    "IssuerSpecAcmeSolversHttp01IngressPatchArgsDict",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateMetadataPatchArgs",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateMetadataPatchArgsDict",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateMetadataArgs",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateMetadataArgsDict",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplatePatchArgs",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplatePatchArgsDict",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPatchArgs",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPatchArgsDict",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgs",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgsDict",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatchArgs",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatchArgsDict",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgs",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgsDict",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatchArgs",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatchArgsDict",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgs",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgsDict",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatchArgs",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatchArgsDict",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgs",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgsDict",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgsDict",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatchArgs",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatchArgsDict",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgs",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgsDict",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatchArgs",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatchArgsDict",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgs",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgsDict",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatchArgs",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatchArgsDict",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgs",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgsDict",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgs",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgsDict",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgsDict",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityArgs",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityArgsDict",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPatchArgs",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPatchArgsDict",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPatchArgs",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPatchArgsDict",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgs",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgsDict",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArgs",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArgsDict",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgsDict",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchArgs",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchArgsDict",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgsDict",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArgs",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArgsDict",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgsDict",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchArgs",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchArgsDict",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgsDict",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchArgs",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchArgsDict",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgsDict",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgsDict",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArgs",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArgsDict",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgsDict",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchArgs",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchArgsDict",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgsDict",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArgs",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArgsDict",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgsDict",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchArgs",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchArgsDict",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgsDict",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgs",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgsDict",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgsDict",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityArgs",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityArgsDict",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPatchArgs",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPatchArgsDict",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgs",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgsDict",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArgs",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArgsDict",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgsDict",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchArgs",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchArgsDict",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgsDict",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArgs",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArgsDict",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgsDict",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchArgs",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchArgsDict",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgsDict",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchArgs",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchArgsDict",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgsDict",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgsDict",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArgs",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArgsDict",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgsDict",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchArgs",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchArgsDict",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgsDict",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArgs",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArgsDict",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgsDict",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchArgs",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchArgsDict",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgsDict",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgs",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgsDict",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgsDict",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityArgs",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityArgsDict",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityArgs",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityArgsDict",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecImagePullSecretsPatchArgs",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecImagePullSecretsPatchArgsDict",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecImagePullSecretsArgs",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecImagePullSecretsArgsDict",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecPatchArgs",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecPatchArgsDict",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextPatchArgs",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextPatchArgsDict",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextSeLinuxOptionsPatchArgs",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextSeLinuxOptionsPatchArgsDict",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextSeLinuxOptionsArgs",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextSeLinuxOptionsArgsDict",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextSeccompProfilePatchArgs",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextSeccompProfilePatchArgsDict",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextSeccompProfileArgs",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextSeccompProfileArgsDict",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextSysctlsPatchArgs",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextSysctlsPatchArgsDict",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextSysctlsArgs",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextSysctlsArgsDict",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextArgs",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextArgsDict",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecTolerationsPatchArgs",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecTolerationsPatchArgsDict",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecTolerationsArgs",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecTolerationsArgsDict",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecArgs",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecArgsDict",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateArgs",
    "IssuerSpecAcmeSolversHttp01IngressPodTemplateArgsDict",
    "IssuerSpecAcmeSolversHttp01IngressArgs",
    "IssuerSpecAcmeSolversHttp01IngressArgsDict",
    "IssuerSpecAcmeSolversHttp01PatchArgs",
    "IssuerSpecAcmeSolversHttp01PatchArgsDict",
    "IssuerSpecAcmeSolversHttp01Args",
    "IssuerSpecAcmeSolversHttp01ArgsDict",
    "IssuerSpecAcmeSolversPatchArgs",
    "IssuerSpecAcmeSolversPatchArgsDict",
    "IssuerSpecAcmeSolversSelectorPatchArgs",
    "IssuerSpecAcmeSolversSelectorPatchArgsDict",
    "IssuerSpecAcmeSolversSelectorArgs",
    "IssuerSpecAcmeSolversSelectorArgsDict",
    "IssuerSpecAcmeSolversArgs",
    "IssuerSpecAcmeSolversArgsDict",
    "IssuerSpecAcmeArgs",
    "IssuerSpecAcmeArgsDict",
    "IssuerSpecCaPatchArgs",
    "IssuerSpecCaPatchArgsDict",
    "IssuerSpecCaArgs",
    "IssuerSpecCaArgsDict",
    "IssuerSpecPatchArgs",
    "IssuerSpecPatchArgsDict",
    "IssuerSpecSelfSignedPatchArgs",
    "IssuerSpecSelfSignedPatchArgsDict",
    "IssuerSpecSelfSignedArgs",
    "IssuerSpecSelfSignedArgsDict",
    "IssuerSpecVaultAuthAppRolePatchArgs",
    "IssuerSpecVaultAuthAppRolePatchArgsDict",
    "IssuerSpecVaultAuthAppRoleSecretRefPatchArgs",
    "IssuerSpecVaultAuthAppRoleSecretRefPatchArgsDict",
    "IssuerSpecVaultAuthAppRoleSecretRefArgs",
    "IssuerSpecVaultAuthAppRoleSecretRefArgsDict",
    "IssuerSpecVaultAuthAppRoleArgs",
    "IssuerSpecVaultAuthAppRoleArgsDict",
    "IssuerSpecVaultAuthClientCertificatePatchArgs",
    "IssuerSpecVaultAuthClientCertificatePatchArgsDict",
    "IssuerSpecVaultAuthClientCertificateArgs",
    "IssuerSpecVaultAuthClientCertificateArgsDict",
    "IssuerSpecVaultAuthKubernetesPatchArgs",
    "IssuerSpecVaultAuthKubernetesPatchArgsDict",
    "IssuerSpecVaultAuthKubernetesSecretRefPatchArgs",
    "IssuerSpecVaultAuthKubernetesSecretRefPatchArgsDict",
    "IssuerSpecVaultAuthKubernetesSecretRefArgs",
    "IssuerSpecVaultAuthKubernetesSecretRefArgsDict",
    "IssuerSpecVaultAuthKubernetesServiceAccountRefPatchArgs",
    "IssuerSpecVaultAuthKubernetesServiceAccountRefPatchArgsDict",
    "IssuerSpecVaultAuthKubernetesServiceAccountRefArgs",
    "IssuerSpecVaultAuthKubernetesServiceAccountRefArgsDict",
    "IssuerSpecVaultAuthKubernetesArgs",
    "IssuerSpecVaultAuthKubernetesArgsDict",
    "IssuerSpecVaultAuthPatchArgs",
    "IssuerSpecVaultAuthPatchArgsDict",
    "IssuerSpecVaultAuthTokenSecretRefPatchArgs",
    "IssuerSpecVaultAuthTokenSecretRefPatchArgsDict",
    "IssuerSpecVaultAuthTokenSecretRefArgs",
    "IssuerSpecVaultAuthTokenSecretRefArgsDict",
    "IssuerSpecVaultAuthArgs",
    "IssuerSpecVaultAuthArgsDict",
    "IssuerSpecVaultCaBundleSecretRefPatchArgs",
    "IssuerSpecVaultCaBundleSecretRefPatchArgsDict",
    "IssuerSpecVaultCaBundleSecretRefArgs",
    "IssuerSpecVaultCaBundleSecretRefArgsDict",
    "IssuerSpecVaultClientCertSecretRefPatchArgs",
    "IssuerSpecVaultClientCertSecretRefPatchArgsDict",
    "IssuerSpecVaultClientCertSecretRefArgs",
    "IssuerSpecVaultClientCertSecretRefArgsDict",
    "IssuerSpecVaultClientKeySecretRefPatchArgs",
    "IssuerSpecVaultClientKeySecretRefPatchArgsDict",
    "IssuerSpecVaultClientKeySecretRefArgs",
    "IssuerSpecVaultClientKeySecretRefArgsDict",
    "IssuerSpecVaultPatchArgs",
    "IssuerSpecVaultPatchArgsDict",
    "IssuerSpecVaultArgs",
    "IssuerSpecVaultArgsDict",
    "IssuerSpecVenafiCloudApiTokenSecretRefPatchArgs",
    "IssuerSpecVenafiCloudApiTokenSecretRefPatchArgsDict",
    "IssuerSpecVenafiCloudApiTokenSecretRefArgs",
    "IssuerSpecVenafiCloudApiTokenSecretRefArgsDict",
    "IssuerSpecVenafiCloudPatchArgs",
    "IssuerSpecVenafiCloudPatchArgsDict",
    "IssuerSpecVenafiCloudArgs",
    "IssuerSpecVenafiCloudArgsDict",
    "IssuerSpecVenafiPatchArgs",
    "IssuerSpecVenafiPatchArgsDict",
    "IssuerSpecVenafiTppCaBundleSecretRefPatchArgs",
    "IssuerSpecVenafiTppCaBundleSecretRefPatchArgsDict",
    "IssuerSpecVenafiTppCaBundleSecretRefArgs",
    "IssuerSpecVenafiTppCaBundleSecretRefArgsDict",
    "IssuerSpecVenafiTppCredentialsRefPatchArgs",
    "IssuerSpecVenafiTppCredentialsRefPatchArgsDict",
    "IssuerSpecVenafiTppCredentialsRefArgs",
    "IssuerSpecVenafiTppCredentialsRefArgsDict",
    "IssuerSpecVenafiTppPatchArgs",
    "IssuerSpecVenafiTppPatchArgsDict",
    "IssuerSpecVenafiTppArgs",
    "IssuerSpecVenafiTppArgsDict",
    "IssuerSpecVenafiArgs",
    "IssuerSpecVenafiArgsDict",
    "IssuerSpecArgs",
    "IssuerSpecArgsDict",
    "IssuerStatusAcmeArgs",
    "IssuerStatusAcmeArgsDict",
    "IssuerStatusConditionsArgs",
    "IssuerStatusConditionsArgsDict",
    "IssuerStatusArgs",
    "IssuerStatusArgsDict",
    "IssuerArgs",
    "IssuerArgsDict",
]

MYPY = False

if not MYPY:

    class CertificateRequestSpecIssuerRefPatchArgsDict(TypedDict):
        """
        Reference to the issuer responsible for issuing the certificate.
        If the issuer is namespace-scoped, it must be in the same namespace
        as the Certificate. If the issuer is cluster-scoped, it can be used
        from any namespace.

        The `name` field of the reference must always be specified.
        """

        group: NotRequired[pulumi.Input[str]]
        """
        Group of the resource being referred to.
        """
        kind: NotRequired[pulumi.Input[str]]
        """
        Kind of the resource being referred to.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the resource being referred to.
        """

elif False:
    CertificateRequestSpecIssuerRefPatchArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class CertificateRequestSpecIssuerRefPatchArgs:
    def __init__(
        __self__,
        *,
        group: Optional[pulumi.Input[str]] = None,
        kind: Optional[pulumi.Input[str]] = None,
        name: Optional[pulumi.Input[str]] = None
    ):
        """
        Reference to the issuer responsible for issuing the certificate.
        If the issuer is namespace-scoped, it must be in the same namespace
        as the Certificate. If the issuer is cluster-scoped, it can be used
        from any namespace.

        The `name` field of the reference must always be specified.
        :param pulumi.Input[str] group: Group of the resource being referred to.
        :param pulumi.Input[str] kind: Kind of the resource being referred to.
        :param pulumi.Input[str] name: Name of the resource being referred to.
        """
        if group is not None:
            pulumi.set(__self__, "group", group)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def group(self) -> Optional[pulumi.Input[str]]:
        """
        Group of the resource being referred to.
        """
        return pulumi.get(self, "group")

    @group.setter
    def group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group", value)

    @property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[str]]:
        """
        Kind of the resource being referred to.
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the resource being referred to.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:

    class CertificateRequestSpecIssuerRefArgsDict(TypedDict):
        """
        Reference to the issuer responsible for issuing the certificate.
        If the issuer is namespace-scoped, it must be in the same namespace
        as the Certificate. If the issuer is cluster-scoped, it can be used
        from any namespace.

        The `name` field of the reference must always be specified.
        """

        group: NotRequired[pulumi.Input[str]]
        """
        Group of the resource being referred to.
        """
        kind: NotRequired[pulumi.Input[str]]
        """
        Kind of the resource being referred to.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the resource being referred to.
        """

elif False:
    CertificateRequestSpecIssuerRefArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class CertificateRequestSpecIssuerRefArgs:
    def __init__(
        __self__,
        *,
        group: Optional[pulumi.Input[str]] = None,
        kind: Optional[pulumi.Input[str]] = None,
        name: Optional[pulumi.Input[str]] = None
    ):
        """
        Reference to the issuer responsible for issuing the certificate.
        If the issuer is namespace-scoped, it must be in the same namespace
        as the Certificate. If the issuer is cluster-scoped, it can be used
        from any namespace.

        The `name` field of the reference must always be specified.
        :param pulumi.Input[str] group: Group of the resource being referred to.
        :param pulumi.Input[str] kind: Kind of the resource being referred to.
        :param pulumi.Input[str] name: Name of the resource being referred to.
        """
        if group is not None:
            pulumi.set(__self__, "group", group)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def group(self) -> Optional[pulumi.Input[str]]:
        """
        Group of the resource being referred to.
        """
        return pulumi.get(self, "group")

    @group.setter
    def group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group", value)

    @property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[str]]:
        """
        Kind of the resource being referred to.
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the resource being referred to.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:

    class CertificateRequestSpecPatchArgsDict(TypedDict):
        """
        Specification of the desired state of the CertificateRequest resource.
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
        """

        duration: NotRequired[pulumi.Input[str]]
        """
        Requested 'duration' (i.e. lifetime) of the Certificate. Note that the
        issuer may choose to ignore the requested duration, just like any other
        requested attribute.
        """
        extra: NotRequired[
            pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[str]]]]]
        ]
        """
        Extra contains extra attributes of the user that created the CertificateRequest.
        Populated by the cert-manager webhook on creation and immutable.
        """
        groups: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        Groups contains group membership of the user that created the CertificateRequest.
        Populated by the cert-manager webhook on creation and immutable.
        """
        is_ca: NotRequired[pulumi.Input[bool]]
        """
        Requested basic constraints isCA value. Note that the issuer may choose
        to ignore the requested isCA value, just like any other requested attribute.

        NOTE: If the CSR in the `Request` field has a BasicConstraints extension,
        it must have the same isCA value as specified here.

        If true, this will automatically add the `cert sign` usage to the list
        of requested `usages`.
        """
        issuer_ref: NotRequired[
            pulumi.Input["CertificateRequestSpecIssuerRefPatchArgsDict"]
        ]
        request: NotRequired[pulumi.Input[str]]
        """
        The PEM-encoded X.509 certificate signing request to be submitted to the
        issuer for signing.

        If the CSR has a BasicConstraints extension, its isCA attribute must
        match the `isCA` value of this CertificateRequest.
        If the CSR has a KeyUsage extension, its key usages must match the
        key usages in the `usages` field of this CertificateRequest.
        If the CSR has a ExtKeyUsage extension, its extended key usages
        must match the extended key usages in the `usages` field of this
        CertificateRequest.
        """
        uid: NotRequired[pulumi.Input[str]]
        """
        UID contains the uid of the user that created the CertificateRequest.
        Populated by the cert-manager webhook on creation and immutable.
        """
        usages: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        Requested key usages and extended key usages.

        NOTE: If the CSR in the `Request` field has uses the KeyUsage or
        ExtKeyUsage extension, these extensions must have the same values
        as specified here without any additional values.

        If unset, defaults to `digital signature` and `key encipherment`.
        """
        username: NotRequired[pulumi.Input[str]]
        """
        Username contains the name of the user that created the CertificateRequest.
        Populated by the cert-manager webhook on creation and immutable.
        """

elif False:
    CertificateRequestSpecPatchArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class CertificateRequestSpecPatchArgs:
    def __init__(
        __self__,
        *,
        duration: Optional[pulumi.Input[str]] = None,
        extra: Optional[
            pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[str]]]]]
        ] = None,
        groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        is_ca: Optional[pulumi.Input[bool]] = None,
        issuer_ref: Optional[
            pulumi.Input["CertificateRequestSpecIssuerRefPatchArgs"]
        ] = None,
        request: Optional[pulumi.Input[str]] = None,
        uid: Optional[pulumi.Input[str]] = None,
        usages: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        username: Optional[pulumi.Input[str]] = None
    ):
        """
        Specification of the desired state of the CertificateRequest resource.
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
        :param pulumi.Input[str] duration: Requested 'duration' (i.e. lifetime) of the Certificate. Note that the
               issuer may choose to ignore the requested duration, just like any other
               requested attribute.
        :param pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[str]]]]] extra: Extra contains extra attributes of the user that created the CertificateRequest.
               Populated by the cert-manager webhook on creation and immutable.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] groups: Groups contains group membership of the user that created the CertificateRequest.
               Populated by the cert-manager webhook on creation and immutable.
        :param pulumi.Input[bool] is_ca: Requested basic constraints isCA value. Note that the issuer may choose
               to ignore the requested isCA value, just like any other requested attribute.

               NOTE: If the CSR in the `Request` field has a BasicConstraints extension,
               it must have the same isCA value as specified here.

               If true, this will automatically add the `cert sign` usage to the list
               of requested `usages`.
        :param pulumi.Input[str] request: The PEM-encoded X.509 certificate signing request to be submitted to the
               issuer for signing.

               If the CSR has a BasicConstraints extension, its isCA attribute must
               match the `isCA` value of this CertificateRequest.
               If the CSR has a KeyUsage extension, its key usages must match the
               key usages in the `usages` field of this CertificateRequest.
               If the CSR has a ExtKeyUsage extension, its extended key usages
               must match the extended key usages in the `usages` field of this
               CertificateRequest.
        :param pulumi.Input[str] uid: UID contains the uid of the user that created the CertificateRequest.
               Populated by the cert-manager webhook on creation and immutable.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] usages: Requested key usages and extended key usages.

               NOTE: If the CSR in the `Request` field has uses the KeyUsage or
               ExtKeyUsage extension, these extensions must have the same values
               as specified here without any additional values.

               If unset, defaults to `digital signature` and `key encipherment`.
        :param pulumi.Input[str] username: Username contains the name of the user that created the CertificateRequest.
               Populated by the cert-manager webhook on creation and immutable.
        """
        if duration is not None:
            pulumi.set(__self__, "duration", duration)
        if extra is not None:
            pulumi.set(__self__, "extra", extra)
        if groups is not None:
            pulumi.set(__self__, "groups", groups)
        if is_ca is not None:
            pulumi.set(__self__, "is_ca", is_ca)
        if issuer_ref is not None:
            pulumi.set(__self__, "issuer_ref", issuer_ref)
        if request is not None:
            pulumi.set(__self__, "request", request)
        if uid is not None:
            pulumi.set(__self__, "uid", uid)
        if usages is not None:
            pulumi.set(__self__, "usages", usages)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def duration(self) -> Optional[pulumi.Input[str]]:
        """
        Requested 'duration' (i.e. lifetime) of the Certificate. Note that the
        issuer may choose to ignore the requested duration, just like any other
        requested attribute.
        """
        return pulumi.get(self, "duration")

    @duration.setter
    def duration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "duration", value)

    @property
    @pulumi.getter
    def extra(
        self,
    ) -> Optional[
        pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[str]]]]]
    ]:
        """
        Extra contains extra attributes of the user that created the CertificateRequest.
        Populated by the cert-manager webhook on creation and immutable.
        """
        return pulumi.get(self, "extra")

    @extra.setter
    def extra(
        self,
        value: Optional[
            pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[str]]]]]
        ],
    ):
        pulumi.set(self, "extra", value)

    @property
    @pulumi.getter
    def groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Groups contains group membership of the user that created the CertificateRequest.
        Populated by the cert-manager webhook on creation and immutable.
        """
        return pulumi.get(self, "groups")

    @groups.setter
    def groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "groups", value)

    @property
    @pulumi.getter(name="isCA")
    def is_ca(self) -> Optional[pulumi.Input[bool]]:
        """
        Requested basic constraints isCA value. Note that the issuer may choose
        to ignore the requested isCA value, just like any other requested attribute.

        NOTE: If the CSR in the `Request` field has a BasicConstraints extension,
        it must have the same isCA value as specified here.

        If true, this will automatically add the `cert sign` usage to the list
        of requested `usages`.
        """
        return pulumi.get(self, "is_ca")

    @is_ca.setter
    def is_ca(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_ca", value)

    @property
    @pulumi.getter(name="issuerRef")
    def issuer_ref(
        self,
    ) -> Optional[pulumi.Input["CertificateRequestSpecIssuerRefPatchArgs"]]:
        return pulumi.get(self, "issuer_ref")

    @issuer_ref.setter
    def issuer_ref(
        self, value: Optional[pulumi.Input["CertificateRequestSpecIssuerRefPatchArgs"]]
    ):
        pulumi.set(self, "issuer_ref", value)

    @property
    @pulumi.getter
    def request(self) -> Optional[pulumi.Input[str]]:
        """
        The PEM-encoded X.509 certificate signing request to be submitted to the
        issuer for signing.

        If the CSR has a BasicConstraints extension, its isCA attribute must
        match the `isCA` value of this CertificateRequest.
        If the CSR has a KeyUsage extension, its key usages must match the
        key usages in the `usages` field of this CertificateRequest.
        If the CSR has a ExtKeyUsage extension, its extended key usages
        must match the extended key usages in the `usages` field of this
        CertificateRequest.
        """
        return pulumi.get(self, "request")

    @request.setter
    def request(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "request", value)

    @property
    @pulumi.getter
    def uid(self) -> Optional[pulumi.Input[str]]:
        """
        UID contains the uid of the user that created the CertificateRequest.
        Populated by the cert-manager webhook on creation and immutable.
        """
        return pulumi.get(self, "uid")

    @uid.setter
    def uid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uid", value)

    @property
    @pulumi.getter
    def usages(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Requested key usages and extended key usages.

        NOTE: If the CSR in the `Request` field has uses the KeyUsage or
        ExtKeyUsage extension, these extensions must have the same values
        as specified here without any additional values.

        If unset, defaults to `digital signature` and `key encipherment`.
        """
        return pulumi.get(self, "usages")

    @usages.setter
    def usages(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "usages", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        """
        Username contains the name of the user that created the CertificateRequest.
        Populated by the cert-manager webhook on creation and immutable.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


if not MYPY:

    class CertificateRequestSpecArgsDict(TypedDict):
        """
        Specification of the desired state of the CertificateRequest resource.
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
        """

        duration: NotRequired[pulumi.Input[str]]
        """
        Requested 'duration' (i.e. lifetime) of the Certificate. Note that the
        issuer may choose to ignore the requested duration, just like any other
        requested attribute.
        """
        extra: NotRequired[
            pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[str]]]]]
        ]
        """
        Extra contains extra attributes of the user that created the CertificateRequest.
        Populated by the cert-manager webhook on creation and immutable.
        """
        groups: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        Groups contains group membership of the user that created the CertificateRequest.
        Populated by the cert-manager webhook on creation and immutable.
        """
        is_ca: NotRequired[pulumi.Input[bool]]
        """
        Requested basic constraints isCA value. Note that the issuer may choose
        to ignore the requested isCA value, just like any other requested attribute.

        NOTE: If the CSR in the `Request` field has a BasicConstraints extension,
        it must have the same isCA value as specified here.

        If true, this will automatically add the `cert sign` usage to the list
        of requested `usages`.
        """
        issuer_ref: NotRequired[pulumi.Input["CertificateRequestSpecIssuerRefArgsDict"]]
        request: NotRequired[pulumi.Input[str]]
        """
        The PEM-encoded X.509 certificate signing request to be submitted to the
        issuer for signing.

        If the CSR has a BasicConstraints extension, its isCA attribute must
        match the `isCA` value of this CertificateRequest.
        If the CSR has a KeyUsage extension, its key usages must match the
        key usages in the `usages` field of this CertificateRequest.
        If the CSR has a ExtKeyUsage extension, its extended key usages
        must match the extended key usages in the `usages` field of this
        CertificateRequest.
        """
        uid: NotRequired[pulumi.Input[str]]
        """
        UID contains the uid of the user that created the CertificateRequest.
        Populated by the cert-manager webhook on creation and immutable.
        """
        usages: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        Requested key usages and extended key usages.

        NOTE: If the CSR in the `Request` field has uses the KeyUsage or
        ExtKeyUsage extension, these extensions must have the same values
        as specified here without any additional values.

        If unset, defaults to `digital signature` and `key encipherment`.
        """
        username: NotRequired[pulumi.Input[str]]
        """
        Username contains the name of the user that created the CertificateRequest.
        Populated by the cert-manager webhook on creation and immutable.
        """

elif False:
    CertificateRequestSpecArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class CertificateRequestSpecArgs:
    def __init__(
        __self__,
        *,
        duration: Optional[pulumi.Input[str]] = None,
        extra: Optional[
            pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[str]]]]]
        ] = None,
        groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        is_ca: Optional[pulumi.Input[bool]] = None,
        issuer_ref: Optional[
            pulumi.Input["CertificateRequestSpecIssuerRefArgs"]
        ] = None,
        request: Optional[pulumi.Input[str]] = None,
        uid: Optional[pulumi.Input[str]] = None,
        usages: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        username: Optional[pulumi.Input[str]] = None
    ):
        """
        Specification of the desired state of the CertificateRequest resource.
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
        :param pulumi.Input[str] duration: Requested 'duration' (i.e. lifetime) of the Certificate. Note that the
               issuer may choose to ignore the requested duration, just like any other
               requested attribute.
        :param pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[str]]]]] extra: Extra contains extra attributes of the user that created the CertificateRequest.
               Populated by the cert-manager webhook on creation and immutable.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] groups: Groups contains group membership of the user that created the CertificateRequest.
               Populated by the cert-manager webhook on creation and immutable.
        :param pulumi.Input[bool] is_ca: Requested basic constraints isCA value. Note that the issuer may choose
               to ignore the requested isCA value, just like any other requested attribute.

               NOTE: If the CSR in the `Request` field has a BasicConstraints extension,
               it must have the same isCA value as specified here.

               If true, this will automatically add the `cert sign` usage to the list
               of requested `usages`.
        :param pulumi.Input[str] request: The PEM-encoded X.509 certificate signing request to be submitted to the
               issuer for signing.

               If the CSR has a BasicConstraints extension, its isCA attribute must
               match the `isCA` value of this CertificateRequest.
               If the CSR has a KeyUsage extension, its key usages must match the
               key usages in the `usages` field of this CertificateRequest.
               If the CSR has a ExtKeyUsage extension, its extended key usages
               must match the extended key usages in the `usages` field of this
               CertificateRequest.
        :param pulumi.Input[str] uid: UID contains the uid of the user that created the CertificateRequest.
               Populated by the cert-manager webhook on creation and immutable.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] usages: Requested key usages and extended key usages.

               NOTE: If the CSR in the `Request` field has uses the KeyUsage or
               ExtKeyUsage extension, these extensions must have the same values
               as specified here without any additional values.

               If unset, defaults to `digital signature` and `key encipherment`.
        :param pulumi.Input[str] username: Username contains the name of the user that created the CertificateRequest.
               Populated by the cert-manager webhook on creation and immutable.
        """
        if duration is not None:
            pulumi.set(__self__, "duration", duration)
        if extra is not None:
            pulumi.set(__self__, "extra", extra)
        if groups is not None:
            pulumi.set(__self__, "groups", groups)
        if is_ca is not None:
            pulumi.set(__self__, "is_ca", is_ca)
        if issuer_ref is not None:
            pulumi.set(__self__, "issuer_ref", issuer_ref)
        if request is not None:
            pulumi.set(__self__, "request", request)
        if uid is not None:
            pulumi.set(__self__, "uid", uid)
        if usages is not None:
            pulumi.set(__self__, "usages", usages)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def duration(self) -> Optional[pulumi.Input[str]]:
        """
        Requested 'duration' (i.e. lifetime) of the Certificate. Note that the
        issuer may choose to ignore the requested duration, just like any other
        requested attribute.
        """
        return pulumi.get(self, "duration")

    @duration.setter
    def duration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "duration", value)

    @property
    @pulumi.getter
    def extra(
        self,
    ) -> Optional[
        pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[str]]]]]
    ]:
        """
        Extra contains extra attributes of the user that created the CertificateRequest.
        Populated by the cert-manager webhook on creation and immutable.
        """
        return pulumi.get(self, "extra")

    @extra.setter
    def extra(
        self,
        value: Optional[
            pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[str]]]]]
        ],
    ):
        pulumi.set(self, "extra", value)

    @property
    @pulumi.getter
    def groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Groups contains group membership of the user that created the CertificateRequest.
        Populated by the cert-manager webhook on creation and immutable.
        """
        return pulumi.get(self, "groups")

    @groups.setter
    def groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "groups", value)

    @property
    @pulumi.getter(name="isCA")
    def is_ca(self) -> Optional[pulumi.Input[bool]]:
        """
        Requested basic constraints isCA value. Note that the issuer may choose
        to ignore the requested isCA value, just like any other requested attribute.

        NOTE: If the CSR in the `Request` field has a BasicConstraints extension,
        it must have the same isCA value as specified here.

        If true, this will automatically add the `cert sign` usage to the list
        of requested `usages`.
        """
        return pulumi.get(self, "is_ca")

    @is_ca.setter
    def is_ca(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_ca", value)

    @property
    @pulumi.getter(name="issuerRef")
    def issuer_ref(
        self,
    ) -> Optional[pulumi.Input["CertificateRequestSpecIssuerRefArgs"]]:
        return pulumi.get(self, "issuer_ref")

    @issuer_ref.setter
    def issuer_ref(
        self, value: Optional[pulumi.Input["CertificateRequestSpecIssuerRefArgs"]]
    ):
        pulumi.set(self, "issuer_ref", value)

    @property
    @pulumi.getter
    def request(self) -> Optional[pulumi.Input[str]]:
        """
        The PEM-encoded X.509 certificate signing request to be submitted to the
        issuer for signing.

        If the CSR has a BasicConstraints extension, its isCA attribute must
        match the `isCA` value of this CertificateRequest.
        If the CSR has a KeyUsage extension, its key usages must match the
        key usages in the `usages` field of this CertificateRequest.
        If the CSR has a ExtKeyUsage extension, its extended key usages
        must match the extended key usages in the `usages` field of this
        CertificateRequest.
        """
        return pulumi.get(self, "request")

    @request.setter
    def request(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "request", value)

    @property
    @pulumi.getter
    def uid(self) -> Optional[pulumi.Input[str]]:
        """
        UID contains the uid of the user that created the CertificateRequest.
        Populated by the cert-manager webhook on creation and immutable.
        """
        return pulumi.get(self, "uid")

    @uid.setter
    def uid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uid", value)

    @property
    @pulumi.getter
    def usages(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Requested key usages and extended key usages.

        NOTE: If the CSR in the `Request` field has uses the KeyUsage or
        ExtKeyUsage extension, these extensions must have the same values
        as specified here without any additional values.

        If unset, defaults to `digital signature` and `key encipherment`.
        """
        return pulumi.get(self, "usages")

    @usages.setter
    def usages(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "usages", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        """
        Username contains the name of the user that created the CertificateRequest.
        Populated by the cert-manager webhook on creation and immutable.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


if not MYPY:

    class CertificateRequestStatusConditionsArgsDict(TypedDict):
        """
        CertificateRequestCondition contains condition information for a CertificateRequest.
        """

        last_transition_time: NotRequired[pulumi.Input[str]]
        """
        LastTransitionTime is the timestamp corresponding to the last status
        change of this condition.
        """
        message: NotRequired[pulumi.Input[str]]
        """
        Message is a human readable description of the details of the last
        transition, complementing reason.
        """
        reason: NotRequired[pulumi.Input[str]]
        """
        Reason is a brief machine readable explanation for the condition's last
        transition.
        """
        status: NotRequired[pulumi.Input[str]]
        """
        Status of the condition, one of (`True`, `False`, `Unknown`).
        """
        type: NotRequired[pulumi.Input[str]]
        """
        Type of the condition, known values are (`Ready`, `InvalidRequest`,
        `Approved`, `Denied`).
        """

elif False:
    CertificateRequestStatusConditionsArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class CertificateRequestStatusConditionsArgs:
    def __init__(
        __self__,
        *,
        last_transition_time: Optional[pulumi.Input[str]] = None,
        message: Optional[pulumi.Input[str]] = None,
        reason: Optional[pulumi.Input[str]] = None,
        status: Optional[pulumi.Input[str]] = None,
        type: Optional[pulumi.Input[str]] = None
    ):
        """
        CertificateRequestCondition contains condition information for a CertificateRequest.
        :param pulumi.Input[str] last_transition_time: LastTransitionTime is the timestamp corresponding to the last status
               change of this condition.
        :param pulumi.Input[str] message: Message is a human readable description of the details of the last
               transition, complementing reason.
        :param pulumi.Input[str] reason: Reason is a brief machine readable explanation for the condition's last
               transition.
        :param pulumi.Input[str] status: Status of the condition, one of (`True`, `False`, `Unknown`).
        :param pulumi.Input[str] type: Type of the condition, known values are (`Ready`, `InvalidRequest`,
               `Approved`, `Denied`).
        """
        if last_transition_time is not None:
            pulumi.set(__self__, "last_transition_time", last_transition_time)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> Optional[pulumi.Input[str]]:
        """
        LastTransitionTime is the timestamp corresponding to the last status
        change of this condition.
        """
        return pulumi.get(self, "last_transition_time")

    @last_transition_time.setter
    def last_transition_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_transition_time", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        """
        Message is a human readable description of the details of the last
        transition, complementing reason.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def reason(self) -> Optional[pulumi.Input[str]]:
        """
        Reason is a brief machine readable explanation for the condition's last
        transition.
        """
        return pulumi.get(self, "reason")

    @reason.setter
    def reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reason", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Status of the condition, one of (`True`, `False`, `Unknown`).
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of the condition, known values are (`Ready`, `InvalidRequest`,
        `Approved`, `Denied`).
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


if not MYPY:

    class CertificateRequestStatusArgsDict(TypedDict):
        """
        Status of the CertificateRequest.
        This is set and managed automatically.
        Read-only.
        More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
        """

        ca: NotRequired[pulumi.Input[str]]
        """
        The PEM encoded X.509 certificate of the signer, also known as the CA
        (Certificate Authority).
        This is set on a best-effort basis by different issuers.
        If not set, the CA is assumed to be unknown/not available.
        """
        certificate: NotRequired[pulumi.Input[str]]
        """
        The PEM encoded X.509 certificate resulting from the certificate
        signing request.
        If not set, the CertificateRequest has either not been completed or has
        failed. More information on failure can be found by checking the
        `conditions` field.
        """
        conditions: NotRequired[
            pulumi.Input[
                Sequence[pulumi.Input["CertificateRequestStatusConditionsArgsDict"]]
            ]
        ]
        """
        List of status conditions to indicate the status of a CertificateRequest.
        Known condition types are `Ready`, `InvalidRequest`, `Approved` and `Denied`.
        """
        failure_time: NotRequired[pulumi.Input[str]]
        """
        FailureTime stores the time that this CertificateRequest failed. This is
        used to influence garbage collection and back-off.
        """

elif False:
    CertificateRequestStatusArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class CertificateRequestStatusArgs:
    def __init__(
        __self__,
        *,
        ca: Optional[pulumi.Input[str]] = None,
        certificate: Optional[pulumi.Input[str]] = None,
        conditions: Optional[
            pulumi.Input[
                Sequence[pulumi.Input["CertificateRequestStatusConditionsArgs"]]
            ]
        ] = None,
        failure_time: Optional[pulumi.Input[str]] = None
    ):
        """
        Status of the CertificateRequest.
        This is set and managed automatically.
        Read-only.
        More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
        :param pulumi.Input[str] ca: The PEM encoded X.509 certificate of the signer, also known as the CA
               (Certificate Authority).
               This is set on a best-effort basis by different issuers.
               If not set, the CA is assumed to be unknown/not available.
        :param pulumi.Input[str] certificate: The PEM encoded X.509 certificate resulting from the certificate
               signing request.
               If not set, the CertificateRequest has either not been completed or has
               failed. More information on failure can be found by checking the
               `conditions` field.
        :param pulumi.Input[Sequence[pulumi.Input['CertificateRequestStatusConditionsArgs']]] conditions: List of status conditions to indicate the status of a CertificateRequest.
               Known condition types are `Ready`, `InvalidRequest`, `Approved` and `Denied`.
        :param pulumi.Input[str] failure_time: FailureTime stores the time that this CertificateRequest failed. This is
               used to influence garbage collection and back-off.
        """
        if ca is not None:
            pulumi.set(__self__, "ca", ca)
        if certificate is not None:
            pulumi.set(__self__, "certificate", certificate)
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if failure_time is not None:
            pulumi.set(__self__, "failure_time", failure_time)

    @property
    @pulumi.getter
    def ca(self) -> Optional[pulumi.Input[str]]:
        """
        The PEM encoded X.509 certificate of the signer, also known as the CA
        (Certificate Authority).
        This is set on a best-effort basis by different issuers.
        If not set, the CA is assumed to be unknown/not available.
        """
        return pulumi.get(self, "ca")

    @ca.setter
    def ca(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ca", value)

    @property
    @pulumi.getter
    def certificate(self) -> Optional[pulumi.Input[str]]:
        """
        The PEM encoded X.509 certificate resulting from the certificate
        signing request.
        If not set, the CertificateRequest has either not been completed or has
        failed. More information on failure can be found by checking the
        `conditions` field.
        """
        return pulumi.get(self, "certificate")

    @certificate.setter
    def certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate", value)

    @property
    @pulumi.getter
    def conditions(
        self,
    ) -> Optional[
        pulumi.Input[Sequence[pulumi.Input["CertificateRequestStatusConditionsArgs"]]]
    ]:
        """
        List of status conditions to indicate the status of a CertificateRequest.
        Known condition types are `Ready`, `InvalidRequest`, `Approved` and `Denied`.
        """
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[pulumi.Input["CertificateRequestStatusConditionsArgs"]]
            ]
        ],
    ):
        pulumi.set(self, "conditions", value)

    @property
    @pulumi.getter(name="failureTime")
    def failure_time(self) -> Optional[pulumi.Input[str]]:
        """
        FailureTime stores the time that this CertificateRequest failed. This is
        used to influence garbage collection and back-off.
        """
        return pulumi.get(self, "failure_time")

    @failure_time.setter
    def failure_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "failure_time", value)


if not MYPY:

    class CertificateRequestArgsDict(TypedDict):
        """
        A CertificateRequest is used to request a signed certificate from one of the
        configured issuers.

        All fields within the CertificateRequest's `spec` are immutable after creation.
        A CertificateRequest will either succeed or fail, as denoted by its `Ready` status
        condition and its `status.failureTime` field.

        A CertificateRequest is a one-shot resource, meaning it represents a single
        point in time request for a certificate and cannot be re-used.
        """

        api_version: NotRequired[pulumi.Input[str]]
        """
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
        """
        kind: NotRequired[pulumi.Input[str]]
        """
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        """
        metadata: NotRequired[pulumi.Input["_meta.v1.ObjectMetaArgsDict"]]
        """
        Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
        """
        spec: NotRequired[pulumi.Input["CertificateRequestSpecArgsDict"]]
        status: NotRequired[pulumi.Input["CertificateRequestStatusArgsDict"]]

elif False:
    CertificateRequestArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class CertificateRequestArgs:
    def __init__(
        __self__,
        *,
        api_version: Optional[pulumi.Input[str]] = None,
        kind: Optional[pulumi.Input[str]] = None,
        metadata: Optional[pulumi.Input["_meta.v1.ObjectMetaArgs"]] = None,
        spec: Optional[pulumi.Input["CertificateRequestSpecArgs"]] = None,
        status: Optional[pulumi.Input["CertificateRequestStatusArgs"]] = None
    ):
        """
        A CertificateRequest is used to request a signed certificate from one of the
        configured issuers.

        All fields within the CertificateRequest's `spec` are immutable after creation.
        A CertificateRequest will either succeed or fail, as denoted by its `Ready` status
        condition and its `status.failureTime` field.

        A CertificateRequest is a one-shot resource, meaning it represents a single
        point in time request for a certificate and cannot be re-used.
        :param pulumi.Input[str] api_version: APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
        :param pulumi.Input[str] kind: Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        :param pulumi.Input['_meta.v1.ObjectMetaArgs'] metadata: Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
        """
        if api_version is not None:
            pulumi.set(__self__, "api_version", "cert-manager.io/v1")
        if kind is not None:
            pulumi.set(__self__, "kind", "CertificateRequest")
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if spec is not None:
            pulumi.set(__self__, "spec", spec)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[pulumi.Input[str]]:
        """
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
        """
        return pulumi.get(self, "api_version")

    @api_version.setter
    def api_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_version", value)

    @property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[str]]:
        """
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input["_meta.v1.ObjectMetaArgs"]]:
        """
        Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
        """
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input["_meta.v1.ObjectMetaArgs"]]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter
    def spec(self) -> Optional[pulumi.Input["CertificateRequestSpecArgs"]]:
        return pulumi.get(self, "spec")

    @spec.setter
    def spec(self, value: Optional[pulumi.Input["CertificateRequestSpecArgs"]]):
        pulumi.set(self, "spec", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input["CertificateRequestStatusArgs"]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input["CertificateRequestStatusArgs"]]):
        pulumi.set(self, "status", value)


if not MYPY:

    class CertificateSpecAdditionalOutputFormatsPatchArgsDict(TypedDict):
        """
        CertificateAdditionalOutputFormat defines an additional output format of a
        Certificate resource. These contain supplementary data formats of the signed
        certificate chain and paired private key.
        """

        type: NotRequired[pulumi.Input[str]]
        """
        Type is the name of the format type that should be written to the
        Certificate's target Secret.
        """

elif False:
    CertificateSpecAdditionalOutputFormatsPatchArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class CertificateSpecAdditionalOutputFormatsPatchArgs:
    def __init__(__self__, *, type: Optional[pulumi.Input[str]] = None):
        """
        CertificateAdditionalOutputFormat defines an additional output format of a
        Certificate resource. These contain supplementary data formats of the signed
        certificate chain and paired private key.
        :param pulumi.Input[str] type: Type is the name of the format type that should be written to the
               Certificate's target Secret.
        """
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Type is the name of the format type that should be written to the
        Certificate's target Secret.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


if not MYPY:

    class CertificateSpecAdditionalOutputFormatsArgsDict(TypedDict):
        """
        CertificateAdditionalOutputFormat defines an additional output format of a
        Certificate resource. These contain supplementary data formats of the signed
        certificate chain and paired private key.
        """

        type: NotRequired[pulumi.Input[str]]
        """
        Type is the name of the format type that should be written to the
        Certificate's target Secret.
        """

elif False:
    CertificateSpecAdditionalOutputFormatsArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class CertificateSpecAdditionalOutputFormatsArgs:
    def __init__(__self__, *, type: Optional[pulumi.Input[str]] = None):
        """
        CertificateAdditionalOutputFormat defines an additional output format of a
        Certificate resource. These contain supplementary data formats of the signed
        certificate chain and paired private key.
        :param pulumi.Input[str] type: Type is the name of the format type that should be written to the
               Certificate's target Secret.
        """
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Type is the name of the format type that should be written to the
        Certificate's target Secret.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


if not MYPY:

    class CertificateSpecIssuerRefPatchArgsDict(TypedDict):
        """
        Reference to the issuer responsible for issuing the certificate.
        If the issuer is namespace-scoped, it must be in the same namespace
        as the Certificate. If the issuer is cluster-scoped, it can be used
        from any namespace.

        The `name` field of the reference must always be specified.
        """

        group: NotRequired[pulumi.Input[str]]
        """
        Group of the resource being referred to.
        """
        kind: NotRequired[pulumi.Input[str]]
        """
        Kind of the resource being referred to.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the resource being referred to.
        """

elif False:
    CertificateSpecIssuerRefPatchArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class CertificateSpecIssuerRefPatchArgs:
    def __init__(
        __self__,
        *,
        group: Optional[pulumi.Input[str]] = None,
        kind: Optional[pulumi.Input[str]] = None,
        name: Optional[pulumi.Input[str]] = None
    ):
        """
        Reference to the issuer responsible for issuing the certificate.
        If the issuer is namespace-scoped, it must be in the same namespace
        as the Certificate. If the issuer is cluster-scoped, it can be used
        from any namespace.

        The `name` field of the reference must always be specified.
        :param pulumi.Input[str] group: Group of the resource being referred to.
        :param pulumi.Input[str] kind: Kind of the resource being referred to.
        :param pulumi.Input[str] name: Name of the resource being referred to.
        """
        if group is not None:
            pulumi.set(__self__, "group", group)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def group(self) -> Optional[pulumi.Input[str]]:
        """
        Group of the resource being referred to.
        """
        return pulumi.get(self, "group")

    @group.setter
    def group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group", value)

    @property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[str]]:
        """
        Kind of the resource being referred to.
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the resource being referred to.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:

    class CertificateSpecIssuerRefArgsDict(TypedDict):
        """
        Reference to the issuer responsible for issuing the certificate.
        If the issuer is namespace-scoped, it must be in the same namespace
        as the Certificate. If the issuer is cluster-scoped, it can be used
        from any namespace.

        The `name` field of the reference must always be specified.
        """

        group: NotRequired[pulumi.Input[str]]
        """
        Group of the resource being referred to.
        """
        kind: NotRequired[pulumi.Input[str]]
        """
        Kind of the resource being referred to.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the resource being referred to.
        """

elif False:
    CertificateSpecIssuerRefArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class CertificateSpecIssuerRefArgs:
    def __init__(
        __self__,
        *,
        group: Optional[pulumi.Input[str]] = None,
        kind: Optional[pulumi.Input[str]] = None,
        name: Optional[pulumi.Input[str]] = None
    ):
        """
        Reference to the issuer responsible for issuing the certificate.
        If the issuer is namespace-scoped, it must be in the same namespace
        as the Certificate. If the issuer is cluster-scoped, it can be used
        from any namespace.

        The `name` field of the reference must always be specified.
        :param pulumi.Input[str] group: Group of the resource being referred to.
        :param pulumi.Input[str] kind: Kind of the resource being referred to.
        :param pulumi.Input[str] name: Name of the resource being referred to.
        """
        if group is not None:
            pulumi.set(__self__, "group", group)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def group(self) -> Optional[pulumi.Input[str]]:
        """
        Group of the resource being referred to.
        """
        return pulumi.get(self, "group")

    @group.setter
    def group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group", value)

    @property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[str]]:
        """
        Kind of the resource being referred to.
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the resource being referred to.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:

    class CertificateSpecKeystoresJksPasswordSecretRefPatchArgsDict(TypedDict):
        """
        PasswordSecretRef is a reference to a non-empty key in a Secret resource
        containing the password used to encrypt the JKS keystore.
        Mutually exclusive with password.
        One of password or passwordSecretRef must provide a password with a non-zero length.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """

elif False:
    CertificateSpecKeystoresJksPasswordSecretRefPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class CertificateSpecKeystoresJksPasswordSecretRefPatchArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        name: Optional[pulumi.Input[str]] = None
    ):
        """
        PasswordSecretRef is a reference to a non-empty key in a Secret resource
        containing the password used to encrypt the JKS keystore.
        Mutually exclusive with password.
        One of password or passwordSecretRef must provide a password with a non-zero length.
        :param pulumi.Input[str] key: The key of the entry in the Secret resource's `data` field to be used.
               Some instances of this field may be defaulted, in others it may be
               required.
        :param pulumi.Input[str] name: Name of the resource being referred to.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:

    class CertificateSpecKeystoresJksPasswordSecretRefArgsDict(TypedDict):
        """
        PasswordSecretRef is a reference to a non-empty key in a Secret resource
        containing the password used to encrypt the JKS keystore.
        Mutually exclusive with password.
        One of password or passwordSecretRef must provide a password with a non-zero length.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """

elif False:
    CertificateSpecKeystoresJksPasswordSecretRefArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class CertificateSpecKeystoresJksPasswordSecretRefArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        name: Optional[pulumi.Input[str]] = None
    ):
        """
        PasswordSecretRef is a reference to a non-empty key in a Secret resource
        containing the password used to encrypt the JKS keystore.
        Mutually exclusive with password.
        One of password or passwordSecretRef must provide a password with a non-zero length.
        :param pulumi.Input[str] key: The key of the entry in the Secret resource's `data` field to be used.
               Some instances of this field may be defaulted, in others it may be
               required.
        :param pulumi.Input[str] name: Name of the resource being referred to.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:

    class CertificateSpecKeystoresJksPatchArgsDict(TypedDict):
        """
        JKS configures options for storing a JKS keystore in the
        `spec.secretName` Secret resource.
        """

        alias: NotRequired[pulumi.Input[str]]
        """
        Alias specifies the alias of the key in the keystore, required by the JKS format.
        If not provided, the default alias `certificate` will be used.
        """
        create: NotRequired[pulumi.Input[bool]]
        """
        Create enables JKS keystore creation for the Certificate.
        If true, a file named `keystore.jks` will be created in the target
        Secret resource, encrypted using the password stored in
        `passwordSecretRef` or `password`.
        The keystore file will be updated immediately.
        If the issuer provided a CA certificate, a file named `truststore.jks`
        will also be created in the target Secret resource, encrypted using the
        password stored in `passwordSecretRef`
        containing the issuing Certificate Authority
        """
        password: NotRequired[pulumi.Input[str]]
        """
        Password provides a literal password used to encrypt the JKS keystore.
        Mutually exclusive with passwordSecretRef.
        One of password or passwordSecretRef must provide a password with a non-zero length.
        """
        password_secret_ref: NotRequired[
            pulumi.Input["CertificateSpecKeystoresJksPasswordSecretRefPatchArgsDict"]
        ]

elif False:
    CertificateSpecKeystoresJksPatchArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class CertificateSpecKeystoresJksPatchArgs:
    def __init__(
        __self__,
        *,
        alias: Optional[pulumi.Input[str]] = None,
        create: Optional[pulumi.Input[bool]] = None,
        password: Optional[pulumi.Input[str]] = None,
        password_secret_ref: Optional[
            pulumi.Input["CertificateSpecKeystoresJksPasswordSecretRefPatchArgs"]
        ] = None
    ):
        """
        JKS configures options for storing a JKS keystore in the
        `spec.secretName` Secret resource.
        :param pulumi.Input[str] alias: Alias specifies the alias of the key in the keystore, required by the JKS format.
               If not provided, the default alias `certificate` will be used.
        :param pulumi.Input[bool] create: Create enables JKS keystore creation for the Certificate.
               If true, a file named `keystore.jks` will be created in the target
               Secret resource, encrypted using the password stored in
               `passwordSecretRef` or `password`.
               The keystore file will be updated immediately.
               If the issuer provided a CA certificate, a file named `truststore.jks`
               will also be created in the target Secret resource, encrypted using the
               password stored in `passwordSecretRef`
               containing the issuing Certificate Authority
        :param pulumi.Input[str] password: Password provides a literal password used to encrypt the JKS keystore.
               Mutually exclusive with passwordSecretRef.
               One of password or passwordSecretRef must provide a password with a non-zero length.
        """
        if alias is not None:
            pulumi.set(__self__, "alias", alias)
        if create is not None:
            pulumi.set(__self__, "create", create)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if password_secret_ref is not None:
            pulumi.set(__self__, "password_secret_ref", password_secret_ref)

    @property
    @pulumi.getter
    def alias(self) -> Optional[pulumi.Input[str]]:
        """
        Alias specifies the alias of the key in the keystore, required by the JKS format.
        If not provided, the default alias `certificate` will be used.
        """
        return pulumi.get(self, "alias")

    @alias.setter
    def alias(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alias", value)

    @property
    @pulumi.getter
    def create(self) -> Optional[pulumi.Input[bool]]:
        """
        Create enables JKS keystore creation for the Certificate.
        If true, a file named `keystore.jks` will be created in the target
        Secret resource, encrypted using the password stored in
        `passwordSecretRef` or `password`.
        The keystore file will be updated immediately.
        If the issuer provided a CA certificate, a file named `truststore.jks`
        will also be created in the target Secret resource, encrypted using the
        password stored in `passwordSecretRef`
        containing the issuing Certificate Authority
        """
        return pulumi.get(self, "create")

    @create.setter
    def create(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "create", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        Password provides a literal password used to encrypt the JKS keystore.
        Mutually exclusive with passwordSecretRef.
        One of password or passwordSecretRef must provide a password with a non-zero length.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="passwordSecretRef")
    def password_secret_ref(
        self,
    ) -> Optional[
        pulumi.Input["CertificateSpecKeystoresJksPasswordSecretRefPatchArgs"]
    ]:
        return pulumi.get(self, "password_secret_ref")

    @password_secret_ref.setter
    def password_secret_ref(
        self,
        value: Optional[
            pulumi.Input["CertificateSpecKeystoresJksPasswordSecretRefPatchArgs"]
        ],
    ):
        pulumi.set(self, "password_secret_ref", value)


if not MYPY:

    class CertificateSpecKeystoresJksArgsDict(TypedDict):
        """
        JKS configures options for storing a JKS keystore in the
        `spec.secretName` Secret resource.
        """

        alias: NotRequired[pulumi.Input[str]]
        """
        Alias specifies the alias of the key in the keystore, required by the JKS format.
        If not provided, the default alias `certificate` will be used.
        """
        create: NotRequired[pulumi.Input[bool]]
        """
        Create enables JKS keystore creation for the Certificate.
        If true, a file named `keystore.jks` will be created in the target
        Secret resource, encrypted using the password stored in
        `passwordSecretRef` or `password`.
        The keystore file will be updated immediately.
        If the issuer provided a CA certificate, a file named `truststore.jks`
        will also be created in the target Secret resource, encrypted using the
        password stored in `passwordSecretRef`
        containing the issuing Certificate Authority
        """
        password: NotRequired[pulumi.Input[str]]
        """
        Password provides a literal password used to encrypt the JKS keystore.
        Mutually exclusive with passwordSecretRef.
        One of password or passwordSecretRef must provide a password with a non-zero length.
        """
        password_secret_ref: NotRequired[
            pulumi.Input["CertificateSpecKeystoresJksPasswordSecretRefArgsDict"]
        ]

elif False:
    CertificateSpecKeystoresJksArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class CertificateSpecKeystoresJksArgs:
    def __init__(
        __self__,
        *,
        alias: Optional[pulumi.Input[str]] = None,
        create: Optional[pulumi.Input[bool]] = None,
        password: Optional[pulumi.Input[str]] = None,
        password_secret_ref: Optional[
            pulumi.Input["CertificateSpecKeystoresJksPasswordSecretRefArgs"]
        ] = None
    ):
        """
        JKS configures options for storing a JKS keystore in the
        `spec.secretName` Secret resource.
        :param pulumi.Input[str] alias: Alias specifies the alias of the key in the keystore, required by the JKS format.
               If not provided, the default alias `certificate` will be used.
        :param pulumi.Input[bool] create: Create enables JKS keystore creation for the Certificate.
               If true, a file named `keystore.jks` will be created in the target
               Secret resource, encrypted using the password stored in
               `passwordSecretRef` or `password`.
               The keystore file will be updated immediately.
               If the issuer provided a CA certificate, a file named `truststore.jks`
               will also be created in the target Secret resource, encrypted using the
               password stored in `passwordSecretRef`
               containing the issuing Certificate Authority
        :param pulumi.Input[str] password: Password provides a literal password used to encrypt the JKS keystore.
               Mutually exclusive with passwordSecretRef.
               One of password or passwordSecretRef must provide a password with a non-zero length.
        """
        if alias is not None:
            pulumi.set(__self__, "alias", alias)
        if create is not None:
            pulumi.set(__self__, "create", create)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if password_secret_ref is not None:
            pulumi.set(__self__, "password_secret_ref", password_secret_ref)

    @property
    @pulumi.getter
    def alias(self) -> Optional[pulumi.Input[str]]:
        """
        Alias specifies the alias of the key in the keystore, required by the JKS format.
        If not provided, the default alias `certificate` will be used.
        """
        return pulumi.get(self, "alias")

    @alias.setter
    def alias(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alias", value)

    @property
    @pulumi.getter
    def create(self) -> Optional[pulumi.Input[bool]]:
        """
        Create enables JKS keystore creation for the Certificate.
        If true, a file named `keystore.jks` will be created in the target
        Secret resource, encrypted using the password stored in
        `passwordSecretRef` or `password`.
        The keystore file will be updated immediately.
        If the issuer provided a CA certificate, a file named `truststore.jks`
        will also be created in the target Secret resource, encrypted using the
        password stored in `passwordSecretRef`
        containing the issuing Certificate Authority
        """
        return pulumi.get(self, "create")

    @create.setter
    def create(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "create", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        Password provides a literal password used to encrypt the JKS keystore.
        Mutually exclusive with passwordSecretRef.
        One of password or passwordSecretRef must provide a password with a non-zero length.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="passwordSecretRef")
    def password_secret_ref(
        self,
    ) -> Optional[pulumi.Input["CertificateSpecKeystoresJksPasswordSecretRefArgs"]]:
        return pulumi.get(self, "password_secret_ref")

    @password_secret_ref.setter
    def password_secret_ref(
        self,
        value: Optional[
            pulumi.Input["CertificateSpecKeystoresJksPasswordSecretRefArgs"]
        ],
    ):
        pulumi.set(self, "password_secret_ref", value)


if not MYPY:

    class CertificateSpecKeystoresPatchArgsDict(TypedDict):
        """
        Additional keystore output formats to be stored in the Certificate's Secret.
        """

        jks: NotRequired[pulumi.Input["CertificateSpecKeystoresJksPatchArgsDict"]]
        pkcs12: NotRequired[pulumi.Input["CertificateSpecKeystoresPkcs12PatchArgsDict"]]

elif False:
    CertificateSpecKeystoresPatchArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class CertificateSpecKeystoresPatchArgs:
    def __init__(
        __self__,
        *,
        jks: Optional[pulumi.Input["CertificateSpecKeystoresJksPatchArgs"]] = None,
        pkcs12: Optional[pulumi.Input["CertificateSpecKeystoresPkcs12PatchArgs"]] = None
    ):
        """
        Additional keystore output formats to be stored in the Certificate's Secret.
        """
        if jks is not None:
            pulumi.set(__self__, "jks", jks)
        if pkcs12 is not None:
            pulumi.set(__self__, "pkcs12", pkcs12)

    @property
    @pulumi.getter
    def jks(self) -> Optional[pulumi.Input["CertificateSpecKeystoresJksPatchArgs"]]:
        return pulumi.get(self, "jks")

    @jks.setter
    def jks(
        self, value: Optional[pulumi.Input["CertificateSpecKeystoresJksPatchArgs"]]
    ):
        pulumi.set(self, "jks", value)

    @property
    @pulumi.getter
    def pkcs12(
        self,
    ) -> Optional[pulumi.Input["CertificateSpecKeystoresPkcs12PatchArgs"]]:
        return pulumi.get(self, "pkcs12")

    @pkcs12.setter
    def pkcs12(
        self, value: Optional[pulumi.Input["CertificateSpecKeystoresPkcs12PatchArgs"]]
    ):
        pulumi.set(self, "pkcs12", value)


if not MYPY:

    class CertificateSpecKeystoresPkcs12PasswordSecretRefPatchArgsDict(TypedDict):
        """
        PasswordSecretRef is a reference to a non-empty key in a Secret resource
        containing the password used to encrypt the PKCS#12 keystore.
        Mutually exclusive with password.
        One of password or passwordSecretRef must provide a password with a non-zero length.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """

elif False:
    CertificateSpecKeystoresPkcs12PasswordSecretRefPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class CertificateSpecKeystoresPkcs12PasswordSecretRefPatchArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        name: Optional[pulumi.Input[str]] = None
    ):
        """
        PasswordSecretRef is a reference to a non-empty key in a Secret resource
        containing the password used to encrypt the PKCS#12 keystore.
        Mutually exclusive with password.
        One of password or passwordSecretRef must provide a password with a non-zero length.
        :param pulumi.Input[str] key: The key of the entry in the Secret resource's `data` field to be used.
               Some instances of this field may be defaulted, in others it may be
               required.
        :param pulumi.Input[str] name: Name of the resource being referred to.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:

    class CertificateSpecKeystoresPkcs12PasswordSecretRefArgsDict(TypedDict):
        """
        PasswordSecretRef is a reference to a non-empty key in a Secret resource
        containing the password used to encrypt the PKCS#12 keystore.
        Mutually exclusive with password.
        One of password or passwordSecretRef must provide a password with a non-zero length.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """

elif False:
    CertificateSpecKeystoresPkcs12PasswordSecretRefArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class CertificateSpecKeystoresPkcs12PasswordSecretRefArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        name: Optional[pulumi.Input[str]] = None
    ):
        """
        PasswordSecretRef is a reference to a non-empty key in a Secret resource
        containing the password used to encrypt the PKCS#12 keystore.
        Mutually exclusive with password.
        One of password or passwordSecretRef must provide a password with a non-zero length.
        :param pulumi.Input[str] key: The key of the entry in the Secret resource's `data` field to be used.
               Some instances of this field may be defaulted, in others it may be
               required.
        :param pulumi.Input[str] name: Name of the resource being referred to.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:

    class CertificateSpecKeystoresPkcs12PatchArgsDict(TypedDict):
        """
        PKCS12 configures options for storing a PKCS12 keystore in the
        `spec.secretName` Secret resource.
        """

        create: NotRequired[pulumi.Input[bool]]
        """
        Create enables PKCS12 keystore creation for the Certificate.
        If true, a file named `keystore.p12` will be created in the target
        Secret resource, encrypted using the password stored in
        `passwordSecretRef` or in `password`.
        The keystore file will be updated immediately.
        If the issuer provided a CA certificate, a file named `truststore.p12` will
        also be created in the target Secret resource, encrypted using the
        password stored in `passwordSecretRef` containing the issuing Certificate
        Authority
        """
        password: NotRequired[pulumi.Input[str]]
        """
        Password provides a literal password used to encrypt the PKCS#12 keystore.
        Mutually exclusive with passwordSecretRef.
        One of password or passwordSecretRef must provide a password with a non-zero length.
        """
        password_secret_ref: NotRequired[
            pulumi.Input["CertificateSpecKeystoresPkcs12PasswordSecretRefPatchArgsDict"]
        ]
        profile: NotRequired[pulumi.Input[str]]
        """
        Profile specifies the key and certificate encryption algorithms and the HMAC algorithm
        used to create the PKCS12 keystore. Default value is `LegacyRC2` for backward compatibility.

        If provided, allowed values are:
        `LegacyRC2`: Deprecated. Not supported by default in OpenSSL 3 or Java 20.
        `LegacyDES`: Less secure algorithm. Use this option for maximal compatibility.
        `Modern2023`: Secure algorithm. Use this option in case you have to always use secure algorithms
        (eg. because of company policy). Please note that the security of the algorithm is not that important
        in reality, because the unencrypted certificate and private key are also stored in the Secret.
        """

elif False:
    CertificateSpecKeystoresPkcs12PatchArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class CertificateSpecKeystoresPkcs12PatchArgs:
    def __init__(
        __self__,
        *,
        create: Optional[pulumi.Input[bool]] = None,
        password: Optional[pulumi.Input[str]] = None,
        password_secret_ref: Optional[
            pulumi.Input["CertificateSpecKeystoresPkcs12PasswordSecretRefPatchArgs"]
        ] = None,
        profile: Optional[pulumi.Input[str]] = None
    ):
        """
        PKCS12 configures options for storing a PKCS12 keystore in the
        `spec.secretName` Secret resource.
        :param pulumi.Input[bool] create: Create enables PKCS12 keystore creation for the Certificate.
               If true, a file named `keystore.p12` will be created in the target
               Secret resource, encrypted using the password stored in
               `passwordSecretRef` or in `password`.
               The keystore file will be updated immediately.
               If the issuer provided a CA certificate, a file named `truststore.p12` will
               also be created in the target Secret resource, encrypted using the
               password stored in `passwordSecretRef` containing the issuing Certificate
               Authority
        :param pulumi.Input[str] password: Password provides a literal password used to encrypt the PKCS#12 keystore.
               Mutually exclusive with passwordSecretRef.
               One of password or passwordSecretRef must provide a password with a non-zero length.
        :param pulumi.Input[str] profile: Profile specifies the key and certificate encryption algorithms and the HMAC algorithm
               used to create the PKCS12 keystore. Default value is `LegacyRC2` for backward compatibility.

               If provided, allowed values are:
               `LegacyRC2`: Deprecated. Not supported by default in OpenSSL 3 or Java 20.
               `LegacyDES`: Less secure algorithm. Use this option for maximal compatibility.
               `Modern2023`: Secure algorithm. Use this option in case you have to always use secure algorithms
               (eg. because of company policy). Please note that the security of the algorithm is not that important
               in reality, because the unencrypted certificate and private key are also stored in the Secret.
        """
        if create is not None:
            pulumi.set(__self__, "create", create)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if password_secret_ref is not None:
            pulumi.set(__self__, "password_secret_ref", password_secret_ref)
        if profile is not None:
            pulumi.set(__self__, "profile", profile)

    @property
    @pulumi.getter
    def create(self) -> Optional[pulumi.Input[bool]]:
        """
        Create enables PKCS12 keystore creation for the Certificate.
        If true, a file named `keystore.p12` will be created in the target
        Secret resource, encrypted using the password stored in
        `passwordSecretRef` or in `password`.
        The keystore file will be updated immediately.
        If the issuer provided a CA certificate, a file named `truststore.p12` will
        also be created in the target Secret resource, encrypted using the
        password stored in `passwordSecretRef` containing the issuing Certificate
        Authority
        """
        return pulumi.get(self, "create")

    @create.setter
    def create(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "create", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        Password provides a literal password used to encrypt the PKCS#12 keystore.
        Mutually exclusive with passwordSecretRef.
        One of password or passwordSecretRef must provide a password with a non-zero length.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="passwordSecretRef")
    def password_secret_ref(
        self,
    ) -> Optional[
        pulumi.Input["CertificateSpecKeystoresPkcs12PasswordSecretRefPatchArgs"]
    ]:
        return pulumi.get(self, "password_secret_ref")

    @password_secret_ref.setter
    def password_secret_ref(
        self,
        value: Optional[
            pulumi.Input["CertificateSpecKeystoresPkcs12PasswordSecretRefPatchArgs"]
        ],
    ):
        pulumi.set(self, "password_secret_ref", value)

    @property
    @pulumi.getter
    def profile(self) -> Optional[pulumi.Input[str]]:
        """
        Profile specifies the key and certificate encryption algorithms and the HMAC algorithm
        used to create the PKCS12 keystore. Default value is `LegacyRC2` for backward compatibility.

        If provided, allowed values are:
        `LegacyRC2`: Deprecated. Not supported by default in OpenSSL 3 or Java 20.
        `LegacyDES`: Less secure algorithm. Use this option for maximal compatibility.
        `Modern2023`: Secure algorithm. Use this option in case you have to always use secure algorithms
        (eg. because of company policy). Please note that the security of the algorithm is not that important
        in reality, because the unencrypted certificate and private key are also stored in the Secret.
        """
        return pulumi.get(self, "profile")

    @profile.setter
    def profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "profile", value)


if not MYPY:

    class CertificateSpecKeystoresPkcs12ArgsDict(TypedDict):
        """
        PKCS12 configures options for storing a PKCS12 keystore in the
        `spec.secretName` Secret resource.
        """

        create: NotRequired[pulumi.Input[bool]]
        """
        Create enables PKCS12 keystore creation for the Certificate.
        If true, a file named `keystore.p12` will be created in the target
        Secret resource, encrypted using the password stored in
        `passwordSecretRef` or in `password`.
        The keystore file will be updated immediately.
        If the issuer provided a CA certificate, a file named `truststore.p12` will
        also be created in the target Secret resource, encrypted using the
        password stored in `passwordSecretRef` containing the issuing Certificate
        Authority
        """
        password: NotRequired[pulumi.Input[str]]
        """
        Password provides a literal password used to encrypt the PKCS#12 keystore.
        Mutually exclusive with passwordSecretRef.
        One of password or passwordSecretRef must provide a password with a non-zero length.
        """
        password_secret_ref: NotRequired[
            pulumi.Input["CertificateSpecKeystoresPkcs12PasswordSecretRefArgsDict"]
        ]
        profile: NotRequired[pulumi.Input[str]]
        """
        Profile specifies the key and certificate encryption algorithms and the HMAC algorithm
        used to create the PKCS12 keystore. Default value is `LegacyRC2` for backward compatibility.

        If provided, allowed values are:
        `LegacyRC2`: Deprecated. Not supported by default in OpenSSL 3 or Java 20.
        `LegacyDES`: Less secure algorithm. Use this option for maximal compatibility.
        `Modern2023`: Secure algorithm. Use this option in case you have to always use secure algorithms
        (eg. because of company policy). Please note that the security of the algorithm is not that important
        in reality, because the unencrypted certificate and private key are also stored in the Secret.
        """

elif False:
    CertificateSpecKeystoresPkcs12ArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class CertificateSpecKeystoresPkcs12Args:
    def __init__(
        __self__,
        *,
        create: Optional[pulumi.Input[bool]] = None,
        password: Optional[pulumi.Input[str]] = None,
        password_secret_ref: Optional[
            pulumi.Input["CertificateSpecKeystoresPkcs12PasswordSecretRefArgs"]
        ] = None,
        profile: Optional[pulumi.Input[str]] = None
    ):
        """
        PKCS12 configures options for storing a PKCS12 keystore in the
        `spec.secretName` Secret resource.
        :param pulumi.Input[bool] create: Create enables PKCS12 keystore creation for the Certificate.
               If true, a file named `keystore.p12` will be created in the target
               Secret resource, encrypted using the password stored in
               `passwordSecretRef` or in `password`.
               The keystore file will be updated immediately.
               If the issuer provided a CA certificate, a file named `truststore.p12` will
               also be created in the target Secret resource, encrypted using the
               password stored in `passwordSecretRef` containing the issuing Certificate
               Authority
        :param pulumi.Input[str] password: Password provides a literal password used to encrypt the PKCS#12 keystore.
               Mutually exclusive with passwordSecretRef.
               One of password or passwordSecretRef must provide a password with a non-zero length.
        :param pulumi.Input[str] profile: Profile specifies the key and certificate encryption algorithms and the HMAC algorithm
               used to create the PKCS12 keystore. Default value is `LegacyRC2` for backward compatibility.

               If provided, allowed values are:
               `LegacyRC2`: Deprecated. Not supported by default in OpenSSL 3 or Java 20.
               `LegacyDES`: Less secure algorithm. Use this option for maximal compatibility.
               `Modern2023`: Secure algorithm. Use this option in case you have to always use secure algorithms
               (eg. because of company policy). Please note that the security of the algorithm is not that important
               in reality, because the unencrypted certificate and private key are also stored in the Secret.
        """
        if create is not None:
            pulumi.set(__self__, "create", create)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if password_secret_ref is not None:
            pulumi.set(__self__, "password_secret_ref", password_secret_ref)
        if profile is not None:
            pulumi.set(__self__, "profile", profile)

    @property
    @pulumi.getter
    def create(self) -> Optional[pulumi.Input[bool]]:
        """
        Create enables PKCS12 keystore creation for the Certificate.
        If true, a file named `keystore.p12` will be created in the target
        Secret resource, encrypted using the password stored in
        `passwordSecretRef` or in `password`.
        The keystore file will be updated immediately.
        If the issuer provided a CA certificate, a file named `truststore.p12` will
        also be created in the target Secret resource, encrypted using the
        password stored in `passwordSecretRef` containing the issuing Certificate
        Authority
        """
        return pulumi.get(self, "create")

    @create.setter
    def create(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "create", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        Password provides a literal password used to encrypt the PKCS#12 keystore.
        Mutually exclusive with passwordSecretRef.
        One of password or passwordSecretRef must provide a password with a non-zero length.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="passwordSecretRef")
    def password_secret_ref(
        self,
    ) -> Optional[pulumi.Input["CertificateSpecKeystoresPkcs12PasswordSecretRefArgs"]]:
        return pulumi.get(self, "password_secret_ref")

    @password_secret_ref.setter
    def password_secret_ref(
        self,
        value: Optional[
            pulumi.Input["CertificateSpecKeystoresPkcs12PasswordSecretRefArgs"]
        ],
    ):
        pulumi.set(self, "password_secret_ref", value)

    @property
    @pulumi.getter
    def profile(self) -> Optional[pulumi.Input[str]]:
        """
        Profile specifies the key and certificate encryption algorithms and the HMAC algorithm
        used to create the PKCS12 keystore. Default value is `LegacyRC2` for backward compatibility.

        If provided, allowed values are:
        `LegacyRC2`: Deprecated. Not supported by default in OpenSSL 3 or Java 20.
        `LegacyDES`: Less secure algorithm. Use this option for maximal compatibility.
        `Modern2023`: Secure algorithm. Use this option in case you have to always use secure algorithms
        (eg. because of company policy). Please note that the security of the algorithm is not that important
        in reality, because the unencrypted certificate and private key are also stored in the Secret.
        """
        return pulumi.get(self, "profile")

    @profile.setter
    def profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "profile", value)


if not MYPY:

    class CertificateSpecKeystoresArgsDict(TypedDict):
        """
        Additional keystore output formats to be stored in the Certificate's Secret.
        """

        jks: NotRequired[pulumi.Input["CertificateSpecKeystoresJksArgsDict"]]
        pkcs12: NotRequired[pulumi.Input["CertificateSpecKeystoresPkcs12ArgsDict"]]

elif False:
    CertificateSpecKeystoresArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class CertificateSpecKeystoresArgs:
    def __init__(
        __self__,
        *,
        jks: Optional[pulumi.Input["CertificateSpecKeystoresJksArgs"]] = None,
        pkcs12: Optional[pulumi.Input["CertificateSpecKeystoresPkcs12Args"]] = None
    ):
        """
        Additional keystore output formats to be stored in the Certificate's Secret.
        """
        if jks is not None:
            pulumi.set(__self__, "jks", jks)
        if pkcs12 is not None:
            pulumi.set(__self__, "pkcs12", pkcs12)

    @property
    @pulumi.getter
    def jks(self) -> Optional[pulumi.Input["CertificateSpecKeystoresJksArgs"]]:
        return pulumi.get(self, "jks")

    @jks.setter
    def jks(self, value: Optional[pulumi.Input["CertificateSpecKeystoresJksArgs"]]):
        pulumi.set(self, "jks", value)

    @property
    @pulumi.getter
    def pkcs12(self) -> Optional[pulumi.Input["CertificateSpecKeystoresPkcs12Args"]]:
        return pulumi.get(self, "pkcs12")

    @pkcs12.setter
    def pkcs12(
        self, value: Optional[pulumi.Input["CertificateSpecKeystoresPkcs12Args"]]
    ):
        pulumi.set(self, "pkcs12", value)


if not MYPY:

    class CertificateSpecNameConstraintsExcludedPatchArgsDict(TypedDict):
        """
        Excluded contains the constraints which must be disallowed. Any name matching a
        restriction in the excluded field is invalid regardless
        of information appearing in the permitted
        """

        dns_domains: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        DNSDomains is a list of DNS domains that are permitted or excluded.
        """
        email_addresses: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        EmailAddresses is a list of Email Addresses that are permitted or excluded.
        """
        ip_ranges: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        IPRanges is a list of IP Ranges that are permitted or excluded.
        This should be a valid CIDR notation.
        """
        uri_domains: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        URIDomains is a list of URI domains that are permitted or excluded.
        """

elif False:
    CertificateSpecNameConstraintsExcludedPatchArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class CertificateSpecNameConstraintsExcludedPatchArgs:
    def __init__(
        __self__,
        *,
        dns_domains: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        email_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        ip_ranges: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        uri_domains: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None
    ):
        """
        Excluded contains the constraints which must be disallowed. Any name matching a
        restriction in the excluded field is invalid regardless
        of information appearing in the permitted
        :param pulumi.Input[Sequence[pulumi.Input[str]]] dns_domains: DNSDomains is a list of DNS domains that are permitted or excluded.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] email_addresses: EmailAddresses is a list of Email Addresses that are permitted or excluded.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ip_ranges: IPRanges is a list of IP Ranges that are permitted or excluded.
               This should be a valid CIDR notation.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] uri_domains: URIDomains is a list of URI domains that are permitted or excluded.
        """
        if dns_domains is not None:
            pulumi.set(__self__, "dns_domains", dns_domains)
        if email_addresses is not None:
            pulumi.set(__self__, "email_addresses", email_addresses)
        if ip_ranges is not None:
            pulumi.set(__self__, "ip_ranges", ip_ranges)
        if uri_domains is not None:
            pulumi.set(__self__, "uri_domains", uri_domains)

    @property
    @pulumi.getter(name="dnsDomains")
    def dns_domains(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        DNSDomains is a list of DNS domains that are permitted or excluded.
        """
        return pulumi.get(self, "dns_domains")

    @dns_domains.setter
    def dns_domains(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "dns_domains", value)

    @property
    @pulumi.getter(name="emailAddresses")
    def email_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        EmailAddresses is a list of Email Addresses that are permitted or excluded.
        """
        return pulumi.get(self, "email_addresses")

    @email_addresses.setter
    def email_addresses(
        self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]
    ):
        pulumi.set(self, "email_addresses", value)

    @property
    @pulumi.getter(name="ipRanges")
    def ip_ranges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        IPRanges is a list of IP Ranges that are permitted or excluded.
        This should be a valid CIDR notation.
        """
        return pulumi.get(self, "ip_ranges")

    @ip_ranges.setter
    def ip_ranges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ip_ranges", value)

    @property
    @pulumi.getter(name="uriDomains")
    def uri_domains(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        URIDomains is a list of URI domains that are permitted or excluded.
        """
        return pulumi.get(self, "uri_domains")

    @uri_domains.setter
    def uri_domains(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "uri_domains", value)


if not MYPY:

    class CertificateSpecNameConstraintsExcludedArgsDict(TypedDict):
        """
        Excluded contains the constraints which must be disallowed. Any name matching a
        restriction in the excluded field is invalid regardless
        of information appearing in the permitted
        """

        dns_domains: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        DNSDomains is a list of DNS domains that are permitted or excluded.
        """
        email_addresses: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        EmailAddresses is a list of Email Addresses that are permitted or excluded.
        """
        ip_ranges: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        IPRanges is a list of IP Ranges that are permitted or excluded.
        This should be a valid CIDR notation.
        """
        uri_domains: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        URIDomains is a list of URI domains that are permitted or excluded.
        """

elif False:
    CertificateSpecNameConstraintsExcludedArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class CertificateSpecNameConstraintsExcludedArgs:
    def __init__(
        __self__,
        *,
        dns_domains: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        email_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        ip_ranges: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        uri_domains: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None
    ):
        """
        Excluded contains the constraints which must be disallowed. Any name matching a
        restriction in the excluded field is invalid regardless
        of information appearing in the permitted
        :param pulumi.Input[Sequence[pulumi.Input[str]]] dns_domains: DNSDomains is a list of DNS domains that are permitted or excluded.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] email_addresses: EmailAddresses is a list of Email Addresses that are permitted or excluded.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ip_ranges: IPRanges is a list of IP Ranges that are permitted or excluded.
               This should be a valid CIDR notation.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] uri_domains: URIDomains is a list of URI domains that are permitted or excluded.
        """
        if dns_domains is not None:
            pulumi.set(__self__, "dns_domains", dns_domains)
        if email_addresses is not None:
            pulumi.set(__self__, "email_addresses", email_addresses)
        if ip_ranges is not None:
            pulumi.set(__self__, "ip_ranges", ip_ranges)
        if uri_domains is not None:
            pulumi.set(__self__, "uri_domains", uri_domains)

    @property
    @pulumi.getter(name="dnsDomains")
    def dns_domains(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        DNSDomains is a list of DNS domains that are permitted or excluded.
        """
        return pulumi.get(self, "dns_domains")

    @dns_domains.setter
    def dns_domains(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "dns_domains", value)

    @property
    @pulumi.getter(name="emailAddresses")
    def email_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        EmailAddresses is a list of Email Addresses that are permitted or excluded.
        """
        return pulumi.get(self, "email_addresses")

    @email_addresses.setter
    def email_addresses(
        self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]
    ):
        pulumi.set(self, "email_addresses", value)

    @property
    @pulumi.getter(name="ipRanges")
    def ip_ranges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        IPRanges is a list of IP Ranges that are permitted or excluded.
        This should be a valid CIDR notation.
        """
        return pulumi.get(self, "ip_ranges")

    @ip_ranges.setter
    def ip_ranges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ip_ranges", value)

    @property
    @pulumi.getter(name="uriDomains")
    def uri_domains(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        URIDomains is a list of URI domains that are permitted or excluded.
        """
        return pulumi.get(self, "uri_domains")

    @uri_domains.setter
    def uri_domains(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "uri_domains", value)


if not MYPY:

    class CertificateSpecNameConstraintsPatchArgsDict(TypedDict):
        """
        x.509 certificate NameConstraint extension which MUST NOT be used in a non-CA certificate.
        More Info: https://datatracker.ietf.org/doc/html/rfc5280#section-4.2.1.10

        This is an Alpha Feature and is only enabled with the
        `--feature-gates=NameConstraints=true` option set on both
        the controller and webhook components.
        """

        critical: NotRequired[pulumi.Input[bool]]
        """
        if true then the name constraints are marked critical.
        """
        excluded: NotRequired[
            pulumi.Input["CertificateSpecNameConstraintsExcludedPatchArgsDict"]
        ]
        permitted: NotRequired[
            pulumi.Input["CertificateSpecNameConstraintsPermittedPatchArgsDict"]
        ]

elif False:
    CertificateSpecNameConstraintsPatchArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class CertificateSpecNameConstraintsPatchArgs:
    def __init__(
        __self__,
        *,
        critical: Optional[pulumi.Input[bool]] = None,
        excluded: Optional[
            pulumi.Input["CertificateSpecNameConstraintsExcludedPatchArgs"]
        ] = None,
        permitted: Optional[
            pulumi.Input["CertificateSpecNameConstraintsPermittedPatchArgs"]
        ] = None
    ):
        """
        x.509 certificate NameConstraint extension which MUST NOT be used in a non-CA certificate.
        More Info: https://datatracker.ietf.org/doc/html/rfc5280#section-4.2.1.10

        This is an Alpha Feature and is only enabled with the
        `--feature-gates=NameConstraints=true` option set on both
        the controller and webhook components.
        :param pulumi.Input[bool] critical: if true then the name constraints are marked critical.
        """
        if critical is not None:
            pulumi.set(__self__, "critical", critical)
        if excluded is not None:
            pulumi.set(__self__, "excluded", excluded)
        if permitted is not None:
            pulumi.set(__self__, "permitted", permitted)

    @property
    @pulumi.getter
    def critical(self) -> Optional[pulumi.Input[bool]]:
        """
        if true then the name constraints are marked critical.
        """
        return pulumi.get(self, "critical")

    @critical.setter
    def critical(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "critical", value)

    @property
    @pulumi.getter
    def excluded(
        self,
    ) -> Optional[pulumi.Input["CertificateSpecNameConstraintsExcludedPatchArgs"]]:
        return pulumi.get(self, "excluded")

    @excluded.setter
    def excluded(
        self,
        value: Optional[
            pulumi.Input["CertificateSpecNameConstraintsExcludedPatchArgs"]
        ],
    ):
        pulumi.set(self, "excluded", value)

    @property
    @pulumi.getter
    def permitted(
        self,
    ) -> Optional[pulumi.Input["CertificateSpecNameConstraintsPermittedPatchArgs"]]:
        return pulumi.get(self, "permitted")

    @permitted.setter
    def permitted(
        self,
        value: Optional[
            pulumi.Input["CertificateSpecNameConstraintsPermittedPatchArgs"]
        ],
    ):
        pulumi.set(self, "permitted", value)


if not MYPY:

    class CertificateSpecNameConstraintsPermittedPatchArgsDict(TypedDict):
        """
        Permitted contains the constraints in which the names must be located.
        """

        dns_domains: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        DNSDomains is a list of DNS domains that are permitted or excluded.
        """
        email_addresses: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        EmailAddresses is a list of Email Addresses that are permitted or excluded.
        """
        ip_ranges: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        IPRanges is a list of IP Ranges that are permitted or excluded.
        This should be a valid CIDR notation.
        """
        uri_domains: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        URIDomains is a list of URI domains that are permitted or excluded.
        """

elif False:
    CertificateSpecNameConstraintsPermittedPatchArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class CertificateSpecNameConstraintsPermittedPatchArgs:
    def __init__(
        __self__,
        *,
        dns_domains: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        email_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        ip_ranges: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        uri_domains: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None
    ):
        """
        Permitted contains the constraints in which the names must be located.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] dns_domains: DNSDomains is a list of DNS domains that are permitted or excluded.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] email_addresses: EmailAddresses is a list of Email Addresses that are permitted or excluded.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ip_ranges: IPRanges is a list of IP Ranges that are permitted or excluded.
               This should be a valid CIDR notation.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] uri_domains: URIDomains is a list of URI domains that are permitted or excluded.
        """
        if dns_domains is not None:
            pulumi.set(__self__, "dns_domains", dns_domains)
        if email_addresses is not None:
            pulumi.set(__self__, "email_addresses", email_addresses)
        if ip_ranges is not None:
            pulumi.set(__self__, "ip_ranges", ip_ranges)
        if uri_domains is not None:
            pulumi.set(__self__, "uri_domains", uri_domains)

    @property
    @pulumi.getter(name="dnsDomains")
    def dns_domains(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        DNSDomains is a list of DNS domains that are permitted or excluded.
        """
        return pulumi.get(self, "dns_domains")

    @dns_domains.setter
    def dns_domains(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "dns_domains", value)

    @property
    @pulumi.getter(name="emailAddresses")
    def email_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        EmailAddresses is a list of Email Addresses that are permitted or excluded.
        """
        return pulumi.get(self, "email_addresses")

    @email_addresses.setter
    def email_addresses(
        self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]
    ):
        pulumi.set(self, "email_addresses", value)

    @property
    @pulumi.getter(name="ipRanges")
    def ip_ranges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        IPRanges is a list of IP Ranges that are permitted or excluded.
        This should be a valid CIDR notation.
        """
        return pulumi.get(self, "ip_ranges")

    @ip_ranges.setter
    def ip_ranges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ip_ranges", value)

    @property
    @pulumi.getter(name="uriDomains")
    def uri_domains(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        URIDomains is a list of URI domains that are permitted or excluded.
        """
        return pulumi.get(self, "uri_domains")

    @uri_domains.setter
    def uri_domains(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "uri_domains", value)


if not MYPY:

    class CertificateSpecNameConstraintsPermittedArgsDict(TypedDict):
        """
        Permitted contains the constraints in which the names must be located.
        """

        dns_domains: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        DNSDomains is a list of DNS domains that are permitted or excluded.
        """
        email_addresses: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        EmailAddresses is a list of Email Addresses that are permitted or excluded.
        """
        ip_ranges: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        IPRanges is a list of IP Ranges that are permitted or excluded.
        This should be a valid CIDR notation.
        """
        uri_domains: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        URIDomains is a list of URI domains that are permitted or excluded.
        """

elif False:
    CertificateSpecNameConstraintsPermittedArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class CertificateSpecNameConstraintsPermittedArgs:
    def __init__(
        __self__,
        *,
        dns_domains: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        email_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        ip_ranges: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        uri_domains: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None
    ):
        """
        Permitted contains the constraints in which the names must be located.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] dns_domains: DNSDomains is a list of DNS domains that are permitted or excluded.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] email_addresses: EmailAddresses is a list of Email Addresses that are permitted or excluded.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ip_ranges: IPRanges is a list of IP Ranges that are permitted or excluded.
               This should be a valid CIDR notation.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] uri_domains: URIDomains is a list of URI domains that are permitted or excluded.
        """
        if dns_domains is not None:
            pulumi.set(__self__, "dns_domains", dns_domains)
        if email_addresses is not None:
            pulumi.set(__self__, "email_addresses", email_addresses)
        if ip_ranges is not None:
            pulumi.set(__self__, "ip_ranges", ip_ranges)
        if uri_domains is not None:
            pulumi.set(__self__, "uri_domains", uri_domains)

    @property
    @pulumi.getter(name="dnsDomains")
    def dns_domains(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        DNSDomains is a list of DNS domains that are permitted or excluded.
        """
        return pulumi.get(self, "dns_domains")

    @dns_domains.setter
    def dns_domains(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "dns_domains", value)

    @property
    @pulumi.getter(name="emailAddresses")
    def email_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        EmailAddresses is a list of Email Addresses that are permitted or excluded.
        """
        return pulumi.get(self, "email_addresses")

    @email_addresses.setter
    def email_addresses(
        self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]
    ):
        pulumi.set(self, "email_addresses", value)

    @property
    @pulumi.getter(name="ipRanges")
    def ip_ranges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        IPRanges is a list of IP Ranges that are permitted or excluded.
        This should be a valid CIDR notation.
        """
        return pulumi.get(self, "ip_ranges")

    @ip_ranges.setter
    def ip_ranges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ip_ranges", value)

    @property
    @pulumi.getter(name="uriDomains")
    def uri_domains(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        URIDomains is a list of URI domains that are permitted or excluded.
        """
        return pulumi.get(self, "uri_domains")

    @uri_domains.setter
    def uri_domains(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "uri_domains", value)


if not MYPY:

    class CertificateSpecNameConstraintsArgsDict(TypedDict):
        """
        x.509 certificate NameConstraint extension which MUST NOT be used in a non-CA certificate.
        More Info: https://datatracker.ietf.org/doc/html/rfc5280#section-4.2.1.10

        This is an Alpha Feature and is only enabled with the
        `--feature-gates=NameConstraints=true` option set on both
        the controller and webhook components.
        """

        critical: NotRequired[pulumi.Input[bool]]
        """
        if true then the name constraints are marked critical.
        """
        excluded: NotRequired[
            pulumi.Input["CertificateSpecNameConstraintsExcludedArgsDict"]
        ]
        permitted: NotRequired[
            pulumi.Input["CertificateSpecNameConstraintsPermittedArgsDict"]
        ]

elif False:
    CertificateSpecNameConstraintsArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class CertificateSpecNameConstraintsArgs:
    def __init__(
        __self__,
        *,
        critical: Optional[pulumi.Input[bool]] = None,
        excluded: Optional[
            pulumi.Input["CertificateSpecNameConstraintsExcludedArgs"]
        ] = None,
        permitted: Optional[
            pulumi.Input["CertificateSpecNameConstraintsPermittedArgs"]
        ] = None
    ):
        """
        x.509 certificate NameConstraint extension which MUST NOT be used in a non-CA certificate.
        More Info: https://datatracker.ietf.org/doc/html/rfc5280#section-4.2.1.10

        This is an Alpha Feature and is only enabled with the
        `--feature-gates=NameConstraints=true` option set on both
        the controller and webhook components.
        :param pulumi.Input[bool] critical: if true then the name constraints are marked critical.
        """
        if critical is not None:
            pulumi.set(__self__, "critical", critical)
        if excluded is not None:
            pulumi.set(__self__, "excluded", excluded)
        if permitted is not None:
            pulumi.set(__self__, "permitted", permitted)

    @property
    @pulumi.getter
    def critical(self) -> Optional[pulumi.Input[bool]]:
        """
        if true then the name constraints are marked critical.
        """
        return pulumi.get(self, "critical")

    @critical.setter
    def critical(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "critical", value)

    @property
    @pulumi.getter
    def excluded(
        self,
    ) -> Optional[pulumi.Input["CertificateSpecNameConstraintsExcludedArgs"]]:
        return pulumi.get(self, "excluded")

    @excluded.setter
    def excluded(
        self,
        value: Optional[pulumi.Input["CertificateSpecNameConstraintsExcludedArgs"]],
    ):
        pulumi.set(self, "excluded", value)

    @property
    @pulumi.getter
    def permitted(
        self,
    ) -> Optional[pulumi.Input["CertificateSpecNameConstraintsPermittedArgs"]]:
        return pulumi.get(self, "permitted")

    @permitted.setter
    def permitted(
        self,
        value: Optional[pulumi.Input["CertificateSpecNameConstraintsPermittedArgs"]],
    ):
        pulumi.set(self, "permitted", value)


if not MYPY:

    class CertificateSpecOtherNamesPatchArgsDict(TypedDict):
        oid: NotRequired[pulumi.Input[str]]
        """
        OID is the object identifier for the otherName SAN.
        The object identifier must be expressed as a dotted string, for
        example, "1.2.840.113556.1.4.221".
        """
        utf8_value: NotRequired[pulumi.Input[str]]
        """
        utf8Value is the string value of the otherName SAN.
        The utf8Value accepts any valid UTF8 string to set as value for the otherName SAN.
        """

elif False:
    CertificateSpecOtherNamesPatchArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class CertificateSpecOtherNamesPatchArgs:
    def __init__(
        __self__,
        *,
        oid: Optional[pulumi.Input[str]] = None,
        utf8_value: Optional[pulumi.Input[str]] = None
    ):
        """
        :param pulumi.Input[str] oid: OID is the object identifier for the otherName SAN.
               The object identifier must be expressed as a dotted string, for
               example, "1.2.840.113556.1.4.221".
        :param pulumi.Input[str] utf8_value: utf8Value is the string value of the otherName SAN.
               The utf8Value accepts any valid UTF8 string to set as value for the otherName SAN.
        """
        if oid is not None:
            pulumi.set(__self__, "oid", oid)
        if utf8_value is not None:
            pulumi.set(__self__, "utf8_value", utf8_value)

    @property
    @pulumi.getter
    def oid(self) -> Optional[pulumi.Input[str]]:
        """
        OID is the object identifier for the otherName SAN.
        The object identifier must be expressed as a dotted string, for
        example, "1.2.840.113556.1.4.221".
        """
        return pulumi.get(self, "oid")

    @oid.setter
    def oid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "oid", value)

    @property
    @pulumi.getter(name="utf8Value")
    def utf8_value(self) -> Optional[pulumi.Input[str]]:
        """
        utf8Value is the string value of the otherName SAN.
        The utf8Value accepts any valid UTF8 string to set as value for the otherName SAN.
        """
        return pulumi.get(self, "utf8_value")

    @utf8_value.setter
    def utf8_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "utf8_value", value)


if not MYPY:

    class CertificateSpecOtherNamesArgsDict(TypedDict):
        oid: NotRequired[pulumi.Input[str]]
        """
        OID is the object identifier for the otherName SAN.
        The object identifier must be expressed as a dotted string, for
        example, "1.2.840.113556.1.4.221".
        """
        utf8_value: NotRequired[pulumi.Input[str]]
        """
        utf8Value is the string value of the otherName SAN.
        The utf8Value accepts any valid UTF8 string to set as value for the otherName SAN.
        """

elif False:
    CertificateSpecOtherNamesArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class CertificateSpecOtherNamesArgs:
    def __init__(
        __self__,
        *,
        oid: Optional[pulumi.Input[str]] = None,
        utf8_value: Optional[pulumi.Input[str]] = None
    ):
        """
        :param pulumi.Input[str] oid: OID is the object identifier for the otherName SAN.
               The object identifier must be expressed as a dotted string, for
               example, "1.2.840.113556.1.4.221".
        :param pulumi.Input[str] utf8_value: utf8Value is the string value of the otherName SAN.
               The utf8Value accepts any valid UTF8 string to set as value for the otherName SAN.
        """
        if oid is not None:
            pulumi.set(__self__, "oid", oid)
        if utf8_value is not None:
            pulumi.set(__self__, "utf8_value", utf8_value)

    @property
    @pulumi.getter
    def oid(self) -> Optional[pulumi.Input[str]]:
        """
        OID is the object identifier for the otherName SAN.
        The object identifier must be expressed as a dotted string, for
        example, "1.2.840.113556.1.4.221".
        """
        return pulumi.get(self, "oid")

    @oid.setter
    def oid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "oid", value)

    @property
    @pulumi.getter(name="utf8Value")
    def utf8_value(self) -> Optional[pulumi.Input[str]]:
        """
        utf8Value is the string value of the otherName SAN.
        The utf8Value accepts any valid UTF8 string to set as value for the otherName SAN.
        """
        return pulumi.get(self, "utf8_value")

    @utf8_value.setter
    def utf8_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "utf8_value", value)


if not MYPY:

    class CertificateSpecPatchArgsDict(TypedDict):
        """
        Specification of the desired state of the Certificate resource.
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
        """

        additional_output_formats: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input["CertificateSpecAdditionalOutputFormatsPatchArgsDict"]
                ]
            ]
        ]
        """
        Defines extra output formats of the private key and signed certificate chain
        to be written to this Certificate's target Secret.

        This is a Beta Feature enabled by default. It can be disabled with the
        `--feature-gates=AdditionalCertificateOutputFormats=false` option set on both
        the controller and webhook components.
        """
        common_name: NotRequired[pulumi.Input[str]]
        """
        Requested common name X509 certificate subject attribute.
        More info: https://datatracker.ietf.org/doc/html/rfc5280#section-4.1.2.6
        NOTE: TLS clients will ignore this value when any subject alternative name is
        set (see https://tools.ietf.org/html/rfc6125#section-6.4.4).

        Should have a length of 64 characters or fewer to avoid generating invalid CSRs.
        Cannot be set if the `literalSubject` field is set.
        """
        dns_names: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        Requested DNS subject alternative names.
        """
        duration: NotRequired[pulumi.Input[str]]
        """
        Requested 'duration' (i.e. lifetime) of the Certificate. Note that the
        issuer may choose to ignore the requested duration, just like any other
        requested attribute.

        If unset, this defaults to 90 days.
        Minimum accepted duration is 1 hour.
        Value must be in units accepted by Go time.ParseDuration https://golang.org/pkg/time/#ParseDuration.
        """
        email_addresses: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        Requested email subject alternative names.
        """
        encode_usages_in_request: NotRequired[pulumi.Input[bool]]
        """
        Whether the KeyUsage and ExtKeyUsage extensions should be set in the encoded CSR.

        This option defaults to true, and should only be disabled if the target
        issuer does not support CSRs with these X509 KeyUsage/ ExtKeyUsage extensions.
        """
        ip_addresses: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        Requested IP address subject alternative names.
        """
        is_ca: NotRequired[pulumi.Input[bool]]
        """
        Requested basic constraints isCA value.
        The isCA value is used to set the `isCA` field on the created CertificateRequest
        resources. Note that the issuer may choose to ignore the requested isCA value, just
        like any other requested attribute.

        If true, this will automatically add the `cert sign` usage to the list
        of requested `usages`.
        """
        issuer_ref: NotRequired[pulumi.Input["CertificateSpecIssuerRefPatchArgsDict"]]
        keystores: NotRequired[pulumi.Input["CertificateSpecKeystoresPatchArgsDict"]]
        literal_subject: NotRequired[pulumi.Input[str]]
        """
        Requested X.509 certificate subject, represented using the LDAP "String
        Representation of a Distinguished Name" [1].
        Important: the LDAP string format also specifies the order of the attributes
        in the subject, this is important when issuing certs for LDAP authentication.
        Example: `CN=foo,DC=corp,DC=example,DC=com`
        More info [1]: https://datatracker.ietf.org/doc/html/rfc4514
        More info: https://github.com/cert-manager/cert-manager/issues/3203
        More info: https://github.com/cert-manager/cert-manager/issues/4424

        Cannot be set if the `subject` or `commonName` field is set.
        """
        name_constraints: NotRequired[
            pulumi.Input["CertificateSpecNameConstraintsPatchArgsDict"]
        ]
        other_names: NotRequired[
            pulumi.Input[
                Sequence[pulumi.Input["CertificateSpecOtherNamesPatchArgsDict"]]
            ]
        ]
        """
        `otherNames` is an escape hatch for SAN that allows any type. We currently restrict the support to string like otherNames, cf RFC 5280 p 37
        Any UTF8 String valued otherName can be passed with by setting the keys oid: x.x.x.x and UTF8Value: somevalue for `otherName`.
        Most commonly this would be UPN set with oid: 1.3.6.1.4.1.311.20.2.3
        You should ensure that any OID passed is valid for the UTF8String type as we do not explicitly validate this.
        """
        private_key: NotRequired[pulumi.Input["CertificateSpecPrivateKeyPatchArgsDict"]]
        renew_before: NotRequired[pulumi.Input[str]]
        """
        How long before the currently issued certificate's expiry cert-manager should
        renew the certificate. For example, if a certificate is valid for 60 minutes,
        and `renewBefore=10m`, cert-manager will begin to attempt to renew the certificate
        50 minutes after it was issued (i.e. when there are 10 minutes remaining until
        the certificate is no longer valid).

        NOTE: The actual lifetime of the issued certificate is used to determine the
        renewal time. If an issuer returns a certificate with a different lifetime than
        the one requested, cert-manager will use the lifetime of the issued certificate.

        If unset, this defaults to 1/3 of the issued certificate's lifetime.
        Minimum accepted value is 5 minutes.
        Value must be in units accepted by Go time.ParseDuration https://golang.org/pkg/time/#ParseDuration.
        Cannot be set if the `renewBeforePercentage` field is set.
        """
        renew_before_percentage: NotRequired[pulumi.Input[int]]
        """
        `renewBeforePercentage` is like `renewBefore`, except it is a relative percentage
        rather than an absolute duration. For example, if a certificate is valid for 60
        minutes, and  `renewBeforePercentage=25`, cert-manager will begin to attempt to
        renew the certificate 45 minutes after it was issued (i.e. when there are 15
        minutes (25%) remaining until the certificate is no longer valid).

        NOTE: The actual lifetime of the issued certificate is used to determine the
        renewal time. If an issuer returns a certificate with a different lifetime than
        the one requested, cert-manager will use the lifetime of the issued certificate.

        Value must be an integer in the range (0,100). The minimum effective
        `renewBefore` derived from the `renewBeforePercentage` and `duration` fields is 5
        minutes.
        Cannot be set if the `renewBefore` field is set.
        """
        revision_history_limit: NotRequired[pulumi.Input[int]]
        """
        The maximum number of CertificateRequest revisions that are maintained in
        the Certificate's history. Each revision represents a single `CertificateRequest`
        created by this Certificate, either when it was created, renewed, or Spec
        was changed. Revisions will be removed by oldest first if the number of
        revisions exceeds this number.

        If set, revisionHistoryLimit must be a value of `1` or greater.
        If unset (`nil`), revisions will not be garbage collected.
        Default value is `nil`.
        """
        secretName: NotRequired[pulumi.Input[str]]
        """
        Name of the Secret resource that will be automatically created and
        managed by this Certificate resource. It will be populated with a
        private key and certificate, signed by the denoted issuer. The Secret
        resource lives in the same namespace as the Certificate resource.
        """
        secret_template: NotRequired[
            pulumi.Input["CertificateSpecSecretTemplatePatchArgsDict"]
        ]
        subject: NotRequired[pulumi.Input["CertificateSpecSubjectPatchArgsDict"]]
        uris: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        Requested URI subject alternative names.
        """
        usages: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        Requested key usages and extended key usages.
        These usages are used to set the `usages` field on the created CertificateRequest
        resources. If `encodeUsagesInRequest` is unset or set to `true`, the usages
        will additionally be encoded in the `request` field which contains the CSR blob.

        If unset, defaults to `digital signature` and `key encipherment`.
        """

elif False:
    CertificateSpecPatchArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class CertificateSpecPatchArgs:
    def __init__(
        __self__,
        *,
        additional_output_formats: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input["CertificateSpecAdditionalOutputFormatsPatchArgs"]
                ]
            ]
        ] = None,
        common_name: Optional[pulumi.Input[str]] = None,
        dns_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        duration: Optional[pulumi.Input[str]] = None,
        email_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        encode_usages_in_request: Optional[pulumi.Input[bool]] = None,
        ip_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        is_ca: Optional[pulumi.Input[bool]] = None,
        issuer_ref: Optional[pulumi.Input["CertificateSpecIssuerRefPatchArgs"]] = None,
        keystores: Optional[pulumi.Input["CertificateSpecKeystoresPatchArgs"]] = None,
        literal_subject: Optional[pulumi.Input[str]] = None,
        name_constraints: Optional[
            pulumi.Input["CertificateSpecNameConstraintsPatchArgs"]
        ] = None,
        other_names: Optional[
            pulumi.Input[Sequence[pulumi.Input["CertificateSpecOtherNamesPatchArgs"]]]
        ] = None,
        private_key: Optional[
            pulumi.Input["CertificateSpecPrivateKeyPatchArgs"]
        ] = None,
        renew_before: Optional[pulumi.Input[str]] = None,
        renew_before_percentage: Optional[pulumi.Input[int]] = None,
        revision_history_limit: Optional[pulumi.Input[int]] = None,
        secretName: Optional[pulumi.Input[str]] = None,
        secret_template: Optional[
            pulumi.Input["CertificateSpecSecretTemplatePatchArgs"]
        ] = None,
        subject: Optional[pulumi.Input["CertificateSpecSubjectPatchArgs"]] = None,
        uris: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        usages: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None
    ):
        """
        Specification of the desired state of the Certificate resource.
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
        :param pulumi.Input[Sequence[pulumi.Input['CertificateSpecAdditionalOutputFormatsPatchArgs']]] additional_output_formats: Defines extra output formats of the private key and signed certificate chain
               to be written to this Certificate's target Secret.

               This is a Beta Feature enabled by default. It can be disabled with the
               `--feature-gates=AdditionalCertificateOutputFormats=false` option set on both
               the controller and webhook components.
        :param pulumi.Input[str] common_name: Requested common name X509 certificate subject attribute.
               More info: https://datatracker.ietf.org/doc/html/rfc5280#section-4.1.2.6
               NOTE: TLS clients will ignore this value when any subject alternative name is
               set (see https://tools.ietf.org/html/rfc6125#section-6.4.4).

               Should have a length of 64 characters or fewer to avoid generating invalid CSRs.
               Cannot be set if the `literalSubject` field is set.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] dns_names: Requested DNS subject alternative names.
        :param pulumi.Input[str] duration: Requested 'duration' (i.e. lifetime) of the Certificate. Note that the
               issuer may choose to ignore the requested duration, just like any other
               requested attribute.

               If unset, this defaults to 90 days.
               Minimum accepted duration is 1 hour.
               Value must be in units accepted by Go time.ParseDuration https://golang.org/pkg/time/#ParseDuration.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] email_addresses: Requested email subject alternative names.
        :param pulumi.Input[bool] encode_usages_in_request: Whether the KeyUsage and ExtKeyUsage extensions should be set in the encoded CSR.

               This option defaults to true, and should only be disabled if the target
               issuer does not support CSRs with these X509 KeyUsage/ ExtKeyUsage extensions.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ip_addresses: Requested IP address subject alternative names.
        :param pulumi.Input[bool] is_ca: Requested basic constraints isCA value.
               The isCA value is used to set the `isCA` field on the created CertificateRequest
               resources. Note that the issuer may choose to ignore the requested isCA value, just
               like any other requested attribute.

               If true, this will automatically add the `cert sign` usage to the list
               of requested `usages`.
        :param pulumi.Input[str] literal_subject: Requested X.509 certificate subject, represented using the LDAP "String
               Representation of a Distinguished Name" [1].
               Important: the LDAP string format also specifies the order of the attributes
               in the subject, this is important when issuing certs for LDAP authentication.
               Example: `CN=foo,DC=corp,DC=example,DC=com`
               More info [1]: https://datatracker.ietf.org/doc/html/rfc4514
               More info: https://github.com/cert-manager/cert-manager/issues/3203
               More info: https://github.com/cert-manager/cert-manager/issues/4424

               Cannot be set if the `subject` or `commonName` field is set.
        :param pulumi.Input[Sequence[pulumi.Input['CertificateSpecOtherNamesPatchArgs']]] other_names: `otherNames` is an escape hatch for SAN that allows any type. We currently restrict the support to string like otherNames, cf RFC 5280 p 37
               Any UTF8 String valued otherName can be passed with by setting the keys oid: x.x.x.x and UTF8Value: somevalue for `otherName`.
               Most commonly this would be UPN set with oid: 1.3.6.1.4.1.311.20.2.3
               You should ensure that any OID passed is valid for the UTF8String type as we do not explicitly validate this.
        :param pulumi.Input[str] renew_before: How long before the currently issued certificate's expiry cert-manager should
               renew the certificate. For example, if a certificate is valid for 60 minutes,
               and `renewBefore=10m`, cert-manager will begin to attempt to renew the certificate
               50 minutes after it was issued (i.e. when there are 10 minutes remaining until
               the certificate is no longer valid).

               NOTE: The actual lifetime of the issued certificate is used to determine the
               renewal time. If an issuer returns a certificate with a different lifetime than
               the one requested, cert-manager will use the lifetime of the issued certificate.

               If unset, this defaults to 1/3 of the issued certificate's lifetime.
               Minimum accepted value is 5 minutes.
               Value must be in units accepted by Go time.ParseDuration https://golang.org/pkg/time/#ParseDuration.
               Cannot be set if the `renewBeforePercentage` field is set.
        :param pulumi.Input[int] renew_before_percentage: `renewBeforePercentage` is like `renewBefore`, except it is a relative percentage
               rather than an absolute duration. For example, if a certificate is valid for 60
               minutes, and  `renewBeforePercentage=25`, cert-manager will begin to attempt to
               renew the certificate 45 minutes after it was issued (i.e. when there are 15
               minutes (25%) remaining until the certificate is no longer valid).

               NOTE: The actual lifetime of the issued certificate is used to determine the
               renewal time. If an issuer returns a certificate with a different lifetime than
               the one requested, cert-manager will use the lifetime of the issued certificate.

               Value must be an integer in the range (0,100). The minimum effective
               `renewBefore` derived from the `renewBeforePercentage` and `duration` fields is 5
               minutes.
               Cannot be set if the `renewBefore` field is set.
        :param pulumi.Input[int] revision_history_limit: The maximum number of CertificateRequest revisions that are maintained in
               the Certificate's history. Each revision represents a single `CertificateRequest`
               created by this Certificate, either when it was created, renewed, or Spec
               was changed. Revisions will be removed by oldest first if the number of
               revisions exceeds this number.

               If set, revisionHistoryLimit must be a value of `1` or greater.
               If unset (`nil`), revisions will not be garbage collected.
               Default value is `nil`.
        :param pulumi.Input[str] secretName: Name of the Secret resource that will be automatically created and
               managed by this Certificate resource. It will be populated with a
               private key and certificate, signed by the denoted issuer. The Secret
               resource lives in the same namespace as the Certificate resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] uris: Requested URI subject alternative names.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] usages: Requested key usages and extended key usages.
               These usages are used to set the `usages` field on the created CertificateRequest
               resources. If `encodeUsagesInRequest` is unset or set to `true`, the usages
               will additionally be encoded in the `request` field which contains the CSR blob.

               If unset, defaults to `digital signature` and `key encipherment`.
        """
        if additional_output_formats is not None:
            pulumi.set(__self__, "additional_output_formats", additional_output_formats)
        if common_name is not None:
            pulumi.set(__self__, "common_name", common_name)
        if dns_names is not None:
            pulumi.set(__self__, "dns_names", dns_names)
        if duration is not None:
            pulumi.set(__self__, "duration", duration)
        if email_addresses is not None:
            pulumi.set(__self__, "email_addresses", email_addresses)
        if encode_usages_in_request is not None:
            pulumi.set(__self__, "encode_usages_in_request", encode_usages_in_request)
        if ip_addresses is not None:
            pulumi.set(__self__, "ip_addresses", ip_addresses)
        if is_ca is not None:
            pulumi.set(__self__, "is_ca", is_ca)
        if issuer_ref is not None:
            pulumi.set(__self__, "issuer_ref", issuer_ref)
        if keystores is not None:
            pulumi.set(__self__, "keystores", keystores)
        if literal_subject is not None:
            pulumi.set(__self__, "literal_subject", literal_subject)
        if name_constraints is not None:
            pulumi.set(__self__, "name_constraints", name_constraints)
        if other_names is not None:
            pulumi.set(__self__, "other_names", other_names)
        if private_key is not None:
            pulumi.set(__self__, "private_key", private_key)
        if renew_before is not None:
            pulumi.set(__self__, "renew_before", renew_before)
        if renew_before_percentage is not None:
            pulumi.set(__self__, "renew_before_percentage", renew_before_percentage)
        if revision_history_limit is not None:
            pulumi.set(__self__, "revision_history_limit", revision_history_limit)
        if secretName is not None:
            pulumi.set(__self__, "secretName", secretName)
        if secret_template is not None:
            pulumi.set(__self__, "secret_template", secret_template)
        if subject is not None:
            pulumi.set(__self__, "subject", subject)
        if uris is not None:
            pulumi.set(__self__, "uris", uris)
        if usages is not None:
            pulumi.set(__self__, "usages", usages)

    @property
    @pulumi.getter(name="additionalOutputFormats")
    def additional_output_formats(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[pulumi.Input["CertificateSpecAdditionalOutputFormatsPatchArgs"]]
        ]
    ]:
        """
        Defines extra output formats of the private key and signed certificate chain
        to be written to this Certificate's target Secret.

        This is a Beta Feature enabled by default. It can be disabled with the
        `--feature-gates=AdditionalCertificateOutputFormats=false` option set on both
        the controller and webhook components.
        """
        return pulumi.get(self, "additional_output_formats")

    @additional_output_formats.setter
    def additional_output_formats(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input["CertificateSpecAdditionalOutputFormatsPatchArgs"]
                ]
            ]
        ],
    ):
        pulumi.set(self, "additional_output_formats", value)

    @property
    @pulumi.getter(name="commonName")
    def common_name(self) -> Optional[pulumi.Input[str]]:
        """
        Requested common name X509 certificate subject attribute.
        More info: https://datatracker.ietf.org/doc/html/rfc5280#section-4.1.2.6
        NOTE: TLS clients will ignore this value when any subject alternative name is
        set (see https://tools.ietf.org/html/rfc6125#section-6.4.4).

        Should have a length of 64 characters or fewer to avoid generating invalid CSRs.
        Cannot be set if the `literalSubject` field is set.
        """
        return pulumi.get(self, "common_name")

    @common_name.setter
    def common_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "common_name", value)

    @property
    @pulumi.getter(name="dnsNames")
    def dns_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Requested DNS subject alternative names.
        """
        return pulumi.get(self, "dns_names")

    @dns_names.setter
    def dns_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "dns_names", value)

    @property
    @pulumi.getter
    def duration(self) -> Optional[pulumi.Input[str]]:
        """
        Requested 'duration' (i.e. lifetime) of the Certificate. Note that the
        issuer may choose to ignore the requested duration, just like any other
        requested attribute.

        If unset, this defaults to 90 days.
        Minimum accepted duration is 1 hour.
        Value must be in units accepted by Go time.ParseDuration https://golang.org/pkg/time/#ParseDuration.
        """
        return pulumi.get(self, "duration")

    @duration.setter
    def duration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "duration", value)

    @property
    @pulumi.getter(name="emailAddresses")
    def email_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Requested email subject alternative names.
        """
        return pulumi.get(self, "email_addresses")

    @email_addresses.setter
    def email_addresses(
        self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]
    ):
        pulumi.set(self, "email_addresses", value)

    @property
    @pulumi.getter(name="encodeUsagesInRequest")
    def encode_usages_in_request(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the KeyUsage and ExtKeyUsage extensions should be set in the encoded CSR.

        This option defaults to true, and should only be disabled if the target
        issuer does not support CSRs with these X509 KeyUsage/ ExtKeyUsage extensions.
        """
        return pulumi.get(self, "encode_usages_in_request")

    @encode_usages_in_request.setter
    def encode_usages_in_request(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "encode_usages_in_request", value)

    @property
    @pulumi.getter(name="ipAddresses")
    def ip_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Requested IP address subject alternative names.
        """
        return pulumi.get(self, "ip_addresses")

    @ip_addresses.setter
    def ip_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ip_addresses", value)

    @property
    @pulumi.getter(name="isCA")
    def is_ca(self) -> Optional[pulumi.Input[bool]]:
        """
        Requested basic constraints isCA value.
        The isCA value is used to set the `isCA` field on the created CertificateRequest
        resources. Note that the issuer may choose to ignore the requested isCA value, just
        like any other requested attribute.

        If true, this will automatically add the `cert sign` usage to the list
        of requested `usages`.
        """
        return pulumi.get(self, "is_ca")

    @is_ca.setter
    def is_ca(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_ca", value)

    @property
    @pulumi.getter(name="issuerRef")
    def issuer_ref(self) -> Optional[pulumi.Input["CertificateSpecIssuerRefPatchArgs"]]:
        return pulumi.get(self, "issuer_ref")

    @issuer_ref.setter
    def issuer_ref(
        self, value: Optional[pulumi.Input["CertificateSpecIssuerRefPatchArgs"]]
    ):
        pulumi.set(self, "issuer_ref", value)

    @property
    @pulumi.getter
    def keystores(self) -> Optional[pulumi.Input["CertificateSpecKeystoresPatchArgs"]]:
        return pulumi.get(self, "keystores")

    @keystores.setter
    def keystores(
        self, value: Optional[pulumi.Input["CertificateSpecKeystoresPatchArgs"]]
    ):
        pulumi.set(self, "keystores", value)

    @property
    @pulumi.getter(name="literalSubject")
    def literal_subject(self) -> Optional[pulumi.Input[str]]:
        """
        Requested X.509 certificate subject, represented using the LDAP "String
        Representation of a Distinguished Name" [1].
        Important: the LDAP string format also specifies the order of the attributes
        in the subject, this is important when issuing certs for LDAP authentication.
        Example: `CN=foo,DC=corp,DC=example,DC=com`
        More info [1]: https://datatracker.ietf.org/doc/html/rfc4514
        More info: https://github.com/cert-manager/cert-manager/issues/3203
        More info: https://github.com/cert-manager/cert-manager/issues/4424

        Cannot be set if the `subject` or `commonName` field is set.
        """
        return pulumi.get(self, "literal_subject")

    @literal_subject.setter
    def literal_subject(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "literal_subject", value)

    @property
    @pulumi.getter(name="nameConstraints")
    def name_constraints(
        self,
    ) -> Optional[pulumi.Input["CertificateSpecNameConstraintsPatchArgs"]]:
        return pulumi.get(self, "name_constraints")

    @name_constraints.setter
    def name_constraints(
        self, value: Optional[pulumi.Input["CertificateSpecNameConstraintsPatchArgs"]]
    ):
        pulumi.set(self, "name_constraints", value)

    @property
    @pulumi.getter(name="otherNames")
    def other_names(
        self,
    ) -> Optional[
        pulumi.Input[Sequence[pulumi.Input["CertificateSpecOtherNamesPatchArgs"]]]
    ]:
        """
        `otherNames` is an escape hatch for SAN that allows any type. We currently restrict the support to string like otherNames, cf RFC 5280 p 37
        Any UTF8 String valued otherName can be passed with by setting the keys oid: x.x.x.x and UTF8Value: somevalue for `otherName`.
        Most commonly this would be UPN set with oid: 1.3.6.1.4.1.311.20.2.3
        You should ensure that any OID passed is valid for the UTF8String type as we do not explicitly validate this.
        """
        return pulumi.get(self, "other_names")

    @other_names.setter
    def other_names(
        self,
        value: Optional[
            pulumi.Input[Sequence[pulumi.Input["CertificateSpecOtherNamesPatchArgs"]]]
        ],
    ):
        pulumi.set(self, "other_names", value)

    @property
    @pulumi.getter(name="privateKey")
    def private_key(
        self,
    ) -> Optional[pulumi.Input["CertificateSpecPrivateKeyPatchArgs"]]:
        return pulumi.get(self, "private_key")

    @private_key.setter
    def private_key(
        self, value: Optional[pulumi.Input["CertificateSpecPrivateKeyPatchArgs"]]
    ):
        pulumi.set(self, "private_key", value)

    @property
    @pulumi.getter(name="renewBefore")
    def renew_before(self) -> Optional[pulumi.Input[str]]:
        """
        How long before the currently issued certificate's expiry cert-manager should
        renew the certificate. For example, if a certificate is valid for 60 minutes,
        and `renewBefore=10m`, cert-manager will begin to attempt to renew the certificate
        50 minutes after it was issued (i.e. when there are 10 minutes remaining until
        the certificate is no longer valid).

        NOTE: The actual lifetime of the issued certificate is used to determine the
        renewal time. If an issuer returns a certificate with a different lifetime than
        the one requested, cert-manager will use the lifetime of the issued certificate.

        If unset, this defaults to 1/3 of the issued certificate's lifetime.
        Minimum accepted value is 5 minutes.
        Value must be in units accepted by Go time.ParseDuration https://golang.org/pkg/time/#ParseDuration.
        Cannot be set if the `renewBeforePercentage` field is set.
        """
        return pulumi.get(self, "renew_before")

    @renew_before.setter
    def renew_before(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "renew_before", value)

    @property
    @pulumi.getter(name="renewBeforePercentage")
    def renew_before_percentage(self) -> Optional[pulumi.Input[int]]:
        """
        `renewBeforePercentage` is like `renewBefore`, except it is a relative percentage
        rather than an absolute duration. For example, if a certificate is valid for 60
        minutes, and  `renewBeforePercentage=25`, cert-manager will begin to attempt to
        renew the certificate 45 minutes after it was issued (i.e. when there are 15
        minutes (25%) remaining until the certificate is no longer valid).

        NOTE: The actual lifetime of the issued certificate is used to determine the
        renewal time. If an issuer returns a certificate with a different lifetime than
        the one requested, cert-manager will use the lifetime of the issued certificate.

        Value must be an integer in the range (0,100). The minimum effective
        `renewBefore` derived from the `renewBeforePercentage` and `duration` fields is 5
        minutes.
        Cannot be set if the `renewBefore` field is set.
        """
        return pulumi.get(self, "renew_before_percentage")

    @renew_before_percentage.setter
    def renew_before_percentage(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "renew_before_percentage", value)

    @property
    @pulumi.getter(name="revisionHistoryLimit")
    def revision_history_limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of CertificateRequest revisions that are maintained in
        the Certificate's history. Each revision represents a single `CertificateRequest`
        created by this Certificate, either when it was created, renewed, or Spec
        was changed. Revisions will be removed by oldest first if the number of
        revisions exceeds this number.

        If set, revisionHistoryLimit must be a value of `1` or greater.
        If unset (`nil`), revisions will not be garbage collected.
        Default value is `nil`.
        """
        return pulumi.get(self, "revision_history_limit")

    @revision_history_limit.setter
    def revision_history_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "revision_history_limit", value)

    @property
    @pulumi.getter(name="secretName")
    def secretName(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the Secret resource that will be automatically created and
        managed by this Certificate resource. It will be populated with a
        private key and certificate, signed by the denoted issuer. The Secret
        resource lives in the same namespace as the Certificate resource.
        """
        return pulumi.get(self, "secretName")

    @secretName.setter
    def secretName(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secretName", value)

    @property
    @pulumi.getter(name="secretTemplate")
    def secret_template(
        self,
    ) -> Optional[pulumi.Input["CertificateSpecSecretTemplatePatchArgs"]]:
        return pulumi.get(self, "secret_template")

    @secret_template.setter
    def secret_template(
        self, value: Optional[pulumi.Input["CertificateSpecSecretTemplatePatchArgs"]]
    ):
        pulumi.set(self, "secret_template", value)

    @property
    @pulumi.getter
    def subject(self) -> Optional[pulumi.Input["CertificateSpecSubjectPatchArgs"]]:
        return pulumi.get(self, "subject")

    @subject.setter
    def subject(self, value: Optional[pulumi.Input["CertificateSpecSubjectPatchArgs"]]):
        pulumi.set(self, "subject", value)

    @property
    @pulumi.getter
    def uris(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Requested URI subject alternative names.
        """
        return pulumi.get(self, "uris")

    @uris.setter
    def uris(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "uris", value)

    @property
    @pulumi.getter
    def usages(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Requested key usages and extended key usages.
        These usages are used to set the `usages` field on the created CertificateRequest
        resources. If `encodeUsagesInRequest` is unset or set to `true`, the usages
        will additionally be encoded in the `request` field which contains the CSR blob.

        If unset, defaults to `digital signature` and `key encipherment`.
        """
        return pulumi.get(self, "usages")

    @usages.setter
    def usages(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "usages", value)


if not MYPY:

    class CertificateSpecPrivateKeyPatchArgsDict(TypedDict):
        """
        Private key options. These include the key algorithm and size, the used
        encoding and the rotation policy.
        """

        algorithm: NotRequired[pulumi.Input[str]]
        """
        Algorithm is the private key algorithm of the corresponding private key
        for this certificate.

        If provided, allowed values are either `RSA`, `ECDSA` or `Ed25519`.
        If `algorithm` is specified and `size` is not provided,
        key size of 2048 will be used for `RSA` key algorithm and
        key size of 256 will be used for `ECDSA` key algorithm.
        key size is ignored when using the `Ed25519` key algorithm.
        """
        encoding: NotRequired[pulumi.Input[str]]
        """
        The private key cryptography standards (PKCS) encoding for this
        certificate's private key to be encoded in.

        If provided, allowed values are `PKCS1` and `PKCS8` standing for PKCS#1
        and PKCS#8, respectively.
        Defaults to `PKCS1` if not specified.
        """
        rotation_policy: NotRequired[pulumi.Input[str]]
        """
        RotationPolicy controls how private keys should be regenerated when a
        re-issuance is being processed.

        If set to `Never`, a private key will only be generated if one does not
        already exist in the target `spec.secretName`. If one does exist but it
        does not have the correct algorithm or size, a warning will be raised
        to await user intervention.
        If set to `Always`, a private key matching the specified requirements
        will be generated whenever a re-issuance occurs.
        Default is `Never` for backward compatibility.
        """
        size: NotRequired[pulumi.Input[int]]
        """
        Size is the key bit size of the corresponding private key for this certificate.

        If `algorithm` is set to `RSA`, valid values are `2048`, `4096` or `8192`,
        and will default to `2048` if not specified.
        If `algorithm` is set to `ECDSA`, valid values are `256`, `384` or `521`,
        and will default to `256` if not specified.
        If `algorithm` is set to `Ed25519`, Size is ignored.
        No other values are allowed.
        """

elif False:
    CertificateSpecPrivateKeyPatchArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class CertificateSpecPrivateKeyPatchArgs:
    def __init__(
        __self__,
        *,
        algorithm: Optional[pulumi.Input[str]] = None,
        encoding: Optional[pulumi.Input[str]] = None,
        rotation_policy: Optional[pulumi.Input[str]] = None,
        size: Optional[pulumi.Input[int]] = None
    ):
        """
        Private key options. These include the key algorithm and size, the used
        encoding and the rotation policy.
        :param pulumi.Input[str] algorithm: Algorithm is the private key algorithm of the corresponding private key
               for this certificate.

               If provided, allowed values are either `RSA`, `ECDSA` or `Ed25519`.
               If `algorithm` is specified and `size` is not provided,
               key size of 2048 will be used for `RSA` key algorithm and
               key size of 256 will be used for `ECDSA` key algorithm.
               key size is ignored when using the `Ed25519` key algorithm.
        :param pulumi.Input[str] encoding: The private key cryptography standards (PKCS) encoding for this
               certificate's private key to be encoded in.

               If provided, allowed values are `PKCS1` and `PKCS8` standing for PKCS#1
               and PKCS#8, respectively.
               Defaults to `PKCS1` if not specified.
        :param pulumi.Input[str] rotation_policy: RotationPolicy controls how private keys should be regenerated when a
               re-issuance is being processed.

               If set to `Never`, a private key will only be generated if one does not
               already exist in the target `spec.secretName`. If one does exist but it
               does not have the correct algorithm or size, a warning will be raised
               to await user intervention.
               If set to `Always`, a private key matching the specified requirements
               will be generated whenever a re-issuance occurs.
               Default is `Never` for backward compatibility.
        :param pulumi.Input[int] size: Size is the key bit size of the corresponding private key for this certificate.

               If `algorithm` is set to `RSA`, valid values are `2048`, `4096` or `8192`,
               and will default to `2048` if not specified.
               If `algorithm` is set to `ECDSA`, valid values are `256`, `384` or `521`,
               and will default to `256` if not specified.
               If `algorithm` is set to `Ed25519`, Size is ignored.
               No other values are allowed.
        """
        if algorithm is not None:
            pulumi.set(__self__, "algorithm", algorithm)
        if encoding is not None:
            pulumi.set(__self__, "encoding", encoding)
        if rotation_policy is not None:
            pulumi.set(__self__, "rotation_policy", rotation_policy)
        if size is not None:
            pulumi.set(__self__, "size", size)

    @property
    @pulumi.getter
    def algorithm(self) -> Optional[pulumi.Input[str]]:
        """
        Algorithm is the private key algorithm of the corresponding private key
        for this certificate.

        If provided, allowed values are either `RSA`, `ECDSA` or `Ed25519`.
        If `algorithm` is specified and `size` is not provided,
        key size of 2048 will be used for `RSA` key algorithm and
        key size of 256 will be used for `ECDSA` key algorithm.
        key size is ignored when using the `Ed25519` key algorithm.
        """
        return pulumi.get(self, "algorithm")

    @algorithm.setter
    def algorithm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "algorithm", value)

    @property
    @pulumi.getter
    def encoding(self) -> Optional[pulumi.Input[str]]:
        """
        The private key cryptography standards (PKCS) encoding for this
        certificate's private key to be encoded in.

        If provided, allowed values are `PKCS1` and `PKCS8` standing for PKCS#1
        and PKCS#8, respectively.
        Defaults to `PKCS1` if not specified.
        """
        return pulumi.get(self, "encoding")

    @encoding.setter
    def encoding(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "encoding", value)

    @property
    @pulumi.getter(name="rotationPolicy")
    def rotation_policy(self) -> Optional[pulumi.Input[str]]:
        """
        RotationPolicy controls how private keys should be regenerated when a
        re-issuance is being processed.

        If set to `Never`, a private key will only be generated if one does not
        already exist in the target `spec.secretName`. If one does exist but it
        does not have the correct algorithm or size, a warning will be raised
        to await user intervention.
        If set to `Always`, a private key matching the specified requirements
        will be generated whenever a re-issuance occurs.
        Default is `Never` for backward compatibility.
        """
        return pulumi.get(self, "rotation_policy")

    @rotation_policy.setter
    def rotation_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rotation_policy", value)

    @property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[int]]:
        """
        Size is the key bit size of the corresponding private key for this certificate.

        If `algorithm` is set to `RSA`, valid values are `2048`, `4096` or `8192`,
        and will default to `2048` if not specified.
        If `algorithm` is set to `ECDSA`, valid values are `256`, `384` or `521`,
        and will default to `256` if not specified.
        If `algorithm` is set to `Ed25519`, Size is ignored.
        No other values are allowed.
        """
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "size", value)


if not MYPY:

    class CertificateSpecPrivateKeyArgsDict(TypedDict):
        """
        Private key options. These include the key algorithm and size, the used
        encoding and the rotation policy.
        """

        algorithm: NotRequired[pulumi.Input[str]]
        """
        Algorithm is the private key algorithm of the corresponding private key
        for this certificate.

        If provided, allowed values are either `RSA`, `ECDSA` or `Ed25519`.
        If `algorithm` is specified and `size` is not provided,
        key size of 2048 will be used for `RSA` key algorithm and
        key size of 256 will be used for `ECDSA` key algorithm.
        key size is ignored when using the `Ed25519` key algorithm.
        """
        encoding: NotRequired[pulumi.Input[str]]
        """
        The private key cryptography standards (PKCS) encoding for this
        certificate's private key to be encoded in.

        If provided, allowed values are `PKCS1` and `PKCS8` standing for PKCS#1
        and PKCS#8, respectively.
        Defaults to `PKCS1` if not specified.
        """
        rotation_policy: NotRequired[pulumi.Input[str]]
        """
        RotationPolicy controls how private keys should be regenerated when a
        re-issuance is being processed.

        If set to `Never`, a private key will only be generated if one does not
        already exist in the target `spec.secretName`. If one does exist but it
        does not have the correct algorithm or size, a warning will be raised
        to await user intervention.
        If set to `Always`, a private key matching the specified requirements
        will be generated whenever a re-issuance occurs.
        Default is `Never` for backward compatibility.
        """
        size: NotRequired[pulumi.Input[int]]
        """
        Size is the key bit size of the corresponding private key for this certificate.

        If `algorithm` is set to `RSA`, valid values are `2048`, `4096` or `8192`,
        and will default to `2048` if not specified.
        If `algorithm` is set to `ECDSA`, valid values are `256`, `384` or `521`,
        and will default to `256` if not specified.
        If `algorithm` is set to `Ed25519`, Size is ignored.
        No other values are allowed.
        """

elif False:
    CertificateSpecPrivateKeyArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class CertificateSpecPrivateKeyArgs:
    def __init__(
        __self__,
        *,
        algorithm: Optional[pulumi.Input[str]] = None,
        encoding: Optional[pulumi.Input[str]] = None,
        rotation_policy: Optional[pulumi.Input[str]] = None,
        size: Optional[pulumi.Input[int]] = None
    ):
        """
        Private key options. These include the key algorithm and size, the used
        encoding and the rotation policy.
        :param pulumi.Input[str] algorithm: Algorithm is the private key algorithm of the corresponding private key
               for this certificate.

               If provided, allowed values are either `RSA`, `ECDSA` or `Ed25519`.
               If `algorithm` is specified and `size` is not provided,
               key size of 2048 will be used for `RSA` key algorithm and
               key size of 256 will be used for `ECDSA` key algorithm.
               key size is ignored when using the `Ed25519` key algorithm.
        :param pulumi.Input[str] encoding: The private key cryptography standards (PKCS) encoding for this
               certificate's private key to be encoded in.

               If provided, allowed values are `PKCS1` and `PKCS8` standing for PKCS#1
               and PKCS#8, respectively.
               Defaults to `PKCS1` if not specified.
        :param pulumi.Input[str] rotation_policy: RotationPolicy controls how private keys should be regenerated when a
               re-issuance is being processed.

               If set to `Never`, a private key will only be generated if one does not
               already exist in the target `spec.secretName`. If one does exist but it
               does not have the correct algorithm or size, a warning will be raised
               to await user intervention.
               If set to `Always`, a private key matching the specified requirements
               will be generated whenever a re-issuance occurs.
               Default is `Never` for backward compatibility.
        :param pulumi.Input[int] size: Size is the key bit size of the corresponding private key for this certificate.

               If `algorithm` is set to `RSA`, valid values are `2048`, `4096` or `8192`,
               and will default to `2048` if not specified.
               If `algorithm` is set to `ECDSA`, valid values are `256`, `384` or `521`,
               and will default to `256` if not specified.
               If `algorithm` is set to `Ed25519`, Size is ignored.
               No other values are allowed.
        """
        if algorithm is not None:
            pulumi.set(__self__, "algorithm", algorithm)
        if encoding is not None:
            pulumi.set(__self__, "encoding", encoding)
        if rotation_policy is not None:
            pulumi.set(__self__, "rotation_policy", rotation_policy)
        if size is not None:
            pulumi.set(__self__, "size", size)

    @property
    @pulumi.getter
    def algorithm(self) -> Optional[pulumi.Input[str]]:
        """
        Algorithm is the private key algorithm of the corresponding private key
        for this certificate.

        If provided, allowed values are either `RSA`, `ECDSA` or `Ed25519`.
        If `algorithm` is specified and `size` is not provided,
        key size of 2048 will be used for `RSA` key algorithm and
        key size of 256 will be used for `ECDSA` key algorithm.
        key size is ignored when using the `Ed25519` key algorithm.
        """
        return pulumi.get(self, "algorithm")

    @algorithm.setter
    def algorithm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "algorithm", value)

    @property
    @pulumi.getter
    def encoding(self) -> Optional[pulumi.Input[str]]:
        """
        The private key cryptography standards (PKCS) encoding for this
        certificate's private key to be encoded in.

        If provided, allowed values are `PKCS1` and `PKCS8` standing for PKCS#1
        and PKCS#8, respectively.
        Defaults to `PKCS1` if not specified.
        """
        return pulumi.get(self, "encoding")

    @encoding.setter
    def encoding(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "encoding", value)

    @property
    @pulumi.getter(name="rotationPolicy")
    def rotation_policy(self) -> Optional[pulumi.Input[str]]:
        """
        RotationPolicy controls how private keys should be regenerated when a
        re-issuance is being processed.

        If set to `Never`, a private key will only be generated if one does not
        already exist in the target `spec.secretName`. If one does exist but it
        does not have the correct algorithm or size, a warning will be raised
        to await user intervention.
        If set to `Always`, a private key matching the specified requirements
        will be generated whenever a re-issuance occurs.
        Default is `Never` for backward compatibility.
        """
        return pulumi.get(self, "rotation_policy")

    @rotation_policy.setter
    def rotation_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rotation_policy", value)

    @property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[int]]:
        """
        Size is the key bit size of the corresponding private key for this certificate.

        If `algorithm` is set to `RSA`, valid values are `2048`, `4096` or `8192`,
        and will default to `2048` if not specified.
        If `algorithm` is set to `ECDSA`, valid values are `256`, `384` or `521`,
        and will default to `256` if not specified.
        If `algorithm` is set to `Ed25519`, Size is ignored.
        No other values are allowed.
        """
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "size", value)


if not MYPY:

    class CertificateSpecSecretTemplatePatchArgsDict(TypedDict):
        """
        Defines annotations and labels to be copied to the Certificate's Secret.
        Labels and annotations on the Secret will be changed as they appear on the
        SecretTemplate when added or removed. SecretTemplate annotations are added
        in conjunction with, and cannot overwrite, the base set of annotations
        cert-manager sets on the Certificate's Secret.
        """

        annotations: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Annotations is a key value map to be copied to the target Kubernetes Secret.
        """
        labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Labels is a key value map to be copied to the target Kubernetes Secret.
        """

elif False:
    CertificateSpecSecretTemplatePatchArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class CertificateSpecSecretTemplatePatchArgs:
    def __init__(
        __self__,
        *,
        annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
        labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None
    ):
        """
        Defines annotations and labels to be copied to the Certificate's Secret.
        Labels and annotations on the Secret will be changed as they appear on the
        SecretTemplate when added or removed. SecretTemplate annotations are added
        in conjunction with, and cannot overwrite, the base set of annotations
        cert-manager sets on the Certificate's Secret.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] annotations: Annotations is a key value map to be copied to the target Kubernetes Secret.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: Labels is a key value map to be copied to the target Kubernetes Secret.
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Annotations is a key value map to be copied to the target Kubernetes Secret.
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(
        self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
    ):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Labels is a key value map to be copied to the target Kubernetes Secret.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)


if not MYPY:

    class CertificateSpecSecretTemplateArgsDict(TypedDict):
        """
        Defines annotations and labels to be copied to the Certificate's Secret.
        Labels and annotations on the Secret will be changed as they appear on the
        SecretTemplate when added or removed. SecretTemplate annotations are added
        in conjunction with, and cannot overwrite, the base set of annotations
        cert-manager sets on the Certificate's Secret.
        """

        annotations: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Annotations is a key value map to be copied to the target Kubernetes Secret.
        """
        labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Labels is a key value map to be copied to the target Kubernetes Secret.
        """

elif False:
    CertificateSpecSecretTemplateArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class CertificateSpecSecretTemplateArgs:
    def __init__(
        __self__,
        *,
        annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
        labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None
    ):
        """
        Defines annotations and labels to be copied to the Certificate's Secret.
        Labels and annotations on the Secret will be changed as they appear on the
        SecretTemplate when added or removed. SecretTemplate annotations are added
        in conjunction with, and cannot overwrite, the base set of annotations
        cert-manager sets on the Certificate's Secret.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] annotations: Annotations is a key value map to be copied to the target Kubernetes Secret.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: Labels is a key value map to be copied to the target Kubernetes Secret.
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Annotations is a key value map to be copied to the target Kubernetes Secret.
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(
        self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
    ):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Labels is a key value map to be copied to the target Kubernetes Secret.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)


if not MYPY:

    class CertificateSpecSubjectPatchArgsDict(TypedDict):
        """
        Requested set of X509 certificate subject attributes.
        More info: https://datatracker.ietf.org/doc/html/rfc5280#section-4.1.2.6

        The common name attribute is specified separately in the `commonName` field.
        Cannot be set if the `literalSubject` field is set.
        """

        countries: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        Countries to be used on the Certificate.
        """
        localities: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        Cities to be used on the Certificate.
        """
        organizational_units: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        Organizational Units to be used on the Certificate.
        """
        organizations: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        Organizations to be used on the Certificate.
        """
        postal_codes: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        Postal codes to be used on the Certificate.
        """
        provinces: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        State/Provinces to be used on the Certificate.
        """
        serial_number: NotRequired[pulumi.Input[str]]
        """
        Serial number to be used on the Certificate.
        """
        street_addresses: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        Street addresses to be used on the Certificate.
        """

elif False:
    CertificateSpecSubjectPatchArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class CertificateSpecSubjectPatchArgs:
    def __init__(
        __self__,
        *,
        countries: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        localities: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        organizational_units: Optional[
            pulumi.Input[Sequence[pulumi.Input[str]]]
        ] = None,
        organizations: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        postal_codes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        provinces: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        serial_number: Optional[pulumi.Input[str]] = None,
        street_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None
    ):
        """
        Requested set of X509 certificate subject attributes.
        More info: https://datatracker.ietf.org/doc/html/rfc5280#section-4.1.2.6

        The common name attribute is specified separately in the `commonName` field.
        Cannot be set if the `literalSubject` field is set.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] countries: Countries to be used on the Certificate.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] localities: Cities to be used on the Certificate.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] organizational_units: Organizational Units to be used on the Certificate.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] organizations: Organizations to be used on the Certificate.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] postal_codes: Postal codes to be used on the Certificate.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] provinces: State/Provinces to be used on the Certificate.
        :param pulumi.Input[str] serial_number: Serial number to be used on the Certificate.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] street_addresses: Street addresses to be used on the Certificate.
        """
        if countries is not None:
            pulumi.set(__self__, "countries", countries)
        if localities is not None:
            pulumi.set(__self__, "localities", localities)
        if organizational_units is not None:
            pulumi.set(__self__, "organizational_units", organizational_units)
        if organizations is not None:
            pulumi.set(__self__, "organizations", organizations)
        if postal_codes is not None:
            pulumi.set(__self__, "postal_codes", postal_codes)
        if provinces is not None:
            pulumi.set(__self__, "provinces", provinces)
        if serial_number is not None:
            pulumi.set(__self__, "serial_number", serial_number)
        if street_addresses is not None:
            pulumi.set(__self__, "street_addresses", street_addresses)

    @property
    @pulumi.getter
    def countries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Countries to be used on the Certificate.
        """
        return pulumi.get(self, "countries")

    @countries.setter
    def countries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "countries", value)

    @property
    @pulumi.getter
    def localities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Cities to be used on the Certificate.
        """
        return pulumi.get(self, "localities")

    @localities.setter
    def localities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "localities", value)

    @property
    @pulumi.getter(name="organizationalUnits")
    def organizational_units(
        self,
    ) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Organizational Units to be used on the Certificate.
        """
        return pulumi.get(self, "organizational_units")

    @organizational_units.setter
    def organizational_units(
        self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]
    ):
        pulumi.set(self, "organizational_units", value)

    @property
    @pulumi.getter
    def organizations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Organizations to be used on the Certificate.
        """
        return pulumi.get(self, "organizations")

    @organizations.setter
    def organizations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "organizations", value)

    @property
    @pulumi.getter(name="postalCodes")
    def postal_codes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Postal codes to be used on the Certificate.
        """
        return pulumi.get(self, "postal_codes")

    @postal_codes.setter
    def postal_codes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "postal_codes", value)

    @property
    @pulumi.getter
    def provinces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        State/Provinces to be used on the Certificate.
        """
        return pulumi.get(self, "provinces")

    @provinces.setter
    def provinces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "provinces", value)

    @property
    @pulumi.getter(name="serialNumber")
    def serial_number(self) -> Optional[pulumi.Input[str]]:
        """
        Serial number to be used on the Certificate.
        """
        return pulumi.get(self, "serial_number")

    @serial_number.setter
    def serial_number(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "serial_number", value)

    @property
    @pulumi.getter(name="streetAddresses")
    def street_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Street addresses to be used on the Certificate.
        """
        return pulumi.get(self, "street_addresses")

    @street_addresses.setter
    def street_addresses(
        self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]
    ):
        pulumi.set(self, "street_addresses", value)


if not MYPY:

    class CertificateSpecSubjectArgsDict(TypedDict):
        """
        Requested set of X509 certificate subject attributes.
        More info: https://datatracker.ietf.org/doc/html/rfc5280#section-4.1.2.6

        The common name attribute is specified separately in the `commonName` field.
        Cannot be set if the `literalSubject` field is set.
        """

        countries: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        Countries to be used on the Certificate.
        """
        localities: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        Cities to be used on the Certificate.
        """
        organizational_units: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        Organizational Units to be used on the Certificate.
        """
        organizations: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        Organizations to be used on the Certificate.
        """
        postal_codes: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        Postal codes to be used on the Certificate.
        """
        provinces: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        State/Provinces to be used on the Certificate.
        """
        serial_number: NotRequired[pulumi.Input[str]]
        """
        Serial number to be used on the Certificate.
        """
        street_addresses: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        Street addresses to be used on the Certificate.
        """

elif False:
    CertificateSpecSubjectArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class CertificateSpecSubjectArgs:
    def __init__(
        __self__,
        *,
        countries: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        localities: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        organizational_units: Optional[
            pulumi.Input[Sequence[pulumi.Input[str]]]
        ] = None,
        organizations: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        postal_codes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        provinces: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        serial_number: Optional[pulumi.Input[str]] = None,
        street_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None
    ):
        """
        Requested set of X509 certificate subject attributes.
        More info: https://datatracker.ietf.org/doc/html/rfc5280#section-4.1.2.6

        The common name attribute is specified separately in the `commonName` field.
        Cannot be set if the `literalSubject` field is set.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] countries: Countries to be used on the Certificate.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] localities: Cities to be used on the Certificate.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] organizational_units: Organizational Units to be used on the Certificate.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] organizations: Organizations to be used on the Certificate.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] postal_codes: Postal codes to be used on the Certificate.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] provinces: State/Provinces to be used on the Certificate.
        :param pulumi.Input[str] serial_number: Serial number to be used on the Certificate.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] street_addresses: Street addresses to be used on the Certificate.
        """
        if countries is not None:
            pulumi.set(__self__, "countries", countries)
        if localities is not None:
            pulumi.set(__self__, "localities", localities)
        if organizational_units is not None:
            pulumi.set(__self__, "organizational_units", organizational_units)
        if organizations is not None:
            pulumi.set(__self__, "organizations", organizations)
        if postal_codes is not None:
            pulumi.set(__self__, "postal_codes", postal_codes)
        if provinces is not None:
            pulumi.set(__self__, "provinces", provinces)
        if serial_number is not None:
            pulumi.set(__self__, "serial_number", serial_number)
        if street_addresses is not None:
            pulumi.set(__self__, "street_addresses", street_addresses)

    @property
    @pulumi.getter
    def countries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Countries to be used on the Certificate.
        """
        return pulumi.get(self, "countries")

    @countries.setter
    def countries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "countries", value)

    @property
    @pulumi.getter
    def localities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Cities to be used on the Certificate.
        """
        return pulumi.get(self, "localities")

    @localities.setter
    def localities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "localities", value)

    @property
    @pulumi.getter(name="organizationalUnits")
    def organizational_units(
        self,
    ) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Organizational Units to be used on the Certificate.
        """
        return pulumi.get(self, "organizational_units")

    @organizational_units.setter
    def organizational_units(
        self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]
    ):
        pulumi.set(self, "organizational_units", value)

    @property
    @pulumi.getter
    def organizations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Organizations to be used on the Certificate.
        """
        return pulumi.get(self, "organizations")

    @organizations.setter
    def organizations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "organizations", value)

    @property
    @pulumi.getter(name="postalCodes")
    def postal_codes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Postal codes to be used on the Certificate.
        """
        return pulumi.get(self, "postal_codes")

    @postal_codes.setter
    def postal_codes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "postal_codes", value)

    @property
    @pulumi.getter
    def provinces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        State/Provinces to be used on the Certificate.
        """
        return pulumi.get(self, "provinces")

    @provinces.setter
    def provinces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "provinces", value)

    @property
    @pulumi.getter(name="serialNumber")
    def serial_number(self) -> Optional[pulumi.Input[str]]:
        """
        Serial number to be used on the Certificate.
        """
        return pulumi.get(self, "serial_number")

    @serial_number.setter
    def serial_number(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "serial_number", value)

    @property
    @pulumi.getter(name="streetAddresses")
    def street_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Street addresses to be used on the Certificate.
        """
        return pulumi.get(self, "street_addresses")

    @street_addresses.setter
    def street_addresses(
        self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]
    ):
        pulumi.set(self, "street_addresses", value)


if not MYPY:

    class CertificateSpecArgsDict(TypedDict):
        """
        Specification of the desired state of the Certificate resource.
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
        """

        additional_output_formats: NotRequired[
            pulumi.Input[
                Sequence[pulumi.Input["CertificateSpecAdditionalOutputFormatsArgsDict"]]
            ]
        ]
        """
        Defines extra output formats of the private key and signed certificate chain
        to be written to this Certificate's target Secret.

        This is a Beta Feature enabled by default. It can be disabled with the
        `--feature-gates=AdditionalCertificateOutputFormats=false` option set on both
        the controller and webhook components.
        """
        common_name: NotRequired[pulumi.Input[str]]
        """
        Requested common name X509 certificate subject attribute.
        More info: https://datatracker.ietf.org/doc/html/rfc5280#section-4.1.2.6
        NOTE: TLS clients will ignore this value when any subject alternative name is
        set (see https://tools.ietf.org/html/rfc6125#section-6.4.4).

        Should have a length of 64 characters or fewer to avoid generating invalid CSRs.
        Cannot be set if the `literalSubject` field is set.
        """
        dns_names: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        Requested DNS subject alternative names.
        """
        duration: NotRequired[pulumi.Input[str]]
        """
        Requested 'duration' (i.e. lifetime) of the Certificate. Note that the
        issuer may choose to ignore the requested duration, just like any other
        requested attribute.

        If unset, this defaults to 90 days.
        Minimum accepted duration is 1 hour.
        Value must be in units accepted by Go time.ParseDuration https://golang.org/pkg/time/#ParseDuration.
        """
        email_addresses: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        Requested email subject alternative names.
        """
        encode_usages_in_request: NotRequired[pulumi.Input[bool]]
        """
        Whether the KeyUsage and ExtKeyUsage extensions should be set in the encoded CSR.

        This option defaults to true, and should only be disabled if the target
        issuer does not support CSRs with these X509 KeyUsage/ ExtKeyUsage extensions.
        """
        ip_addresses: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        Requested IP address subject alternative names.
        """
        is_ca: NotRequired[pulumi.Input[bool]]
        """
        Requested basic constraints isCA value.
        The isCA value is used to set the `isCA` field on the created CertificateRequest
        resources. Note that the issuer may choose to ignore the requested isCA value, just
        like any other requested attribute.

        If true, this will automatically add the `cert sign` usage to the list
        of requested `usages`.
        """
        issuer_ref: NotRequired[pulumi.Input["CertificateSpecIssuerRefArgsDict"]]
        keystores: NotRequired[pulumi.Input["CertificateSpecKeystoresArgsDict"]]
        literal_subject: NotRequired[pulumi.Input[str]]
        """
        Requested X.509 certificate subject, represented using the LDAP "String
        Representation of a Distinguished Name" [1].
        Important: the LDAP string format also specifies the order of the attributes
        in the subject, this is important when issuing certs for LDAP authentication.
        Example: `CN=foo,DC=corp,DC=example,DC=com`
        More info [1]: https://datatracker.ietf.org/doc/html/rfc4514
        More info: https://github.com/cert-manager/cert-manager/issues/3203
        More info: https://github.com/cert-manager/cert-manager/issues/4424

        Cannot be set if the `subject` or `commonName` field is set.
        """
        name_constraints: NotRequired[
            pulumi.Input["CertificateSpecNameConstraintsArgsDict"]
        ]
        other_names: NotRequired[
            pulumi.Input[Sequence[pulumi.Input["CertificateSpecOtherNamesArgsDict"]]]
        ]
        """
        `otherNames` is an escape hatch for SAN that allows any type. We currently restrict the support to string like otherNames, cf RFC 5280 p 37
        Any UTF8 String valued otherName can be passed with by setting the keys oid: x.x.x.x and UTF8Value: somevalue for `otherName`.
        Most commonly this would be UPN set with oid: 1.3.6.1.4.1.311.20.2.3
        You should ensure that any OID passed is valid for the UTF8String type as we do not explicitly validate this.
        """
        private_key: NotRequired[pulumi.Input["CertificateSpecPrivateKeyArgsDict"]]
        renew_before: NotRequired[pulumi.Input[str]]
        """
        How long before the currently issued certificate's expiry cert-manager should
        renew the certificate. For example, if a certificate is valid for 60 minutes,
        and `renewBefore=10m`, cert-manager will begin to attempt to renew the certificate
        50 minutes after it was issued (i.e. when there are 10 minutes remaining until
        the certificate is no longer valid).

        NOTE: The actual lifetime of the issued certificate is used to determine the
        renewal time. If an issuer returns a certificate with a different lifetime than
        the one requested, cert-manager will use the lifetime of the issued certificate.

        If unset, this defaults to 1/3 of the issued certificate's lifetime.
        Minimum accepted value is 5 minutes.
        Value must be in units accepted by Go time.ParseDuration https://golang.org/pkg/time/#ParseDuration.
        Cannot be set if the `renewBeforePercentage` field is set.
        """
        renew_before_percentage: NotRequired[pulumi.Input[int]]
        """
        `renewBeforePercentage` is like `renewBefore`, except it is a relative percentage
        rather than an absolute duration. For example, if a certificate is valid for 60
        minutes, and  `renewBeforePercentage=25`, cert-manager will begin to attempt to
        renew the certificate 45 minutes after it was issued (i.e. when there are 15
        minutes (25%) remaining until the certificate is no longer valid).

        NOTE: The actual lifetime of the issued certificate is used to determine the
        renewal time. If an issuer returns a certificate with a different lifetime than
        the one requested, cert-manager will use the lifetime of the issued certificate.

        Value must be an integer in the range (0,100). The minimum effective
        `renewBefore` derived from the `renewBeforePercentage` and `duration` fields is 5
        minutes.
        Cannot be set if the `renewBefore` field is set.
        """
        revision_history_limit: NotRequired[pulumi.Input[int]]
        """
        The maximum number of CertificateRequest revisions that are maintained in
        the Certificate's history. Each revision represents a single `CertificateRequest`
        created by this Certificate, either when it was created, renewed, or Spec
        was changed. Revisions will be removed by oldest first if the number of
        revisions exceeds this number.

        If set, revisionHistoryLimit must be a value of `1` or greater.
        If unset (`nil`), revisions will not be garbage collected.
        Default value is `nil`.
        """
        secretName: NotRequired[pulumi.Input[str]]
        """
        Name of the Secret resource that will be automatically created and
        managed by this Certificate resource. It will be populated with a
        private key and certificate, signed by the denoted issuer. The Secret
        resource lives in the same namespace as the Certificate resource.
        """
        secret_template: NotRequired[
            pulumi.Input["CertificateSpecSecretTemplateArgsDict"]
        ]
        subject: NotRequired[pulumi.Input["CertificateSpecSubjectArgsDict"]]
        uris: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        Requested URI subject alternative names.
        """
        usages: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        Requested key usages and extended key usages.
        These usages are used to set the `usages` field on the created CertificateRequest
        resources. If `encodeUsagesInRequest` is unset or set to `true`, the usages
        will additionally be encoded in the `request` field which contains the CSR blob.

        If unset, defaults to `digital signature` and `key encipherment`.
        """

elif False:
    CertificateSpecArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class CertificateSpecArgs:
    def __init__(
        __self__,
        *,
        additional_output_formats: Optional[
            pulumi.Input[
                Sequence[pulumi.Input["CertificateSpecAdditionalOutputFormatsArgs"]]
            ]
        ] = None,
        common_name: Optional[pulumi.Input[str]] = None,
        dns_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        duration: Optional[pulumi.Input[str]] = None,
        email_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        encode_usages_in_request: Optional[pulumi.Input[bool]] = None,
        ip_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        is_ca: Optional[pulumi.Input[bool]] = None,
        issuer_ref: Optional[pulumi.Input["CertificateSpecIssuerRefArgs"]] = None,
        keystores: Optional[pulumi.Input["CertificateSpecKeystoresArgs"]] = None,
        literal_subject: Optional[pulumi.Input[str]] = None,
        name_constraints: Optional[
            pulumi.Input["CertificateSpecNameConstraintsArgs"]
        ] = None,
        other_names: Optional[
            pulumi.Input[Sequence[pulumi.Input["CertificateSpecOtherNamesArgs"]]]
        ] = None,
        private_key: Optional[pulumi.Input["CertificateSpecPrivateKeyArgs"]] = None,
        renew_before: Optional[pulumi.Input[str]] = None,
        renew_before_percentage: Optional[pulumi.Input[int]] = None,
        revision_history_limit: Optional[pulumi.Input[int]] = None,
        secretName: Optional[pulumi.Input[str]] = None,
        secret_template: Optional[
            pulumi.Input["CertificateSpecSecretTemplateArgs"]
        ] = None,
        subject: Optional[pulumi.Input["CertificateSpecSubjectArgs"]] = None,
        uris: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        usages: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None
    ):
        """
        Specification of the desired state of the Certificate resource.
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
        :param pulumi.Input[Sequence[pulumi.Input['CertificateSpecAdditionalOutputFormatsArgs']]] additional_output_formats: Defines extra output formats of the private key and signed certificate chain
               to be written to this Certificate's target Secret.

               This is a Beta Feature enabled by default. It can be disabled with the
               `--feature-gates=AdditionalCertificateOutputFormats=false` option set on both
               the controller and webhook components.
        :param pulumi.Input[str] common_name: Requested common name X509 certificate subject attribute.
               More info: https://datatracker.ietf.org/doc/html/rfc5280#section-4.1.2.6
               NOTE: TLS clients will ignore this value when any subject alternative name is
               set (see https://tools.ietf.org/html/rfc6125#section-6.4.4).

               Should have a length of 64 characters or fewer to avoid generating invalid CSRs.
               Cannot be set if the `literalSubject` field is set.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] dns_names: Requested DNS subject alternative names.
        :param pulumi.Input[str] duration: Requested 'duration' (i.e. lifetime) of the Certificate. Note that the
               issuer may choose to ignore the requested duration, just like any other
               requested attribute.

               If unset, this defaults to 90 days.
               Minimum accepted duration is 1 hour.
               Value must be in units accepted by Go time.ParseDuration https://golang.org/pkg/time/#ParseDuration.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] email_addresses: Requested email subject alternative names.
        :param pulumi.Input[bool] encode_usages_in_request: Whether the KeyUsage and ExtKeyUsage extensions should be set in the encoded CSR.

               This option defaults to true, and should only be disabled if the target
               issuer does not support CSRs with these X509 KeyUsage/ ExtKeyUsage extensions.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ip_addresses: Requested IP address subject alternative names.
        :param pulumi.Input[bool] is_ca: Requested basic constraints isCA value.
               The isCA value is used to set the `isCA` field on the created CertificateRequest
               resources. Note that the issuer may choose to ignore the requested isCA value, just
               like any other requested attribute.

               If true, this will automatically add the `cert sign` usage to the list
               of requested `usages`.
        :param pulumi.Input[str] literal_subject: Requested X.509 certificate subject, represented using the LDAP "String
               Representation of a Distinguished Name" [1].
               Important: the LDAP string format also specifies the order of the attributes
               in the subject, this is important when issuing certs for LDAP authentication.
               Example: `CN=foo,DC=corp,DC=example,DC=com`
               More info [1]: https://datatracker.ietf.org/doc/html/rfc4514
               More info: https://github.com/cert-manager/cert-manager/issues/3203
               More info: https://github.com/cert-manager/cert-manager/issues/4424

               Cannot be set if the `subject` or `commonName` field is set.
        :param pulumi.Input[Sequence[pulumi.Input['CertificateSpecOtherNamesArgs']]] other_names: `otherNames` is an escape hatch for SAN that allows any type. We currently restrict the support to string like otherNames, cf RFC 5280 p 37
               Any UTF8 String valued otherName can be passed with by setting the keys oid: x.x.x.x and UTF8Value: somevalue for `otherName`.
               Most commonly this would be UPN set with oid: 1.3.6.1.4.1.311.20.2.3
               You should ensure that any OID passed is valid for the UTF8String type as we do not explicitly validate this.
        :param pulumi.Input[str] renew_before: How long before the currently issued certificate's expiry cert-manager should
               renew the certificate. For example, if a certificate is valid for 60 minutes,
               and `renewBefore=10m`, cert-manager will begin to attempt to renew the certificate
               50 minutes after it was issued (i.e. when there are 10 minutes remaining until
               the certificate is no longer valid).

               NOTE: The actual lifetime of the issued certificate is used to determine the
               renewal time. If an issuer returns a certificate with a different lifetime than
               the one requested, cert-manager will use the lifetime of the issued certificate.

               If unset, this defaults to 1/3 of the issued certificate's lifetime.
               Minimum accepted value is 5 minutes.
               Value must be in units accepted by Go time.ParseDuration https://golang.org/pkg/time/#ParseDuration.
               Cannot be set if the `renewBeforePercentage` field is set.
        :param pulumi.Input[int] renew_before_percentage: `renewBeforePercentage` is like `renewBefore`, except it is a relative percentage
               rather than an absolute duration. For example, if a certificate is valid for 60
               minutes, and  `renewBeforePercentage=25`, cert-manager will begin to attempt to
               renew the certificate 45 minutes after it was issued (i.e. when there are 15
               minutes (25%) remaining until the certificate is no longer valid).

               NOTE: The actual lifetime of the issued certificate is used to determine the
               renewal time. If an issuer returns a certificate with a different lifetime than
               the one requested, cert-manager will use the lifetime of the issued certificate.

               Value must be an integer in the range (0,100). The minimum effective
               `renewBefore` derived from the `renewBeforePercentage` and `duration` fields is 5
               minutes.
               Cannot be set if the `renewBefore` field is set.
        :param pulumi.Input[int] revision_history_limit: The maximum number of CertificateRequest revisions that are maintained in
               the Certificate's history. Each revision represents a single `CertificateRequest`
               created by this Certificate, either when it was created, renewed, or Spec
               was changed. Revisions will be removed by oldest first if the number of
               revisions exceeds this number.

               If set, revisionHistoryLimit must be a value of `1` or greater.
               If unset (`nil`), revisions will not be garbage collected.
               Default value is `nil`.
        :param pulumi.Input[str] secretName: Name of the Secret resource that will be automatically created and
               managed by this Certificate resource. It will be populated with a
               private key and certificate, signed by the denoted issuer. The Secret
               resource lives in the same namespace as the Certificate resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] uris: Requested URI subject alternative names.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] usages: Requested key usages and extended key usages.
               These usages are used to set the `usages` field on the created CertificateRequest
               resources. If `encodeUsagesInRequest` is unset or set to `true`, the usages
               will additionally be encoded in the `request` field which contains the CSR blob.

               If unset, defaults to `digital signature` and `key encipherment`.
        """
        if additional_output_formats is not None:
            pulumi.set(__self__, "additional_output_formats", additional_output_formats)
        if common_name is not None:
            pulumi.set(__self__, "common_name", common_name)
        if dns_names is not None:
            pulumi.set(__self__, "dns_names", dns_names)
        if duration is not None:
            pulumi.set(__self__, "duration", duration)
        if email_addresses is not None:
            pulumi.set(__self__, "email_addresses", email_addresses)
        if encode_usages_in_request is not None:
            pulumi.set(__self__, "encode_usages_in_request", encode_usages_in_request)
        if ip_addresses is not None:
            pulumi.set(__self__, "ip_addresses", ip_addresses)
        if is_ca is not None:
            pulumi.set(__self__, "is_ca", is_ca)
        if issuer_ref is not None:
            pulumi.set(__self__, "issuer_ref", issuer_ref)
        if keystores is not None:
            pulumi.set(__self__, "keystores", keystores)
        if literal_subject is not None:
            pulumi.set(__self__, "literal_subject", literal_subject)
        if name_constraints is not None:
            pulumi.set(__self__, "name_constraints", name_constraints)
        if other_names is not None:
            pulumi.set(__self__, "other_names", other_names)
        if private_key is not None:
            pulumi.set(__self__, "private_key", private_key)
        if renew_before is not None:
            pulumi.set(__self__, "renew_before", renew_before)
        if renew_before_percentage is not None:
            pulumi.set(__self__, "renew_before_percentage", renew_before_percentage)
        if revision_history_limit is not None:
            pulumi.set(__self__, "revision_history_limit", revision_history_limit)
        if secretName is not None:
            pulumi.set(__self__, "secretName", secretName)
        if secret_template is not None:
            pulumi.set(__self__, "secret_template", secret_template)
        if subject is not None:
            pulumi.set(__self__, "subject", subject)
        if uris is not None:
            pulumi.set(__self__, "uris", uris)
        if usages is not None:
            pulumi.set(__self__, "usages", usages)

    @property
    @pulumi.getter(name="additionalOutputFormats")
    def additional_output_formats(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[pulumi.Input["CertificateSpecAdditionalOutputFormatsArgs"]]
        ]
    ]:
        """
        Defines extra output formats of the private key and signed certificate chain
        to be written to this Certificate's target Secret.

        This is a Beta Feature enabled by default. It can be disabled with the
        `--feature-gates=AdditionalCertificateOutputFormats=false` option set on both
        the controller and webhook components.
        """
        return pulumi.get(self, "additional_output_formats")

    @additional_output_formats.setter
    def additional_output_formats(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[pulumi.Input["CertificateSpecAdditionalOutputFormatsArgs"]]
            ]
        ],
    ):
        pulumi.set(self, "additional_output_formats", value)

    @property
    @pulumi.getter(name="commonName")
    def common_name(self) -> Optional[pulumi.Input[str]]:
        """
        Requested common name X509 certificate subject attribute.
        More info: https://datatracker.ietf.org/doc/html/rfc5280#section-4.1.2.6
        NOTE: TLS clients will ignore this value when any subject alternative name is
        set (see https://tools.ietf.org/html/rfc6125#section-6.4.4).

        Should have a length of 64 characters or fewer to avoid generating invalid CSRs.
        Cannot be set if the `literalSubject` field is set.
        """
        return pulumi.get(self, "common_name")

    @common_name.setter
    def common_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "common_name", value)

    @property
    @pulumi.getter(name="dnsNames")
    def dns_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Requested DNS subject alternative names.
        """
        return pulumi.get(self, "dns_names")

    @dns_names.setter
    def dns_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "dns_names", value)

    @property
    @pulumi.getter
    def duration(self) -> Optional[pulumi.Input[str]]:
        """
        Requested 'duration' (i.e. lifetime) of the Certificate. Note that the
        issuer may choose to ignore the requested duration, just like any other
        requested attribute.

        If unset, this defaults to 90 days.
        Minimum accepted duration is 1 hour.
        Value must be in units accepted by Go time.ParseDuration https://golang.org/pkg/time/#ParseDuration.
        """
        return pulumi.get(self, "duration")

    @duration.setter
    def duration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "duration", value)

    @property
    @pulumi.getter(name="emailAddresses")
    def email_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Requested email subject alternative names.
        """
        return pulumi.get(self, "email_addresses")

    @email_addresses.setter
    def email_addresses(
        self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]
    ):
        pulumi.set(self, "email_addresses", value)

    @property
    @pulumi.getter(name="encodeUsagesInRequest")
    def encode_usages_in_request(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the KeyUsage and ExtKeyUsage extensions should be set in the encoded CSR.

        This option defaults to true, and should only be disabled if the target
        issuer does not support CSRs with these X509 KeyUsage/ ExtKeyUsage extensions.
        """
        return pulumi.get(self, "encode_usages_in_request")

    @encode_usages_in_request.setter
    def encode_usages_in_request(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "encode_usages_in_request", value)

    @property
    @pulumi.getter(name="ipAddresses")
    def ip_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Requested IP address subject alternative names.
        """
        return pulumi.get(self, "ip_addresses")

    @ip_addresses.setter
    def ip_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ip_addresses", value)

    @property
    @pulumi.getter(name="isCA")
    def is_ca(self) -> Optional[pulumi.Input[bool]]:
        """
        Requested basic constraints isCA value.
        The isCA value is used to set the `isCA` field on the created CertificateRequest
        resources. Note that the issuer may choose to ignore the requested isCA value, just
        like any other requested attribute.

        If true, this will automatically add the `cert sign` usage to the list
        of requested `usages`.
        """
        return pulumi.get(self, "is_ca")

    @is_ca.setter
    def is_ca(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_ca", value)

    @property
    @pulumi.getter(name="issuerRef")
    def issuer_ref(self) -> Optional[pulumi.Input["CertificateSpecIssuerRefArgs"]]:
        return pulumi.get(self, "issuer_ref")

    @issuer_ref.setter
    def issuer_ref(self, value: Optional[pulumi.Input["CertificateSpecIssuerRefArgs"]]):
        pulumi.set(self, "issuer_ref", value)

    @property
    @pulumi.getter
    def keystores(self) -> Optional[pulumi.Input["CertificateSpecKeystoresArgs"]]:
        return pulumi.get(self, "keystores")

    @keystores.setter
    def keystores(self, value: Optional[pulumi.Input["CertificateSpecKeystoresArgs"]]):
        pulumi.set(self, "keystores", value)

    @property
    @pulumi.getter(name="literalSubject")
    def literal_subject(self) -> Optional[pulumi.Input[str]]:
        """
        Requested X.509 certificate subject, represented using the LDAP "String
        Representation of a Distinguished Name" [1].
        Important: the LDAP string format also specifies the order of the attributes
        in the subject, this is important when issuing certs for LDAP authentication.
        Example: `CN=foo,DC=corp,DC=example,DC=com`
        More info [1]: https://datatracker.ietf.org/doc/html/rfc4514
        More info: https://github.com/cert-manager/cert-manager/issues/3203
        More info: https://github.com/cert-manager/cert-manager/issues/4424

        Cannot be set if the `subject` or `commonName` field is set.
        """
        return pulumi.get(self, "literal_subject")

    @literal_subject.setter
    def literal_subject(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "literal_subject", value)

    @property
    @pulumi.getter(name="nameConstraints")
    def name_constraints(
        self,
    ) -> Optional[pulumi.Input["CertificateSpecNameConstraintsArgs"]]:
        return pulumi.get(self, "name_constraints")

    @name_constraints.setter
    def name_constraints(
        self, value: Optional[pulumi.Input["CertificateSpecNameConstraintsArgs"]]
    ):
        pulumi.set(self, "name_constraints", value)

    @property
    @pulumi.getter(name="otherNames")
    def other_names(
        self,
    ) -> Optional[
        pulumi.Input[Sequence[pulumi.Input["CertificateSpecOtherNamesArgs"]]]
    ]:
        """
        `otherNames` is an escape hatch for SAN that allows any type. We currently restrict the support to string like otherNames, cf RFC 5280 p 37
        Any UTF8 String valued otherName can be passed with by setting the keys oid: x.x.x.x and UTF8Value: somevalue for `otherName`.
        Most commonly this would be UPN set with oid: 1.3.6.1.4.1.311.20.2.3
        You should ensure that any OID passed is valid for the UTF8String type as we do not explicitly validate this.
        """
        return pulumi.get(self, "other_names")

    @other_names.setter
    def other_names(
        self,
        value: Optional[
            pulumi.Input[Sequence[pulumi.Input["CertificateSpecOtherNamesArgs"]]]
        ],
    ):
        pulumi.set(self, "other_names", value)

    @property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> Optional[pulumi.Input["CertificateSpecPrivateKeyArgs"]]:
        return pulumi.get(self, "private_key")

    @private_key.setter
    def private_key(
        self, value: Optional[pulumi.Input["CertificateSpecPrivateKeyArgs"]]
    ):
        pulumi.set(self, "private_key", value)

    @property
    @pulumi.getter(name="renewBefore")
    def renew_before(self) -> Optional[pulumi.Input[str]]:
        """
        How long before the currently issued certificate's expiry cert-manager should
        renew the certificate. For example, if a certificate is valid for 60 minutes,
        and `renewBefore=10m`, cert-manager will begin to attempt to renew the certificate
        50 minutes after it was issued (i.e. when there are 10 minutes remaining until
        the certificate is no longer valid).

        NOTE: The actual lifetime of the issued certificate is used to determine the
        renewal time. If an issuer returns a certificate with a different lifetime than
        the one requested, cert-manager will use the lifetime of the issued certificate.

        If unset, this defaults to 1/3 of the issued certificate's lifetime.
        Minimum accepted value is 5 minutes.
        Value must be in units accepted by Go time.ParseDuration https://golang.org/pkg/time/#ParseDuration.
        Cannot be set if the `renewBeforePercentage` field is set.
        """
        return pulumi.get(self, "renew_before")

    @renew_before.setter
    def renew_before(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "renew_before", value)

    @property
    @pulumi.getter(name="renewBeforePercentage")
    def renew_before_percentage(self) -> Optional[pulumi.Input[int]]:
        """
        `renewBeforePercentage` is like `renewBefore`, except it is a relative percentage
        rather than an absolute duration. For example, if a certificate is valid for 60
        minutes, and  `renewBeforePercentage=25`, cert-manager will begin to attempt to
        renew the certificate 45 minutes after it was issued (i.e. when there are 15
        minutes (25%) remaining until the certificate is no longer valid).

        NOTE: The actual lifetime of the issued certificate is used to determine the
        renewal time. If an issuer returns a certificate with a different lifetime than
        the one requested, cert-manager will use the lifetime of the issued certificate.

        Value must be an integer in the range (0,100). The minimum effective
        `renewBefore` derived from the `renewBeforePercentage` and `duration` fields is 5
        minutes.
        Cannot be set if the `renewBefore` field is set.
        """
        return pulumi.get(self, "renew_before_percentage")

    @renew_before_percentage.setter
    def renew_before_percentage(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "renew_before_percentage", value)

    @property
    @pulumi.getter(name="revisionHistoryLimit")
    def revision_history_limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of CertificateRequest revisions that are maintained in
        the Certificate's history. Each revision represents a single `CertificateRequest`
        created by this Certificate, either when it was created, renewed, or Spec
        was changed. Revisions will be removed by oldest first if the number of
        revisions exceeds this number.

        If set, revisionHistoryLimit must be a value of `1` or greater.
        If unset (`nil`), revisions will not be garbage collected.
        Default value is `nil`.
        """
        return pulumi.get(self, "revision_history_limit")

    @revision_history_limit.setter
    def revision_history_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "revision_history_limit", value)

    @property
    @pulumi.getter(name="secretName")
    def secretName(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the Secret resource that will be automatically created and
        managed by this Certificate resource. It will be populated with a
        private key and certificate, signed by the denoted issuer. The Secret
        resource lives in the same namespace as the Certificate resource.
        """
        return pulumi.get(self, "secretName")

    @secretName.setter
    def secretName(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secretName", value)

    @property
    @pulumi.getter(name="secretTemplate")
    def secret_template(
        self,
    ) -> Optional[pulumi.Input["CertificateSpecSecretTemplateArgs"]]:
        return pulumi.get(self, "secret_template")

    @secret_template.setter
    def secret_template(
        self, value: Optional[pulumi.Input["CertificateSpecSecretTemplateArgs"]]
    ):
        pulumi.set(self, "secret_template", value)

    @property
    @pulumi.getter
    def subject(self) -> Optional[pulumi.Input["CertificateSpecSubjectArgs"]]:
        return pulumi.get(self, "subject")

    @subject.setter
    def subject(self, value: Optional[pulumi.Input["CertificateSpecSubjectArgs"]]):
        pulumi.set(self, "subject", value)

    @property
    @pulumi.getter
    def uris(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Requested URI subject alternative names.
        """
        return pulumi.get(self, "uris")

    @uris.setter
    def uris(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "uris", value)

    @property
    @pulumi.getter
    def usages(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Requested key usages and extended key usages.
        These usages are used to set the `usages` field on the created CertificateRequest
        resources. If `encodeUsagesInRequest` is unset or set to `true`, the usages
        will additionally be encoded in the `request` field which contains the CSR blob.

        If unset, defaults to `digital signature` and `key encipherment`.
        """
        return pulumi.get(self, "usages")

    @usages.setter
    def usages(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "usages", value)


if not MYPY:

    class CertificateStatusConditionsArgsDict(TypedDict):
        """
        CertificateCondition contains condition information for a Certificate.
        """

        last_transition_time: NotRequired[pulumi.Input[str]]
        """
        LastTransitionTime is the timestamp corresponding to the last status
        change of this condition.
        """
        message: NotRequired[pulumi.Input[str]]
        """
        Message is a human readable description of the details of the last
        transition, complementing reason.
        """
        observed_generation: NotRequired[pulumi.Input[int]]
        """
        If set, this represents the .metadata.generation that the condition was
        set based upon.
        For instance, if .metadata.generation is currently 12, but the
        .status.condition[x].observedGeneration is 9, the condition is out of date
        with respect to the current state of the Certificate.
        """
        reason: NotRequired[pulumi.Input[str]]
        """
        Reason is a brief machine readable explanation for the condition's last
        transition.
        """
        status: NotRequired[pulumi.Input[str]]
        """
        Status of the condition, one of (`True`, `False`, `Unknown`).
        """
        type: NotRequired[pulumi.Input[str]]
        """
        Type of the condition, known values are (`Ready`, `Issuing`).
        """

elif False:
    CertificateStatusConditionsArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class CertificateStatusConditionsArgs:
    def __init__(
        __self__,
        *,
        last_transition_time: Optional[pulumi.Input[str]] = None,
        message: Optional[pulumi.Input[str]] = None,
        observed_generation: Optional[pulumi.Input[int]] = None,
        reason: Optional[pulumi.Input[str]] = None,
        status: Optional[pulumi.Input[str]] = None,
        type: Optional[pulumi.Input[str]] = None
    ):
        """
        CertificateCondition contains condition information for a Certificate.
        :param pulumi.Input[str] last_transition_time: LastTransitionTime is the timestamp corresponding to the last status
               change of this condition.
        :param pulumi.Input[str] message: Message is a human readable description of the details of the last
               transition, complementing reason.
        :param pulumi.Input[int] observed_generation: If set, this represents the .metadata.generation that the condition was
               set based upon.
               For instance, if .metadata.generation is currently 12, but the
               .status.condition[x].observedGeneration is 9, the condition is out of date
               with respect to the current state of the Certificate.
        :param pulumi.Input[str] reason: Reason is a brief machine readable explanation for the condition's last
               transition.
        :param pulumi.Input[str] status: Status of the condition, one of (`True`, `False`, `Unknown`).
        :param pulumi.Input[str] type: Type of the condition, known values are (`Ready`, `Issuing`).
        """
        if last_transition_time is not None:
            pulumi.set(__self__, "last_transition_time", last_transition_time)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if observed_generation is not None:
            pulumi.set(__self__, "observed_generation", observed_generation)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> Optional[pulumi.Input[str]]:
        """
        LastTransitionTime is the timestamp corresponding to the last status
        change of this condition.
        """
        return pulumi.get(self, "last_transition_time")

    @last_transition_time.setter
    def last_transition_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_transition_time", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        """
        Message is a human readable description of the details of the last
        transition, complementing reason.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter(name="observedGeneration")
    def observed_generation(self) -> Optional[pulumi.Input[int]]:
        """
        If set, this represents the .metadata.generation that the condition was
        set based upon.
        For instance, if .metadata.generation is currently 12, but the
        .status.condition[x].observedGeneration is 9, the condition is out of date
        with respect to the current state of the Certificate.
        """
        return pulumi.get(self, "observed_generation")

    @observed_generation.setter
    def observed_generation(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "observed_generation", value)

    @property
    @pulumi.getter
    def reason(self) -> Optional[pulumi.Input[str]]:
        """
        Reason is a brief machine readable explanation for the condition's last
        transition.
        """
        return pulumi.get(self, "reason")

    @reason.setter
    def reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reason", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Status of the condition, one of (`True`, `False`, `Unknown`).
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of the condition, known values are (`Ready`, `Issuing`).
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


if not MYPY:

    class CertificateStatusArgsDict(TypedDict):
        """
        Status of the Certificate.
        This is set and managed automatically.
        Read-only.
        More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
        """

        conditions: NotRequired[
            pulumi.Input[Sequence[pulumi.Input["CertificateStatusConditionsArgsDict"]]]
        ]
        """
        List of status conditions to indicate the status of certificates.
        Known condition types are `Ready` and `Issuing`.
        """
        failed_issuance_attempts: NotRequired[pulumi.Input[int]]
        """
        The number of continuous failed issuance attempts up till now. This
        field gets removed (if set) on a successful issuance and gets set to
        1 if unset and an issuance has failed. If an issuance has failed, the
        delay till the next issuance will be calculated using formula
        time.Hour * 2 ^ (failedIssuanceAttempts - 1).
        """
        last_failure_time: NotRequired[pulumi.Input[str]]
        """
        LastFailureTime is set only if the latest issuance for this
        Certificate failed and contains the time of the failure. If an
        issuance has failed, the delay till the next issuance will be
        calculated using formula time.Hour * 2 ^ (failedIssuanceAttempts -
        1). If the latest issuance has succeeded this field will be unset.
        """
        next_private_key_secretName: NotRequired[pulumi.Input[str]]
        """
        The name of the Secret resource containing the private key to be used
        for the next certificate iteration.
        The keymanager controller will automatically set this field if the
        `Issuing` condition is set to `True`.
        It will automatically unset this field when the Issuing condition is
        not set or False.
        """
        not_after: NotRequired[pulumi.Input[str]]
        """
        The expiration time of the certificate stored in the secret named
        by this resource in `spec.secretName`.
        """
        not_before: NotRequired[pulumi.Input[str]]
        """
        The time after which the certificate stored in the secret named
        by this resource in `spec.secretName` is valid.
        """
        renewal_time: NotRequired[pulumi.Input[str]]
        """
        RenewalTime is the time at which the certificate will be next
        renewed.
        If not set, no upcoming renewal is scheduled.
        """
        revision: NotRequired[pulumi.Input[int]]
        """
        The current 'revision' of the certificate as issued.

        When a CertificateRequest resource is created, it will have the
        `cert-manager.io/certificate-revision` set to one greater than the
        current value of this field.

        Upon issuance, this field will be set to the value of the annotation
        on the CertificateRequest resource used to issue the certificate.

        Persisting the value on the CertificateRequest resource allows the
        certificates controller to know whether a request is part of an old
        issuance or if it is part of the ongoing revision's issuance by
        checking if the revision value in the annotation is greater than this
        field.
        """

elif False:
    CertificateStatusArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class CertificateStatusArgs:
    def __init__(
        __self__,
        *,
        conditions: Optional[
            pulumi.Input[Sequence[pulumi.Input["CertificateStatusConditionsArgs"]]]
        ] = None,
        failed_issuance_attempts: Optional[pulumi.Input[int]] = None,
        last_failure_time: Optional[pulumi.Input[str]] = None,
        next_private_key_secretName: Optional[pulumi.Input[str]] = None,
        not_after: Optional[pulumi.Input[str]] = None,
        not_before: Optional[pulumi.Input[str]] = None,
        renewal_time: Optional[pulumi.Input[str]] = None,
        revision: Optional[pulumi.Input[int]] = None
    ):
        """
        Status of the Certificate.
        This is set and managed automatically.
        Read-only.
        More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
        :param pulumi.Input[Sequence[pulumi.Input['CertificateStatusConditionsArgs']]] conditions: List of status conditions to indicate the status of certificates.
               Known condition types are `Ready` and `Issuing`.
        :param pulumi.Input[int] failed_issuance_attempts: The number of continuous failed issuance attempts up till now. This
               field gets removed (if set) on a successful issuance and gets set to
               1 if unset and an issuance has failed. If an issuance has failed, the
               delay till the next issuance will be calculated using formula
               time.Hour * 2 ^ (failedIssuanceAttempts - 1).
        :param pulumi.Input[str] last_failure_time: LastFailureTime is set only if the latest issuance for this
               Certificate failed and contains the time of the failure. If an
               issuance has failed, the delay till the next issuance will be
               calculated using formula time.Hour * 2 ^ (failedIssuanceAttempts -
               1). If the latest issuance has succeeded this field will be unset.
        :param pulumi.Input[str] next_private_key_secretName: The name of the Secret resource containing the private key to be used
               for the next certificate iteration.
               The keymanager controller will automatically set this field if the
               `Issuing` condition is set to `True`.
               It will automatically unset this field when the Issuing condition is
               not set or False.
        :param pulumi.Input[str] not_after: The expiration time of the certificate stored in the secret named
               by this resource in `spec.secretName`.
        :param pulumi.Input[str] not_before: The time after which the certificate stored in the secret named
               by this resource in `spec.secretName` is valid.
        :param pulumi.Input[str] renewal_time: RenewalTime is the time at which the certificate will be next
               renewed.
               If not set, no upcoming renewal is scheduled.
        :param pulumi.Input[int] revision: The current 'revision' of the certificate as issued.

               When a CertificateRequest resource is created, it will have the
               `cert-manager.io/certificate-revision` set to one greater than the
               current value of this field.

               Upon issuance, this field will be set to the value of the annotation
               on the CertificateRequest resource used to issue the certificate.

               Persisting the value on the CertificateRequest resource allows the
               certificates controller to know whether a request is part of an old
               issuance or if it is part of the ongoing revision's issuance by
               checking if the revision value in the annotation is greater than this
               field.
        """
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if failed_issuance_attempts is not None:
            pulumi.set(__self__, "failed_issuance_attempts", failed_issuance_attempts)
        if last_failure_time is not None:
            pulumi.set(__self__, "last_failure_time", last_failure_time)
        if next_private_key_secretName is not None:
            pulumi.set(
                __self__, "next_private_key_secretName", next_private_key_secretName
            )
        if not_after is not None:
            pulumi.set(__self__, "not_after", not_after)
        if not_before is not None:
            pulumi.set(__self__, "not_before", not_before)
        if renewal_time is not None:
            pulumi.set(__self__, "renewal_time", renewal_time)
        if revision is not None:
            pulumi.set(__self__, "revision", revision)

    @property
    @pulumi.getter
    def conditions(
        self,
    ) -> Optional[
        pulumi.Input[Sequence[pulumi.Input["CertificateStatusConditionsArgs"]]]
    ]:
        """
        List of status conditions to indicate the status of certificates.
        Known condition types are `Ready` and `Issuing`.
        """
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(
        self,
        value: Optional[
            pulumi.Input[Sequence[pulumi.Input["CertificateStatusConditionsArgs"]]]
        ],
    ):
        pulumi.set(self, "conditions", value)

    @property
    @pulumi.getter(name="failedIssuanceAttempts")
    def failed_issuance_attempts(self) -> Optional[pulumi.Input[int]]:
        """
        The number of continuous failed issuance attempts up till now. This
        field gets removed (if set) on a successful issuance and gets set to
        1 if unset and an issuance has failed. If an issuance has failed, the
        delay till the next issuance will be calculated using formula
        time.Hour * 2 ^ (failedIssuanceAttempts - 1).
        """
        return pulumi.get(self, "failed_issuance_attempts")

    @failed_issuance_attempts.setter
    def failed_issuance_attempts(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "failed_issuance_attempts", value)

    @property
    @pulumi.getter(name="lastFailureTime")
    def last_failure_time(self) -> Optional[pulumi.Input[str]]:
        """
        LastFailureTime is set only if the latest issuance for this
        Certificate failed and contains the time of the failure. If an
        issuance has failed, the delay till the next issuance will be
        calculated using formula time.Hour * 2 ^ (failedIssuanceAttempts -
        1). If the latest issuance has succeeded this field will be unset.
        """
        return pulumi.get(self, "last_failure_time")

    @last_failure_time.setter
    def last_failure_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_failure_time", value)

    @property
    @pulumi.getter(name="nextPrivateKeySecretName")
    def next_private_key_secretName(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the Secret resource containing the private key to be used
        for the next certificate iteration.
        The keymanager controller will automatically set this field if the
        `Issuing` condition is set to `True`.
        It will automatically unset this field when the Issuing condition is
        not set or False.
        """
        return pulumi.get(self, "next_private_key_secretName")

    @next_private_key_secretName.setter
    def next_private_key_secretName(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "next_private_key_secretName", value)

    @property
    @pulumi.getter(name="notAfter")
    def not_after(self) -> Optional[pulumi.Input[str]]:
        """
        The expiration time of the certificate stored in the secret named
        by this resource in `spec.secretName`.
        """
        return pulumi.get(self, "not_after")

    @not_after.setter
    def not_after(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "not_after", value)

    @property
    @pulumi.getter(name="notBefore")
    def not_before(self) -> Optional[pulumi.Input[str]]:
        """
        The time after which the certificate stored in the secret named
        by this resource in `spec.secretName` is valid.
        """
        return pulumi.get(self, "not_before")

    @not_before.setter
    def not_before(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "not_before", value)

    @property
    @pulumi.getter(name="renewalTime")
    def renewal_time(self) -> Optional[pulumi.Input[str]]:
        """
        RenewalTime is the time at which the certificate will be next
        renewed.
        If not set, no upcoming renewal is scheduled.
        """
        return pulumi.get(self, "renewal_time")

    @renewal_time.setter
    def renewal_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "renewal_time", value)

    @property
    @pulumi.getter
    def revision(self) -> Optional[pulumi.Input[int]]:
        """
        The current 'revision' of the certificate as issued.

        When a CertificateRequest resource is created, it will have the
        `cert-manager.io/certificate-revision` set to one greater than the
        current value of this field.

        Upon issuance, this field will be set to the value of the annotation
        on the CertificateRequest resource used to issue the certificate.

        Persisting the value on the CertificateRequest resource allows the
        certificates controller to know whether a request is part of an old
        issuance or if it is part of the ongoing revision's issuance by
        checking if the revision value in the annotation is greater than this
        field.
        """
        return pulumi.get(self, "revision")

    @revision.setter
    def revision(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "revision", value)


if not MYPY:

    class CertificateArgsDict(TypedDict):
        """
        A Certificate resource should be created to ensure an up to date and signed
        X.509 certificate is stored in the Kubernetes Secret resource named in `spec.secretName`.

        The stored certificate will be renewed before it expires (as configured by `spec.renewBefore`).
        """

        api_version: NotRequired[pulumi.Input[str]]
        """
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
        """
        kind: NotRequired[pulumi.Input[str]]
        """
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        """
        metadata: NotRequired[pulumi.Input["_meta.v1.ObjectMetaArgsDict"]]
        """
        Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
        """
        spec: NotRequired[pulumi.Input["CertificateSpecArgsDict"]]
        status: NotRequired[pulumi.Input["CertificateStatusArgsDict"]]

elif False:
    CertificateArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class CertificateArgs:
    def __init__(
        __self__,
        *,
        api_version: Optional[pulumi.Input[str]] = None,
        kind: Optional[pulumi.Input[str]] = None,
        metadata: Optional[pulumi.Input["_meta.v1.ObjectMetaArgs"]] = None,
        spec: Optional[pulumi.Input["CertificateSpecArgs"]] = None,
        status: Optional[pulumi.Input["CertificateStatusArgs"]] = None
    ):
        """
        A Certificate resource should be created to ensure an up to date and signed
        X.509 certificate is stored in the Kubernetes Secret resource named in `spec.secretName`.

        The stored certificate will be renewed before it expires (as configured by `spec.renewBefore`).
        :param pulumi.Input[str] api_version: APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
        :param pulumi.Input[str] kind: Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        :param pulumi.Input['_meta.v1.ObjectMetaArgs'] metadata: Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
        """
        if api_version is not None:
            pulumi.set(__self__, "api_version", "cert-manager.io/v1")
        if kind is not None:
            pulumi.set(__self__, "kind", "Certificate")
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if spec is not None:
            pulumi.set(__self__, "spec", spec)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[pulumi.Input[str]]:
        """
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
        """
        return pulumi.get(self, "api_version")

    @api_version.setter
    def api_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_version", value)

    @property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[str]]:
        """
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input["_meta.v1.ObjectMetaArgs"]]:
        """
        Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
        """
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input["_meta.v1.ObjectMetaArgs"]]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter
    def spec(self) -> Optional[pulumi.Input["CertificateSpecArgs"]]:
        return pulumi.get(self, "spec")

    @spec.setter
    def spec(self, value: Optional[pulumi.Input["CertificateSpecArgs"]]):
        pulumi.set(self, "spec", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input["CertificateStatusArgs"]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input["CertificateStatusArgs"]]):
        pulumi.set(self, "status", value)


if not MYPY:

    class ClusterIssuerSpecAcmeExternalAccountBindingKeySecretRefPatchArgsDict(
        TypedDict
    ):
        """
        keySecretRef is a Secret Key Selector referencing a data item in a Kubernetes
        Secret which holds the symmetric MAC key of the External Account Binding.
        The `key` is the index string that is paired with the key data in the
        Secret and should not be confused with the key data itself, or indeed with
        the External Account Binding keyID above.
        The secret key stored in the Secret **must** be un-padded, base64 URL
        encoded data.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """

elif False:
    ClusterIssuerSpecAcmeExternalAccountBindingKeySecretRefPatchArgsDict: TypeAlias = (
        Mapping[str, Any]
    )


@pulumi.input_type
class ClusterIssuerSpecAcmeExternalAccountBindingKeySecretRefPatchArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        name: Optional[pulumi.Input[str]] = None
    ):
        """
        keySecretRef is a Secret Key Selector referencing a data item in a Kubernetes
        Secret which holds the symmetric MAC key of the External Account Binding.
        The `key` is the index string that is paired with the key data in the
        Secret and should not be confused with the key data itself, or indeed with
        the External Account Binding keyID above.
        The secret key stored in the Secret **must** be un-padded, base64 URL
        encoded data.
        :param pulumi.Input[str] key: The key of the entry in the Secret resource's `data` field to be used.
               Some instances of this field may be defaulted, in others it may be
               required.
        :param pulumi.Input[str] name: Name of the resource being referred to.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:

    class ClusterIssuerSpecAcmeExternalAccountBindingKeySecretRefArgsDict(TypedDict):
        """
        keySecretRef is a Secret Key Selector referencing a data item in a Kubernetes
        Secret which holds the symmetric MAC key of the External Account Binding.
        The `key` is the index string that is paired with the key data in the
        Secret and should not be confused with the key data itself, or indeed with
        the External Account Binding keyID above.
        The secret key stored in the Secret **must** be un-padded, base64 URL
        encoded data.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """

elif False:
    ClusterIssuerSpecAcmeExternalAccountBindingKeySecretRefArgsDict: TypeAlias = (
        Mapping[str, Any]
    )


@pulumi.input_type
class ClusterIssuerSpecAcmeExternalAccountBindingKeySecretRefArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        name: Optional[pulumi.Input[str]] = None
    ):
        """
        keySecretRef is a Secret Key Selector referencing a data item in a Kubernetes
        Secret which holds the symmetric MAC key of the External Account Binding.
        The `key` is the index string that is paired with the key data in the
        Secret and should not be confused with the key data itself, or indeed with
        the External Account Binding keyID above.
        The secret key stored in the Secret **must** be un-padded, base64 URL
        encoded data.
        :param pulumi.Input[str] key: The key of the entry in the Secret resource's `data` field to be used.
               Some instances of this field may be defaulted, in others it may be
               required.
        :param pulumi.Input[str] name: Name of the resource being referred to.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:

    class ClusterIssuerSpecAcmeExternalAccountBindingPatchArgsDict(TypedDict):
        """
        ExternalAccountBinding is a reference to a CA external account of the ACME
        server.
        If set, upon registration cert-manager will attempt to associate the given
        external account credentials with the registered ACME account.
        """

        key_algorithm: NotRequired[pulumi.Input[str]]
        """
        Deprecated: keyAlgorithm field exists for historical compatibility
        reasons and should not be used. The algorithm is now hardcoded to HS256
        in golang/x/crypto/acme.
        """
        key_id: NotRequired[pulumi.Input[str]]
        """
        keyID is the ID of the CA key that the External Account is bound to.
        """
        key_secret_ref: NotRequired[
            pulumi.Input[
                "ClusterIssuerSpecAcmeExternalAccountBindingKeySecretRefPatchArgsDict"
            ]
        ]

elif False:
    ClusterIssuerSpecAcmeExternalAccountBindingPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeExternalAccountBindingPatchArgs:
    def __init__(
        __self__,
        *,
        key_algorithm: Optional[pulumi.Input[str]] = None,
        key_id: Optional[pulumi.Input[str]] = None,
        key_secret_ref: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeExternalAccountBindingKeySecretRefPatchArgs"
            ]
        ] = None
    ):
        """
        ExternalAccountBinding is a reference to a CA external account of the ACME
        server.
        If set, upon registration cert-manager will attempt to associate the given
        external account credentials with the registered ACME account.
        :param pulumi.Input[str] key_algorithm: Deprecated: keyAlgorithm field exists for historical compatibility
               reasons and should not be used. The algorithm is now hardcoded to HS256
               in golang/x/crypto/acme.
        :param pulumi.Input[str] key_id: keyID is the ID of the CA key that the External Account is bound to.
        """
        if key_algorithm is not None:
            pulumi.set(__self__, "key_algorithm", key_algorithm)
        if key_id is not None:
            pulumi.set(__self__, "key_id", key_id)
        if key_secret_ref is not None:
            pulumi.set(__self__, "key_secret_ref", key_secret_ref)

    @property
    @pulumi.getter(name="keyAlgorithm")
    def key_algorithm(self) -> Optional[pulumi.Input[str]]:
        """
        Deprecated: keyAlgorithm field exists for historical compatibility
        reasons and should not be used. The algorithm is now hardcoded to HS256
        in golang/x/crypto/acme.
        """
        return pulumi.get(self, "key_algorithm")

    @key_algorithm.setter
    def key_algorithm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_algorithm", value)

    @property
    @pulumi.getter(name="keyID")
    def key_id(self) -> Optional[pulumi.Input[str]]:
        """
        keyID is the ID of the CA key that the External Account is bound to.
        """
        return pulumi.get(self, "key_id")

    @key_id.setter
    def key_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_id", value)

    @property
    @pulumi.getter(name="keySecretRef")
    def key_secret_ref(
        self,
    ) -> Optional[
        pulumi.Input["ClusterIssuerSpecAcmeExternalAccountBindingKeySecretRefPatchArgs"]
    ]:
        return pulumi.get(self, "key_secret_ref")

    @key_secret_ref.setter
    def key_secret_ref(
        self,
        value: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeExternalAccountBindingKeySecretRefPatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "key_secret_ref", value)


if not MYPY:

    class ClusterIssuerSpecAcmeExternalAccountBindingArgsDict(TypedDict):
        """
        ExternalAccountBinding is a reference to a CA external account of the ACME
        server.
        If set, upon registration cert-manager will attempt to associate the given
        external account credentials with the registered ACME account.
        """

        key_algorithm: NotRequired[pulumi.Input[str]]
        """
        Deprecated: keyAlgorithm field exists for historical compatibility
        reasons and should not be used. The algorithm is now hardcoded to HS256
        in golang/x/crypto/acme.
        """
        key_id: NotRequired[pulumi.Input[str]]
        """
        keyID is the ID of the CA key that the External Account is bound to.
        """
        key_secret_ref: NotRequired[
            pulumi.Input[
                "ClusterIssuerSpecAcmeExternalAccountBindingKeySecretRefArgsDict"
            ]
        ]

elif False:
    ClusterIssuerSpecAcmeExternalAccountBindingArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class ClusterIssuerSpecAcmeExternalAccountBindingArgs:
    def __init__(
        __self__,
        *,
        key_algorithm: Optional[pulumi.Input[str]] = None,
        key_id: Optional[pulumi.Input[str]] = None,
        key_secret_ref: Optional[
            pulumi.Input["ClusterIssuerSpecAcmeExternalAccountBindingKeySecretRefArgs"]
        ] = None
    ):
        """
        ExternalAccountBinding is a reference to a CA external account of the ACME
        server.
        If set, upon registration cert-manager will attempt to associate the given
        external account credentials with the registered ACME account.
        :param pulumi.Input[str] key_algorithm: Deprecated: keyAlgorithm field exists for historical compatibility
               reasons and should not be used. The algorithm is now hardcoded to HS256
               in golang/x/crypto/acme.
        :param pulumi.Input[str] key_id: keyID is the ID of the CA key that the External Account is bound to.
        """
        if key_algorithm is not None:
            pulumi.set(__self__, "key_algorithm", key_algorithm)
        if key_id is not None:
            pulumi.set(__self__, "key_id", key_id)
        if key_secret_ref is not None:
            pulumi.set(__self__, "key_secret_ref", key_secret_ref)

    @property
    @pulumi.getter(name="keyAlgorithm")
    def key_algorithm(self) -> Optional[pulumi.Input[str]]:
        """
        Deprecated: keyAlgorithm field exists for historical compatibility
        reasons and should not be used. The algorithm is now hardcoded to HS256
        in golang/x/crypto/acme.
        """
        return pulumi.get(self, "key_algorithm")

    @key_algorithm.setter
    def key_algorithm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_algorithm", value)

    @property
    @pulumi.getter(name="keyID")
    def key_id(self) -> Optional[pulumi.Input[str]]:
        """
        keyID is the ID of the CA key that the External Account is bound to.
        """
        return pulumi.get(self, "key_id")

    @key_id.setter
    def key_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_id", value)

    @property
    @pulumi.getter(name="keySecretRef")
    def key_secret_ref(
        self,
    ) -> Optional[
        pulumi.Input["ClusterIssuerSpecAcmeExternalAccountBindingKeySecretRefArgs"]
    ]:
        return pulumi.get(self, "key_secret_ref")

    @key_secret_ref.setter
    def key_secret_ref(
        self,
        value: Optional[
            pulumi.Input["ClusterIssuerSpecAcmeExternalAccountBindingKeySecretRefArgs"]
        ],
    ):
        pulumi.set(self, "key_secret_ref", value)


if not MYPY:

    class ClusterIssuerSpecAcmePatchArgsDict(TypedDict):
        """
        ACME configures this issuer to communicate with a RFC8555 (ACME) server
        to obtain signed x509 certificates.
        """

        ca_bundle: NotRequired[pulumi.Input[str]]
        """
        Base64-encoded bundle of PEM CAs which can be used to validate the certificate
        chain presented by the ACME server.
        Mutually exclusive with SkipTLSVerify; prefer using CABundle to prevent various
        kinds of security vulnerabilities.
        If CABundle and SkipTLSVerify are unset, the system certificate bundle inside
        the container is used to validate the TLS connection.
        """
        disable_account_key_generation: NotRequired[pulumi.Input[bool]]
        """
        Enables or disables generating a new ACME account key.
        If true, the Issuer resource will *not* request a new account but will expect
        the account key to be supplied via an existing secret.
        If false, the cert-manager system will generate a new ACME account key
        for the Issuer.
        Defaults to false.
        """
        email: NotRequired[pulumi.Input[str]]
        """
        Email is the email address to be associated with the ACME account.
        This field is optional, but it is strongly recommended to be set.
        It will be used to contact you in case of issues with your account or
        certificates, including expiry notification emails.
        This field may be updated after the account is initially registered.
        """
        enable_duration_feature: NotRequired[pulumi.Input[bool]]
        """
        Enables requesting a Not After date on certificates that matches the
        duration of the certificate. This is not supported by all ACME servers
        like Let's Encrypt. If set to true when the ACME server does not support
        it, it will create an error on the Order.
        Defaults to false.
        """
        external_account_binding: NotRequired[
            pulumi.Input["ClusterIssuerSpecAcmeExternalAccountBindingPatchArgsDict"]
        ]
        preferred_chain: NotRequired[pulumi.Input[str]]
        """
        PreferredChain is the chain to use if the ACME server outputs multiple.
        PreferredChain is no guarantee that this one gets delivered by the ACME
        endpoint.
        For example, for Let's Encrypt's DST crosssign you would use:
        "DST Root CA X3" or "ISRG Root X1" for the newer Let's Encrypt root CA.
        This value picks the first certificate bundle in the combined set of
        ACME default and alternative chains that has a root-most certificate with
        this value as its issuer's commonname.
        """
        private_key_secret_ref: NotRequired[
            pulumi.Input["ClusterIssuerSpecAcmePrivateKeySecretRefPatchArgsDict"]
        ]
        server: NotRequired[pulumi.Input[str]]
        """
        Server is the URL used to access the ACME server's 'directory' endpoint.
        For example, for Let's Encrypt's staging endpoint, you would use:
        "https://acme-staging-v02.api.letsencrypt.org/directory".
        Only ACME v2 endpoints (i.e. RFC 8555) are supported.
        """
        skip_tls_verify: NotRequired[pulumi.Input[bool]]
        """
        INSECURE: Enables or disables validation of the ACME server TLS certificate.
        If true, requests to the ACME server will not have the TLS certificate chain
        validated.
        Mutually exclusive with CABundle; prefer using CABundle to prevent various
        kinds of security vulnerabilities.
        Only enable this option in development environments.
        If CABundle and SkipTLSVerify are unset, the system certificate bundle inside
        the container is used to validate the TLS connection.
        Defaults to false.
        """
        solvers: NotRequired[
            pulumi.Input[
                Sequence[pulumi.Input["ClusterIssuerSpecAcmeSolversPatchArgsDict"]]
            ]
        ]
        """
        Solvers is a list of challenge solvers that will be used to solve
        ACME challenges for the matching domains.
        Solver configurations must be provided in order to obtain certificates
        from an ACME server.
        For more information, see: https://cert-manager.io/docs/configuration/acme/
        """

elif False:
    ClusterIssuerSpecAcmePatchArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class ClusterIssuerSpecAcmePatchArgs:
    def __init__(
        __self__,
        *,
        ca_bundle: Optional[pulumi.Input[str]] = None,
        disable_account_key_generation: Optional[pulumi.Input[bool]] = None,
        email: Optional[pulumi.Input[str]] = None,
        enable_duration_feature: Optional[pulumi.Input[bool]] = None,
        external_account_binding: Optional[
            pulumi.Input["ClusterIssuerSpecAcmeExternalAccountBindingPatchArgs"]
        ] = None,
        preferred_chain: Optional[pulumi.Input[str]] = None,
        private_key_secret_ref: Optional[
            pulumi.Input["ClusterIssuerSpecAcmePrivateKeySecretRefPatchArgs"]
        ] = None,
        server: Optional[pulumi.Input[str]] = None,
        skip_tls_verify: Optional[pulumi.Input[bool]] = None,
        solvers: Optional[
            pulumi.Input[
                Sequence[pulumi.Input["ClusterIssuerSpecAcmeSolversPatchArgs"]]
            ]
        ] = None
    ):
        """
        ACME configures this issuer to communicate with a RFC8555 (ACME) server
        to obtain signed x509 certificates.
        :param pulumi.Input[str] ca_bundle: Base64-encoded bundle of PEM CAs which can be used to validate the certificate
               chain presented by the ACME server.
               Mutually exclusive with SkipTLSVerify; prefer using CABundle to prevent various
               kinds of security vulnerabilities.
               If CABundle and SkipTLSVerify are unset, the system certificate bundle inside
               the container is used to validate the TLS connection.
        :param pulumi.Input[bool] disable_account_key_generation: Enables or disables generating a new ACME account key.
               If true, the Issuer resource will *not* request a new account but will expect
               the account key to be supplied via an existing secret.
               If false, the cert-manager system will generate a new ACME account key
               for the Issuer.
               Defaults to false.
        :param pulumi.Input[str] email: Email is the email address to be associated with the ACME account.
               This field is optional, but it is strongly recommended to be set.
               It will be used to contact you in case of issues with your account or
               certificates, including expiry notification emails.
               This field may be updated after the account is initially registered.
        :param pulumi.Input[bool] enable_duration_feature: Enables requesting a Not After date on certificates that matches the
               duration of the certificate. This is not supported by all ACME servers
               like Let's Encrypt. If set to true when the ACME server does not support
               it, it will create an error on the Order.
               Defaults to false.
        :param pulumi.Input[str] preferred_chain: PreferredChain is the chain to use if the ACME server outputs multiple.
               PreferredChain is no guarantee that this one gets delivered by the ACME
               endpoint.
               For example, for Let's Encrypt's DST crosssign you would use:
               "DST Root CA X3" or "ISRG Root X1" for the newer Let's Encrypt root CA.
               This value picks the first certificate bundle in the combined set of
               ACME default and alternative chains that has a root-most certificate with
               this value as its issuer's commonname.
        :param pulumi.Input[str] server: Server is the URL used to access the ACME server's 'directory' endpoint.
               For example, for Let's Encrypt's staging endpoint, you would use:
               "https://acme-staging-v02.api.letsencrypt.org/directory".
               Only ACME v2 endpoints (i.e. RFC 8555) are supported.
        :param pulumi.Input[bool] skip_tls_verify: INSECURE: Enables or disables validation of the ACME server TLS certificate.
               If true, requests to the ACME server will not have the TLS certificate chain
               validated.
               Mutually exclusive with CABundle; prefer using CABundle to prevent various
               kinds of security vulnerabilities.
               Only enable this option in development environments.
               If CABundle and SkipTLSVerify are unset, the system certificate bundle inside
               the container is used to validate the TLS connection.
               Defaults to false.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterIssuerSpecAcmeSolversPatchArgs']]] solvers: Solvers is a list of challenge solvers that will be used to solve
               ACME challenges for the matching domains.
               Solver configurations must be provided in order to obtain certificates
               from an ACME server.
               For more information, see: https://cert-manager.io/docs/configuration/acme/
        """
        if ca_bundle is not None:
            pulumi.set(__self__, "ca_bundle", ca_bundle)
        if disable_account_key_generation is not None:
            pulumi.set(
                __self__,
                "disable_account_key_generation",
                disable_account_key_generation,
            )
        if email is not None:
            pulumi.set(__self__, "email", email)
        if enable_duration_feature is not None:
            pulumi.set(__self__, "enable_duration_feature", enable_duration_feature)
        if external_account_binding is not None:
            pulumi.set(__self__, "external_account_binding", external_account_binding)
        if preferred_chain is not None:
            pulumi.set(__self__, "preferred_chain", preferred_chain)
        if private_key_secret_ref is not None:
            pulumi.set(__self__, "private_key_secret_ref", private_key_secret_ref)
        if server is not None:
            pulumi.set(__self__, "server", server)
        if skip_tls_verify is not None:
            pulumi.set(__self__, "skip_tls_verify", skip_tls_verify)
        if solvers is not None:
            pulumi.set(__self__, "solvers", solvers)

    @property
    @pulumi.getter(name="caBundle")
    def ca_bundle(self) -> Optional[pulumi.Input[str]]:
        """
        Base64-encoded bundle of PEM CAs which can be used to validate the certificate
        chain presented by the ACME server.
        Mutually exclusive with SkipTLSVerify; prefer using CABundle to prevent various
        kinds of security vulnerabilities.
        If CABundle and SkipTLSVerify are unset, the system certificate bundle inside
        the container is used to validate the TLS connection.
        """
        return pulumi.get(self, "ca_bundle")

    @ca_bundle.setter
    def ca_bundle(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ca_bundle", value)

    @property
    @pulumi.getter(name="disableAccountKeyGeneration")
    def disable_account_key_generation(self) -> Optional[pulumi.Input[bool]]:
        """
        Enables or disables generating a new ACME account key.
        If true, the Issuer resource will *not* request a new account but will expect
        the account key to be supplied via an existing secret.
        If false, the cert-manager system will generate a new ACME account key
        for the Issuer.
        Defaults to false.
        """
        return pulumi.get(self, "disable_account_key_generation")

    @disable_account_key_generation.setter
    def disable_account_key_generation(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disable_account_key_generation", value)

    @property
    @pulumi.getter
    def email(self) -> Optional[pulumi.Input[str]]:
        """
        Email is the email address to be associated with the ACME account.
        This field is optional, but it is strongly recommended to be set.
        It will be used to contact you in case of issues with your account or
        certificates, including expiry notification emails.
        This field may be updated after the account is initially registered.
        """
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email", value)

    @property
    @pulumi.getter(name="enableDurationFeature")
    def enable_duration_feature(self) -> Optional[pulumi.Input[bool]]:
        """
        Enables requesting a Not After date on certificates that matches the
        duration of the certificate. This is not supported by all ACME servers
        like Let's Encrypt. If set to true when the ACME server does not support
        it, it will create an error on the Order.
        Defaults to false.
        """
        return pulumi.get(self, "enable_duration_feature")

    @enable_duration_feature.setter
    def enable_duration_feature(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_duration_feature", value)

    @property
    @pulumi.getter(name="externalAccountBinding")
    def external_account_binding(
        self,
    ) -> Optional[pulumi.Input["ClusterIssuerSpecAcmeExternalAccountBindingPatchArgs"]]:
        return pulumi.get(self, "external_account_binding")

    @external_account_binding.setter
    def external_account_binding(
        self,
        value: Optional[
            pulumi.Input["ClusterIssuerSpecAcmeExternalAccountBindingPatchArgs"]
        ],
    ):
        pulumi.set(self, "external_account_binding", value)

    @property
    @pulumi.getter(name="preferredChain")
    def preferred_chain(self) -> Optional[pulumi.Input[str]]:
        """
        PreferredChain is the chain to use if the ACME server outputs multiple.
        PreferredChain is no guarantee that this one gets delivered by the ACME
        endpoint.
        For example, for Let's Encrypt's DST crosssign you would use:
        "DST Root CA X3" or "ISRG Root X1" for the newer Let's Encrypt root CA.
        This value picks the first certificate bundle in the combined set of
        ACME default and alternative chains that has a root-most certificate with
        this value as its issuer's commonname.
        """
        return pulumi.get(self, "preferred_chain")

    @preferred_chain.setter
    def preferred_chain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "preferred_chain", value)

    @property
    @pulumi.getter(name="privateKeySecretRef")
    def private_key_secret_ref(
        self,
    ) -> Optional[pulumi.Input["ClusterIssuerSpecAcmePrivateKeySecretRefPatchArgs"]]:
        return pulumi.get(self, "private_key_secret_ref")

    @private_key_secret_ref.setter
    def private_key_secret_ref(
        self,
        value: Optional[
            pulumi.Input["ClusterIssuerSpecAcmePrivateKeySecretRefPatchArgs"]
        ],
    ):
        pulumi.set(self, "private_key_secret_ref", value)

    @property
    @pulumi.getter
    def server(self) -> Optional[pulumi.Input[str]]:
        """
        Server is the URL used to access the ACME server's 'directory' endpoint.
        For example, for Let's Encrypt's staging endpoint, you would use:
        "https://acme-staging-v02.api.letsencrypt.org/directory".
        Only ACME v2 endpoints (i.e. RFC 8555) are supported.
        """
        return pulumi.get(self, "server")

    @server.setter
    def server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server", value)

    @property
    @pulumi.getter(name="skipTLSVerify")
    def skip_tls_verify(self) -> Optional[pulumi.Input[bool]]:
        """
        INSECURE: Enables or disables validation of the ACME server TLS certificate.
        If true, requests to the ACME server will not have the TLS certificate chain
        validated.
        Mutually exclusive with CABundle; prefer using CABundle to prevent various
        kinds of security vulnerabilities.
        Only enable this option in development environments.
        If CABundle and SkipTLSVerify are unset, the system certificate bundle inside
        the container is used to validate the TLS connection.
        Defaults to false.
        """
        return pulumi.get(self, "skip_tls_verify")

    @skip_tls_verify.setter
    def skip_tls_verify(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "skip_tls_verify", value)

    @property
    @pulumi.getter
    def solvers(
        self,
    ) -> Optional[
        pulumi.Input[Sequence[pulumi.Input["ClusterIssuerSpecAcmeSolversPatchArgs"]]]
    ]:
        """
        Solvers is a list of challenge solvers that will be used to solve
        ACME challenges for the matching domains.
        Solver configurations must be provided in order to obtain certificates
        from an ACME server.
        For more information, see: https://cert-manager.io/docs/configuration/acme/
        """
        return pulumi.get(self, "solvers")

    @solvers.setter
    def solvers(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[pulumi.Input["ClusterIssuerSpecAcmeSolversPatchArgs"]]
            ]
        ],
    ):
        pulumi.set(self, "solvers", value)


if not MYPY:

    class ClusterIssuerSpecAcmePrivateKeySecretRefPatchArgsDict(TypedDict):
        """
        PrivateKey is the name of a Kubernetes Secret resource that will be used to
        store the automatically generated ACME account private key.
        Optionally, a `key` may be specified to select a specific entry within
        the named Secret resource.
        If `key` is not specified, a default of `tls.key` will be used.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """

elif False:
    ClusterIssuerSpecAcmePrivateKeySecretRefPatchArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class ClusterIssuerSpecAcmePrivateKeySecretRefPatchArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        name: Optional[pulumi.Input[str]] = None
    ):
        """
        PrivateKey is the name of a Kubernetes Secret resource that will be used to
        store the automatically generated ACME account private key.
        Optionally, a `key` may be specified to select a specific entry within
        the named Secret resource.
        If `key` is not specified, a default of `tls.key` will be used.
        :param pulumi.Input[str] key: The key of the entry in the Secret resource's `data` field to be used.
               Some instances of this field may be defaulted, in others it may be
               required.
        :param pulumi.Input[str] name: Name of the resource being referred to.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:

    class ClusterIssuerSpecAcmePrivateKeySecretRefArgsDict(TypedDict):
        """
        PrivateKey is the name of a Kubernetes Secret resource that will be used to
        store the automatically generated ACME account private key.
        Optionally, a `key` may be specified to select a specific entry within
        the named Secret resource.
        If `key` is not specified, a default of `tls.key` will be used.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """

elif False:
    ClusterIssuerSpecAcmePrivateKeySecretRefArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class ClusterIssuerSpecAcmePrivateKeySecretRefArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        name: Optional[pulumi.Input[str]] = None
    ):
        """
        PrivateKey is the name of a Kubernetes Secret resource that will be used to
        store the automatically generated ACME account private key.
        Optionally, a `key` may be specified to select a specific entry within
        the named Secret resource.
        If `key` is not specified, a default of `tls.key` will be used.
        :param pulumi.Input[str] key: The key of the entry in the Secret resource's `data` field to be used.
               Some instances of this field may be defaulted, in others it may be
               required.
        :param pulumi.Input[str] name: Name of the resource being referred to.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversDns01AcmeDNSAccountSecretRefPatchArgsDict(
        TypedDict
    ):
        """
        A reference to a specific 'key' within a Secret resource.
        In some instances, `key` is a required field.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """

elif False:
    ClusterIssuerSpecAcmeSolversDns01AcmeDNSAccountSecretRefPatchArgsDict: TypeAlias = (
        Mapping[str, Any]
    )


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversDns01AcmeDNSAccountSecretRefPatchArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        name: Optional[pulumi.Input[str]] = None
    ):
        """
        A reference to a specific 'key' within a Secret resource.
        In some instances, `key` is a required field.
        :param pulumi.Input[str] key: The key of the entry in the Secret resource's `data` field to be used.
               Some instances of this field may be defaulted, in others it may be
               required.
        :param pulumi.Input[str] name: Name of the resource being referred to.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversDns01AcmeDNSAccountSecretRefArgsDict(TypedDict):
        """
        A reference to a specific 'key' within a Secret resource.
        In some instances, `key` is a required field.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """

elif False:
    ClusterIssuerSpecAcmeSolversDns01AcmeDNSAccountSecretRefArgsDict: TypeAlias = (
        Mapping[str, Any]
    )


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversDns01AcmeDNSAccountSecretRefArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        name: Optional[pulumi.Input[str]] = None
    ):
        """
        A reference to a specific 'key' within a Secret resource.
        In some instances, `key` is a required field.
        :param pulumi.Input[str] key: The key of the entry in the Secret resource's `data` field to be used.
               Some instances of this field may be defaulted, in others it may be
               required.
        :param pulumi.Input[str] name: Name of the resource being referred to.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversDns01AcmeDNSPatchArgsDict(TypedDict):
        """
        Use the 'ACME DNS' (https://github.com/joohoi/acme-dns) API to manage
        DNS01 challenge records.
        """

        account_secret_ref: NotRequired[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversDns01AcmeDNSAccountSecretRefPatchArgsDict"
            ]
        ]
        host: NotRequired[pulumi.Input[str]]

elif False:
    ClusterIssuerSpecAcmeSolversDns01AcmeDNSPatchArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversDns01AcmeDNSPatchArgs:
    def __init__(
        __self__,
        *,
        account_secret_ref: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversDns01AcmeDNSAccountSecretRefPatchArgs"
            ]
        ] = None,
        host: Optional[pulumi.Input[str]] = None
    ):
        """
        Use the 'ACME DNS' (https://github.com/joohoi/acme-dns) API to manage
        DNS01 challenge records.
        """
        if account_secret_ref is not None:
            pulumi.set(__self__, "account_secret_ref", account_secret_ref)
        if host is not None:
            pulumi.set(__self__, "host", host)

    @property
    @pulumi.getter(name="accountSecretRef")
    def account_secret_ref(
        self,
    ) -> Optional[
        pulumi.Input[
            "ClusterIssuerSpecAcmeSolversDns01AcmeDNSAccountSecretRefPatchArgs"
        ]
    ]:
        return pulumi.get(self, "account_secret_ref")

    @account_secret_ref.setter
    def account_secret_ref(
        self,
        value: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversDns01AcmeDNSAccountSecretRefPatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "account_secret_ref", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversDns01AcmeDNSArgsDict(TypedDict):
        """
        Use the 'ACME DNS' (https://github.com/joohoi/acme-dns) API to manage
        DNS01 challenge records.
        """

        account_secret_ref: NotRequired[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversDns01AcmeDNSAccountSecretRefArgsDict"
            ]
        ]
        host: NotRequired[pulumi.Input[str]]

elif False:
    ClusterIssuerSpecAcmeSolversDns01AcmeDNSArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversDns01AcmeDNSArgs:
    def __init__(
        __self__,
        *,
        account_secret_ref: Optional[
            pulumi.Input["ClusterIssuerSpecAcmeSolversDns01AcmeDNSAccountSecretRefArgs"]
        ] = None,
        host: Optional[pulumi.Input[str]] = None
    ):
        """
        Use the 'ACME DNS' (https://github.com/joohoi/acme-dns) API to manage
        DNS01 challenge records.
        """
        if account_secret_ref is not None:
            pulumi.set(__self__, "account_secret_ref", account_secret_ref)
        if host is not None:
            pulumi.set(__self__, "host", host)

    @property
    @pulumi.getter(name="accountSecretRef")
    def account_secret_ref(
        self,
    ) -> Optional[
        pulumi.Input["ClusterIssuerSpecAcmeSolversDns01AcmeDNSAccountSecretRefArgs"]
    ]:
        return pulumi.get(self, "account_secret_ref")

    @account_secret_ref.setter
    def account_secret_ref(
        self,
        value: Optional[
            pulumi.Input["ClusterIssuerSpecAcmeSolversDns01AcmeDNSAccountSecretRefArgs"]
        ],
    ):
        pulumi.set(self, "account_secret_ref", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversDns01AkamaiAccessTokenSecretRefPatchArgsDict(
        TypedDict
    ):
        """
        A reference to a specific 'key' within a Secret resource.
        In some instances, `key` is a required field.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """

elif False:
    ClusterIssuerSpecAcmeSolversDns01AkamaiAccessTokenSecretRefPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversDns01AkamaiAccessTokenSecretRefPatchArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        name: Optional[pulumi.Input[str]] = None
    ):
        """
        A reference to a specific 'key' within a Secret resource.
        In some instances, `key` is a required field.
        :param pulumi.Input[str] key: The key of the entry in the Secret resource's `data` field to be used.
               Some instances of this field may be defaulted, in others it may be
               required.
        :param pulumi.Input[str] name: Name of the resource being referred to.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversDns01AkamaiAccessTokenSecretRefArgsDict(
        TypedDict
    ):
        """
        A reference to a specific 'key' within a Secret resource.
        In some instances, `key` is a required field.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """

elif False:
    ClusterIssuerSpecAcmeSolversDns01AkamaiAccessTokenSecretRefArgsDict: TypeAlias = (
        Mapping[str, Any]
    )


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversDns01AkamaiAccessTokenSecretRefArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        name: Optional[pulumi.Input[str]] = None
    ):
        """
        A reference to a specific 'key' within a Secret resource.
        In some instances, `key` is a required field.
        :param pulumi.Input[str] key: The key of the entry in the Secret resource's `data` field to be used.
               Some instances of this field may be defaulted, in others it may be
               required.
        :param pulumi.Input[str] name: Name of the resource being referred to.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversDns01AkamaiClientSecretSecretRefPatchArgsDict(
        TypedDict
    ):
        """
        A reference to a specific 'key' within a Secret resource.
        In some instances, `key` is a required field.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """

elif False:
    ClusterIssuerSpecAcmeSolversDns01AkamaiClientSecretSecretRefPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversDns01AkamaiClientSecretSecretRefPatchArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        name: Optional[pulumi.Input[str]] = None
    ):
        """
        A reference to a specific 'key' within a Secret resource.
        In some instances, `key` is a required field.
        :param pulumi.Input[str] key: The key of the entry in the Secret resource's `data` field to be used.
               Some instances of this field may be defaulted, in others it may be
               required.
        :param pulumi.Input[str] name: Name of the resource being referred to.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversDns01AkamaiClientSecretSecretRefArgsDict(
        TypedDict
    ):
        """
        A reference to a specific 'key' within a Secret resource.
        In some instances, `key` is a required field.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """

elif False:
    ClusterIssuerSpecAcmeSolversDns01AkamaiClientSecretSecretRefArgsDict: TypeAlias = (
        Mapping[str, Any]
    )


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversDns01AkamaiClientSecretSecretRefArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        name: Optional[pulumi.Input[str]] = None
    ):
        """
        A reference to a specific 'key' within a Secret resource.
        In some instances, `key` is a required field.
        :param pulumi.Input[str] key: The key of the entry in the Secret resource's `data` field to be used.
               Some instances of this field may be defaulted, in others it may be
               required.
        :param pulumi.Input[str] name: Name of the resource being referred to.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversDns01AkamaiClientTokenSecretRefPatchArgsDict(
        TypedDict
    ):
        """
        A reference to a specific 'key' within a Secret resource.
        In some instances, `key` is a required field.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """

elif False:
    ClusterIssuerSpecAcmeSolversDns01AkamaiClientTokenSecretRefPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversDns01AkamaiClientTokenSecretRefPatchArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        name: Optional[pulumi.Input[str]] = None
    ):
        """
        A reference to a specific 'key' within a Secret resource.
        In some instances, `key` is a required field.
        :param pulumi.Input[str] key: The key of the entry in the Secret resource's `data` field to be used.
               Some instances of this field may be defaulted, in others it may be
               required.
        :param pulumi.Input[str] name: Name of the resource being referred to.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversDns01AkamaiClientTokenSecretRefArgsDict(
        TypedDict
    ):
        """
        A reference to a specific 'key' within a Secret resource.
        In some instances, `key` is a required field.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """

elif False:
    ClusterIssuerSpecAcmeSolversDns01AkamaiClientTokenSecretRefArgsDict: TypeAlias = (
        Mapping[str, Any]
    )


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversDns01AkamaiClientTokenSecretRefArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        name: Optional[pulumi.Input[str]] = None
    ):
        """
        A reference to a specific 'key' within a Secret resource.
        In some instances, `key` is a required field.
        :param pulumi.Input[str] key: The key of the entry in the Secret resource's `data` field to be used.
               Some instances of this field may be defaulted, in others it may be
               required.
        :param pulumi.Input[str] name: Name of the resource being referred to.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversDns01AkamaiPatchArgsDict(TypedDict):
        """
        Use the Akamai DNS zone management API to manage DNS01 challenge records.
        """

        access_token_secret_ref: NotRequired[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversDns01AkamaiAccessTokenSecretRefPatchArgsDict"
            ]
        ]
        client_secret_secret_ref: NotRequired[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversDns01AkamaiClientSecretSecretRefPatchArgsDict"
            ]
        ]
        client_token_secret_ref: NotRequired[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversDns01AkamaiClientTokenSecretRefPatchArgsDict"
            ]
        ]
        service_consumer_domain: NotRequired[pulumi.Input[str]]

elif False:
    ClusterIssuerSpecAcmeSolversDns01AkamaiPatchArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversDns01AkamaiPatchArgs:
    def __init__(
        __self__,
        *,
        access_token_secret_ref: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversDns01AkamaiAccessTokenSecretRefPatchArgs"
            ]
        ] = None,
        client_secret_secret_ref: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversDns01AkamaiClientSecretSecretRefPatchArgs"
            ]
        ] = None,
        client_token_secret_ref: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversDns01AkamaiClientTokenSecretRefPatchArgs"
            ]
        ] = None,
        service_consumer_domain: Optional[pulumi.Input[str]] = None
    ):
        """
        Use the Akamai DNS zone management API to manage DNS01 challenge records.
        """
        if access_token_secret_ref is not None:
            pulumi.set(__self__, "access_token_secret_ref", access_token_secret_ref)
        if client_secret_secret_ref is not None:
            pulumi.set(__self__, "client_secret_secret_ref", client_secret_secret_ref)
        if client_token_secret_ref is not None:
            pulumi.set(__self__, "client_token_secret_ref", client_token_secret_ref)
        if service_consumer_domain is not None:
            pulumi.set(__self__, "service_consumer_domain", service_consumer_domain)

    @property
    @pulumi.getter(name="accessTokenSecretRef")
    def access_token_secret_ref(
        self,
    ) -> Optional[
        pulumi.Input[
            "ClusterIssuerSpecAcmeSolversDns01AkamaiAccessTokenSecretRefPatchArgs"
        ]
    ]:
        return pulumi.get(self, "access_token_secret_ref")

    @access_token_secret_ref.setter
    def access_token_secret_ref(
        self,
        value: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversDns01AkamaiAccessTokenSecretRefPatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "access_token_secret_ref", value)

    @property
    @pulumi.getter(name="clientSecretSecretRef")
    def client_secret_secret_ref(
        self,
    ) -> Optional[
        pulumi.Input[
            "ClusterIssuerSpecAcmeSolversDns01AkamaiClientSecretSecretRefPatchArgs"
        ]
    ]:
        return pulumi.get(self, "client_secret_secret_ref")

    @client_secret_secret_ref.setter
    def client_secret_secret_ref(
        self,
        value: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversDns01AkamaiClientSecretSecretRefPatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "client_secret_secret_ref", value)

    @property
    @pulumi.getter(name="clientTokenSecretRef")
    def client_token_secret_ref(
        self,
    ) -> Optional[
        pulumi.Input[
            "ClusterIssuerSpecAcmeSolversDns01AkamaiClientTokenSecretRefPatchArgs"
        ]
    ]:
        return pulumi.get(self, "client_token_secret_ref")

    @client_token_secret_ref.setter
    def client_token_secret_ref(
        self,
        value: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversDns01AkamaiClientTokenSecretRefPatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "client_token_secret_ref", value)

    @property
    @pulumi.getter(name="serviceConsumerDomain")
    def service_consumer_domain(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "service_consumer_domain")

    @service_consumer_domain.setter
    def service_consumer_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_consumer_domain", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversDns01AkamaiArgsDict(TypedDict):
        """
        Use the Akamai DNS zone management API to manage DNS01 challenge records.
        """

        access_token_secret_ref: NotRequired[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversDns01AkamaiAccessTokenSecretRefArgsDict"
            ]
        ]
        client_secret_secret_ref: NotRequired[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversDns01AkamaiClientSecretSecretRefArgsDict"
            ]
        ]
        client_token_secret_ref: NotRequired[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversDns01AkamaiClientTokenSecretRefArgsDict"
            ]
        ]
        service_consumer_domain: NotRequired[pulumi.Input[str]]

elif False:
    ClusterIssuerSpecAcmeSolversDns01AkamaiArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversDns01AkamaiArgs:
    def __init__(
        __self__,
        *,
        access_token_secret_ref: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversDns01AkamaiAccessTokenSecretRefArgs"
            ]
        ] = None,
        client_secret_secret_ref: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversDns01AkamaiClientSecretSecretRefArgs"
            ]
        ] = None,
        client_token_secret_ref: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversDns01AkamaiClientTokenSecretRefArgs"
            ]
        ] = None,
        service_consumer_domain: Optional[pulumi.Input[str]] = None
    ):
        """
        Use the Akamai DNS zone management API to manage DNS01 challenge records.
        """
        if access_token_secret_ref is not None:
            pulumi.set(__self__, "access_token_secret_ref", access_token_secret_ref)
        if client_secret_secret_ref is not None:
            pulumi.set(__self__, "client_secret_secret_ref", client_secret_secret_ref)
        if client_token_secret_ref is not None:
            pulumi.set(__self__, "client_token_secret_ref", client_token_secret_ref)
        if service_consumer_domain is not None:
            pulumi.set(__self__, "service_consumer_domain", service_consumer_domain)

    @property
    @pulumi.getter(name="accessTokenSecretRef")
    def access_token_secret_ref(
        self,
    ) -> Optional[
        pulumi.Input["ClusterIssuerSpecAcmeSolversDns01AkamaiAccessTokenSecretRefArgs"]
    ]:
        return pulumi.get(self, "access_token_secret_ref")

    @access_token_secret_ref.setter
    def access_token_secret_ref(
        self,
        value: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversDns01AkamaiAccessTokenSecretRefArgs"
            ]
        ],
    ):
        pulumi.set(self, "access_token_secret_ref", value)

    @property
    @pulumi.getter(name="clientSecretSecretRef")
    def client_secret_secret_ref(
        self,
    ) -> Optional[
        pulumi.Input["ClusterIssuerSpecAcmeSolversDns01AkamaiClientSecretSecretRefArgs"]
    ]:
        return pulumi.get(self, "client_secret_secret_ref")

    @client_secret_secret_ref.setter
    def client_secret_secret_ref(
        self,
        value: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversDns01AkamaiClientSecretSecretRefArgs"
            ]
        ],
    ):
        pulumi.set(self, "client_secret_secret_ref", value)

    @property
    @pulumi.getter(name="clientTokenSecretRef")
    def client_token_secret_ref(
        self,
    ) -> Optional[
        pulumi.Input["ClusterIssuerSpecAcmeSolversDns01AkamaiClientTokenSecretRefArgs"]
    ]:
        return pulumi.get(self, "client_token_secret_ref")

    @client_token_secret_ref.setter
    def client_token_secret_ref(
        self,
        value: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversDns01AkamaiClientTokenSecretRefArgs"
            ]
        ],
    ):
        pulumi.set(self, "client_token_secret_ref", value)

    @property
    @pulumi.getter(name="serviceConsumerDomain")
    def service_consumer_domain(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "service_consumer_domain")

    @service_consumer_domain.setter
    def service_consumer_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_consumer_domain", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversDns01AzureDNSClientSecretSecretRefPatchArgsDict(
        TypedDict
    ):
        """
        Auth: Azure Service Principal:
        A reference to a Secret containing the password associated with the Service Principal.
        If set, ClientID and TenantID must also be set.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """

elif False:
    ClusterIssuerSpecAcmeSolversDns01AzureDNSClientSecretSecretRefPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversDns01AzureDNSClientSecretSecretRefPatchArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        name: Optional[pulumi.Input[str]] = None
    ):
        """
        Auth: Azure Service Principal:
        A reference to a Secret containing the password associated with the Service Principal.
        If set, ClientID and TenantID must also be set.
        :param pulumi.Input[str] key: The key of the entry in the Secret resource's `data` field to be used.
               Some instances of this field may be defaulted, in others it may be
               required.
        :param pulumi.Input[str] name: Name of the resource being referred to.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversDns01AzureDNSClientSecretSecretRefArgsDict(
        TypedDict
    ):
        """
        Auth: Azure Service Principal:
        A reference to a Secret containing the password associated with the Service Principal.
        If set, ClientID and TenantID must also be set.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """

elif False:
    ClusterIssuerSpecAcmeSolversDns01AzureDNSClientSecretSecretRefArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversDns01AzureDNSClientSecretSecretRefArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        name: Optional[pulumi.Input[str]] = None
    ):
        """
        Auth: Azure Service Principal:
        A reference to a Secret containing the password associated with the Service Principal.
        If set, ClientID and TenantID must also be set.
        :param pulumi.Input[str] key: The key of the entry in the Secret resource's `data` field to be used.
               Some instances of this field may be defaulted, in others it may be
               required.
        :param pulumi.Input[str] name: Name of the resource being referred to.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversDns01AzureDNSManagedIdentityPatchArgsDict(
        TypedDict
    ):
        """
        Auth: Azure Workload Identity or Azure Managed Service Identity:
        Settings to enable Azure Workload Identity or Azure Managed Service Identity
        If set, ClientID, ClientSecret and TenantID must not be set.
        """

        client_id: NotRequired[pulumi.Input[str]]
        """
        client ID of the managed identity, can not be used at the same time as resourceID
        """
        resource_id: NotRequired[pulumi.Input[str]]
        """
        resource ID of the managed identity, can not be used at the same time as clientID
        Cannot be used for Azure Managed Service Identity
        """
        tenant_id: NotRequired[pulumi.Input[str]]
        """
        tenant ID of the managed identity, can not be used at the same time as resourceID
        """

elif False:
    ClusterIssuerSpecAcmeSolversDns01AzureDNSManagedIdentityPatchArgsDict: TypeAlias = (
        Mapping[str, Any]
    )


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversDns01AzureDNSManagedIdentityPatchArgs:
    def __init__(
        __self__,
        *,
        client_id: Optional[pulumi.Input[str]] = None,
        resource_id: Optional[pulumi.Input[str]] = None,
        tenant_id: Optional[pulumi.Input[str]] = None
    ):
        """
        Auth: Azure Workload Identity or Azure Managed Service Identity:
        Settings to enable Azure Workload Identity or Azure Managed Service Identity
        If set, ClientID, ClientSecret and TenantID must not be set.
        :param pulumi.Input[str] client_id: client ID of the managed identity, can not be used at the same time as resourceID
        :param pulumi.Input[str] resource_id: resource ID of the managed identity, can not be used at the same time as clientID
               Cannot be used for Azure Managed Service Identity
        :param pulumi.Input[str] tenant_id: tenant ID of the managed identity, can not be used at the same time as resourceID
        """
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if tenant_id is not None:
            pulumi.set(__self__, "tenant_id", tenant_id)

    @property
    @pulumi.getter(name="clientID")
    def client_id(self) -> Optional[pulumi.Input[str]]:
        """
        client ID of the managed identity, can not be used at the same time as resourceID
        """
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="resourceID")
    def resource_id(self) -> Optional[pulumi.Input[str]]:
        """
        resource ID of the managed identity, can not be used at the same time as clientID
        Cannot be used for Azure Managed Service Identity
        """
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_id", value)

    @property
    @pulumi.getter(name="tenantID")
    def tenant_id(self) -> Optional[pulumi.Input[str]]:
        """
        tenant ID of the managed identity, can not be used at the same time as resourceID
        """
        return pulumi.get(self, "tenant_id")

    @tenant_id.setter
    def tenant_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tenant_id", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversDns01AzureDNSManagedIdentityArgsDict(TypedDict):
        """
        Auth: Azure Workload Identity or Azure Managed Service Identity:
        Settings to enable Azure Workload Identity or Azure Managed Service Identity
        If set, ClientID, ClientSecret and TenantID must not be set.
        """

        client_id: NotRequired[pulumi.Input[str]]
        """
        client ID of the managed identity, can not be used at the same time as resourceID
        """
        resource_id: NotRequired[pulumi.Input[str]]
        """
        resource ID of the managed identity, can not be used at the same time as clientID
        Cannot be used for Azure Managed Service Identity
        """
        tenant_id: NotRequired[pulumi.Input[str]]
        """
        tenant ID of the managed identity, can not be used at the same time as resourceID
        """

elif False:
    ClusterIssuerSpecAcmeSolversDns01AzureDNSManagedIdentityArgsDict: TypeAlias = (
        Mapping[str, Any]
    )


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversDns01AzureDNSManagedIdentityArgs:
    def __init__(
        __self__,
        *,
        client_id: Optional[pulumi.Input[str]] = None,
        resource_id: Optional[pulumi.Input[str]] = None,
        tenant_id: Optional[pulumi.Input[str]] = None
    ):
        """
        Auth: Azure Workload Identity or Azure Managed Service Identity:
        Settings to enable Azure Workload Identity or Azure Managed Service Identity
        If set, ClientID, ClientSecret and TenantID must not be set.
        :param pulumi.Input[str] client_id: client ID of the managed identity, can not be used at the same time as resourceID
        :param pulumi.Input[str] resource_id: resource ID of the managed identity, can not be used at the same time as clientID
               Cannot be used for Azure Managed Service Identity
        :param pulumi.Input[str] tenant_id: tenant ID of the managed identity, can not be used at the same time as resourceID
        """
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if tenant_id is not None:
            pulumi.set(__self__, "tenant_id", tenant_id)

    @property
    @pulumi.getter(name="clientID")
    def client_id(self) -> Optional[pulumi.Input[str]]:
        """
        client ID of the managed identity, can not be used at the same time as resourceID
        """
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="resourceID")
    def resource_id(self) -> Optional[pulumi.Input[str]]:
        """
        resource ID of the managed identity, can not be used at the same time as clientID
        Cannot be used for Azure Managed Service Identity
        """
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_id", value)

    @property
    @pulumi.getter(name="tenantID")
    def tenant_id(self) -> Optional[pulumi.Input[str]]:
        """
        tenant ID of the managed identity, can not be used at the same time as resourceID
        """
        return pulumi.get(self, "tenant_id")

    @tenant_id.setter
    def tenant_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tenant_id", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversDns01AzureDNSPatchArgsDict(TypedDict):
        """
        Use the Microsoft Azure DNS API to manage DNS01 challenge records.
        """

        client_id: NotRequired[pulumi.Input[str]]
        """
        Auth: Azure Service Principal:
        The ClientID of the Azure Service Principal used to authenticate with Azure DNS.
        If set, ClientSecret and TenantID must also be set.
        """
        client_secret_secret_ref: NotRequired[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversDns01AzureDNSClientSecretSecretRefPatchArgsDict"
            ]
        ]
        environment: NotRequired[pulumi.Input[str]]
        """
        name of the Azure environment (default AzurePublicCloud)
        """
        hosted_zone_name: NotRequired[pulumi.Input[str]]
        """
        name of the DNS zone that should be used
        """
        managed_identity: NotRequired[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversDns01AzureDNSManagedIdentityPatchArgsDict"
            ]
        ]
        resource_group_name: NotRequired[pulumi.Input[str]]
        """
        resource group the DNS zone is located in
        """
        subscription_id: NotRequired[pulumi.Input[str]]
        """
        ID of the Azure subscription
        """
        tenant_id: NotRequired[pulumi.Input[str]]
        """
        Auth: Azure Service Principal:
        The TenantID of the Azure Service Principal used to authenticate with Azure DNS.
        If set, ClientID and ClientSecret must also be set.
        """

elif False:
    ClusterIssuerSpecAcmeSolversDns01AzureDNSPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversDns01AzureDNSPatchArgs:
    def __init__(
        __self__,
        *,
        client_id: Optional[pulumi.Input[str]] = None,
        client_secret_secret_ref: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversDns01AzureDNSClientSecretSecretRefPatchArgs"
            ]
        ] = None,
        environment: Optional[pulumi.Input[str]] = None,
        hosted_zone_name: Optional[pulumi.Input[str]] = None,
        managed_identity: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversDns01AzureDNSManagedIdentityPatchArgs"
            ]
        ] = None,
        resource_group_name: Optional[pulumi.Input[str]] = None,
        subscription_id: Optional[pulumi.Input[str]] = None,
        tenant_id: Optional[pulumi.Input[str]] = None
    ):
        """
        Use the Microsoft Azure DNS API to manage DNS01 challenge records.
        :param pulumi.Input[str] client_id: Auth: Azure Service Principal:
               The ClientID of the Azure Service Principal used to authenticate with Azure DNS.
               If set, ClientSecret and TenantID must also be set.
        :param pulumi.Input[str] environment: name of the Azure environment (default AzurePublicCloud)
        :param pulumi.Input[str] hosted_zone_name: name of the DNS zone that should be used
        :param pulumi.Input[str] resource_group_name: resource group the DNS zone is located in
        :param pulumi.Input[str] subscription_id: ID of the Azure subscription
        :param pulumi.Input[str] tenant_id: Auth: Azure Service Principal:
               The TenantID of the Azure Service Principal used to authenticate with Azure DNS.
               If set, ClientID and ClientSecret must also be set.
        """
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret_secret_ref is not None:
            pulumi.set(__self__, "client_secret_secret_ref", client_secret_secret_ref)
        if environment is not None:
            pulumi.set(__self__, "environment", environment)
        if hosted_zone_name is not None:
            pulumi.set(__self__, "hosted_zone_name", hosted_zone_name)
        if managed_identity is not None:
            pulumi.set(__self__, "managed_identity", managed_identity)
        if resource_group_name is not None:
            pulumi.set(__self__, "resource_group_name", resource_group_name)
        if subscription_id is not None:
            pulumi.set(__self__, "subscription_id", subscription_id)
        if tenant_id is not None:
            pulumi.set(__self__, "tenant_id", tenant_id)

    @property
    @pulumi.getter(name="clientID")
    def client_id(self) -> Optional[pulumi.Input[str]]:
        """
        Auth: Azure Service Principal:
        The ClientID of the Azure Service Principal used to authenticate with Azure DNS.
        If set, ClientSecret and TenantID must also be set.
        """
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecretSecretRef")
    def client_secret_secret_ref(
        self,
    ) -> Optional[
        pulumi.Input[
            "ClusterIssuerSpecAcmeSolversDns01AzureDNSClientSecretSecretRefPatchArgs"
        ]
    ]:
        return pulumi.get(self, "client_secret_secret_ref")

    @client_secret_secret_ref.setter
    def client_secret_secret_ref(
        self,
        value: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversDns01AzureDNSClientSecretSecretRefPatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "client_secret_secret_ref", value)

    @property
    @pulumi.getter
    def environment(self) -> Optional[pulumi.Input[str]]:
        """
        name of the Azure environment (default AzurePublicCloud)
        """
        return pulumi.get(self, "environment")

    @environment.setter
    def environment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "environment", value)

    @property
    @pulumi.getter(name="hostedZoneName")
    def hosted_zone_name(self) -> Optional[pulumi.Input[str]]:
        """
        name of the DNS zone that should be used
        """
        return pulumi.get(self, "hosted_zone_name")

    @hosted_zone_name.setter
    def hosted_zone_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hosted_zone_name", value)

    @property
    @pulumi.getter(name="managedIdentity")
    def managed_identity(
        self,
    ) -> Optional[
        pulumi.Input[
            "ClusterIssuerSpecAcmeSolversDns01AzureDNSManagedIdentityPatchArgs"
        ]
    ]:
        return pulumi.get(self, "managed_identity")

    @managed_identity.setter
    def managed_identity(
        self,
        value: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversDns01AzureDNSManagedIdentityPatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "managed_identity", value)

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> Optional[pulumi.Input[str]]:
        """
        resource group the DNS zone is located in
        """
        return pulumi.get(self, "resource_group_name")

    @resource_group_name.setter
    def resource_group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_group_name", value)

    @property
    @pulumi.getter(name="subscriptionID")
    def subscription_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the Azure subscription
        """
        return pulumi.get(self, "subscription_id")

    @subscription_id.setter
    def subscription_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subscription_id", value)

    @property
    @pulumi.getter(name="tenantID")
    def tenant_id(self) -> Optional[pulumi.Input[str]]:
        """
        Auth: Azure Service Principal:
        The TenantID of the Azure Service Principal used to authenticate with Azure DNS.
        If set, ClientID and ClientSecret must also be set.
        """
        return pulumi.get(self, "tenant_id")

    @tenant_id.setter
    def tenant_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tenant_id", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversDns01AzureDNSArgsDict(TypedDict):
        """
        Use the Microsoft Azure DNS API to manage DNS01 challenge records.
        """

        client_id: NotRequired[pulumi.Input[str]]
        """
        Auth: Azure Service Principal:
        The ClientID of the Azure Service Principal used to authenticate with Azure DNS.
        If set, ClientSecret and TenantID must also be set.
        """
        client_secret_secret_ref: NotRequired[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversDns01AzureDNSClientSecretSecretRefArgsDict"
            ]
        ]
        environment: NotRequired[pulumi.Input[str]]
        """
        name of the Azure environment (default AzurePublicCloud)
        """
        hosted_zone_name: NotRequired[pulumi.Input[str]]
        """
        name of the DNS zone that should be used
        """
        managed_identity: NotRequired[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversDns01AzureDNSManagedIdentityArgsDict"
            ]
        ]
        resource_group_name: NotRequired[pulumi.Input[str]]
        """
        resource group the DNS zone is located in
        """
        subscription_id: NotRequired[pulumi.Input[str]]
        """
        ID of the Azure subscription
        """
        tenant_id: NotRequired[pulumi.Input[str]]
        """
        Auth: Azure Service Principal:
        The TenantID of the Azure Service Principal used to authenticate with Azure DNS.
        If set, ClientID and ClientSecret must also be set.
        """

elif False:
    ClusterIssuerSpecAcmeSolversDns01AzureDNSArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversDns01AzureDNSArgs:
    def __init__(
        __self__,
        *,
        client_id: Optional[pulumi.Input[str]] = None,
        client_secret_secret_ref: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversDns01AzureDNSClientSecretSecretRefArgs"
            ]
        ] = None,
        environment: Optional[pulumi.Input[str]] = None,
        hosted_zone_name: Optional[pulumi.Input[str]] = None,
        managed_identity: Optional[
            pulumi.Input["ClusterIssuerSpecAcmeSolversDns01AzureDNSManagedIdentityArgs"]
        ] = None,
        resource_group_name: Optional[pulumi.Input[str]] = None,
        subscription_id: Optional[pulumi.Input[str]] = None,
        tenant_id: Optional[pulumi.Input[str]] = None
    ):
        """
        Use the Microsoft Azure DNS API to manage DNS01 challenge records.
        :param pulumi.Input[str] client_id: Auth: Azure Service Principal:
               The ClientID of the Azure Service Principal used to authenticate with Azure DNS.
               If set, ClientSecret and TenantID must also be set.
        :param pulumi.Input[str] environment: name of the Azure environment (default AzurePublicCloud)
        :param pulumi.Input[str] hosted_zone_name: name of the DNS zone that should be used
        :param pulumi.Input[str] resource_group_name: resource group the DNS zone is located in
        :param pulumi.Input[str] subscription_id: ID of the Azure subscription
        :param pulumi.Input[str] tenant_id: Auth: Azure Service Principal:
               The TenantID of the Azure Service Principal used to authenticate with Azure DNS.
               If set, ClientID and ClientSecret must also be set.
        """
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret_secret_ref is not None:
            pulumi.set(__self__, "client_secret_secret_ref", client_secret_secret_ref)
        if environment is not None:
            pulumi.set(__self__, "environment", environment)
        if hosted_zone_name is not None:
            pulumi.set(__self__, "hosted_zone_name", hosted_zone_name)
        if managed_identity is not None:
            pulumi.set(__self__, "managed_identity", managed_identity)
        if resource_group_name is not None:
            pulumi.set(__self__, "resource_group_name", resource_group_name)
        if subscription_id is not None:
            pulumi.set(__self__, "subscription_id", subscription_id)
        if tenant_id is not None:
            pulumi.set(__self__, "tenant_id", tenant_id)

    @property
    @pulumi.getter(name="clientID")
    def client_id(self) -> Optional[pulumi.Input[str]]:
        """
        Auth: Azure Service Principal:
        The ClientID of the Azure Service Principal used to authenticate with Azure DNS.
        If set, ClientSecret and TenantID must also be set.
        """
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecretSecretRef")
    def client_secret_secret_ref(
        self,
    ) -> Optional[
        pulumi.Input[
            "ClusterIssuerSpecAcmeSolversDns01AzureDNSClientSecretSecretRefArgs"
        ]
    ]:
        return pulumi.get(self, "client_secret_secret_ref")

    @client_secret_secret_ref.setter
    def client_secret_secret_ref(
        self,
        value: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversDns01AzureDNSClientSecretSecretRefArgs"
            ]
        ],
    ):
        pulumi.set(self, "client_secret_secret_ref", value)

    @property
    @pulumi.getter
    def environment(self) -> Optional[pulumi.Input[str]]:
        """
        name of the Azure environment (default AzurePublicCloud)
        """
        return pulumi.get(self, "environment")

    @environment.setter
    def environment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "environment", value)

    @property
    @pulumi.getter(name="hostedZoneName")
    def hosted_zone_name(self) -> Optional[pulumi.Input[str]]:
        """
        name of the DNS zone that should be used
        """
        return pulumi.get(self, "hosted_zone_name")

    @hosted_zone_name.setter
    def hosted_zone_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hosted_zone_name", value)

    @property
    @pulumi.getter(name="managedIdentity")
    def managed_identity(
        self,
    ) -> Optional[
        pulumi.Input["ClusterIssuerSpecAcmeSolversDns01AzureDNSManagedIdentityArgs"]
    ]:
        return pulumi.get(self, "managed_identity")

    @managed_identity.setter
    def managed_identity(
        self,
        value: Optional[
            pulumi.Input["ClusterIssuerSpecAcmeSolversDns01AzureDNSManagedIdentityArgs"]
        ],
    ):
        pulumi.set(self, "managed_identity", value)

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> Optional[pulumi.Input[str]]:
        """
        resource group the DNS zone is located in
        """
        return pulumi.get(self, "resource_group_name")

    @resource_group_name.setter
    def resource_group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_group_name", value)

    @property
    @pulumi.getter(name="subscriptionID")
    def subscription_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the Azure subscription
        """
        return pulumi.get(self, "subscription_id")

    @subscription_id.setter
    def subscription_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subscription_id", value)

    @property
    @pulumi.getter(name="tenantID")
    def tenant_id(self) -> Optional[pulumi.Input[str]]:
        """
        Auth: Azure Service Principal:
        The TenantID of the Azure Service Principal used to authenticate with Azure DNS.
        If set, ClientID and ClientSecret must also be set.
        """
        return pulumi.get(self, "tenant_id")

    @tenant_id.setter
    def tenant_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tenant_id", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversDns01CloudDNSPatchArgsDict(TypedDict):
        """
        Use the Google Cloud DNS API to manage DNS01 challenge records.
        """

        hosted_zone_name: NotRequired[pulumi.Input[str]]
        """
        HostedZoneName is an optional field that tells cert-manager in which
        Cloud DNS zone the challenge record has to be created.
        If left empty cert-manager will automatically choose a zone.
        """
        project: NotRequired[pulumi.Input[str]]
        service_account_secret_ref: NotRequired[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversDns01CloudDNSServiceAccountSecretRefPatchArgsDict"
            ]
        ]

elif False:
    ClusterIssuerSpecAcmeSolversDns01CloudDNSPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversDns01CloudDNSPatchArgs:
    def __init__(
        __self__,
        *,
        hosted_zone_name: Optional[pulumi.Input[str]] = None,
        project: Optional[pulumi.Input[str]] = None,
        service_account_secret_ref: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversDns01CloudDNSServiceAccountSecretRefPatchArgs"
            ]
        ] = None
    ):
        """
        Use the Google Cloud DNS API to manage DNS01 challenge records.
        :param pulumi.Input[str] hosted_zone_name: HostedZoneName is an optional field that tells cert-manager in which
               Cloud DNS zone the challenge record has to be created.
               If left empty cert-manager will automatically choose a zone.
        """
        if hosted_zone_name is not None:
            pulumi.set(__self__, "hosted_zone_name", hosted_zone_name)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if service_account_secret_ref is not None:
            pulumi.set(
                __self__, "service_account_secret_ref", service_account_secret_ref
            )

    @property
    @pulumi.getter(name="hostedZoneName")
    def hosted_zone_name(self) -> Optional[pulumi.Input[str]]:
        """
        HostedZoneName is an optional field that tells cert-manager in which
        Cloud DNS zone the challenge record has to be created.
        If left empty cert-manager will automatically choose a zone.
        """
        return pulumi.get(self, "hosted_zone_name")

    @hosted_zone_name.setter
    def hosted_zone_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hosted_zone_name", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter(name="serviceAccountSecretRef")
    def service_account_secret_ref(
        self,
    ) -> Optional[
        pulumi.Input[
            "ClusterIssuerSpecAcmeSolversDns01CloudDNSServiceAccountSecretRefPatchArgs"
        ]
    ]:
        return pulumi.get(self, "service_account_secret_ref")

    @service_account_secret_ref.setter
    def service_account_secret_ref(
        self,
        value: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversDns01CloudDNSServiceAccountSecretRefPatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "service_account_secret_ref", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversDns01CloudDNSServiceAccountSecretRefPatchArgsDict(
        TypedDict
    ):
        """
        A reference to a specific 'key' within a Secret resource.
        In some instances, `key` is a required field.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """

elif False:
    ClusterIssuerSpecAcmeSolversDns01CloudDNSServiceAccountSecretRefPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversDns01CloudDNSServiceAccountSecretRefPatchArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        name: Optional[pulumi.Input[str]] = None
    ):
        """
        A reference to a specific 'key' within a Secret resource.
        In some instances, `key` is a required field.
        :param pulumi.Input[str] key: The key of the entry in the Secret resource's `data` field to be used.
               Some instances of this field may be defaulted, in others it may be
               required.
        :param pulumi.Input[str] name: Name of the resource being referred to.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversDns01CloudDNSServiceAccountSecretRefArgsDict(
        TypedDict
    ):
        """
        A reference to a specific 'key' within a Secret resource.
        In some instances, `key` is a required field.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """

elif False:
    ClusterIssuerSpecAcmeSolversDns01CloudDNSServiceAccountSecretRefArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversDns01CloudDNSServiceAccountSecretRefArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        name: Optional[pulumi.Input[str]] = None
    ):
        """
        A reference to a specific 'key' within a Secret resource.
        In some instances, `key` is a required field.
        :param pulumi.Input[str] key: The key of the entry in the Secret resource's `data` field to be used.
               Some instances of this field may be defaulted, in others it may be
               required.
        :param pulumi.Input[str] name: Name of the resource being referred to.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversDns01CloudDNSArgsDict(TypedDict):
        """
        Use the Google Cloud DNS API to manage DNS01 challenge records.
        """

        hosted_zone_name: NotRequired[pulumi.Input[str]]
        """
        HostedZoneName is an optional field that tells cert-manager in which
        Cloud DNS zone the challenge record has to be created.
        If left empty cert-manager will automatically choose a zone.
        """
        project: NotRequired[pulumi.Input[str]]
        service_account_secret_ref: NotRequired[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversDns01CloudDNSServiceAccountSecretRefArgsDict"
            ]
        ]

elif False:
    ClusterIssuerSpecAcmeSolversDns01CloudDNSArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversDns01CloudDNSArgs:
    def __init__(
        __self__,
        *,
        hosted_zone_name: Optional[pulumi.Input[str]] = None,
        project: Optional[pulumi.Input[str]] = None,
        service_account_secret_ref: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversDns01CloudDNSServiceAccountSecretRefArgs"
            ]
        ] = None
    ):
        """
        Use the Google Cloud DNS API to manage DNS01 challenge records.
        :param pulumi.Input[str] hosted_zone_name: HostedZoneName is an optional field that tells cert-manager in which
               Cloud DNS zone the challenge record has to be created.
               If left empty cert-manager will automatically choose a zone.
        """
        if hosted_zone_name is not None:
            pulumi.set(__self__, "hosted_zone_name", hosted_zone_name)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if service_account_secret_ref is not None:
            pulumi.set(
                __self__, "service_account_secret_ref", service_account_secret_ref
            )

    @property
    @pulumi.getter(name="hostedZoneName")
    def hosted_zone_name(self) -> Optional[pulumi.Input[str]]:
        """
        HostedZoneName is an optional field that tells cert-manager in which
        Cloud DNS zone the challenge record has to be created.
        If left empty cert-manager will automatically choose a zone.
        """
        return pulumi.get(self, "hosted_zone_name")

    @hosted_zone_name.setter
    def hosted_zone_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hosted_zone_name", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter(name="serviceAccountSecretRef")
    def service_account_secret_ref(
        self,
    ) -> Optional[
        pulumi.Input[
            "ClusterIssuerSpecAcmeSolversDns01CloudDNSServiceAccountSecretRefArgs"
        ]
    ]:
        return pulumi.get(self, "service_account_secret_ref")

    @service_account_secret_ref.setter
    def service_account_secret_ref(
        self,
        value: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversDns01CloudDNSServiceAccountSecretRefArgs"
            ]
        ],
    ):
        pulumi.set(self, "service_account_secret_ref", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversDns01CloudflareApiKeySecretRefPatchArgsDict(
        TypedDict
    ):
        """
        API key to use to authenticate with Cloudflare.
        Note: using an API token to authenticate is now the recommended method
        as it allows greater control of permissions.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """

elif False:
    ClusterIssuerSpecAcmeSolversDns01CloudflareApiKeySecretRefPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversDns01CloudflareApiKeySecretRefPatchArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        name: Optional[pulumi.Input[str]] = None
    ):
        """
        API key to use to authenticate with Cloudflare.
        Note: using an API token to authenticate is now the recommended method
        as it allows greater control of permissions.
        :param pulumi.Input[str] key: The key of the entry in the Secret resource's `data` field to be used.
               Some instances of this field may be defaulted, in others it may be
               required.
        :param pulumi.Input[str] name: Name of the resource being referred to.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversDns01CloudflareApiKeySecretRefArgsDict(TypedDict):
        """
        API key to use to authenticate with Cloudflare.
        Note: using an API token to authenticate is now the recommended method
        as it allows greater control of permissions.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """

elif False:
    ClusterIssuerSpecAcmeSolversDns01CloudflareApiKeySecretRefArgsDict: TypeAlias = (
        Mapping[str, Any]
    )


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversDns01CloudflareApiKeySecretRefArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        name: Optional[pulumi.Input[str]] = None
    ):
        """
        API key to use to authenticate with Cloudflare.
        Note: using an API token to authenticate is now the recommended method
        as it allows greater control of permissions.
        :param pulumi.Input[str] key: The key of the entry in the Secret resource's `data` field to be used.
               Some instances of this field may be defaulted, in others it may be
               required.
        :param pulumi.Input[str] name: Name of the resource being referred to.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversDns01CloudflareApiTokenSecretRefPatchArgsDict(
        TypedDict
    ):
        """
        API token used to authenticate with Cloudflare.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """

elif False:
    ClusterIssuerSpecAcmeSolversDns01CloudflareApiTokenSecretRefPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversDns01CloudflareApiTokenSecretRefPatchArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        name: Optional[pulumi.Input[str]] = None
    ):
        """
        API token used to authenticate with Cloudflare.
        :param pulumi.Input[str] key: The key of the entry in the Secret resource's `data` field to be used.
               Some instances of this field may be defaulted, in others it may be
               required.
        :param pulumi.Input[str] name: Name of the resource being referred to.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversDns01CloudflareApiTokenSecretRefArgsDict(
        TypedDict
    ):
        """
        API token used to authenticate with Cloudflare.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """

elif False:
    ClusterIssuerSpecAcmeSolversDns01CloudflareApiTokenSecretRefArgsDict: TypeAlias = (
        Mapping[str, Any]
    )


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversDns01CloudflareApiTokenSecretRefArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        name: Optional[pulumi.Input[str]] = None
    ):
        """
        API token used to authenticate with Cloudflare.
        :param pulumi.Input[str] key: The key of the entry in the Secret resource's `data` field to be used.
               Some instances of this field may be defaulted, in others it may be
               required.
        :param pulumi.Input[str] name: Name of the resource being referred to.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversDns01CloudflarePatchArgsDict(TypedDict):
        """
        Use the Cloudflare API to manage DNS01 challenge records.
        """

        api_key_secret_ref: NotRequired[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversDns01CloudflareApiKeySecretRefPatchArgsDict"
            ]
        ]
        api_token_secret_ref: NotRequired[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversDns01CloudflareApiTokenSecretRefPatchArgsDict"
            ]
        ]
        email: NotRequired[pulumi.Input[str]]
        """
        Email of the account, only required when using API key based authentication.
        """

elif False:
    ClusterIssuerSpecAcmeSolversDns01CloudflarePatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversDns01CloudflarePatchArgs:
    def __init__(
        __self__,
        *,
        api_key_secret_ref: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversDns01CloudflareApiKeySecretRefPatchArgs"
            ]
        ] = None,
        api_token_secret_ref: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversDns01CloudflareApiTokenSecretRefPatchArgs"
            ]
        ] = None,
        email: Optional[pulumi.Input[str]] = None
    ):
        """
        Use the Cloudflare API to manage DNS01 challenge records.
        :param pulumi.Input[str] email: Email of the account, only required when using API key based authentication.
        """
        if api_key_secret_ref is not None:
            pulumi.set(__self__, "api_key_secret_ref", api_key_secret_ref)
        if api_token_secret_ref is not None:
            pulumi.set(__self__, "api_token_secret_ref", api_token_secret_ref)
        if email is not None:
            pulumi.set(__self__, "email", email)

    @property
    @pulumi.getter(name="apiKeySecretRef")
    def api_key_secret_ref(
        self,
    ) -> Optional[
        pulumi.Input[
            "ClusterIssuerSpecAcmeSolversDns01CloudflareApiKeySecretRefPatchArgs"
        ]
    ]:
        return pulumi.get(self, "api_key_secret_ref")

    @api_key_secret_ref.setter
    def api_key_secret_ref(
        self,
        value: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversDns01CloudflareApiKeySecretRefPatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "api_key_secret_ref", value)

    @property
    @pulumi.getter(name="apiTokenSecretRef")
    def api_token_secret_ref(
        self,
    ) -> Optional[
        pulumi.Input[
            "ClusterIssuerSpecAcmeSolversDns01CloudflareApiTokenSecretRefPatchArgs"
        ]
    ]:
        return pulumi.get(self, "api_token_secret_ref")

    @api_token_secret_ref.setter
    def api_token_secret_ref(
        self,
        value: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversDns01CloudflareApiTokenSecretRefPatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "api_token_secret_ref", value)

    @property
    @pulumi.getter
    def email(self) -> Optional[pulumi.Input[str]]:
        """
        Email of the account, only required when using API key based authentication.
        """
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversDns01CloudflareArgsDict(TypedDict):
        """
        Use the Cloudflare API to manage DNS01 challenge records.
        """

        api_key_secret_ref: NotRequired[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversDns01CloudflareApiKeySecretRefArgsDict"
            ]
        ]
        api_token_secret_ref: NotRequired[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversDns01CloudflareApiTokenSecretRefArgsDict"
            ]
        ]
        email: NotRequired[pulumi.Input[str]]
        """
        Email of the account, only required when using API key based authentication.
        """

elif False:
    ClusterIssuerSpecAcmeSolversDns01CloudflareArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversDns01CloudflareArgs:
    def __init__(
        __self__,
        *,
        api_key_secret_ref: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversDns01CloudflareApiKeySecretRefArgs"
            ]
        ] = None,
        api_token_secret_ref: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversDns01CloudflareApiTokenSecretRefArgs"
            ]
        ] = None,
        email: Optional[pulumi.Input[str]] = None
    ):
        """
        Use the Cloudflare API to manage DNS01 challenge records.
        :param pulumi.Input[str] email: Email of the account, only required when using API key based authentication.
        """
        if api_key_secret_ref is not None:
            pulumi.set(__self__, "api_key_secret_ref", api_key_secret_ref)
        if api_token_secret_ref is not None:
            pulumi.set(__self__, "api_token_secret_ref", api_token_secret_ref)
        if email is not None:
            pulumi.set(__self__, "email", email)

    @property
    @pulumi.getter(name="apiKeySecretRef")
    def api_key_secret_ref(
        self,
    ) -> Optional[
        pulumi.Input["ClusterIssuerSpecAcmeSolversDns01CloudflareApiKeySecretRefArgs"]
    ]:
        return pulumi.get(self, "api_key_secret_ref")

    @api_key_secret_ref.setter
    def api_key_secret_ref(
        self,
        value: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversDns01CloudflareApiKeySecretRefArgs"
            ]
        ],
    ):
        pulumi.set(self, "api_key_secret_ref", value)

    @property
    @pulumi.getter(name="apiTokenSecretRef")
    def api_token_secret_ref(
        self,
    ) -> Optional[
        pulumi.Input["ClusterIssuerSpecAcmeSolversDns01CloudflareApiTokenSecretRefArgs"]
    ]:
        return pulumi.get(self, "api_token_secret_ref")

    @api_token_secret_ref.setter
    def api_token_secret_ref(
        self,
        value: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversDns01CloudflareApiTokenSecretRefArgs"
            ]
        ],
    ):
        pulumi.set(self, "api_token_secret_ref", value)

    @property
    @pulumi.getter
    def email(self) -> Optional[pulumi.Input[str]]:
        """
        Email of the account, only required when using API key based authentication.
        """
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversDns01DigitaloceanPatchArgsDict(TypedDict):
        """
        Use the DigitalOcean DNS API to manage DNS01 challenge records.
        """

        token_secret_ref: NotRequired[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversDns01DigitaloceanTokenSecretRefPatchArgsDict"
            ]
        ]

elif False:
    ClusterIssuerSpecAcmeSolversDns01DigitaloceanPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversDns01DigitaloceanPatchArgs:
    def __init__(
        __self__,
        *,
        token_secret_ref: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversDns01DigitaloceanTokenSecretRefPatchArgs"
            ]
        ] = None
    ):
        """
        Use the DigitalOcean DNS API to manage DNS01 challenge records.
        """
        if token_secret_ref is not None:
            pulumi.set(__self__, "token_secret_ref", token_secret_ref)

    @property
    @pulumi.getter(name="tokenSecretRef")
    def token_secret_ref(
        self,
    ) -> Optional[
        pulumi.Input[
            "ClusterIssuerSpecAcmeSolversDns01DigitaloceanTokenSecretRefPatchArgs"
        ]
    ]:
        return pulumi.get(self, "token_secret_ref")

    @token_secret_ref.setter
    def token_secret_ref(
        self,
        value: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversDns01DigitaloceanTokenSecretRefPatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "token_secret_ref", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversDns01DigitaloceanTokenSecretRefPatchArgsDict(
        TypedDict
    ):
        """
        A reference to a specific 'key' within a Secret resource.
        In some instances, `key` is a required field.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """

elif False:
    ClusterIssuerSpecAcmeSolversDns01DigitaloceanTokenSecretRefPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversDns01DigitaloceanTokenSecretRefPatchArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        name: Optional[pulumi.Input[str]] = None
    ):
        """
        A reference to a specific 'key' within a Secret resource.
        In some instances, `key` is a required field.
        :param pulumi.Input[str] key: The key of the entry in the Secret resource's `data` field to be used.
               Some instances of this field may be defaulted, in others it may be
               required.
        :param pulumi.Input[str] name: Name of the resource being referred to.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversDns01DigitaloceanTokenSecretRefArgsDict(
        TypedDict
    ):
        """
        A reference to a specific 'key' within a Secret resource.
        In some instances, `key` is a required field.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """

elif False:
    ClusterIssuerSpecAcmeSolversDns01DigitaloceanTokenSecretRefArgsDict: TypeAlias = (
        Mapping[str, Any]
    )


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversDns01DigitaloceanTokenSecretRefArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        name: Optional[pulumi.Input[str]] = None
    ):
        """
        A reference to a specific 'key' within a Secret resource.
        In some instances, `key` is a required field.
        :param pulumi.Input[str] key: The key of the entry in the Secret resource's `data` field to be used.
               Some instances of this field may be defaulted, in others it may be
               required.
        :param pulumi.Input[str] name: Name of the resource being referred to.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversDns01DigitaloceanArgsDict(TypedDict):
        """
        Use the DigitalOcean DNS API to manage DNS01 challenge records.
        """

        token_secret_ref: NotRequired[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversDns01DigitaloceanTokenSecretRefArgsDict"
            ]
        ]

elif False:
    ClusterIssuerSpecAcmeSolversDns01DigitaloceanArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversDns01DigitaloceanArgs:
    def __init__(
        __self__,
        *,
        token_secret_ref: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversDns01DigitaloceanTokenSecretRefArgs"
            ]
        ] = None
    ):
        """
        Use the DigitalOcean DNS API to manage DNS01 challenge records.
        """
        if token_secret_ref is not None:
            pulumi.set(__self__, "token_secret_ref", token_secret_ref)

    @property
    @pulumi.getter(name="tokenSecretRef")
    def token_secret_ref(
        self,
    ) -> Optional[
        pulumi.Input["ClusterIssuerSpecAcmeSolversDns01DigitaloceanTokenSecretRefArgs"]
    ]:
        return pulumi.get(self, "token_secret_ref")

    @token_secret_ref.setter
    def token_secret_ref(
        self,
        value: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversDns01DigitaloceanTokenSecretRefArgs"
            ]
        ],
    ):
        pulumi.set(self, "token_secret_ref", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversDns01PatchArgsDict(TypedDict):
        """
        Configures cert-manager to attempt to complete authorizations by
        performing the DNS01 challenge flow.
        """

        acme_dns: NotRequired[
            pulumi.Input["ClusterIssuerSpecAcmeSolversDns01AcmeDNSPatchArgsDict"]
        ]
        akamai: NotRequired[
            pulumi.Input["ClusterIssuerSpecAcmeSolversDns01AkamaiPatchArgsDict"]
        ]
        azure_dns: NotRequired[
            pulumi.Input["ClusterIssuerSpecAcmeSolversDns01AzureDNSPatchArgsDict"]
        ]
        cloud_dns: NotRequired[
            pulumi.Input["ClusterIssuerSpecAcmeSolversDns01CloudDNSPatchArgsDict"]
        ]
        cloudflare: NotRequired[
            pulumi.Input["ClusterIssuerSpecAcmeSolversDns01CloudflarePatchArgsDict"]
        ]
        cname_strategy: NotRequired[pulumi.Input[str]]
        """
        CNAMEStrategy configures how the DNS01 provider should handle CNAME
        records when found in DNS zones.
        """
        digitalocean: NotRequired[
            pulumi.Input["ClusterIssuerSpecAcmeSolversDns01DigitaloceanPatchArgsDict"]
        ]
        rfc2136: NotRequired[
            pulumi.Input["ClusterIssuerSpecAcmeSolversDns01Rfc2136PatchArgsDict"]
        ]
        route53: NotRequired[
            pulumi.Input["ClusterIssuerSpecAcmeSolversDns01Route53PatchArgsDict"]
        ]
        webhook: NotRequired[
            pulumi.Input["ClusterIssuerSpecAcmeSolversDns01WebhookPatchArgsDict"]
        ]

elif False:
    ClusterIssuerSpecAcmeSolversDns01PatchArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversDns01PatchArgs:
    def __init__(
        __self__,
        *,
        acme_dns: Optional[
            pulumi.Input["ClusterIssuerSpecAcmeSolversDns01AcmeDNSPatchArgs"]
        ] = None,
        akamai: Optional[
            pulumi.Input["ClusterIssuerSpecAcmeSolversDns01AkamaiPatchArgs"]
        ] = None,
        azure_dns: Optional[
            pulumi.Input["ClusterIssuerSpecAcmeSolversDns01AzureDNSPatchArgs"]
        ] = None,
        cloud_dns: Optional[
            pulumi.Input["ClusterIssuerSpecAcmeSolversDns01CloudDNSPatchArgs"]
        ] = None,
        cloudflare: Optional[
            pulumi.Input["ClusterIssuerSpecAcmeSolversDns01CloudflarePatchArgs"]
        ] = None,
        cname_strategy: Optional[pulumi.Input[str]] = None,
        digitalocean: Optional[
            pulumi.Input["ClusterIssuerSpecAcmeSolversDns01DigitaloceanPatchArgs"]
        ] = None,
        rfc2136: Optional[
            pulumi.Input["ClusterIssuerSpecAcmeSolversDns01Rfc2136PatchArgs"]
        ] = None,
        route53: Optional[
            pulumi.Input["ClusterIssuerSpecAcmeSolversDns01Route53PatchArgs"]
        ] = None,
        webhook: Optional[
            pulumi.Input["ClusterIssuerSpecAcmeSolversDns01WebhookPatchArgs"]
        ] = None
    ):
        """
        Configures cert-manager to attempt to complete authorizations by
        performing the DNS01 challenge flow.
        :param pulumi.Input[str] cname_strategy: CNAMEStrategy configures how the DNS01 provider should handle CNAME
               records when found in DNS zones.
        """
        if acme_dns is not None:
            pulumi.set(__self__, "acme_dns", acme_dns)
        if akamai is not None:
            pulumi.set(__self__, "akamai", akamai)
        if azure_dns is not None:
            pulumi.set(__self__, "azure_dns", azure_dns)
        if cloud_dns is not None:
            pulumi.set(__self__, "cloud_dns", cloud_dns)
        if cloudflare is not None:
            pulumi.set(__self__, "cloudflare", cloudflare)
        if cname_strategy is not None:
            pulumi.set(__self__, "cname_strategy", cname_strategy)
        if digitalocean is not None:
            pulumi.set(__self__, "digitalocean", digitalocean)
        if rfc2136 is not None:
            pulumi.set(__self__, "rfc2136", rfc2136)
        if route53 is not None:
            pulumi.set(__self__, "route53", route53)
        if webhook is not None:
            pulumi.set(__self__, "webhook", webhook)

    @property
    @pulumi.getter(name="acmeDNS")
    def acme_dns(
        self,
    ) -> Optional[pulumi.Input["ClusterIssuerSpecAcmeSolversDns01AcmeDNSPatchArgs"]]:
        return pulumi.get(self, "acme_dns")

    @acme_dns.setter
    def acme_dns(
        self,
        value: Optional[
            pulumi.Input["ClusterIssuerSpecAcmeSolversDns01AcmeDNSPatchArgs"]
        ],
    ):
        pulumi.set(self, "acme_dns", value)

    @property
    @pulumi.getter
    def akamai(
        self,
    ) -> Optional[pulumi.Input["ClusterIssuerSpecAcmeSolversDns01AkamaiPatchArgs"]]:
        return pulumi.get(self, "akamai")

    @akamai.setter
    def akamai(
        self,
        value: Optional[
            pulumi.Input["ClusterIssuerSpecAcmeSolversDns01AkamaiPatchArgs"]
        ],
    ):
        pulumi.set(self, "akamai", value)

    @property
    @pulumi.getter(name="azureDNS")
    def azure_dns(
        self,
    ) -> Optional[pulumi.Input["ClusterIssuerSpecAcmeSolversDns01AzureDNSPatchArgs"]]:
        return pulumi.get(self, "azure_dns")

    @azure_dns.setter
    def azure_dns(
        self,
        value: Optional[
            pulumi.Input["ClusterIssuerSpecAcmeSolversDns01AzureDNSPatchArgs"]
        ],
    ):
        pulumi.set(self, "azure_dns", value)

    @property
    @pulumi.getter(name="cloudDNS")
    def cloud_dns(
        self,
    ) -> Optional[pulumi.Input["ClusterIssuerSpecAcmeSolversDns01CloudDNSPatchArgs"]]:
        return pulumi.get(self, "cloud_dns")

    @cloud_dns.setter
    def cloud_dns(
        self,
        value: Optional[
            pulumi.Input["ClusterIssuerSpecAcmeSolversDns01CloudDNSPatchArgs"]
        ],
    ):
        pulumi.set(self, "cloud_dns", value)

    @property
    @pulumi.getter
    def cloudflare(
        self,
    ) -> Optional[pulumi.Input["ClusterIssuerSpecAcmeSolversDns01CloudflarePatchArgs"]]:
        return pulumi.get(self, "cloudflare")

    @cloudflare.setter
    def cloudflare(
        self,
        value: Optional[
            pulumi.Input["ClusterIssuerSpecAcmeSolversDns01CloudflarePatchArgs"]
        ],
    ):
        pulumi.set(self, "cloudflare", value)

    @property
    @pulumi.getter(name="cnameStrategy")
    def cname_strategy(self) -> Optional[pulumi.Input[str]]:
        """
        CNAMEStrategy configures how the DNS01 provider should handle CNAME
        records when found in DNS zones.
        """
        return pulumi.get(self, "cname_strategy")

    @cname_strategy.setter
    def cname_strategy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cname_strategy", value)

    @property
    @pulumi.getter
    def digitalocean(
        self,
    ) -> Optional[
        pulumi.Input["ClusterIssuerSpecAcmeSolversDns01DigitaloceanPatchArgs"]
    ]:
        return pulumi.get(self, "digitalocean")

    @digitalocean.setter
    def digitalocean(
        self,
        value: Optional[
            pulumi.Input["ClusterIssuerSpecAcmeSolversDns01DigitaloceanPatchArgs"]
        ],
    ):
        pulumi.set(self, "digitalocean", value)

    @property
    @pulumi.getter
    def rfc2136(
        self,
    ) -> Optional[pulumi.Input["ClusterIssuerSpecAcmeSolversDns01Rfc2136PatchArgs"]]:
        return pulumi.get(self, "rfc2136")

    @rfc2136.setter
    def rfc2136(
        self,
        value: Optional[
            pulumi.Input["ClusterIssuerSpecAcmeSolversDns01Rfc2136PatchArgs"]
        ],
    ):
        pulumi.set(self, "rfc2136", value)

    @property
    @pulumi.getter
    def route53(
        self,
    ) -> Optional[pulumi.Input["ClusterIssuerSpecAcmeSolversDns01Route53PatchArgs"]]:
        return pulumi.get(self, "route53")

    @route53.setter
    def route53(
        self,
        value: Optional[
            pulumi.Input["ClusterIssuerSpecAcmeSolversDns01Route53PatchArgs"]
        ],
    ):
        pulumi.set(self, "route53", value)

    @property
    @pulumi.getter
    def webhook(
        self,
    ) -> Optional[pulumi.Input["ClusterIssuerSpecAcmeSolversDns01WebhookPatchArgs"]]:
        return pulumi.get(self, "webhook")

    @webhook.setter
    def webhook(
        self,
        value: Optional[
            pulumi.Input["ClusterIssuerSpecAcmeSolversDns01WebhookPatchArgs"]
        ],
    ):
        pulumi.set(self, "webhook", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversDns01Rfc2136PatchArgsDict(TypedDict):
        """
        Use RFC2136 ("Dynamic Updates in the Domain Name System") (https://datatracker.ietf.org/doc/rfc2136/)
        to manage DNS01 challenge records.
        """

        nameserver: NotRequired[pulumi.Input[str]]
        """
        The IP address or hostname of an authoritative DNS server supporting
        RFC2136 in the form host:port. If the host is an IPv6 address it must be
        enclosed in square brackets (e.g [2001:db8::1]) ; port is optional.
        This field is required.
        """
        tsig_algorithm: NotRequired[pulumi.Input[str]]
        """
        The TSIG Algorithm configured in the DNS supporting RFC2136. Used only
        when ``tsigSecretSecretRef`` and ``tsigKeyName`` are defined.
        Supported values are (case-insensitive): ``HMACMD5`` (default),
        ``HMACSHA1``, ``HMACSHA256`` or ``HMACSHA512``.
        """
        tsig_key_name: NotRequired[pulumi.Input[str]]
        """
        The TSIG Key name configured in the DNS.
        If ``tsigSecretSecretRef`` is defined, this field is required.
        """
        tsig_secret_secret_ref: NotRequired[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversDns01Rfc2136TsigSecretSecretRefPatchArgsDict"
            ]
        ]

elif False:
    ClusterIssuerSpecAcmeSolversDns01Rfc2136PatchArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversDns01Rfc2136PatchArgs:
    def __init__(
        __self__,
        *,
        nameserver: Optional[pulumi.Input[str]] = None,
        tsig_algorithm: Optional[pulumi.Input[str]] = None,
        tsig_key_name: Optional[pulumi.Input[str]] = None,
        tsig_secret_secret_ref: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversDns01Rfc2136TsigSecretSecretRefPatchArgs"
            ]
        ] = None
    ):
        """
        Use RFC2136 ("Dynamic Updates in the Domain Name System") (https://datatracker.ietf.org/doc/rfc2136/)
        to manage DNS01 challenge records.
        :param pulumi.Input[str] nameserver: The IP address or hostname of an authoritative DNS server supporting
               RFC2136 in the form host:port. If the host is an IPv6 address it must be
               enclosed in square brackets (e.g [2001:db8::1]) ; port is optional.
               This field is required.
        :param pulumi.Input[str] tsig_algorithm: The TSIG Algorithm configured in the DNS supporting RFC2136. Used only
               when ``tsigSecretSecretRef`` and ``tsigKeyName`` are defined.
               Supported values are (case-insensitive): ``HMACMD5`` (default),
               ``HMACSHA1``, ``HMACSHA256`` or ``HMACSHA512``.
        :param pulumi.Input[str] tsig_key_name: The TSIG Key name configured in the DNS.
               If ``tsigSecretSecretRef`` is defined, this field is required.
        """
        if nameserver is not None:
            pulumi.set(__self__, "nameserver", nameserver)
        if tsig_algorithm is not None:
            pulumi.set(__self__, "tsig_algorithm", tsig_algorithm)
        if tsig_key_name is not None:
            pulumi.set(__self__, "tsig_key_name", tsig_key_name)
        if tsig_secret_secret_ref is not None:
            pulumi.set(__self__, "tsig_secret_secret_ref", tsig_secret_secret_ref)

    @property
    @pulumi.getter
    def nameserver(self) -> Optional[pulumi.Input[str]]:
        """
        The IP address or hostname of an authoritative DNS server supporting
        RFC2136 in the form host:port. If the host is an IPv6 address it must be
        enclosed in square brackets (e.g [2001:db8::1]) ; port is optional.
        This field is required.
        """
        return pulumi.get(self, "nameserver")

    @nameserver.setter
    def nameserver(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nameserver", value)

    @property
    @pulumi.getter(name="tsigAlgorithm")
    def tsig_algorithm(self) -> Optional[pulumi.Input[str]]:
        """
        The TSIG Algorithm configured in the DNS supporting RFC2136. Used only
        when ``tsigSecretSecretRef`` and ``tsigKeyName`` are defined.
        Supported values are (case-insensitive): ``HMACMD5`` (default),
        ``HMACSHA1``, ``HMACSHA256`` or ``HMACSHA512``.
        """
        return pulumi.get(self, "tsig_algorithm")

    @tsig_algorithm.setter
    def tsig_algorithm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tsig_algorithm", value)

    @property
    @pulumi.getter(name="tsigKeyName")
    def tsig_key_name(self) -> Optional[pulumi.Input[str]]:
        """
        The TSIG Key name configured in the DNS.
        If ``tsigSecretSecretRef`` is defined, this field is required.
        """
        return pulumi.get(self, "tsig_key_name")

    @tsig_key_name.setter
    def tsig_key_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tsig_key_name", value)

    @property
    @pulumi.getter(name="tsigSecretSecretRef")
    def tsig_secret_secret_ref(
        self,
    ) -> Optional[
        pulumi.Input[
            "ClusterIssuerSpecAcmeSolversDns01Rfc2136TsigSecretSecretRefPatchArgs"
        ]
    ]:
        return pulumi.get(self, "tsig_secret_secret_ref")

    @tsig_secret_secret_ref.setter
    def tsig_secret_secret_ref(
        self,
        value: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversDns01Rfc2136TsigSecretSecretRefPatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "tsig_secret_secret_ref", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversDns01Rfc2136TsigSecretSecretRefPatchArgsDict(
        TypedDict
    ):
        """
        The name of the secret containing the TSIG value.
        If ``tsigKeyName`` is defined, this field is required.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """

elif False:
    ClusterIssuerSpecAcmeSolversDns01Rfc2136TsigSecretSecretRefPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversDns01Rfc2136TsigSecretSecretRefPatchArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        name: Optional[pulumi.Input[str]] = None
    ):
        """
        The name of the secret containing the TSIG value.
        If ``tsigKeyName`` is defined, this field is required.
        :param pulumi.Input[str] key: The key of the entry in the Secret resource's `data` field to be used.
               Some instances of this field may be defaulted, in others it may be
               required.
        :param pulumi.Input[str] name: Name of the resource being referred to.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversDns01Rfc2136TsigSecretSecretRefArgsDict(
        TypedDict
    ):
        """
        The name of the secret containing the TSIG value.
        If ``tsigKeyName`` is defined, this field is required.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """

elif False:
    ClusterIssuerSpecAcmeSolversDns01Rfc2136TsigSecretSecretRefArgsDict: TypeAlias = (
        Mapping[str, Any]
    )


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversDns01Rfc2136TsigSecretSecretRefArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        name: Optional[pulumi.Input[str]] = None
    ):
        """
        The name of the secret containing the TSIG value.
        If ``tsigKeyName`` is defined, this field is required.
        :param pulumi.Input[str] key: The key of the entry in the Secret resource's `data` field to be used.
               Some instances of this field may be defaulted, in others it may be
               required.
        :param pulumi.Input[str] name: Name of the resource being referred to.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversDns01Rfc2136ArgsDict(TypedDict):
        """
        Use RFC2136 ("Dynamic Updates in the Domain Name System") (https://datatracker.ietf.org/doc/rfc2136/)
        to manage DNS01 challenge records.
        """

        nameserver: NotRequired[pulumi.Input[str]]
        """
        The IP address or hostname of an authoritative DNS server supporting
        RFC2136 in the form host:port. If the host is an IPv6 address it must be
        enclosed in square brackets (e.g [2001:db8::1]) ; port is optional.
        This field is required.
        """
        tsig_algorithm: NotRequired[pulumi.Input[str]]
        """
        The TSIG Algorithm configured in the DNS supporting RFC2136. Used only
        when ``tsigSecretSecretRef`` and ``tsigKeyName`` are defined.
        Supported values are (case-insensitive): ``HMACMD5`` (default),
        ``HMACSHA1``, ``HMACSHA256`` or ``HMACSHA512``.
        """
        tsig_key_name: NotRequired[pulumi.Input[str]]
        """
        The TSIG Key name configured in the DNS.
        If ``tsigSecretSecretRef`` is defined, this field is required.
        """
        tsig_secret_secret_ref: NotRequired[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversDns01Rfc2136TsigSecretSecretRefArgsDict"
            ]
        ]

elif False:
    ClusterIssuerSpecAcmeSolversDns01Rfc2136ArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversDns01Rfc2136Args:
    def __init__(
        __self__,
        *,
        nameserver: Optional[pulumi.Input[str]] = None,
        tsig_algorithm: Optional[pulumi.Input[str]] = None,
        tsig_key_name: Optional[pulumi.Input[str]] = None,
        tsig_secret_secret_ref: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversDns01Rfc2136TsigSecretSecretRefArgs"
            ]
        ] = None
    ):
        """
        Use RFC2136 ("Dynamic Updates in the Domain Name System") (https://datatracker.ietf.org/doc/rfc2136/)
        to manage DNS01 challenge records.
        :param pulumi.Input[str] nameserver: The IP address or hostname of an authoritative DNS server supporting
               RFC2136 in the form host:port. If the host is an IPv6 address it must be
               enclosed in square brackets (e.g [2001:db8::1]) ; port is optional.
               This field is required.
        :param pulumi.Input[str] tsig_algorithm: The TSIG Algorithm configured in the DNS supporting RFC2136. Used only
               when ``tsigSecretSecretRef`` and ``tsigKeyName`` are defined.
               Supported values are (case-insensitive): ``HMACMD5`` (default),
               ``HMACSHA1``, ``HMACSHA256`` or ``HMACSHA512``.
        :param pulumi.Input[str] tsig_key_name: The TSIG Key name configured in the DNS.
               If ``tsigSecretSecretRef`` is defined, this field is required.
        """
        if nameserver is not None:
            pulumi.set(__self__, "nameserver", nameserver)
        if tsig_algorithm is not None:
            pulumi.set(__self__, "tsig_algorithm", tsig_algorithm)
        if tsig_key_name is not None:
            pulumi.set(__self__, "tsig_key_name", tsig_key_name)
        if tsig_secret_secret_ref is not None:
            pulumi.set(__self__, "tsig_secret_secret_ref", tsig_secret_secret_ref)

    @property
    @pulumi.getter
    def nameserver(self) -> Optional[pulumi.Input[str]]:
        """
        The IP address or hostname of an authoritative DNS server supporting
        RFC2136 in the form host:port. If the host is an IPv6 address it must be
        enclosed in square brackets (e.g [2001:db8::1]) ; port is optional.
        This field is required.
        """
        return pulumi.get(self, "nameserver")

    @nameserver.setter
    def nameserver(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nameserver", value)

    @property
    @pulumi.getter(name="tsigAlgorithm")
    def tsig_algorithm(self) -> Optional[pulumi.Input[str]]:
        """
        The TSIG Algorithm configured in the DNS supporting RFC2136. Used only
        when ``tsigSecretSecretRef`` and ``tsigKeyName`` are defined.
        Supported values are (case-insensitive): ``HMACMD5`` (default),
        ``HMACSHA1``, ``HMACSHA256`` or ``HMACSHA512``.
        """
        return pulumi.get(self, "tsig_algorithm")

    @tsig_algorithm.setter
    def tsig_algorithm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tsig_algorithm", value)

    @property
    @pulumi.getter(name="tsigKeyName")
    def tsig_key_name(self) -> Optional[pulumi.Input[str]]:
        """
        The TSIG Key name configured in the DNS.
        If ``tsigSecretSecretRef`` is defined, this field is required.
        """
        return pulumi.get(self, "tsig_key_name")

    @tsig_key_name.setter
    def tsig_key_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tsig_key_name", value)

    @property
    @pulumi.getter(name="tsigSecretSecretRef")
    def tsig_secret_secret_ref(
        self,
    ) -> Optional[
        pulumi.Input["ClusterIssuerSpecAcmeSolversDns01Rfc2136TsigSecretSecretRefArgs"]
    ]:
        return pulumi.get(self, "tsig_secret_secret_ref")

    @tsig_secret_secret_ref.setter
    def tsig_secret_secret_ref(
        self,
        value: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversDns01Rfc2136TsigSecretSecretRefArgs"
            ]
        ],
    ):
        pulumi.set(self, "tsig_secret_secret_ref", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversDns01Route53AccessKeyIDSecretRefPatchArgsDict(
        TypedDict
    ):
        """
        The SecretAccessKey is used for authentication. If set, pull the AWS
        access key ID from a key within a Kubernetes Secret.
        Cannot be set when AccessKeyID is set.
        If neither the Access Key nor Key ID are set, we fall-back to using env
        vars, shared credentials file or AWS Instance metadata,
        see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """

elif False:
    ClusterIssuerSpecAcmeSolversDns01Route53AccessKeyIDSecretRefPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversDns01Route53AccessKeyIDSecretRefPatchArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        name: Optional[pulumi.Input[str]] = None
    ):
        """
        The SecretAccessKey is used for authentication. If set, pull the AWS
        access key ID from a key within a Kubernetes Secret.
        Cannot be set when AccessKeyID is set.
        If neither the Access Key nor Key ID are set, we fall-back to using env
        vars, shared credentials file or AWS Instance metadata,
        see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
        :param pulumi.Input[str] key: The key of the entry in the Secret resource's `data` field to be used.
               Some instances of this field may be defaulted, in others it may be
               required.
        :param pulumi.Input[str] name: Name of the resource being referred to.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversDns01Route53AccessKeyIDSecretRefArgsDict(
        TypedDict
    ):
        """
        The SecretAccessKey is used for authentication. If set, pull the AWS
        access key ID from a key within a Kubernetes Secret.
        Cannot be set when AccessKeyID is set.
        If neither the Access Key nor Key ID are set, we fall-back to using env
        vars, shared credentials file or AWS Instance metadata,
        see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """

elif False:
    ClusterIssuerSpecAcmeSolversDns01Route53AccessKeyIDSecretRefArgsDict: TypeAlias = (
        Mapping[str, Any]
    )


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversDns01Route53AccessKeyIDSecretRefArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        name: Optional[pulumi.Input[str]] = None
    ):
        """
        The SecretAccessKey is used for authentication. If set, pull the AWS
        access key ID from a key within a Kubernetes Secret.
        Cannot be set when AccessKeyID is set.
        If neither the Access Key nor Key ID are set, we fall-back to using env
        vars, shared credentials file or AWS Instance metadata,
        see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
        :param pulumi.Input[str] key: The key of the entry in the Secret resource's `data` field to be used.
               Some instances of this field may be defaulted, in others it may be
               required.
        :param pulumi.Input[str] name: Name of the resource being referred to.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversDns01Route53AuthKubernetesPatchArgsDict(
        TypedDict
    ):
        """
        Kubernetes authenticates with Route53 using AssumeRoleWithWebIdentity
        by passing a bound ServiceAccount token.
        """

        service_account_ref: NotRequired[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversDns01Route53AuthKubernetesServiceAccountRefPatchArgsDict"
            ]
        ]

elif False:
    ClusterIssuerSpecAcmeSolversDns01Route53AuthKubernetesPatchArgsDict: TypeAlias = (
        Mapping[str, Any]
    )


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversDns01Route53AuthKubernetesPatchArgs:
    def __init__(
        __self__,
        *,
        service_account_ref: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversDns01Route53AuthKubernetesServiceAccountRefPatchArgs"
            ]
        ] = None
    ):
        """
        Kubernetes authenticates with Route53 using AssumeRoleWithWebIdentity
        by passing a bound ServiceAccount token.
        """
        if service_account_ref is not None:
            pulumi.set(__self__, "service_account_ref", service_account_ref)

    @property
    @pulumi.getter(name="serviceAccountRef")
    def service_account_ref(
        self,
    ) -> Optional[
        pulumi.Input[
            "ClusterIssuerSpecAcmeSolversDns01Route53AuthKubernetesServiceAccountRefPatchArgs"
        ]
    ]:
        return pulumi.get(self, "service_account_ref")

    @service_account_ref.setter
    def service_account_ref(
        self,
        value: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversDns01Route53AuthKubernetesServiceAccountRefPatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "service_account_ref", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversDns01Route53AuthKubernetesServiceAccountRefPatchArgsDict(
        TypedDict
    ):
        """
        A reference to a service account that will be used to request a bound
        token (also known as "projected token"). To use this field, you must
        configure an RBAC rule to let cert-manager request a token.
        """

        audiences: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        TokenAudiences is an optional list of audiences to include in the
        token passed to AWS. The default token consisting of the issuer's namespace
        and name is always included.
        If unset the audience defaults to `sts.amazonaws.com`.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the ServiceAccount used to request a token.
        """

elif False:
    ClusterIssuerSpecAcmeSolversDns01Route53AuthKubernetesServiceAccountRefPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversDns01Route53AuthKubernetesServiceAccountRefPatchArgs:
    def __init__(
        __self__,
        *,
        audiences: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        name: Optional[pulumi.Input[str]] = None
    ):
        """
        A reference to a service account that will be used to request a bound
        token (also known as "projected token"). To use this field, you must
        configure an RBAC rule to let cert-manager request a token.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] audiences: TokenAudiences is an optional list of audiences to include in the
               token passed to AWS. The default token consisting of the issuer's namespace
               and name is always included.
               If unset the audience defaults to `sts.amazonaws.com`.
        :param pulumi.Input[str] name: Name of the ServiceAccount used to request a token.
        """
        if audiences is not None:
            pulumi.set(__self__, "audiences", audiences)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def audiences(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        TokenAudiences is an optional list of audiences to include in the
        token passed to AWS. The default token consisting of the issuer's namespace
        and name is always included.
        If unset the audience defaults to `sts.amazonaws.com`.
        """
        return pulumi.get(self, "audiences")

    @audiences.setter
    def audiences(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "audiences", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the ServiceAccount used to request a token.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversDns01Route53AuthKubernetesServiceAccountRefArgsDict(
        TypedDict
    ):
        """
        A reference to a service account that will be used to request a bound
        token (also known as "projected token"). To use this field, you must
        configure an RBAC rule to let cert-manager request a token.
        """

        audiences: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        TokenAudiences is an optional list of audiences to include in the
        token passed to AWS. The default token consisting of the issuer's namespace
        and name is always included.
        If unset the audience defaults to `sts.amazonaws.com`.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the ServiceAccount used to request a token.
        """

elif False:
    ClusterIssuerSpecAcmeSolversDns01Route53AuthKubernetesServiceAccountRefArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversDns01Route53AuthKubernetesServiceAccountRefArgs:
    def __init__(
        __self__,
        *,
        audiences: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        name: Optional[pulumi.Input[str]] = None
    ):
        """
        A reference to a service account that will be used to request a bound
        token (also known as "projected token"). To use this field, you must
        configure an RBAC rule to let cert-manager request a token.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] audiences: TokenAudiences is an optional list of audiences to include in the
               token passed to AWS. The default token consisting of the issuer's namespace
               and name is always included.
               If unset the audience defaults to `sts.amazonaws.com`.
        :param pulumi.Input[str] name: Name of the ServiceAccount used to request a token.
        """
        if audiences is not None:
            pulumi.set(__self__, "audiences", audiences)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def audiences(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        TokenAudiences is an optional list of audiences to include in the
        token passed to AWS. The default token consisting of the issuer's namespace
        and name is always included.
        If unset the audience defaults to `sts.amazonaws.com`.
        """
        return pulumi.get(self, "audiences")

    @audiences.setter
    def audiences(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "audiences", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the ServiceAccount used to request a token.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversDns01Route53AuthKubernetesArgsDict(TypedDict):
        """
        Kubernetes authenticates with Route53 using AssumeRoleWithWebIdentity
        by passing a bound ServiceAccount token.
        """

        service_account_ref: NotRequired[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversDns01Route53AuthKubernetesServiceAccountRefArgsDict"
            ]
        ]

elif False:
    ClusterIssuerSpecAcmeSolversDns01Route53AuthKubernetesArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversDns01Route53AuthKubernetesArgs:
    def __init__(
        __self__,
        *,
        service_account_ref: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversDns01Route53AuthKubernetesServiceAccountRefArgs"
            ]
        ] = None
    ):
        """
        Kubernetes authenticates with Route53 using AssumeRoleWithWebIdentity
        by passing a bound ServiceAccount token.
        """
        if service_account_ref is not None:
            pulumi.set(__self__, "service_account_ref", service_account_ref)

    @property
    @pulumi.getter(name="serviceAccountRef")
    def service_account_ref(
        self,
    ) -> Optional[
        pulumi.Input[
            "ClusterIssuerSpecAcmeSolversDns01Route53AuthKubernetesServiceAccountRefArgs"
        ]
    ]:
        return pulumi.get(self, "service_account_ref")

    @service_account_ref.setter
    def service_account_ref(
        self,
        value: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversDns01Route53AuthKubernetesServiceAccountRefArgs"
            ]
        ],
    ):
        pulumi.set(self, "service_account_ref", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversDns01Route53AuthPatchArgsDict(TypedDict):
        """
        Auth configures how cert-manager authenticates.
        """

        kubernetes: NotRequired[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversDns01Route53AuthKubernetesPatchArgsDict"
            ]
        ]

elif False:
    ClusterIssuerSpecAcmeSolversDns01Route53AuthPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversDns01Route53AuthPatchArgs:
    def __init__(
        __self__,
        *,
        kubernetes: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversDns01Route53AuthKubernetesPatchArgs"
            ]
        ] = None
    ):
        """
        Auth configures how cert-manager authenticates.
        """
        if kubernetes is not None:
            pulumi.set(__self__, "kubernetes", kubernetes)

    @property
    @pulumi.getter
    def kubernetes(
        self,
    ) -> Optional[
        pulumi.Input["ClusterIssuerSpecAcmeSolversDns01Route53AuthKubernetesPatchArgs"]
    ]:
        return pulumi.get(self, "kubernetes")

    @kubernetes.setter
    def kubernetes(
        self,
        value: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversDns01Route53AuthKubernetesPatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "kubernetes", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversDns01Route53AuthArgsDict(TypedDict):
        """
        Auth configures how cert-manager authenticates.
        """

        kubernetes: NotRequired[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversDns01Route53AuthKubernetesArgsDict"
            ]
        ]

elif False:
    ClusterIssuerSpecAcmeSolversDns01Route53AuthArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversDns01Route53AuthArgs:
    def __init__(
        __self__,
        *,
        kubernetes: Optional[
            pulumi.Input["ClusterIssuerSpecAcmeSolversDns01Route53AuthKubernetesArgs"]
        ] = None
    ):
        """
        Auth configures how cert-manager authenticates.
        """
        if kubernetes is not None:
            pulumi.set(__self__, "kubernetes", kubernetes)

    @property
    @pulumi.getter
    def kubernetes(
        self,
    ) -> Optional[
        pulumi.Input["ClusterIssuerSpecAcmeSolversDns01Route53AuthKubernetesArgs"]
    ]:
        return pulumi.get(self, "kubernetes")

    @kubernetes.setter
    def kubernetes(
        self,
        value: Optional[
            pulumi.Input["ClusterIssuerSpecAcmeSolversDns01Route53AuthKubernetesArgs"]
        ],
    ):
        pulumi.set(self, "kubernetes", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversDns01Route53PatchArgsDict(TypedDict):
        """
        Use the AWS Route53 API to manage DNS01 challenge records.
        """

        access_key_id: NotRequired[pulumi.Input[str]]
        """
        The AccessKeyID is used for authentication.
        Cannot be set when SecretAccessKeyID is set.
        If neither the Access Key nor Key ID are set, we fall-back to using env
        vars, shared credentials file or AWS Instance metadata,
        see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
        """
        access_key_id_secret_ref: NotRequired[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversDns01Route53AccessKeyIDSecretRefPatchArgsDict"
            ]
        ]
        auth: NotRequired[
            pulumi.Input["ClusterIssuerSpecAcmeSolversDns01Route53AuthPatchArgsDict"]
        ]
        hosted_zone_id: NotRequired[pulumi.Input[str]]
        """
        If set, the provider will manage only this zone in Route53 and will not do a lookup using the route53:ListHostedZonesByName api call.
        """
        region: NotRequired[pulumi.Input[str]]
        """
        Override the AWS region.

        Route53 is a global service and does not have regional endpoints but the
        region specified here (or via environment variables) is used as a hint to
        help compute the correct AWS credential scope and partition when it
        connects to Route53. See:
        - [Amazon Route 53 endpoints and quotas](https://docs.aws.amazon.com/general/latest/gr/r53.html)
        - [Global services](https://docs.aws.amazon.com/whitepapers/latest/aws-fault-isolation-boundaries/global-services.html)

        If you omit this region field, cert-manager will use the region from
        AWS_REGION and AWS_DEFAULT_REGION environment variables, if they are set
        in the cert-manager controller Pod.

        The `region` field is not needed if you use [IAM Roles for Service Accounts (IRSA)](https://docs.aws.amazon.com/eks/latest/userguide/iam-roles-for-service-accounts.html).
        Instead an AWS_REGION environment variable is added to the cert-manager controller Pod by:
        [Amazon EKS Pod Identity Webhook](https://github.com/aws/amazon-eks-pod-identity-webhook).
        In this case this `region` field value is ignored.

        The `region` field is not needed if you use [EKS Pod Identities](https://docs.aws.amazon.com/eks/latest/userguide/pod-identities.html).
        Instead an AWS_REGION environment variable is added to the cert-manager controller Pod by:
        [Amazon EKS Pod Identity Agent](https://github.com/aws/eks-pod-identity-agent),
        In this case this `region` field value is ignored.
        """
        role: NotRequired[pulumi.Input[str]]
        """
        Role is a Role ARN which the Route53 provider will assume using either the explicit credentials AccessKeyID/SecretAccessKey
        or the inferred credentials from environment variables, shared credentials file or AWS Instance metadata
        """
        secret_access_key_secret_ref: NotRequired[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversDns01Route53SecretAccessKeySecretRefPatchArgsDict"
            ]
        ]

elif False:
    ClusterIssuerSpecAcmeSolversDns01Route53PatchArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversDns01Route53PatchArgs:
    def __init__(
        __self__,
        *,
        access_key_id: Optional[pulumi.Input[str]] = None,
        access_key_id_secret_ref: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversDns01Route53AccessKeyIDSecretRefPatchArgs"
            ]
        ] = None,
        auth: Optional[
            pulumi.Input["ClusterIssuerSpecAcmeSolversDns01Route53AuthPatchArgs"]
        ] = None,
        hosted_zone_id: Optional[pulumi.Input[str]] = None,
        region: Optional[pulumi.Input[str]] = None,
        role: Optional[pulumi.Input[str]] = None,
        secret_access_key_secret_ref: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversDns01Route53SecretAccessKeySecretRefPatchArgs"
            ]
        ] = None
    ):
        """
        Use the AWS Route53 API to manage DNS01 challenge records.
        :param pulumi.Input[str] access_key_id: The AccessKeyID is used for authentication.
               Cannot be set when SecretAccessKeyID is set.
               If neither the Access Key nor Key ID are set, we fall-back to using env
               vars, shared credentials file or AWS Instance metadata,
               see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
        :param pulumi.Input[str] hosted_zone_id: If set, the provider will manage only this zone in Route53 and will not do a lookup using the route53:ListHostedZonesByName api call.
        :param pulumi.Input[str] region: Override the AWS region.

               Route53 is a global service and does not have regional endpoints but the
               region specified here (or via environment variables) is used as a hint to
               help compute the correct AWS credential scope and partition when it
               connects to Route53. See:
               - [Amazon Route 53 endpoints and quotas](https://docs.aws.amazon.com/general/latest/gr/r53.html)
               - [Global services](https://docs.aws.amazon.com/whitepapers/latest/aws-fault-isolation-boundaries/global-services.html)

               If you omit this region field, cert-manager will use the region from
               AWS_REGION and AWS_DEFAULT_REGION environment variables, if they are set
               in the cert-manager controller Pod.

               The `region` field is not needed if you use [IAM Roles for Service Accounts (IRSA)](https://docs.aws.amazon.com/eks/latest/userguide/iam-roles-for-service-accounts.html).
               Instead an AWS_REGION environment variable is added to the cert-manager controller Pod by:
               [Amazon EKS Pod Identity Webhook](https://github.com/aws/amazon-eks-pod-identity-webhook).
               In this case this `region` field value is ignored.

               The `region` field is not needed if you use [EKS Pod Identities](https://docs.aws.amazon.com/eks/latest/userguide/pod-identities.html).
               Instead an AWS_REGION environment variable is added to the cert-manager controller Pod by:
               [Amazon EKS Pod Identity Agent](https://github.com/aws/eks-pod-identity-agent),
               In this case this `region` field value is ignored.
        :param pulumi.Input[str] role: Role is a Role ARN which the Route53 provider will assume using either the explicit credentials AccessKeyID/SecretAccessKey
               or the inferred credentials from environment variables, shared credentials file or AWS Instance metadata
        """
        if access_key_id is not None:
            pulumi.set(__self__, "access_key_id", access_key_id)
        if access_key_id_secret_ref is not None:
            pulumi.set(__self__, "access_key_id_secret_ref", access_key_id_secret_ref)
        if auth is not None:
            pulumi.set(__self__, "auth", auth)
        if hosted_zone_id is not None:
            pulumi.set(__self__, "hosted_zone_id", hosted_zone_id)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if secret_access_key_secret_ref is not None:
            pulumi.set(
                __self__, "secret_access_key_secret_ref", secret_access_key_secret_ref
            )

    @property
    @pulumi.getter(name="accessKeyID")
    def access_key_id(self) -> Optional[pulumi.Input[str]]:
        """
        The AccessKeyID is used for authentication.
        Cannot be set when SecretAccessKeyID is set.
        If neither the Access Key nor Key ID are set, we fall-back to using env
        vars, shared credentials file or AWS Instance metadata,
        see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
        """
        return pulumi.get(self, "access_key_id")

    @access_key_id.setter
    def access_key_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_key_id", value)

    @property
    @pulumi.getter(name="accessKeyIDSecretRef")
    def access_key_id_secret_ref(
        self,
    ) -> Optional[
        pulumi.Input[
            "ClusterIssuerSpecAcmeSolversDns01Route53AccessKeyIDSecretRefPatchArgs"
        ]
    ]:
        return pulumi.get(self, "access_key_id_secret_ref")

    @access_key_id_secret_ref.setter
    def access_key_id_secret_ref(
        self,
        value: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversDns01Route53AccessKeyIDSecretRefPatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "access_key_id_secret_ref", value)

    @property
    @pulumi.getter
    def auth(
        self,
    ) -> Optional[
        pulumi.Input["ClusterIssuerSpecAcmeSolversDns01Route53AuthPatchArgs"]
    ]:
        return pulumi.get(self, "auth")

    @auth.setter
    def auth(
        self,
        value: Optional[
            pulumi.Input["ClusterIssuerSpecAcmeSolversDns01Route53AuthPatchArgs"]
        ],
    ):
        pulumi.set(self, "auth", value)

    @property
    @pulumi.getter(name="hostedZoneID")
    def hosted_zone_id(self) -> Optional[pulumi.Input[str]]:
        """
        If set, the provider will manage only this zone in Route53 and will not do a lookup using the route53:ListHostedZonesByName api call.
        """
        return pulumi.get(self, "hosted_zone_id")

    @hosted_zone_id.setter
    def hosted_zone_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hosted_zone_id", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        Override the AWS region.

        Route53 is a global service and does not have regional endpoints but the
        region specified here (or via environment variables) is used as a hint to
        help compute the correct AWS credential scope and partition when it
        connects to Route53. See:
        - [Amazon Route 53 endpoints and quotas](https://docs.aws.amazon.com/general/latest/gr/r53.html)
        - [Global services](https://docs.aws.amazon.com/whitepapers/latest/aws-fault-isolation-boundaries/global-services.html)

        If you omit this region field, cert-manager will use the region from
        AWS_REGION and AWS_DEFAULT_REGION environment variables, if they are set
        in the cert-manager controller Pod.

        The `region` field is not needed if you use [IAM Roles for Service Accounts (IRSA)](https://docs.aws.amazon.com/eks/latest/userguide/iam-roles-for-service-accounts.html).
        Instead an AWS_REGION environment variable is added to the cert-manager controller Pod by:
        [Amazon EKS Pod Identity Webhook](https://github.com/aws/amazon-eks-pod-identity-webhook).
        In this case this `region` field value is ignored.

        The `region` field is not needed if you use [EKS Pod Identities](https://docs.aws.amazon.com/eks/latest/userguide/pod-identities.html).
        Instead an AWS_REGION environment variable is added to the cert-manager controller Pod by:
        [Amazon EKS Pod Identity Agent](https://github.com/aws/eks-pod-identity-agent),
        In this case this `region` field value is ignored.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input[str]]:
        """
        Role is a Role ARN which the Route53 provider will assume using either the explicit credentials AccessKeyID/SecretAccessKey
        or the inferred credentials from environment variables, shared credentials file or AWS Instance metadata
        """
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role", value)

    @property
    @pulumi.getter(name="secretAccessKeySecretRef")
    def secret_access_key_secret_ref(
        self,
    ) -> Optional[
        pulumi.Input[
            "ClusterIssuerSpecAcmeSolversDns01Route53SecretAccessKeySecretRefPatchArgs"
        ]
    ]:
        return pulumi.get(self, "secret_access_key_secret_ref")

    @secret_access_key_secret_ref.setter
    def secret_access_key_secret_ref(
        self,
        value: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversDns01Route53SecretAccessKeySecretRefPatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "secret_access_key_secret_ref", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversDns01Route53SecretAccessKeySecretRefPatchArgsDict(
        TypedDict
    ):
        """
        The SecretAccessKey is used for authentication.
        If neither the Access Key nor Key ID are set, we fall-back to using env
        vars, shared credentials file or AWS Instance metadata,
        see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """

elif False:
    ClusterIssuerSpecAcmeSolversDns01Route53SecretAccessKeySecretRefPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversDns01Route53SecretAccessKeySecretRefPatchArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        name: Optional[pulumi.Input[str]] = None
    ):
        """
        The SecretAccessKey is used for authentication.
        If neither the Access Key nor Key ID are set, we fall-back to using env
        vars, shared credentials file or AWS Instance metadata,
        see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
        :param pulumi.Input[str] key: The key of the entry in the Secret resource's `data` field to be used.
               Some instances of this field may be defaulted, in others it may be
               required.
        :param pulumi.Input[str] name: Name of the resource being referred to.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversDns01Route53SecretAccessKeySecretRefArgsDict(
        TypedDict
    ):
        """
        The SecretAccessKey is used for authentication.
        If neither the Access Key nor Key ID are set, we fall-back to using env
        vars, shared credentials file or AWS Instance metadata,
        see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """

elif False:
    ClusterIssuerSpecAcmeSolversDns01Route53SecretAccessKeySecretRefArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversDns01Route53SecretAccessKeySecretRefArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        name: Optional[pulumi.Input[str]] = None
    ):
        """
        The SecretAccessKey is used for authentication.
        If neither the Access Key nor Key ID are set, we fall-back to using env
        vars, shared credentials file or AWS Instance metadata,
        see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
        :param pulumi.Input[str] key: The key of the entry in the Secret resource's `data` field to be used.
               Some instances of this field may be defaulted, in others it may be
               required.
        :param pulumi.Input[str] name: Name of the resource being referred to.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversDns01Route53ArgsDict(TypedDict):
        """
        Use the AWS Route53 API to manage DNS01 challenge records.
        """

        access_key_id: NotRequired[pulumi.Input[str]]
        """
        The AccessKeyID is used for authentication.
        Cannot be set when SecretAccessKeyID is set.
        If neither the Access Key nor Key ID are set, we fall-back to using env
        vars, shared credentials file or AWS Instance metadata,
        see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
        """
        access_key_id_secret_ref: NotRequired[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversDns01Route53AccessKeyIDSecretRefArgsDict"
            ]
        ]
        auth: NotRequired[
            pulumi.Input["ClusterIssuerSpecAcmeSolversDns01Route53AuthArgsDict"]
        ]
        hosted_zone_id: NotRequired[pulumi.Input[str]]
        """
        If set, the provider will manage only this zone in Route53 and will not do a lookup using the route53:ListHostedZonesByName api call.
        """
        region: NotRequired[pulumi.Input[str]]
        """
        Override the AWS region.

        Route53 is a global service and does not have regional endpoints but the
        region specified here (or via environment variables) is used as a hint to
        help compute the correct AWS credential scope and partition when it
        connects to Route53. See:
        - [Amazon Route 53 endpoints and quotas](https://docs.aws.amazon.com/general/latest/gr/r53.html)
        - [Global services](https://docs.aws.amazon.com/whitepapers/latest/aws-fault-isolation-boundaries/global-services.html)

        If you omit this region field, cert-manager will use the region from
        AWS_REGION and AWS_DEFAULT_REGION environment variables, if they are set
        in the cert-manager controller Pod.

        The `region` field is not needed if you use [IAM Roles for Service Accounts (IRSA)](https://docs.aws.amazon.com/eks/latest/userguide/iam-roles-for-service-accounts.html).
        Instead an AWS_REGION environment variable is added to the cert-manager controller Pod by:
        [Amazon EKS Pod Identity Webhook](https://github.com/aws/amazon-eks-pod-identity-webhook).
        In this case this `region` field value is ignored.

        The `region` field is not needed if you use [EKS Pod Identities](https://docs.aws.amazon.com/eks/latest/userguide/pod-identities.html).
        Instead an AWS_REGION environment variable is added to the cert-manager controller Pod by:
        [Amazon EKS Pod Identity Agent](https://github.com/aws/eks-pod-identity-agent),
        In this case this `region` field value is ignored.
        """
        role: NotRequired[pulumi.Input[str]]
        """
        Role is a Role ARN which the Route53 provider will assume using either the explicit credentials AccessKeyID/SecretAccessKey
        or the inferred credentials from environment variables, shared credentials file or AWS Instance metadata
        """
        secret_access_key_secret_ref: NotRequired[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversDns01Route53SecretAccessKeySecretRefArgsDict"
            ]
        ]

elif False:
    ClusterIssuerSpecAcmeSolversDns01Route53ArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversDns01Route53Args:
    def __init__(
        __self__,
        *,
        access_key_id: Optional[pulumi.Input[str]] = None,
        access_key_id_secret_ref: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversDns01Route53AccessKeyIDSecretRefArgs"
            ]
        ] = None,
        auth: Optional[
            pulumi.Input["ClusterIssuerSpecAcmeSolversDns01Route53AuthArgs"]
        ] = None,
        hosted_zone_id: Optional[pulumi.Input[str]] = None,
        region: Optional[pulumi.Input[str]] = None,
        role: Optional[pulumi.Input[str]] = None,
        secret_access_key_secret_ref: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversDns01Route53SecretAccessKeySecretRefArgs"
            ]
        ] = None
    ):
        """
        Use the AWS Route53 API to manage DNS01 challenge records.
        :param pulumi.Input[str] access_key_id: The AccessKeyID is used for authentication.
               Cannot be set when SecretAccessKeyID is set.
               If neither the Access Key nor Key ID are set, we fall-back to using env
               vars, shared credentials file or AWS Instance metadata,
               see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
        :param pulumi.Input[str] hosted_zone_id: If set, the provider will manage only this zone in Route53 and will not do a lookup using the route53:ListHostedZonesByName api call.
        :param pulumi.Input[str] region: Override the AWS region.

               Route53 is a global service and does not have regional endpoints but the
               region specified here (or via environment variables) is used as a hint to
               help compute the correct AWS credential scope and partition when it
               connects to Route53. See:
               - [Amazon Route 53 endpoints and quotas](https://docs.aws.amazon.com/general/latest/gr/r53.html)
               - [Global services](https://docs.aws.amazon.com/whitepapers/latest/aws-fault-isolation-boundaries/global-services.html)

               If you omit this region field, cert-manager will use the region from
               AWS_REGION and AWS_DEFAULT_REGION environment variables, if they are set
               in the cert-manager controller Pod.

               The `region` field is not needed if you use [IAM Roles for Service Accounts (IRSA)](https://docs.aws.amazon.com/eks/latest/userguide/iam-roles-for-service-accounts.html).
               Instead an AWS_REGION environment variable is added to the cert-manager controller Pod by:
               [Amazon EKS Pod Identity Webhook](https://github.com/aws/amazon-eks-pod-identity-webhook).
               In this case this `region` field value is ignored.

               The `region` field is not needed if you use [EKS Pod Identities](https://docs.aws.amazon.com/eks/latest/userguide/pod-identities.html).
               Instead an AWS_REGION environment variable is added to the cert-manager controller Pod by:
               [Amazon EKS Pod Identity Agent](https://github.com/aws/eks-pod-identity-agent),
               In this case this `region` field value is ignored.
        :param pulumi.Input[str] role: Role is a Role ARN which the Route53 provider will assume using either the explicit credentials AccessKeyID/SecretAccessKey
               or the inferred credentials from environment variables, shared credentials file or AWS Instance metadata
        """
        if access_key_id is not None:
            pulumi.set(__self__, "access_key_id", access_key_id)
        if access_key_id_secret_ref is not None:
            pulumi.set(__self__, "access_key_id_secret_ref", access_key_id_secret_ref)
        if auth is not None:
            pulumi.set(__self__, "auth", auth)
        if hosted_zone_id is not None:
            pulumi.set(__self__, "hosted_zone_id", hosted_zone_id)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if secret_access_key_secret_ref is not None:
            pulumi.set(
                __self__, "secret_access_key_secret_ref", secret_access_key_secret_ref
            )

    @property
    @pulumi.getter(name="accessKeyID")
    def access_key_id(self) -> Optional[pulumi.Input[str]]:
        """
        The AccessKeyID is used for authentication.
        Cannot be set when SecretAccessKeyID is set.
        If neither the Access Key nor Key ID are set, we fall-back to using env
        vars, shared credentials file or AWS Instance metadata,
        see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
        """
        return pulumi.get(self, "access_key_id")

    @access_key_id.setter
    def access_key_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_key_id", value)

    @property
    @pulumi.getter(name="accessKeyIDSecretRef")
    def access_key_id_secret_ref(
        self,
    ) -> Optional[
        pulumi.Input["ClusterIssuerSpecAcmeSolversDns01Route53AccessKeyIDSecretRefArgs"]
    ]:
        return pulumi.get(self, "access_key_id_secret_ref")

    @access_key_id_secret_ref.setter
    def access_key_id_secret_ref(
        self,
        value: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversDns01Route53AccessKeyIDSecretRefArgs"
            ]
        ],
    ):
        pulumi.set(self, "access_key_id_secret_ref", value)

    @property
    @pulumi.getter
    def auth(
        self,
    ) -> Optional[pulumi.Input["ClusterIssuerSpecAcmeSolversDns01Route53AuthArgs"]]:
        return pulumi.get(self, "auth")

    @auth.setter
    def auth(
        self,
        value: Optional[
            pulumi.Input["ClusterIssuerSpecAcmeSolversDns01Route53AuthArgs"]
        ],
    ):
        pulumi.set(self, "auth", value)

    @property
    @pulumi.getter(name="hostedZoneID")
    def hosted_zone_id(self) -> Optional[pulumi.Input[str]]:
        """
        If set, the provider will manage only this zone in Route53 and will not do a lookup using the route53:ListHostedZonesByName api call.
        """
        return pulumi.get(self, "hosted_zone_id")

    @hosted_zone_id.setter
    def hosted_zone_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hosted_zone_id", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        Override the AWS region.

        Route53 is a global service and does not have regional endpoints but the
        region specified here (or via environment variables) is used as a hint to
        help compute the correct AWS credential scope and partition when it
        connects to Route53. See:
        - [Amazon Route 53 endpoints and quotas](https://docs.aws.amazon.com/general/latest/gr/r53.html)
        - [Global services](https://docs.aws.amazon.com/whitepapers/latest/aws-fault-isolation-boundaries/global-services.html)

        If you omit this region field, cert-manager will use the region from
        AWS_REGION and AWS_DEFAULT_REGION environment variables, if they are set
        in the cert-manager controller Pod.

        The `region` field is not needed if you use [IAM Roles for Service Accounts (IRSA)](https://docs.aws.amazon.com/eks/latest/userguide/iam-roles-for-service-accounts.html).
        Instead an AWS_REGION environment variable is added to the cert-manager controller Pod by:
        [Amazon EKS Pod Identity Webhook](https://github.com/aws/amazon-eks-pod-identity-webhook).
        In this case this `region` field value is ignored.

        The `region` field is not needed if you use [EKS Pod Identities](https://docs.aws.amazon.com/eks/latest/userguide/pod-identities.html).
        Instead an AWS_REGION environment variable is added to the cert-manager controller Pod by:
        [Amazon EKS Pod Identity Agent](https://github.com/aws/eks-pod-identity-agent),
        In this case this `region` field value is ignored.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input[str]]:
        """
        Role is a Role ARN which the Route53 provider will assume using either the explicit credentials AccessKeyID/SecretAccessKey
        or the inferred credentials from environment variables, shared credentials file or AWS Instance metadata
        """
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role", value)

    @property
    @pulumi.getter(name="secretAccessKeySecretRef")
    def secret_access_key_secret_ref(
        self,
    ) -> Optional[
        pulumi.Input[
            "ClusterIssuerSpecAcmeSolversDns01Route53SecretAccessKeySecretRefArgs"
        ]
    ]:
        return pulumi.get(self, "secret_access_key_secret_ref")

    @secret_access_key_secret_ref.setter
    def secret_access_key_secret_ref(
        self,
        value: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversDns01Route53SecretAccessKeySecretRefArgs"
            ]
        ],
    ):
        pulumi.set(self, "secret_access_key_secret_ref", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversDns01WebhookPatchArgsDict(TypedDict):
        """
        Configure an external webhook based DNS01 challenge solver to manage
        DNS01 challenge records.
        """

        config: NotRequired[pulumi.Input[Mapping[str, Any]]]
        """
        Additional configuration that should be passed to the webhook apiserver
        when challenges are processed.
        This can contain arbitrary JSON data.
        Secret values should not be specified in this stanza.
        If secret values are needed (e.g. credentials for a DNS service), you
        should use a SecretKeySelector to reference a Secret resource.
        For details on the schema of this field, consult the webhook provider
        implementation's documentation.
        """
        group_name: NotRequired[pulumi.Input[str]]
        """
        The API group name that should be used when POSTing ChallengePayload
        resources to the webhook apiserver.
        This should be the same as the GroupName specified in the webhook
        provider implementation.
        """
        solver_name: NotRequired[pulumi.Input[str]]
        """
        The name of the solver to use, as defined in the webhook provider
        implementation.
        This will typically be the name of the provider, e.g. 'cloudflare'.
        """

elif False:
    ClusterIssuerSpecAcmeSolversDns01WebhookPatchArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversDns01WebhookPatchArgs:
    def __init__(
        __self__,
        *,
        config: Optional[pulumi.Input[Mapping[str, Any]]] = None,
        group_name: Optional[pulumi.Input[str]] = None,
        solver_name: Optional[pulumi.Input[str]] = None
    ):
        """
        Configure an external webhook based DNS01 challenge solver to manage
        DNS01 challenge records.
        :param pulumi.Input[Mapping[str, Any]] config: Additional configuration that should be passed to the webhook apiserver
               when challenges are processed.
               This can contain arbitrary JSON data.
               Secret values should not be specified in this stanza.
               If secret values are needed (e.g. credentials for a DNS service), you
               should use a SecretKeySelector to reference a Secret resource.
               For details on the schema of this field, consult the webhook provider
               implementation's documentation.
        :param pulumi.Input[str] group_name: The API group name that should be used when POSTing ChallengePayload
               resources to the webhook apiserver.
               This should be the same as the GroupName specified in the webhook
               provider implementation.
        :param pulumi.Input[str] solver_name: The name of the solver to use, as defined in the webhook provider
               implementation.
               This will typically be the name of the provider, e.g. 'cloudflare'.
        """
        if config is not None:
            pulumi.set(__self__, "config", config)
        if group_name is not None:
            pulumi.set(__self__, "group_name", group_name)
        if solver_name is not None:
            pulumi.set(__self__, "solver_name", solver_name)

    @property
    @pulumi.getter
    def config(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Additional configuration that should be passed to the webhook apiserver
        when challenges are processed.
        This can contain arbitrary JSON data.
        Secret values should not be specified in this stanza.
        If secret values are needed (e.g. credentials for a DNS service), you
        should use a SecretKeySelector to reference a Secret resource.
        For details on the schema of this field, consult the webhook provider
        implementation's documentation.
        """
        return pulumi.get(self, "config")

    @config.setter
    def config(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "config", value)

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> Optional[pulumi.Input[str]]:
        """
        The API group name that should be used when POSTing ChallengePayload
        resources to the webhook apiserver.
        This should be the same as the GroupName specified in the webhook
        provider implementation.
        """
        return pulumi.get(self, "group_name")

    @group_name.setter
    def group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_name", value)

    @property
    @pulumi.getter(name="solverName")
    def solver_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the solver to use, as defined in the webhook provider
        implementation.
        This will typically be the name of the provider, e.g. 'cloudflare'.
        """
        return pulumi.get(self, "solver_name")

    @solver_name.setter
    def solver_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "solver_name", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversDns01WebhookArgsDict(TypedDict):
        """
        Configure an external webhook based DNS01 challenge solver to manage
        DNS01 challenge records.
        """

        config: NotRequired[pulumi.Input[Mapping[str, Any]]]
        """
        Additional configuration that should be passed to the webhook apiserver
        when challenges are processed.
        This can contain arbitrary JSON data.
        Secret values should not be specified in this stanza.
        If secret values are needed (e.g. credentials for a DNS service), you
        should use a SecretKeySelector to reference a Secret resource.
        For details on the schema of this field, consult the webhook provider
        implementation's documentation.
        """
        group_name: NotRequired[pulumi.Input[str]]
        """
        The API group name that should be used when POSTing ChallengePayload
        resources to the webhook apiserver.
        This should be the same as the GroupName specified in the webhook
        provider implementation.
        """
        solver_name: NotRequired[pulumi.Input[str]]
        """
        The name of the solver to use, as defined in the webhook provider
        implementation.
        This will typically be the name of the provider, e.g. 'cloudflare'.
        """

elif False:
    ClusterIssuerSpecAcmeSolversDns01WebhookArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversDns01WebhookArgs:
    def __init__(
        __self__,
        *,
        config: Optional[pulumi.Input[Mapping[str, Any]]] = None,
        group_name: Optional[pulumi.Input[str]] = None,
        solver_name: Optional[pulumi.Input[str]] = None
    ):
        """
        Configure an external webhook based DNS01 challenge solver to manage
        DNS01 challenge records.
        :param pulumi.Input[Mapping[str, Any]] config: Additional configuration that should be passed to the webhook apiserver
               when challenges are processed.
               This can contain arbitrary JSON data.
               Secret values should not be specified in this stanza.
               If secret values are needed (e.g. credentials for a DNS service), you
               should use a SecretKeySelector to reference a Secret resource.
               For details on the schema of this field, consult the webhook provider
               implementation's documentation.
        :param pulumi.Input[str] group_name: The API group name that should be used when POSTing ChallengePayload
               resources to the webhook apiserver.
               This should be the same as the GroupName specified in the webhook
               provider implementation.
        :param pulumi.Input[str] solver_name: The name of the solver to use, as defined in the webhook provider
               implementation.
               This will typically be the name of the provider, e.g. 'cloudflare'.
        """
        if config is not None:
            pulumi.set(__self__, "config", config)
        if group_name is not None:
            pulumi.set(__self__, "group_name", group_name)
        if solver_name is not None:
            pulumi.set(__self__, "solver_name", solver_name)

    @property
    @pulumi.getter
    def config(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Additional configuration that should be passed to the webhook apiserver
        when challenges are processed.
        This can contain arbitrary JSON data.
        Secret values should not be specified in this stanza.
        If secret values are needed (e.g. credentials for a DNS service), you
        should use a SecretKeySelector to reference a Secret resource.
        For details on the schema of this field, consult the webhook provider
        implementation's documentation.
        """
        return pulumi.get(self, "config")

    @config.setter
    def config(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "config", value)

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> Optional[pulumi.Input[str]]:
        """
        The API group name that should be used when POSTing ChallengePayload
        resources to the webhook apiserver.
        This should be the same as the GroupName specified in the webhook
        provider implementation.
        """
        return pulumi.get(self, "group_name")

    @group_name.setter
    def group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_name", value)

    @property
    @pulumi.getter(name="solverName")
    def solver_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the solver to use, as defined in the webhook provider
        implementation.
        This will typically be the name of the provider, e.g. 'cloudflare'.
        """
        return pulumi.get(self, "solver_name")

    @solver_name.setter
    def solver_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "solver_name", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversDns01ArgsDict(TypedDict):
        """
        Configures cert-manager to attempt to complete authorizations by
        performing the DNS01 challenge flow.
        """

        acme_dns: NotRequired[
            pulumi.Input["ClusterIssuerSpecAcmeSolversDns01AcmeDNSArgsDict"]
        ]
        akamai: NotRequired[
            pulumi.Input["ClusterIssuerSpecAcmeSolversDns01AkamaiArgsDict"]
        ]
        azure_dns: NotRequired[
            pulumi.Input["ClusterIssuerSpecAcmeSolversDns01AzureDNSArgsDict"]
        ]
        cloud_dns: NotRequired[
            pulumi.Input["ClusterIssuerSpecAcmeSolversDns01CloudDNSArgsDict"]
        ]
        cloudflare: NotRequired[
            pulumi.Input["ClusterIssuerSpecAcmeSolversDns01CloudflareArgsDict"]
        ]
        cname_strategy: NotRequired[pulumi.Input[str]]
        """
        CNAMEStrategy configures how the DNS01 provider should handle CNAME
        records when found in DNS zones.
        """
        digitalocean: NotRequired[
            pulumi.Input["ClusterIssuerSpecAcmeSolversDns01DigitaloceanArgsDict"]
        ]
        rfc2136: NotRequired[
            pulumi.Input["ClusterIssuerSpecAcmeSolversDns01Rfc2136ArgsDict"]
        ]
        route53: NotRequired[
            pulumi.Input["ClusterIssuerSpecAcmeSolversDns01Route53ArgsDict"]
        ]
        webhook: NotRequired[
            pulumi.Input["ClusterIssuerSpecAcmeSolversDns01WebhookArgsDict"]
        ]

elif False:
    ClusterIssuerSpecAcmeSolversDns01ArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversDns01Args:
    def __init__(
        __self__,
        *,
        acme_dns: Optional[
            pulumi.Input["ClusterIssuerSpecAcmeSolversDns01AcmeDNSArgs"]
        ] = None,
        akamai: Optional[
            pulumi.Input["ClusterIssuerSpecAcmeSolversDns01AkamaiArgs"]
        ] = None,
        azure_dns: Optional[
            pulumi.Input["ClusterIssuerSpecAcmeSolversDns01AzureDNSArgs"]
        ] = None,
        cloud_dns: Optional[
            pulumi.Input["ClusterIssuerSpecAcmeSolversDns01CloudDNSArgs"]
        ] = None,
        cloudflare: Optional[
            pulumi.Input["ClusterIssuerSpecAcmeSolversDns01CloudflareArgs"]
        ] = None,
        cname_strategy: Optional[pulumi.Input[str]] = None,
        digitalocean: Optional[
            pulumi.Input["ClusterIssuerSpecAcmeSolversDns01DigitaloceanArgs"]
        ] = None,
        rfc2136: Optional[
            pulumi.Input["ClusterIssuerSpecAcmeSolversDns01Rfc2136Args"]
        ] = None,
        route53: Optional[
            pulumi.Input["ClusterIssuerSpecAcmeSolversDns01Route53Args"]
        ] = None,
        webhook: Optional[
            pulumi.Input["ClusterIssuerSpecAcmeSolversDns01WebhookArgs"]
        ] = None
    ):
        """
        Configures cert-manager to attempt to complete authorizations by
        performing the DNS01 challenge flow.
        :param pulumi.Input[str] cname_strategy: CNAMEStrategy configures how the DNS01 provider should handle CNAME
               records when found in DNS zones.
        """
        if acme_dns is not None:
            pulumi.set(__self__, "acme_dns", acme_dns)
        if akamai is not None:
            pulumi.set(__self__, "akamai", akamai)
        if azure_dns is not None:
            pulumi.set(__self__, "azure_dns", azure_dns)
        if cloud_dns is not None:
            pulumi.set(__self__, "cloud_dns", cloud_dns)
        if cloudflare is not None:
            pulumi.set(__self__, "cloudflare", cloudflare)
        if cname_strategy is not None:
            pulumi.set(__self__, "cname_strategy", cname_strategy)
        if digitalocean is not None:
            pulumi.set(__self__, "digitalocean", digitalocean)
        if rfc2136 is not None:
            pulumi.set(__self__, "rfc2136", rfc2136)
        if route53 is not None:
            pulumi.set(__self__, "route53", route53)
        if webhook is not None:
            pulumi.set(__self__, "webhook", webhook)

    @property
    @pulumi.getter(name="acmeDNS")
    def acme_dns(
        self,
    ) -> Optional[pulumi.Input["ClusterIssuerSpecAcmeSolversDns01AcmeDNSArgs"]]:
        return pulumi.get(self, "acme_dns")

    @acme_dns.setter
    def acme_dns(
        self,
        value: Optional[pulumi.Input["ClusterIssuerSpecAcmeSolversDns01AcmeDNSArgs"]],
    ):
        pulumi.set(self, "acme_dns", value)

    @property
    @pulumi.getter
    def akamai(
        self,
    ) -> Optional[pulumi.Input["ClusterIssuerSpecAcmeSolversDns01AkamaiArgs"]]:
        return pulumi.get(self, "akamai")

    @akamai.setter
    def akamai(
        self,
        value: Optional[pulumi.Input["ClusterIssuerSpecAcmeSolversDns01AkamaiArgs"]],
    ):
        pulumi.set(self, "akamai", value)

    @property
    @pulumi.getter(name="azureDNS")
    def azure_dns(
        self,
    ) -> Optional[pulumi.Input["ClusterIssuerSpecAcmeSolversDns01AzureDNSArgs"]]:
        return pulumi.get(self, "azure_dns")

    @azure_dns.setter
    def azure_dns(
        self,
        value: Optional[pulumi.Input["ClusterIssuerSpecAcmeSolversDns01AzureDNSArgs"]],
    ):
        pulumi.set(self, "azure_dns", value)

    @property
    @pulumi.getter(name="cloudDNS")
    def cloud_dns(
        self,
    ) -> Optional[pulumi.Input["ClusterIssuerSpecAcmeSolversDns01CloudDNSArgs"]]:
        return pulumi.get(self, "cloud_dns")

    @cloud_dns.setter
    def cloud_dns(
        self,
        value: Optional[pulumi.Input["ClusterIssuerSpecAcmeSolversDns01CloudDNSArgs"]],
    ):
        pulumi.set(self, "cloud_dns", value)

    @property
    @pulumi.getter
    def cloudflare(
        self,
    ) -> Optional[pulumi.Input["ClusterIssuerSpecAcmeSolversDns01CloudflareArgs"]]:
        return pulumi.get(self, "cloudflare")

    @cloudflare.setter
    def cloudflare(
        self,
        value: Optional[
            pulumi.Input["ClusterIssuerSpecAcmeSolversDns01CloudflareArgs"]
        ],
    ):
        pulumi.set(self, "cloudflare", value)

    @property
    @pulumi.getter(name="cnameStrategy")
    def cname_strategy(self) -> Optional[pulumi.Input[str]]:
        """
        CNAMEStrategy configures how the DNS01 provider should handle CNAME
        records when found in DNS zones.
        """
        return pulumi.get(self, "cname_strategy")

    @cname_strategy.setter
    def cname_strategy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cname_strategy", value)

    @property
    @pulumi.getter
    def digitalocean(
        self,
    ) -> Optional[pulumi.Input["ClusterIssuerSpecAcmeSolversDns01DigitaloceanArgs"]]:
        return pulumi.get(self, "digitalocean")

    @digitalocean.setter
    def digitalocean(
        self,
        value: Optional[
            pulumi.Input["ClusterIssuerSpecAcmeSolversDns01DigitaloceanArgs"]
        ],
    ):
        pulumi.set(self, "digitalocean", value)

    @property
    @pulumi.getter
    def rfc2136(
        self,
    ) -> Optional[pulumi.Input["ClusterIssuerSpecAcmeSolversDns01Rfc2136Args"]]:
        return pulumi.get(self, "rfc2136")

    @rfc2136.setter
    def rfc2136(
        self,
        value: Optional[pulumi.Input["ClusterIssuerSpecAcmeSolversDns01Rfc2136Args"]],
    ):
        pulumi.set(self, "rfc2136", value)

    @property
    @pulumi.getter
    def route53(
        self,
    ) -> Optional[pulumi.Input["ClusterIssuerSpecAcmeSolversDns01Route53Args"]]:
        return pulumi.get(self, "route53")

    @route53.setter
    def route53(
        self,
        value: Optional[pulumi.Input["ClusterIssuerSpecAcmeSolversDns01Route53Args"]],
    ):
        pulumi.set(self, "route53", value)

    @property
    @pulumi.getter
    def webhook(
        self,
    ) -> Optional[pulumi.Input["ClusterIssuerSpecAcmeSolversDns01WebhookArgs"]]:
        return pulumi.get(self, "webhook")

    @webhook.setter
    def webhook(
        self,
        value: Optional[pulumi.Input["ClusterIssuerSpecAcmeSolversDns01WebhookArgs"]],
    ):
        pulumi.set(self, "webhook", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRouteParentRefsPatchArgsDict(
        TypedDict
    ):
        """
        ParentReference identifies an API object (usually a Gateway) that can be considered
        a parent of this resource (usually a route). There are two kinds of parent resources
        with "Core" support:

        * Gateway (Gateway conformance profile)
        * Service (Mesh conformance profile, ClusterIP Services only)

        This API may be extended in the future to support additional kinds of parent
        resources.

        The API object must be valid in the cluster; the Group and Kind must
        be registered in the cluster for this reference to be valid.
        """

        group: NotRequired[pulumi.Input[str]]
        """
        Group is the group of the referent.
        When unspecified, "gateway.networking.k8s.io" is inferred.
        To set the core API group (such as for a "Service" kind referent),
        Group must be explicitly set to "" (empty string).

        Support: Core
        """
        kind: NotRequired[pulumi.Input[str]]
        """
        Kind is kind of the referent.

        There are two kinds of parent resources with "Core" support:

        * Gateway (Gateway conformance profile)
        * Service (Mesh conformance profile, ClusterIP Services only)

        Support for other resources is Implementation-Specific.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name is the name of the referent.

        Support: Core
        """
        namespace: NotRequired[pulumi.Input[str]]
        """
        Namespace is the namespace of the referent. When unspecified, this refers
        to the local namespace of the Route.

        Note that there are specific rules for ParentRefs which cross namespace
        boundaries. Cross-namespace references are only valid if they are explicitly
        allowed by something in the namespace they are referring to. For example:
        Gateway has the AllowedRoutes field, and ReferenceGrant provides a
        generic way to enable any other kind of cross-namespace reference.

        <gateway:experimental:description>
        ParentRefs from a Route to a Service in the same namespace are "producer"
        routes, which apply default routing rules to inbound connections from
        any namespace to the Service.

        ParentRefs from a Route to a Service in a different namespace are
        "consumer" routes, and these routing rules are only applied to outbound
        connections originating from the same namespace as the Route, for which
        the intended destination of the connections are a Service targeted as a
        ParentRef of the Route.
        </gateway:experimental:description>

        Support: Core
        """
        port: NotRequired[pulumi.Input[int]]
        """
        Port is the network port this Route targets. It can be interpreted
        differently based on the type of parent resource.

        When the parent resource is a Gateway, this targets all listeners
        listening on the specified port that also support this kind of Route(and
        select this Route). It's not recommended to set `Port` unless the
        networking behaviors specified in a Route must apply to a specific port
        as opposed to a listener(s) whose port(s) may be changed. When both Port
        and SectionName are specified, the name and port of the selected listener
        must match both specified values.

        <gateway:experimental:description>
        When the parent resource is a Service, this targets a specific port in the
        Service spec. When both Port (experimental) and SectionName are specified,
        the name and port of the selected port must match both specified values.
        </gateway:experimental:description>

        Implementations MAY choose to support other parent resources.
        Implementations supporting other types of parent resources MUST clearly
        document how/if Port is interpreted.

        For the purpose of status, an attachment is considered successful as
        long as the parent resource accepts it partially. For example, Gateway
        listeners can restrict which Routes can attach to them by Route kind,
        namespace, or hostname. If 1 of 2 Gateway listeners accept attachment
        from the referencing Route, the Route MUST be considered successfully
        attached. If no Gateway listeners accept attachment from this Route,
        the Route MUST be considered detached from the Gateway.

        Support: Extended
        """
        section_name: NotRequired[pulumi.Input[str]]
        """
        SectionName is the name of a section within the target resource. In the
        following resources, SectionName is interpreted as the following:

        * Gateway: Listener name. When both Port (experimental) and SectionName
        are specified, the name and port of the selected listener must match
        both specified values.
        * Service: Port name. When both Port (experimental) and SectionName
        are specified, the name and port of the selected listener must match
        both specified values.

        Implementations MAY choose to support attaching Routes to other resources.
        If that is the case, they MUST clearly document how SectionName is
        interpreted.

        When unspecified (empty string), this will reference the entire resource.
        For the purpose of status, an attachment is considered successful if at
        least one section in the parent resource accepts it. For example, Gateway
        listeners can restrict which Routes can attach to them by Route kind,
        namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from
        the referencing Route, the Route MUST be considered successfully
        attached. If no Gateway listeners accept attachment from this Route, the
        Route MUST be considered detached from the Gateway.

        Support: Core
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRouteParentRefsPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRouteParentRefsPatchArgs:
    def __init__(
        __self__,
        *,
        group: Optional[pulumi.Input[str]] = None,
        kind: Optional[pulumi.Input[str]] = None,
        name: Optional[pulumi.Input[str]] = None,
        namespace: Optional[pulumi.Input[str]] = None,
        port: Optional[pulumi.Input[int]] = None,
        section_name: Optional[pulumi.Input[str]] = None
    ):
        """
        ParentReference identifies an API object (usually a Gateway) that can be considered
        a parent of this resource (usually a route). There are two kinds of parent resources
        with "Core" support:

        * Gateway (Gateway conformance profile)
        * Service (Mesh conformance profile, ClusterIP Services only)

        This API may be extended in the future to support additional kinds of parent
        resources.

        The API object must be valid in the cluster; the Group and Kind must
        be registered in the cluster for this reference to be valid.
        :param pulumi.Input[str] group: Group is the group of the referent.
               When unspecified, "gateway.networking.k8s.io" is inferred.
               To set the core API group (such as for a "Service" kind referent),
               Group must be explicitly set to "" (empty string).

               Support: Core
        :param pulumi.Input[str] kind: Kind is kind of the referent.

               There are two kinds of parent resources with "Core" support:

               * Gateway (Gateway conformance profile)
               * Service (Mesh conformance profile, ClusterIP Services only)

               Support for other resources is Implementation-Specific.
        :param pulumi.Input[str] name: Name is the name of the referent.

               Support: Core
        :param pulumi.Input[str] namespace: Namespace is the namespace of the referent. When unspecified, this refers
               to the local namespace of the Route.

               Note that there are specific rules for ParentRefs which cross namespace
               boundaries. Cross-namespace references are only valid if they are explicitly
               allowed by something in the namespace they are referring to. For example:
               Gateway has the AllowedRoutes field, and ReferenceGrant provides a
               generic way to enable any other kind of cross-namespace reference.

               <gateway:experimental:description>
               ParentRefs from a Route to a Service in the same namespace are "producer"
               routes, which apply default routing rules to inbound connections from
               any namespace to the Service.

               ParentRefs from a Route to a Service in a different namespace are
               "consumer" routes, and these routing rules are only applied to outbound
               connections originating from the same namespace as the Route, for which
               the intended destination of the connections are a Service targeted as a
               ParentRef of the Route.
               </gateway:experimental:description>

               Support: Core
        :param pulumi.Input[int] port: Port is the network port this Route targets. It can be interpreted
               differently based on the type of parent resource.

               When the parent resource is a Gateway, this targets all listeners
               listening on the specified port that also support this kind of Route(and
               select this Route). It's not recommended to set `Port` unless the
               networking behaviors specified in a Route must apply to a specific port
               as opposed to a listener(s) whose port(s) may be changed. When both Port
               and SectionName are specified, the name and port of the selected listener
               must match both specified values.

               <gateway:experimental:description>
               When the parent resource is a Service, this targets a specific port in the
               Service spec. When both Port (experimental) and SectionName are specified,
               the name and port of the selected port must match both specified values.
               </gateway:experimental:description>

               Implementations MAY choose to support other parent resources.
               Implementations supporting other types of parent resources MUST clearly
               document how/if Port is interpreted.

               For the purpose of status, an attachment is considered successful as
               long as the parent resource accepts it partially. For example, Gateway
               listeners can restrict which Routes can attach to them by Route kind,
               namespace, or hostname. If 1 of 2 Gateway listeners accept attachment
               from the referencing Route, the Route MUST be considered successfully
               attached. If no Gateway listeners accept attachment from this Route,
               the Route MUST be considered detached from the Gateway.

               Support: Extended
        :param pulumi.Input[str] section_name: SectionName is the name of a section within the target resource. In the
               following resources, SectionName is interpreted as the following:

               * Gateway: Listener name. When both Port (experimental) and SectionName
               are specified, the name and port of the selected listener must match
               both specified values.
               * Service: Port name. When both Port (experimental) and SectionName
               are specified, the name and port of the selected listener must match
               both specified values.

               Implementations MAY choose to support attaching Routes to other resources.
               If that is the case, they MUST clearly document how SectionName is
               interpreted.

               When unspecified (empty string), this will reference the entire resource.
               For the purpose of status, an attachment is considered successful if at
               least one section in the parent resource accepts it. For example, Gateway
               listeners can restrict which Routes can attach to them by Route kind,
               namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from
               the referencing Route, the Route MUST be considered successfully
               attached. If no Gateway listeners accept attachment from this Route, the
               Route MUST be considered detached from the Gateway.

               Support: Core
        """
        if group is not None:
            pulumi.set(__self__, "group", group)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if section_name is not None:
            pulumi.set(__self__, "section_name", section_name)

    @property
    @pulumi.getter
    def group(self) -> Optional[pulumi.Input[str]]:
        """
        Group is the group of the referent.
        When unspecified, "gateway.networking.k8s.io" is inferred.
        To set the core API group (such as for a "Service" kind referent),
        Group must be explicitly set to "" (empty string).

        Support: Core
        """
        return pulumi.get(self, "group")

    @group.setter
    def group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group", value)

    @property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[str]]:
        """
        Kind is kind of the referent.

        There are two kinds of parent resources with "Core" support:

        * Gateway (Gateway conformance profile)
        * Service (Mesh conformance profile, ClusterIP Services only)

        Support for other resources is Implementation-Specific.
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name is the name of the referent.

        Support: Core
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        """
        Namespace is the namespace of the referent. When unspecified, this refers
        to the local namespace of the Route.

        Note that there are specific rules for ParentRefs which cross namespace
        boundaries. Cross-namespace references are only valid if they are explicitly
        allowed by something in the namespace they are referring to. For example:
        Gateway has the AllowedRoutes field, and ReferenceGrant provides a
        generic way to enable any other kind of cross-namespace reference.

        <gateway:experimental:description>
        ParentRefs from a Route to a Service in the same namespace are "producer"
        routes, which apply default routing rules to inbound connections from
        any namespace to the Service.

        ParentRefs from a Route to a Service in a different namespace are
        "consumer" routes, and these routing rules are only applied to outbound
        connections originating from the same namespace as the Route, for which
        the intended destination of the connections are a Service targeted as a
        ParentRef of the Route.
        </gateway:experimental:description>

        Support: Core
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        Port is the network port this Route targets. It can be interpreted
        differently based on the type of parent resource.

        When the parent resource is a Gateway, this targets all listeners
        listening on the specified port that also support this kind of Route(and
        select this Route). It's not recommended to set `Port` unless the
        networking behaviors specified in a Route must apply to a specific port
        as opposed to a listener(s) whose port(s) may be changed. When both Port
        and SectionName are specified, the name and port of the selected listener
        must match both specified values.

        <gateway:experimental:description>
        When the parent resource is a Service, this targets a specific port in the
        Service spec. When both Port (experimental) and SectionName are specified,
        the name and port of the selected port must match both specified values.
        </gateway:experimental:description>

        Implementations MAY choose to support other parent resources.
        Implementations supporting other types of parent resources MUST clearly
        document how/if Port is interpreted.

        For the purpose of status, an attachment is considered successful as
        long as the parent resource accepts it partially. For example, Gateway
        listeners can restrict which Routes can attach to them by Route kind,
        namespace, or hostname. If 1 of 2 Gateway listeners accept attachment
        from the referencing Route, the Route MUST be considered successfully
        attached. If no Gateway listeners accept attachment from this Route,
        the Route MUST be considered detached from the Gateway.

        Support: Extended
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="sectionName")
    def section_name(self) -> Optional[pulumi.Input[str]]:
        """
        SectionName is the name of a section within the target resource. In the
        following resources, SectionName is interpreted as the following:

        * Gateway: Listener name. When both Port (experimental) and SectionName
        are specified, the name and port of the selected listener must match
        both specified values.
        * Service: Port name. When both Port (experimental) and SectionName
        are specified, the name and port of the selected listener must match
        both specified values.

        Implementations MAY choose to support attaching Routes to other resources.
        If that is the case, they MUST clearly document how SectionName is
        interpreted.

        When unspecified (empty string), this will reference the entire resource.
        For the purpose of status, an attachment is considered successful if at
        least one section in the parent resource accepts it. For example, Gateway
        listeners can restrict which Routes can attach to them by Route kind,
        namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from
        the referencing Route, the Route MUST be considered successfully
        attached. If no Gateway listeners accept attachment from this Route, the
        Route MUST be considered detached from the Gateway.

        Support: Core
        """
        return pulumi.get(self, "section_name")

    @section_name.setter
    def section_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "section_name", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRouteParentRefsArgsDict(
        TypedDict
    ):
        """
        ParentReference identifies an API object (usually a Gateway) that can be considered
        a parent of this resource (usually a route). There are two kinds of parent resources
        with "Core" support:

        * Gateway (Gateway conformance profile)
        * Service (Mesh conformance profile, ClusterIP Services only)

        This API may be extended in the future to support additional kinds of parent
        resources.

        The API object must be valid in the cluster; the Group and Kind must
        be registered in the cluster for this reference to be valid.
        """

        group: NotRequired[pulumi.Input[str]]
        """
        Group is the group of the referent.
        When unspecified, "gateway.networking.k8s.io" is inferred.
        To set the core API group (such as for a "Service" kind referent),
        Group must be explicitly set to "" (empty string).

        Support: Core
        """
        kind: NotRequired[pulumi.Input[str]]
        """
        Kind is kind of the referent.

        There are two kinds of parent resources with "Core" support:

        * Gateway (Gateway conformance profile)
        * Service (Mesh conformance profile, ClusterIP Services only)

        Support for other resources is Implementation-Specific.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name is the name of the referent.

        Support: Core
        """
        namespace: NotRequired[pulumi.Input[str]]
        """
        Namespace is the namespace of the referent. When unspecified, this refers
        to the local namespace of the Route.

        Note that there are specific rules for ParentRefs which cross namespace
        boundaries. Cross-namespace references are only valid if they are explicitly
        allowed by something in the namespace they are referring to. For example:
        Gateway has the AllowedRoutes field, and ReferenceGrant provides a
        generic way to enable any other kind of cross-namespace reference.

        <gateway:experimental:description>
        ParentRefs from a Route to a Service in the same namespace are "producer"
        routes, which apply default routing rules to inbound connections from
        any namespace to the Service.

        ParentRefs from a Route to a Service in a different namespace are
        "consumer" routes, and these routing rules are only applied to outbound
        connections originating from the same namespace as the Route, for which
        the intended destination of the connections are a Service targeted as a
        ParentRef of the Route.
        </gateway:experimental:description>

        Support: Core
        """
        port: NotRequired[pulumi.Input[int]]
        """
        Port is the network port this Route targets. It can be interpreted
        differently based on the type of parent resource.

        When the parent resource is a Gateway, this targets all listeners
        listening on the specified port that also support this kind of Route(and
        select this Route). It's not recommended to set `Port` unless the
        networking behaviors specified in a Route must apply to a specific port
        as opposed to a listener(s) whose port(s) may be changed. When both Port
        and SectionName are specified, the name and port of the selected listener
        must match both specified values.

        <gateway:experimental:description>
        When the parent resource is a Service, this targets a specific port in the
        Service spec. When both Port (experimental) and SectionName are specified,
        the name and port of the selected port must match both specified values.
        </gateway:experimental:description>

        Implementations MAY choose to support other parent resources.
        Implementations supporting other types of parent resources MUST clearly
        document how/if Port is interpreted.

        For the purpose of status, an attachment is considered successful as
        long as the parent resource accepts it partially. For example, Gateway
        listeners can restrict which Routes can attach to them by Route kind,
        namespace, or hostname. If 1 of 2 Gateway listeners accept attachment
        from the referencing Route, the Route MUST be considered successfully
        attached. If no Gateway listeners accept attachment from this Route,
        the Route MUST be considered detached from the Gateway.

        Support: Extended
        """
        section_name: NotRequired[pulumi.Input[str]]
        """
        SectionName is the name of a section within the target resource. In the
        following resources, SectionName is interpreted as the following:

        * Gateway: Listener name. When both Port (experimental) and SectionName
        are specified, the name and port of the selected listener must match
        both specified values.
        * Service: Port name. When both Port (experimental) and SectionName
        are specified, the name and port of the selected listener must match
        both specified values.

        Implementations MAY choose to support attaching Routes to other resources.
        If that is the case, they MUST clearly document how SectionName is
        interpreted.

        When unspecified (empty string), this will reference the entire resource.
        For the purpose of status, an attachment is considered successful if at
        least one section in the parent resource accepts it. For example, Gateway
        listeners can restrict which Routes can attach to them by Route kind,
        namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from
        the referencing Route, the Route MUST be considered successfully
        attached. If no Gateway listeners accept attachment from this Route, the
        Route MUST be considered detached from the Gateway.

        Support: Core
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRouteParentRefsArgsDict: TypeAlias = (
        Mapping[str, Any]
    )


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRouteParentRefsArgs:
    def __init__(
        __self__,
        *,
        group: Optional[pulumi.Input[str]] = None,
        kind: Optional[pulumi.Input[str]] = None,
        name: Optional[pulumi.Input[str]] = None,
        namespace: Optional[pulumi.Input[str]] = None,
        port: Optional[pulumi.Input[int]] = None,
        section_name: Optional[pulumi.Input[str]] = None
    ):
        """
        ParentReference identifies an API object (usually a Gateway) that can be considered
        a parent of this resource (usually a route). There are two kinds of parent resources
        with "Core" support:

        * Gateway (Gateway conformance profile)
        * Service (Mesh conformance profile, ClusterIP Services only)

        This API may be extended in the future to support additional kinds of parent
        resources.

        The API object must be valid in the cluster; the Group and Kind must
        be registered in the cluster for this reference to be valid.
        :param pulumi.Input[str] group: Group is the group of the referent.
               When unspecified, "gateway.networking.k8s.io" is inferred.
               To set the core API group (such as for a "Service" kind referent),
               Group must be explicitly set to "" (empty string).

               Support: Core
        :param pulumi.Input[str] kind: Kind is kind of the referent.

               There are two kinds of parent resources with "Core" support:

               * Gateway (Gateway conformance profile)
               * Service (Mesh conformance profile, ClusterIP Services only)

               Support for other resources is Implementation-Specific.
        :param pulumi.Input[str] name: Name is the name of the referent.

               Support: Core
        :param pulumi.Input[str] namespace: Namespace is the namespace of the referent. When unspecified, this refers
               to the local namespace of the Route.

               Note that there are specific rules for ParentRefs which cross namespace
               boundaries. Cross-namespace references are only valid if they are explicitly
               allowed by something in the namespace they are referring to. For example:
               Gateway has the AllowedRoutes field, and ReferenceGrant provides a
               generic way to enable any other kind of cross-namespace reference.

               <gateway:experimental:description>
               ParentRefs from a Route to a Service in the same namespace are "producer"
               routes, which apply default routing rules to inbound connections from
               any namespace to the Service.

               ParentRefs from a Route to a Service in a different namespace are
               "consumer" routes, and these routing rules are only applied to outbound
               connections originating from the same namespace as the Route, for which
               the intended destination of the connections are a Service targeted as a
               ParentRef of the Route.
               </gateway:experimental:description>

               Support: Core
        :param pulumi.Input[int] port: Port is the network port this Route targets. It can be interpreted
               differently based on the type of parent resource.

               When the parent resource is a Gateway, this targets all listeners
               listening on the specified port that also support this kind of Route(and
               select this Route). It's not recommended to set `Port` unless the
               networking behaviors specified in a Route must apply to a specific port
               as opposed to a listener(s) whose port(s) may be changed. When both Port
               and SectionName are specified, the name and port of the selected listener
               must match both specified values.

               <gateway:experimental:description>
               When the parent resource is a Service, this targets a specific port in the
               Service spec. When both Port (experimental) and SectionName are specified,
               the name and port of the selected port must match both specified values.
               </gateway:experimental:description>

               Implementations MAY choose to support other parent resources.
               Implementations supporting other types of parent resources MUST clearly
               document how/if Port is interpreted.

               For the purpose of status, an attachment is considered successful as
               long as the parent resource accepts it partially. For example, Gateway
               listeners can restrict which Routes can attach to them by Route kind,
               namespace, or hostname. If 1 of 2 Gateway listeners accept attachment
               from the referencing Route, the Route MUST be considered successfully
               attached. If no Gateway listeners accept attachment from this Route,
               the Route MUST be considered detached from the Gateway.

               Support: Extended
        :param pulumi.Input[str] section_name: SectionName is the name of a section within the target resource. In the
               following resources, SectionName is interpreted as the following:

               * Gateway: Listener name. When both Port (experimental) and SectionName
               are specified, the name and port of the selected listener must match
               both specified values.
               * Service: Port name. When both Port (experimental) and SectionName
               are specified, the name and port of the selected listener must match
               both specified values.

               Implementations MAY choose to support attaching Routes to other resources.
               If that is the case, they MUST clearly document how SectionName is
               interpreted.

               When unspecified (empty string), this will reference the entire resource.
               For the purpose of status, an attachment is considered successful if at
               least one section in the parent resource accepts it. For example, Gateway
               listeners can restrict which Routes can attach to them by Route kind,
               namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from
               the referencing Route, the Route MUST be considered successfully
               attached. If no Gateway listeners accept attachment from this Route, the
               Route MUST be considered detached from the Gateway.

               Support: Core
        """
        if group is not None:
            pulumi.set(__self__, "group", group)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if section_name is not None:
            pulumi.set(__self__, "section_name", section_name)

    @property
    @pulumi.getter
    def group(self) -> Optional[pulumi.Input[str]]:
        """
        Group is the group of the referent.
        When unspecified, "gateway.networking.k8s.io" is inferred.
        To set the core API group (such as for a "Service" kind referent),
        Group must be explicitly set to "" (empty string).

        Support: Core
        """
        return pulumi.get(self, "group")

    @group.setter
    def group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group", value)

    @property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[str]]:
        """
        Kind is kind of the referent.

        There are two kinds of parent resources with "Core" support:

        * Gateway (Gateway conformance profile)
        * Service (Mesh conformance profile, ClusterIP Services only)

        Support for other resources is Implementation-Specific.
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name is the name of the referent.

        Support: Core
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        """
        Namespace is the namespace of the referent. When unspecified, this refers
        to the local namespace of the Route.

        Note that there are specific rules for ParentRefs which cross namespace
        boundaries. Cross-namespace references are only valid if they are explicitly
        allowed by something in the namespace they are referring to. For example:
        Gateway has the AllowedRoutes field, and ReferenceGrant provides a
        generic way to enable any other kind of cross-namespace reference.

        <gateway:experimental:description>
        ParentRefs from a Route to a Service in the same namespace are "producer"
        routes, which apply default routing rules to inbound connections from
        any namespace to the Service.

        ParentRefs from a Route to a Service in a different namespace are
        "consumer" routes, and these routing rules are only applied to outbound
        connections originating from the same namespace as the Route, for which
        the intended destination of the connections are a Service targeted as a
        ParentRef of the Route.
        </gateway:experimental:description>

        Support: Core
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        Port is the network port this Route targets. It can be interpreted
        differently based on the type of parent resource.

        When the parent resource is a Gateway, this targets all listeners
        listening on the specified port that also support this kind of Route(and
        select this Route). It's not recommended to set `Port` unless the
        networking behaviors specified in a Route must apply to a specific port
        as opposed to a listener(s) whose port(s) may be changed. When both Port
        and SectionName are specified, the name and port of the selected listener
        must match both specified values.

        <gateway:experimental:description>
        When the parent resource is a Service, this targets a specific port in the
        Service spec. When both Port (experimental) and SectionName are specified,
        the name and port of the selected port must match both specified values.
        </gateway:experimental:description>

        Implementations MAY choose to support other parent resources.
        Implementations supporting other types of parent resources MUST clearly
        document how/if Port is interpreted.

        For the purpose of status, an attachment is considered successful as
        long as the parent resource accepts it partially. For example, Gateway
        listeners can restrict which Routes can attach to them by Route kind,
        namespace, or hostname. If 1 of 2 Gateway listeners accept attachment
        from the referencing Route, the Route MUST be considered successfully
        attached. If no Gateway listeners accept attachment from this Route,
        the Route MUST be considered detached from the Gateway.

        Support: Extended
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="sectionName")
    def section_name(self) -> Optional[pulumi.Input[str]]:
        """
        SectionName is the name of a section within the target resource. In the
        following resources, SectionName is interpreted as the following:

        * Gateway: Listener name. When both Port (experimental) and SectionName
        are specified, the name and port of the selected listener must match
        both specified values.
        * Service: Port name. When both Port (experimental) and SectionName
        are specified, the name and port of the selected listener must match
        both specified values.

        Implementations MAY choose to support attaching Routes to other resources.
        If that is the case, they MUST clearly document how SectionName is
        interpreted.

        When unspecified (empty string), this will reference the entire resource.
        For the purpose of status, an attachment is considered successful if at
        least one section in the parent resource accepts it. For example, Gateway
        listeners can restrict which Routes can attach to them by Route kind,
        namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from
        the referencing Route, the Route MUST be considered successfully
        attached. If no Gateway listeners accept attachment from this Route, the
        Route MUST be considered detached from the Gateway.

        Support: Core
        """
        return pulumi.get(self, "section_name")

    @section_name.setter
    def section_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "section_name", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePatchArgsDict(TypedDict):
        """
        The Gateway API is a sig-network community API that models service networking
        in Kubernetes (https://gateway-api.sigs.k8s.io/). The Gateway solver will
        create HTTPRoutes with the specified labels in the same namespace as the challenge.
        This solver is experimental, and fields / behaviour may change in the future.
        """

        labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Custom labels that will be applied to HTTPRoutes created by cert-manager
        while solving HTTP-01 challenges.
        """
        parent_refs: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRouteParentRefsPatchArgsDict"
                    ]
                ]
            ]
        ]
        """
        When solving an HTTP-01 challenge, cert-manager creates an HTTPRoute.
        cert-manager needs to know which parentRefs should be used when creating
        the HTTPRoute. Usually, the parentRef references a Gateway. See:
        https://gateway-api.sigs.k8s.io/api-types/httproute/#attaching-to-gateways
        """
        pod_template: NotRequired[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplatePatchArgsDict"
            ]
        ]
        service_type: NotRequired[pulumi.Input[str]]
        """
        Optional service type for Kubernetes solver service. Supported values
        are NodePort or ClusterIP. If unset, defaults to NodePort.
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePatchArgsDict: TypeAlias = (
        Mapping[str, Any]
    )


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePatchArgs:
    def __init__(
        __self__,
        *,
        labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
        parent_refs: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRouteParentRefsPatchArgs"
                    ]
                ]
            ]
        ] = None,
        pod_template: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplatePatchArgs"
            ]
        ] = None,
        service_type: Optional[pulumi.Input[str]] = None
    ):
        """
        The Gateway API is a sig-network community API that models service networking
        in Kubernetes (https://gateway-api.sigs.k8s.io/). The Gateway solver will
        create HTTPRoutes with the specified labels in the same namespace as the challenge.
        This solver is experimental, and fields / behaviour may change in the future.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: Custom labels that will be applied to HTTPRoutes created by cert-manager
               while solving HTTP-01 challenges.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRouteParentRefsPatchArgs']]] parent_refs: When solving an HTTP-01 challenge, cert-manager creates an HTTPRoute.
               cert-manager needs to know which parentRefs should be used when creating
               the HTTPRoute. Usually, the parentRef references a Gateway. See:
               https://gateway-api.sigs.k8s.io/api-types/httproute/#attaching-to-gateways
        :param pulumi.Input[str] service_type: Optional service type for Kubernetes solver service. Supported values
               are NodePort or ClusterIP. If unset, defaults to NodePort.
        """
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if parent_refs is not None:
            pulumi.set(__self__, "parent_refs", parent_refs)
        if pod_template is not None:
            pulumi.set(__self__, "pod_template", pod_template)
        if service_type is not None:
            pulumi.set(__self__, "service_type", service_type)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Custom labels that will be applied to HTTPRoutes created by cert-manager
        while solving HTTP-01 challenges.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter(name="parentRefs")
    def parent_refs(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRouteParentRefsPatchArgs"
                ]
            ]
        ]
    ]:
        """
        When solving an HTTP-01 challenge, cert-manager creates an HTTPRoute.
        cert-manager needs to know which parentRefs should be used when creating
        the HTTPRoute. Usually, the parentRef references a Gateway. See:
        https://gateway-api.sigs.k8s.io/api-types/httproute/#attaching-to-gateways
        """
        return pulumi.get(self, "parent_refs")

    @parent_refs.setter
    def parent_refs(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRouteParentRefsPatchArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "parent_refs", value)

    @property
    @pulumi.getter(name="podTemplate")
    def pod_template(
        self,
    ) -> Optional[
        pulumi.Input[
            "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplatePatchArgs"
        ]
    ]:
        return pulumi.get(self, "pod_template")

    @pod_template.setter
    def pod_template(
        self,
        value: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplatePatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "pod_template", value)

    @property
    @pulumi.getter(name="serviceType")
    def service_type(self) -> Optional[pulumi.Input[str]]:
        """
        Optional service type for Kubernetes solver service. Supported values
        are NodePort or ClusterIP. If unset, defaults to NodePort.
        """
        return pulumi.get(self, "service_type")

    @service_type.setter
    def service_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_type", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateMetadataPatchArgsDict(
        TypedDict
    ):
        """
        ObjectMeta overrides for the pod used to solve HTTP01 challenges.
        Only the 'labels' and 'annotations' fields may be set.
        If labels or annotations overlap with in-built values, the values here
        will override the in-built values.
        """

        annotations: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Annotations that should be added to the created ACME HTTP01 solver pods.
        """
        labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Labels that should be added to the created ACME HTTP01 solver pods.
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateMetadataPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateMetadataPatchArgs:
    def __init__(
        __self__,
        *,
        annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
        labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None
    ):
        """
        ObjectMeta overrides for the pod used to solve HTTP01 challenges.
        Only the 'labels' and 'annotations' fields may be set.
        If labels or annotations overlap with in-built values, the values here
        will override the in-built values.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] annotations: Annotations that should be added to the created ACME HTTP01 solver pods.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: Labels that should be added to the created ACME HTTP01 solver pods.
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Annotations that should be added to the created ACME HTTP01 solver pods.
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(
        self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
    ):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Labels that should be added to the created ACME HTTP01 solver pods.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateMetadataArgsDict(
        TypedDict
    ):
        """
        ObjectMeta overrides for the pod used to solve HTTP01 challenges.
        Only the 'labels' and 'annotations' fields may be set.
        If labels or annotations overlap with in-built values, the values here
        will override the in-built values.
        """

        annotations: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Annotations that should be added to the created ACME HTTP01 solver pods.
        """
        labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Labels that should be added to the created ACME HTTP01 solver pods.
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateMetadataArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateMetadataArgs:
    def __init__(
        __self__,
        *,
        annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
        labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None
    ):
        """
        ObjectMeta overrides for the pod used to solve HTTP01 challenges.
        Only the 'labels' and 'annotations' fields may be set.
        If labels or annotations overlap with in-built values, the values here
        will override the in-built values.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] annotations: Annotations that should be added to the created ACME HTTP01 solver pods.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: Labels that should be added to the created ACME HTTP01 solver pods.
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Annotations that should be added to the created ACME HTTP01 solver pods.
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(
        self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
    ):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Labels that should be added to the created ACME HTTP01 solver pods.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplatePatchArgsDict(
        TypedDict
    ):
        """
        Optional pod template used to configure the ACME challenge solver pods
        used for HTTP01 challenges.
        """

        metadata: NotRequired[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateMetadataPatchArgsDict"
            ]
        ]
        spec: NotRequired[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecPatchArgsDict"
            ]
        ]

elif False:
    ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplatePatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplatePatchArgs:
    def __init__(
        __self__,
        *,
        metadata: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateMetadataPatchArgs"
            ]
        ] = None,
        spec: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecPatchArgs"
            ]
        ] = None
    ):
        """
        Optional pod template used to configure the ACME challenge solver pods
        used for HTTP01 challenges.
        """
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if spec is not None:
            pulumi.set(__self__, "spec", spec)

    @property
    @pulumi.getter
    def metadata(
        self,
    ) -> Optional[
        pulumi.Input[
            "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateMetadataPatchArgs"
        ]
    ]:
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(
        self,
        value: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateMetadataPatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter
    def spec(
        self,
    ) -> Optional[
        pulumi.Input[
            "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecPatchArgs"
        ]
    ]:
        return pulumi.get(self, "spec")

    @spec.setter
    def spec(
        self,
        value: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecPatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "spec", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPatchArgsDict(
        TypedDict
    ):
        """
        Describes node affinity scheduling rules for the pod.
        """

        preferred_during_scheduling_ignored_during_execution: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgsDict"
                    ]
                ]
            ]
        ]
        """
        The scheduler will prefer to schedule pods to nodes that satisfy
        the affinity expressions specified by this field, but it may choose
        a node that violates one or more of the expressions. The node that is
        most preferred is the one with the greatest sum of weights, i.e.
        for each node that meets all of the scheduling requirements (resource
        request, requiredDuringScheduling affinity expressions, etc.),
        compute a sum by iterating through the elements of this field and adding
        "weight" to the sum if the node matches the corresponding matchExpressions; the
        node(s) with the highest sum are the most preferred.
        """
        required_during_scheduling_ignored_during_execution: NotRequired[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgsDict"
            ]
        ]

elif False:
    ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPatchArgs:
    def __init__(
        __self__,
        *,
        preferred_during_scheduling_ignored_during_execution: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgs"
                    ]
                ]
            ]
        ] = None,
        required_during_scheduling_ignored_during_execution: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgs"
            ]
        ] = None
    ):
        """
        Describes node affinity scheduling rules for the pod.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgs']]] preferred_during_scheduling_ignored_during_execution: The scheduler will prefer to schedule pods to nodes that satisfy
               the affinity expressions specified by this field, but it may choose
               a node that violates one or more of the expressions. The node that is
               most preferred is the one with the greatest sum of weights, i.e.
               for each node that meets all of the scheduling requirements (resource
               request, requiredDuringScheduling affinity expressions, etc.),
               compute a sum by iterating through the elements of this field and adding
               "weight" to the sum if the node matches the corresponding matchExpressions; the
               node(s) with the highest sum are the most preferred.
        """
        if preferred_during_scheduling_ignored_during_execution is not None:
            pulumi.set(
                __self__,
                "preferred_during_scheduling_ignored_during_execution",
                preferred_during_scheduling_ignored_during_execution,
            )
        if required_during_scheduling_ignored_during_execution is not None:
            pulumi.set(
                __self__,
                "required_during_scheduling_ignored_during_execution",
                required_during_scheduling_ignored_during_execution,
            )

    @property
    @pulumi.getter(name="preferredDuringSchedulingIgnoredDuringExecution")
    def preferred_during_scheduling_ignored_during_execution(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgs"
                ]
            ]
        ]
    ]:
        """
        The scheduler will prefer to schedule pods to nodes that satisfy
        the affinity expressions specified by this field, but it may choose
        a node that violates one or more of the expressions. The node that is
        most preferred is the one with the greatest sum of weights, i.e.
        for each node that meets all of the scheduling requirements (resource
        request, requiredDuringScheduling affinity expressions, etc.),
        compute a sum by iterating through the elements of this field and adding
        "weight" to the sum if the node matches the corresponding matchExpressions; the
        node(s) with the highest sum are the most preferred.
        """
        return pulumi.get(self, "preferred_during_scheduling_ignored_during_execution")

    @preferred_during_scheduling_ignored_during_execution.setter
    def preferred_during_scheduling_ignored_during_execution(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "preferred_during_scheduling_ignored_during_execution", value)

    @property
    @pulumi.getter(name="requiredDuringSchedulingIgnoredDuringExecution")
    def required_during_scheduling_ignored_during_execution(
        self,
    ) -> Optional[
        pulumi.Input[
            "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgs"
        ]
    ]:
        return pulumi.get(self, "required_during_scheduling_ignored_during_execution")

    @required_during_scheduling_ignored_during_execution.setter
    def required_during_scheduling_ignored_during_execution(
        self,
        value: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "required_during_scheduling_ignored_during_execution", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgsDict(
        TypedDict
    ):
        """
        An empty preferred scheduling term matches all objects with implicit weight 0
        (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
        """

        preference: NotRequired[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatchArgsDict"
            ]
        ]
        weight: NotRequired[pulumi.Input[int]]
        """
        Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgs:
    def __init__(
        __self__,
        *,
        preference: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatchArgs"
            ]
        ] = None,
        weight: Optional[pulumi.Input[int]] = None
    ):
        """
        An empty preferred scheduling term matches all objects with implicit weight 0
        (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
        :param pulumi.Input[int] weight: Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
        """
        if preference is not None:
            pulumi.set(__self__, "preference", preference)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def preference(
        self,
    ) -> Optional[
        pulumi.Input[
            "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatchArgs"
        ]
    ]:
        return pulumi.get(self, "preference")

    @preference.setter
    def preference(
        self,
        value: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "preference", value)

    @property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[int]]:
        """
        Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
        """
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "weight", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatchArgsDict(
        TypedDict
    ):
        """
        A node selector requirement is a selector that contains values, a key, and an operator
        that relates the key and values.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        Represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        An array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. If the operator is Gt or Lt, the values
        array must have a single element, which will be interpreted as an integer.
        This array is replaced during a strategic merge patch.
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatchArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        operator: Optional[pulumi.Input[str]] = None,
        values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None
    ):
        """
        A node selector requirement is a selector that contains values, a key, and an operator
        that relates the key and values.
        :param pulumi.Input[str] key: The label key that the selector applies to.
        :param pulumi.Input[str] operator: Represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: An array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. If the operator is Gt or Lt, the values
               array must have a single element, which will be interpreted as an integer.
               This array is replaced during a strategic merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        Represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        An array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. If the operator is Gt or Lt, the values
        array must have a single element, which will be interpreted as an integer.
        This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgsDict(
        TypedDict
    ):
        """
        A node selector requirement is a selector that contains values, a key, and an operator
        that relates the key and values.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        Represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        An array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. If the operator is Gt or Lt, the values
        array must have a single element, which will be interpreted as an integer.
        This array is replaced during a strategic merge patch.
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        operator: Optional[pulumi.Input[str]] = None,
        values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None
    ):
        """
        A node selector requirement is a selector that contains values, a key, and an operator
        that relates the key and values.
        :param pulumi.Input[str] key: The label key that the selector applies to.
        :param pulumi.Input[str] operator: Represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: An array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. If the operator is Gt or Lt, the values
               array must have a single element, which will be interpreted as an integer.
               This array is replaced during a strategic merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        Represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        An array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. If the operator is Gt or Lt, the values
        array must have a single element, which will be interpreted as an integer.
        This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatchArgsDict(
        TypedDict
    ):
        """
        A node selector requirement is a selector that contains values, a key, and an operator
        that relates the key and values.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        Represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        An array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. If the operator is Gt or Lt, the values
        array must have a single element, which will be interpreted as an integer.
        This array is replaced during a strategic merge patch.
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatchArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        operator: Optional[pulumi.Input[str]] = None,
        values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None
    ):
        """
        A node selector requirement is a selector that contains values, a key, and an operator
        that relates the key and values.
        :param pulumi.Input[str] key: The label key that the selector applies to.
        :param pulumi.Input[str] operator: Represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: An array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. If the operator is Gt or Lt, the values
               array must have a single element, which will be interpreted as an integer.
               This array is replaced during a strategic merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        Represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        An array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. If the operator is Gt or Lt, the values
        array must have a single element, which will be interpreted as an integer.
        This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgsDict(
        TypedDict
    ):
        """
        A node selector requirement is a selector that contains values, a key, and an operator
        that relates the key and values.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        Represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        An array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. If the operator is Gt or Lt, the values
        array must have a single element, which will be interpreted as an integer.
        This array is replaced during a strategic merge patch.
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        operator: Optional[pulumi.Input[str]] = None,
        values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None
    ):
        """
        A node selector requirement is a selector that contains values, a key, and an operator
        that relates the key and values.
        :param pulumi.Input[str] key: The label key that the selector applies to.
        :param pulumi.Input[str] operator: Represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: An array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. If the operator is Gt or Lt, the values
               array must have a single element, which will be interpreted as an integer.
               This array is replaced during a strategic merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        Represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        An array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. If the operator is Gt or Lt, the values
        array must have a single element, which will be interpreted as an integer.
        This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatchArgsDict(
        TypedDict
    ):
        """
        A node selector term, associated with the corresponding weight.
        """

        match_expressions: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatchArgsDict"
                    ]
                ]
            ]
        ]
        """
        A list of node selector requirements by node's labels.
        """
        match_fields: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatchArgsDict"
                    ]
                ]
            ]
        ]
        """
        A list of node selector requirements by node's fields.
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatchArgs:
    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatchArgs"
                    ]
                ]
            ]
        ] = None,
        match_fields: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatchArgs"
                    ]
                ]
            ]
        ] = None
    ):
        """
        A node selector term, associated with the corresponding weight.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatchArgs']]] match_expressions: A list of node selector requirements by node's labels.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatchArgs']]] match_fields: A list of node selector requirements by node's fields.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_fields is not None:
            pulumi.set(__self__, "match_fields", match_fields)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatchArgs"
                ]
            ]
        ]
    ]:
        """
        A list of node selector requirements by node's labels.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatchArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchFields")
    def match_fields(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatchArgs"
                ]
            ]
        ]
    ]:
        """
        A list of node selector requirements by node's fields.
        """
        return pulumi.get(self, "match_fields")

    @match_fields.setter
    def match_fields(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatchArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "match_fields", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgsDict(
        TypedDict
    ):
        """
        A node selector term, associated with the corresponding weight.
        """

        match_expressions: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgsDict"
                    ]
                ]
            ]
        ]
        """
        A list of node selector requirements by node's labels.
        """
        match_fields: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgsDict"
                    ]
                ]
            ]
        ]
        """
        A list of node selector requirements by node's fields.
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgs:
    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgs"
                    ]
                ]
            ]
        ] = None,
        match_fields: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgs"
                    ]
                ]
            ]
        ] = None
    ):
        """
        A node selector term, associated with the corresponding weight.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgs']]] match_expressions: A list of node selector requirements by node's labels.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgs']]] match_fields: A list of node selector requirements by node's fields.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_fields is not None:
            pulumi.set(__self__, "match_fields", match_fields)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgs"
                ]
            ]
        ]
    ]:
        """
        A list of node selector requirements by node's labels.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchFields")
    def match_fields(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgs"
                ]
            ]
        ]
    ]:
        """
        A list of node selector requirements by node's fields.
        """
        return pulumi.get(self, "match_fields")

    @match_fields.setter
    def match_fields(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "match_fields", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgsDict(
        TypedDict
    ):
        """
        An empty preferred scheduling term matches all objects with implicit weight 0
        (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
        """

        preference: NotRequired[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgsDict"
            ]
        ]
        weight: NotRequired[pulumi.Input[int]]
        """
        Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs:
    def __init__(
        __self__,
        *,
        preference: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgs"
            ]
        ] = None,
        weight: Optional[pulumi.Input[int]] = None
    ):
        """
        An empty preferred scheduling term matches all objects with implicit weight 0
        (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
        :param pulumi.Input[int] weight: Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
        """
        if preference is not None:
            pulumi.set(__self__, "preference", preference)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def preference(
        self,
    ) -> Optional[
        pulumi.Input[
            "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgs"
        ]
    ]:
        return pulumi.get(self, "preference")

    @preference.setter
    def preference(
        self,
        value: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgs"
            ]
        ],
    ):
        pulumi.set(self, "preference", value)

    @property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[int]]:
        """
        Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
        """
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "weight", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatchArgsDict(
        TypedDict
    ):
        """
        A node selector requirement is a selector that contains values, a key, and an operator
        that relates the key and values.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        Represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        An array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. If the operator is Gt or Lt, the values
        array must have a single element, which will be interpreted as an integer.
        This array is replaced during a strategic merge patch.
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatchArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        operator: Optional[pulumi.Input[str]] = None,
        values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None
    ):
        """
        A node selector requirement is a selector that contains values, a key, and an operator
        that relates the key and values.
        :param pulumi.Input[str] key: The label key that the selector applies to.
        :param pulumi.Input[str] operator: Represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: An array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. If the operator is Gt or Lt, the values
               array must have a single element, which will be interpreted as an integer.
               This array is replaced during a strategic merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        Represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        An array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. If the operator is Gt or Lt, the values
        array must have a single element, which will be interpreted as an integer.
        This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgsDict(
        TypedDict
    ):
        """
        A node selector requirement is a selector that contains values, a key, and an operator
        that relates the key and values.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        Represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        An array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. If the operator is Gt or Lt, the values
        array must have a single element, which will be interpreted as an integer.
        This array is replaced during a strategic merge patch.
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        operator: Optional[pulumi.Input[str]] = None,
        values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None
    ):
        """
        A node selector requirement is a selector that contains values, a key, and an operator
        that relates the key and values.
        :param pulumi.Input[str] key: The label key that the selector applies to.
        :param pulumi.Input[str] operator: Represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: An array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. If the operator is Gt or Lt, the values
               array must have a single element, which will be interpreted as an integer.
               This array is replaced during a strategic merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        Represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        An array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. If the operator is Gt or Lt, the values
        array must have a single element, which will be interpreted as an integer.
        This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatchArgsDict(
        TypedDict
    ):
        """
        A node selector requirement is a selector that contains values, a key, and an operator
        that relates the key and values.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        Represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        An array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. If the operator is Gt or Lt, the values
        array must have a single element, which will be interpreted as an integer.
        This array is replaced during a strategic merge patch.
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatchArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        operator: Optional[pulumi.Input[str]] = None,
        values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None
    ):
        """
        A node selector requirement is a selector that contains values, a key, and an operator
        that relates the key and values.
        :param pulumi.Input[str] key: The label key that the selector applies to.
        :param pulumi.Input[str] operator: Represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: An array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. If the operator is Gt or Lt, the values
               array must have a single element, which will be interpreted as an integer.
               This array is replaced during a strategic merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        Represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        An array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. If the operator is Gt or Lt, the values
        array must have a single element, which will be interpreted as an integer.
        This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgsDict(
        TypedDict
    ):
        """
        A node selector requirement is a selector that contains values, a key, and an operator
        that relates the key and values.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        Represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        An array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. If the operator is Gt or Lt, the values
        array must have a single element, which will be interpreted as an integer.
        This array is replaced during a strategic merge patch.
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        operator: Optional[pulumi.Input[str]] = None,
        values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None
    ):
        """
        A node selector requirement is a selector that contains values, a key, and an operator
        that relates the key and values.
        :param pulumi.Input[str] key: The label key that the selector applies to.
        :param pulumi.Input[str] operator: Represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: An array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. If the operator is Gt or Lt, the values
               array must have a single element, which will be interpreted as an integer.
               This array is replaced during a strategic merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        Represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        An array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. If the operator is Gt or Lt, the values
        array must have a single element, which will be interpreted as an integer.
        This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatchArgsDict(
        TypedDict
    ):
        """
        A null or empty node selector term matches no objects. The requirements of
        them are ANDed.
        The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
        """

        match_expressions: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatchArgsDict"
                    ]
                ]
            ]
        ]
        """
        A list of node selector requirements by node's labels.
        """
        match_fields: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatchArgsDict"
                    ]
                ]
            ]
        ]
        """
        A list of node selector requirements by node's fields.
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatchArgs:
    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatchArgs"
                    ]
                ]
            ]
        ] = None,
        match_fields: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatchArgs"
                    ]
                ]
            ]
        ] = None
    ):
        """
        A null or empty node selector term matches no objects. The requirements of
        them are ANDed.
        The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatchArgs']]] match_expressions: A list of node selector requirements by node's labels.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatchArgs']]] match_fields: A list of node selector requirements by node's fields.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_fields is not None:
            pulumi.set(__self__, "match_fields", match_fields)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatchArgs"
                ]
            ]
        ]
    ]:
        """
        A list of node selector requirements by node's labels.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatchArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchFields")
    def match_fields(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatchArgs"
                ]
            ]
        ]
    ]:
        """
        A list of node selector requirements by node's fields.
        """
        return pulumi.get(self, "match_fields")

    @match_fields.setter
    def match_fields(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatchArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "match_fields", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgsDict(
        TypedDict
    ):
        """
        A null or empty node selector term matches no objects. The requirements of
        them are ANDed.
        The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
        """

        match_expressions: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgsDict"
                    ]
                ]
            ]
        ]
        """
        A list of node selector requirements by node's labels.
        """
        match_fields: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgsDict"
                    ]
                ]
            ]
        ]
        """
        A list of node selector requirements by node's fields.
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgs:
    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgs"
                    ]
                ]
            ]
        ] = None,
        match_fields: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgs"
                    ]
                ]
            ]
        ] = None
    ):
        """
        A null or empty node selector term matches no objects. The requirements of
        them are ANDed.
        The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgs']]] match_expressions: A list of node selector requirements by node's labels.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgs']]] match_fields: A list of node selector requirements by node's fields.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_fields is not None:
            pulumi.set(__self__, "match_fields", match_fields)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgs"
                ]
            ]
        ]
    ]:
        """
        A list of node selector requirements by node's labels.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchFields")
    def match_fields(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgs"
                ]
            ]
        ]
    ]:
        """
        A list of node selector requirements by node's fields.
        """
        return pulumi.get(self, "match_fields")

    @match_fields.setter
    def match_fields(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "match_fields", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgsDict(
        TypedDict
    ):
        """
        If the affinity requirements specified by this field are not met at
        scheduling time, the pod will not be scheduled onto the node.
        If the affinity requirements specified by this field cease to be met
        at some point during pod execution (e.g. due to an update), the system
        may or may not try to eventually evict the pod from its node.
        """

        node_selector_terms: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatchArgsDict"
                    ]
                ]
            ]
        ]
        """
        Required. A list of node selector terms. The terms are ORed.
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgs:
    def __init__(
        __self__,
        *,
        node_selector_terms: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatchArgs"
                    ]
                ]
            ]
        ] = None
    ):
        """
        If the affinity requirements specified by this field are not met at
        scheduling time, the pod will not be scheduled onto the node.
        If the affinity requirements specified by this field cease to be met
        at some point during pod execution (e.g. due to an update), the system
        may or may not try to eventually evict the pod from its node.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatchArgs']]] node_selector_terms: Required. A list of node selector terms. The terms are ORed.
        """
        if node_selector_terms is not None:
            pulumi.set(__self__, "node_selector_terms", node_selector_terms)

    @property
    @pulumi.getter(name="nodeSelectorTerms")
    def node_selector_terms(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatchArgs"
                ]
            ]
        ]
    ]:
        """
        Required. A list of node selector terms. The terms are ORed.
        """
        return pulumi.get(self, "node_selector_terms")

    @node_selector_terms.setter
    def node_selector_terms(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatchArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "node_selector_terms", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgsDict(
        TypedDict
    ):
        """
        If the affinity requirements specified by this field are not met at
        scheduling time, the pod will not be scheduled onto the node.
        If the affinity requirements specified by this field cease to be met
        at some point during pod execution (e.g. due to an update), the system
        may or may not try to eventually evict the pod from its node.
        """

        node_selector_terms: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgsDict"
                    ]
                ]
            ]
        ]
        """
        Required. A list of node selector terms. The terms are ORed.
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs:
    def __init__(
        __self__,
        *,
        node_selector_terms: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgs"
                    ]
                ]
            ]
        ] = None
    ):
        """
        If the affinity requirements specified by this field are not met at
        scheduling time, the pod will not be scheduled onto the node.
        If the affinity requirements specified by this field cease to be met
        at some point during pod execution (e.g. due to an update), the system
        may or may not try to eventually evict the pod from its node.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgs']]] node_selector_terms: Required. A list of node selector terms. The terms are ORed.
        """
        if node_selector_terms is not None:
            pulumi.set(__self__, "node_selector_terms", node_selector_terms)

    @property
    @pulumi.getter(name="nodeSelectorTerms")
    def node_selector_terms(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgs"
                ]
            ]
        ]
    ]:
        """
        Required. A list of node selector terms. The terms are ORed.
        """
        return pulumi.get(self, "node_selector_terms")

    @node_selector_terms.setter
    def node_selector_terms(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "node_selector_terms", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityArgsDict(
        TypedDict
    ):
        """
        Describes node affinity scheduling rules for the pod.
        """

        preferred_during_scheduling_ignored_during_execution: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgsDict"
                    ]
                ]
            ]
        ]
        """
        The scheduler will prefer to schedule pods to nodes that satisfy
        the affinity expressions specified by this field, but it may choose
        a node that violates one or more of the expressions. The node that is
        most preferred is the one with the greatest sum of weights, i.e.
        for each node that meets all of the scheduling requirements (resource
        request, requiredDuringScheduling affinity expressions, etc.),
        compute a sum by iterating through the elements of this field and adding
        "weight" to the sum if the node matches the corresponding matchExpressions; the
        node(s) with the highest sum are the most preferred.
        """
        required_during_scheduling_ignored_during_execution: NotRequired[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgsDict"
            ]
        ]

elif False:
    ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityArgs:
    def __init__(
        __self__,
        *,
        preferred_during_scheduling_ignored_during_execution: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs"
                    ]
                ]
            ]
        ] = None,
        required_during_scheduling_ignored_during_execution: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs"
            ]
        ] = None
    ):
        """
        Describes node affinity scheduling rules for the pod.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs']]] preferred_during_scheduling_ignored_during_execution: The scheduler will prefer to schedule pods to nodes that satisfy
               the affinity expressions specified by this field, but it may choose
               a node that violates one or more of the expressions. The node that is
               most preferred is the one with the greatest sum of weights, i.e.
               for each node that meets all of the scheduling requirements (resource
               request, requiredDuringScheduling affinity expressions, etc.),
               compute a sum by iterating through the elements of this field and adding
               "weight" to the sum if the node matches the corresponding matchExpressions; the
               node(s) with the highest sum are the most preferred.
        """
        if preferred_during_scheduling_ignored_during_execution is not None:
            pulumi.set(
                __self__,
                "preferred_during_scheduling_ignored_during_execution",
                preferred_during_scheduling_ignored_during_execution,
            )
        if required_during_scheduling_ignored_during_execution is not None:
            pulumi.set(
                __self__,
                "required_during_scheduling_ignored_during_execution",
                required_during_scheduling_ignored_during_execution,
            )

    @property
    @pulumi.getter(name="preferredDuringSchedulingIgnoredDuringExecution")
    def preferred_during_scheduling_ignored_during_execution(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs"
                ]
            ]
        ]
    ]:
        """
        The scheduler will prefer to schedule pods to nodes that satisfy
        the affinity expressions specified by this field, but it may choose
        a node that violates one or more of the expressions. The node that is
        most preferred is the one with the greatest sum of weights, i.e.
        for each node that meets all of the scheduling requirements (resource
        request, requiredDuringScheduling affinity expressions, etc.),
        compute a sum by iterating through the elements of this field and adding
        "weight" to the sum if the node matches the corresponding matchExpressions; the
        node(s) with the highest sum are the most preferred.
        """
        return pulumi.get(self, "preferred_during_scheduling_ignored_during_execution")

    @preferred_during_scheduling_ignored_during_execution.setter
    def preferred_during_scheduling_ignored_during_execution(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "preferred_during_scheduling_ignored_during_execution", value)

    @property
    @pulumi.getter(name="requiredDuringSchedulingIgnoredDuringExecution")
    def required_during_scheduling_ignored_during_execution(
        self,
    ) -> Optional[
        pulumi.Input[
            "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs"
        ]
    ]:
        return pulumi.get(self, "required_during_scheduling_ignored_during_execution")

    @required_during_scheduling_ignored_during_execution.setter
    def required_during_scheduling_ignored_during_execution(
        self,
        value: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs"
            ]
        ],
    ):
        pulumi.set(self, "required_during_scheduling_ignored_during_execution", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPatchArgsDict(
        TypedDict
    ):
        """
        If specified, the pod's scheduling constraints
        """

        node_affinity: NotRequired[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPatchArgsDict"
            ]
        ]
        pod_affinity: NotRequired[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPatchArgsDict"
            ]
        ]
        pod_anti_affinity: NotRequired[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPatchArgsDict"
            ]
        ]

elif False:
    ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPatchArgs:
    def __init__(
        __self__,
        *,
        node_affinity: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPatchArgs"
            ]
        ] = None,
        pod_affinity: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPatchArgs"
            ]
        ] = None,
        pod_anti_affinity: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPatchArgs"
            ]
        ] = None
    ):
        """
        If specified, the pod's scheduling constraints
        """
        if node_affinity is not None:
            pulumi.set(__self__, "node_affinity", node_affinity)
        if pod_affinity is not None:
            pulumi.set(__self__, "pod_affinity", pod_affinity)
        if pod_anti_affinity is not None:
            pulumi.set(__self__, "pod_anti_affinity", pod_anti_affinity)

    @property
    @pulumi.getter(name="nodeAffinity")
    def node_affinity(
        self,
    ) -> Optional[
        pulumi.Input[
            "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPatchArgs"
        ]
    ]:
        return pulumi.get(self, "node_affinity")

    @node_affinity.setter
    def node_affinity(
        self,
        value: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "node_affinity", value)

    @property
    @pulumi.getter(name="podAffinity")
    def pod_affinity(
        self,
    ) -> Optional[
        pulumi.Input[
            "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPatchArgs"
        ]
    ]:
        return pulumi.get(self, "pod_affinity")

    @pod_affinity.setter
    def pod_affinity(
        self,
        value: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "pod_affinity", value)

    @property
    @pulumi.getter(name="podAntiAffinity")
    def pod_anti_affinity(
        self,
    ) -> Optional[
        pulumi.Input[
            "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPatchArgs"
        ]
    ]:
        return pulumi.get(self, "pod_anti_affinity")

    @pod_anti_affinity.setter
    def pod_anti_affinity(
        self,
        value: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "pod_anti_affinity", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPatchArgsDict(
        TypedDict
    ):
        """
        Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
        """

        preferred_during_scheduling_ignored_during_execution: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgsDict"
                    ]
                ]
            ]
        ]
        """
        The scheduler will prefer to schedule pods to nodes that satisfy
        the affinity expressions specified by this field, but it may choose
        a node that violates one or more of the expressions. The node that is
        most preferred is the one with the greatest sum of weights, i.e.
        for each node that meets all of the scheduling requirements (resource
        request, requiredDuringScheduling affinity expressions, etc.),
        compute a sum by iterating through the elements of this field and adding
        "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
        node(s) with the highest sum are the most preferred.
        """
        required_during_scheduling_ignored_during_execution: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgsDict"
                    ]
                ]
            ]
        ]
        """
        If the affinity requirements specified by this field are not met at
        scheduling time, the pod will not be scheduled onto the node.
        If the affinity requirements specified by this field cease to be met
        at some point during pod execution (e.g. due to a pod label update), the
        system may or may not try to eventually evict the pod from its node.
        When there are multiple elements, the lists of nodes corresponding to each
        podAffinityTerm are intersected, i.e. all terms must be satisfied.
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPatchArgs:
    def __init__(
        __self__,
        *,
        preferred_during_scheduling_ignored_during_execution: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgs"
                    ]
                ]
            ]
        ] = None,
        required_during_scheduling_ignored_during_execution: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgs"
                    ]
                ]
            ]
        ] = None
    ):
        """
        Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
        :param pulumi.Input[Sequence[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgs']]] preferred_during_scheduling_ignored_during_execution: The scheduler will prefer to schedule pods to nodes that satisfy
               the affinity expressions specified by this field, but it may choose
               a node that violates one or more of the expressions. The node that is
               most preferred is the one with the greatest sum of weights, i.e.
               for each node that meets all of the scheduling requirements (resource
               request, requiredDuringScheduling affinity expressions, etc.),
               compute a sum by iterating through the elements of this field and adding
               "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
               node(s) with the highest sum are the most preferred.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgs']]] required_during_scheduling_ignored_during_execution: If the affinity requirements specified by this field are not met at
               scheduling time, the pod will not be scheduled onto the node.
               If the affinity requirements specified by this field cease to be met
               at some point during pod execution (e.g. due to a pod label update), the
               system may or may not try to eventually evict the pod from its node.
               When there are multiple elements, the lists of nodes corresponding to each
               podAffinityTerm are intersected, i.e. all terms must be satisfied.
        """
        if preferred_during_scheduling_ignored_during_execution is not None:
            pulumi.set(
                __self__,
                "preferred_during_scheduling_ignored_during_execution",
                preferred_during_scheduling_ignored_during_execution,
            )
        if required_during_scheduling_ignored_during_execution is not None:
            pulumi.set(
                __self__,
                "required_during_scheduling_ignored_during_execution",
                required_during_scheduling_ignored_during_execution,
            )

    @property
    @pulumi.getter(name="preferredDuringSchedulingIgnoredDuringExecution")
    def preferred_during_scheduling_ignored_during_execution(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgs"
                ]
            ]
        ]
    ]:
        """
        The scheduler will prefer to schedule pods to nodes that satisfy
        the affinity expressions specified by this field, but it may choose
        a node that violates one or more of the expressions. The node that is
        most preferred is the one with the greatest sum of weights, i.e.
        for each node that meets all of the scheduling requirements (resource
        request, requiredDuringScheduling affinity expressions, etc.),
        compute a sum by iterating through the elements of this field and adding
        "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
        node(s) with the highest sum are the most preferred.
        """
        return pulumi.get(self, "preferred_during_scheduling_ignored_during_execution")

    @preferred_during_scheduling_ignored_during_execution.setter
    def preferred_during_scheduling_ignored_during_execution(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "preferred_during_scheduling_ignored_during_execution", value)

    @property
    @pulumi.getter(name="requiredDuringSchedulingIgnoredDuringExecution")
    def required_during_scheduling_ignored_during_execution(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgs"
                ]
            ]
        ]
    ]:
        """
        If the affinity requirements specified by this field are not met at
        scheduling time, the pod will not be scheduled onto the node.
        If the affinity requirements specified by this field cease to be met
        at some point during pod execution (e.g. due to a pod label update), the
        system may or may not try to eventually evict the pod from its node.
        When there are multiple elements, the lists of nodes corresponding to each
        podAffinityTerm are intersected, i.e. all terms must be satisfied.
        """
        return pulumi.get(self, "required_during_scheduling_ignored_during_execution")

    @required_during_scheduling_ignored_during_execution.setter
    def required_during_scheduling_ignored_during_execution(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "required_during_scheduling_ignored_during_execution", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgsDict(
        TypedDict
    ):
        """
        The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
        """

        pod_affinity_term: NotRequired[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchArgsDict"
            ]
        ]
        weight: NotRequired[pulumi.Input[int]]
        """
        weight associated with matching the corresponding podAffinityTerm,
        in the range 1-100.
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgs:
    def __init__(
        __self__,
        *,
        pod_affinity_term: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchArgs"
            ]
        ] = None,
        weight: Optional[pulumi.Input[int]] = None
    ):
        """
        The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
        :param pulumi.Input[int] weight: weight associated with matching the corresponding podAffinityTerm,
               in the range 1-100.
        """
        if pod_affinity_term is not None:
            pulumi.set(__self__, "pod_affinity_term", pod_affinity_term)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter(name="podAffinityTerm")
    def pod_affinity_term(
        self,
    ) -> Optional[
        pulumi.Input[
            "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchArgs"
        ]
    ]:
        return pulumi.get(self, "pod_affinity_term")

    @pod_affinity_term.setter
    def pod_affinity_term(
        self,
        value: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "pod_affinity_term", value)

    @property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[int]]:
        """
        weight associated with matching the corresponding podAffinityTerm,
        in the range 1-100.
        """
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "weight", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArgsDict(
        TypedDict
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        key is the label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        operator: Optional[pulumi.Input[str]] = None,
        values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        :param pulumi.Input[str] key: key is the label key that the selector applies to.
        :param pulumi.Input[str] operator: operator represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists and DoesNotExist.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: values is an array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. This array is replaced during a strategic
               merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgsDict(
        TypedDict
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        key is the label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        operator: Optional[pulumi.Input[str]] = None,
        values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        :param pulumi.Input[str] key: key is the label key that the selector applies to.
        :param pulumi.Input[str] operator: operator represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists and DoesNotExist.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: values is an array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. This array is replaced during a strategic
               merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchArgsDict(
        TypedDict
    ):
        """
        A label query over a set of resources, in this case pods.
        If it's null, this PodAffinityTerm matches with no Pods.
        """

        match_expressions: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArgsDict"
                    ]
                ]
            ]
        ]
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        match_labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchArgs:
    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArgs"
                    ]
                ]
            ]
        ] = None,
        match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None
    ):
        """
        A label query over a set of resources, in this case pods.
        If it's null, this PodAffinityTerm matches with no Pods.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArgs']]] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
               map is equivalent to an element of matchExpressions, whose key field is "key", the
               operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArgs"
                ]
            ]
        ]
    ]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(
        self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
    ):
        pulumi.set(self, "match_labels", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgsDict(
        TypedDict
    ):
        """
        A label query over a set of resources, in this case pods.
        If it's null, this PodAffinityTerm matches with no Pods.
        """

        match_expressions: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgsDict"
                    ]
                ]
            ]
        ]
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        match_labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs:
    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs"
                    ]
                ]
            ]
        ] = None,
        match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None
    ):
        """
        A label query over a set of resources, in this case pods.
        If it's null, this PodAffinityTerm matches with no Pods.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs']]] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
               map is equivalent to an element of matchExpressions, whose key field is "key", the
               operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs"
                ]
            ]
        ]
    ]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(
        self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
    ):
        pulumi.set(self, "match_labels", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArgsDict(
        TypedDict
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        key is the label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        operator: Optional[pulumi.Input[str]] = None,
        values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        :param pulumi.Input[str] key: key is the label key that the selector applies to.
        :param pulumi.Input[str] operator: operator represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists and DoesNotExist.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: values is an array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. This array is replaced during a strategic
               merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgsDict(
        TypedDict
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        key is the label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        operator: Optional[pulumi.Input[str]] = None,
        values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        :param pulumi.Input[str] key: key is the label key that the selector applies to.
        :param pulumi.Input[str] operator: operator represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists and DoesNotExist.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: values is an array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. This array is replaced during a strategic
               merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchArgsDict(
        TypedDict
    ):
        """
        A label query over the set of namespaces that the term applies to.
        The term is applied to the union of the namespaces selected by this field
        and the ones listed in the namespaces field.
        null selector and null or empty namespaces list means "this pod's namespace".
        An empty selector ({}) matches all namespaces.
        """

        match_expressions: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArgsDict"
                    ]
                ]
            ]
        ]
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        match_labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchArgs:
    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArgs"
                    ]
                ]
            ]
        ] = None,
        match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None
    ):
        """
        A label query over the set of namespaces that the term applies to.
        The term is applied to the union of the namespaces selected by this field
        and the ones listed in the namespaces field.
        null selector and null or empty namespaces list means "this pod's namespace".
        An empty selector ({}) matches all namespaces.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArgs']]] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
               map is equivalent to an element of matchExpressions, whose key field is "key", the
               operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArgs"
                ]
            ]
        ]
    ]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(
        self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
    ):
        pulumi.set(self, "match_labels", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgsDict(
        TypedDict
    ):
        """
        A label query over the set of namespaces that the term applies to.
        The term is applied to the union of the namespaces selected by this field
        and the ones listed in the namespaces field.
        null selector and null or empty namespaces list means "this pod's namespace".
        An empty selector ({}) matches all namespaces.
        """

        match_expressions: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgsDict"
                    ]
                ]
            ]
        ]
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        match_labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs:
    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs"
                    ]
                ]
            ]
        ] = None,
        match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None
    ):
        """
        A label query over the set of namespaces that the term applies to.
        The term is applied to the union of the namespaces selected by this field
        and the ones listed in the namespaces field.
        null selector and null or empty namespaces list means "this pod's namespace".
        An empty selector ({}) matches all namespaces.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs']]] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
               map is equivalent to an element of matchExpressions, whose key field is "key", the
               operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs"
                ]
            ]
        ]
    ]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(
        self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
    ):
        pulumi.set(self, "match_labels", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchArgsDict(
        TypedDict
    ):
        """
        Required. A pod affinity term, associated with the corresponding weight.
        """

        label_selector: NotRequired[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchArgsDict"
            ]
        ]
        match_label_keys: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        MatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both matchLabelKeys and labelSelector.
        Also, matchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        mismatch_label_keys: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        MismatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
        Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        namespace_selector: NotRequired[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchArgsDict"
            ]
        ]
        namespaces: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        namespaces specifies a static list of namespace names that the term applies to.
        The term is applied to the union of the namespaces listed in this field
        and the ones selected by namespaceSelector.
        null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        """
        topology_key: NotRequired[pulumi.Input[str]]
        """
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
        the labelSelector in the specified namespaces, where co-located is defined as running on a node
        whose value of the label with key topologyKey matches that of any node on which any of the
        selected pods is running.
        Empty topologyKey is not allowed.
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchArgs:
    def __init__(
        __self__,
        *,
        label_selector: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchArgs"
            ]
        ] = None,
        match_label_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        mismatch_label_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        namespace_selector: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchArgs"
            ]
        ] = None,
        namespaces: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        topology_key: Optional[pulumi.Input[str]] = None
    ):
        """
        Required. A pod affinity term, associated with the corresponding weight.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] match_label_keys: MatchLabelKeys is a set of pod label keys to select which pods will
               be taken into consideration. The keys are used to lookup values from the
               incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
               to select the group of existing pods which pods will be taken into consideration
               for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
               pod labels will be ignored. The default value is empty.
               The same key is forbidden to exist in both matchLabelKeys and labelSelector.
               Also, matchLabelKeys cannot be set when labelSelector isn't set.
               This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] mismatch_label_keys: MismatchLabelKeys is a set of pod label keys to select which pods will
               be taken into consideration. The keys are used to lookup values from the
               incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
               to select the group of existing pods which pods will be taken into consideration
               for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
               pod labels will be ignored. The default value is empty.
               The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
               Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
               This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] namespaces: namespaces specifies a static list of namespace names that the term applies to.
               The term is applied to the union of the namespaces listed in this field
               and the ones selected by namespaceSelector.
               null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        :param pulumi.Input[str] topology_key: This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
               the labelSelector in the specified namespaces, where co-located is defined as running on a node
               whose value of the label with key topologyKey matches that of any node on which any of the
               selected pods is running.
               Empty topologyKey is not allowed.
        """
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if match_label_keys is not None:
            pulumi.set(__self__, "match_label_keys", match_label_keys)
        if mismatch_label_keys is not None:
            pulumi.set(__self__, "mismatch_label_keys", mismatch_label_keys)
        if namespace_selector is not None:
            pulumi.set(__self__, "namespace_selector", namespace_selector)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)
        if topology_key is not None:
            pulumi.set(__self__, "topology_key", topology_key)

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(
        self,
    ) -> Optional[
        pulumi.Input[
            "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchArgs"
        ]
    ]:
        return pulumi.get(self, "label_selector")

    @label_selector.setter
    def label_selector(
        self,
        value: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "label_selector", value)

    @property
    @pulumi.getter(name="matchLabelKeys")
    def match_label_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        MatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both matchLabelKeys and labelSelector.
        Also, matchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        return pulumi.get(self, "match_label_keys")

    @match_label_keys.setter
    def match_label_keys(
        self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]
    ):
        pulumi.set(self, "match_label_keys", value)

    @property
    @pulumi.getter(name="mismatchLabelKeys")
    def mismatch_label_keys(
        self,
    ) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        MismatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
        Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        return pulumi.get(self, "mismatch_label_keys")

    @mismatch_label_keys.setter
    def mismatch_label_keys(
        self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]
    ):
        pulumi.set(self, "mismatch_label_keys", value)

    @property
    @pulumi.getter(name="namespaceSelector")
    def namespace_selector(
        self,
    ) -> Optional[
        pulumi.Input[
            "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchArgs"
        ]
    ]:
        return pulumi.get(self, "namespace_selector")

    @namespace_selector.setter
    def namespace_selector(
        self,
        value: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "namespace_selector", value)

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        namespaces specifies a static list of namespace names that the term applies to.
        The term is applied to the union of the namespaces listed in this field
        and the ones selected by namespaceSelector.
        null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        """
        return pulumi.get(self, "namespaces")

    @namespaces.setter
    def namespaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "namespaces", value)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> Optional[pulumi.Input[str]]:
        """
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
        the labelSelector in the specified namespaces, where co-located is defined as running on a node
        whose value of the label with key topologyKey matches that of any node on which any of the
        selected pods is running.
        Empty topologyKey is not allowed.
        """
        return pulumi.get(self, "topology_key")

    @topology_key.setter
    def topology_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topology_key", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgsDict(
        TypedDict
    ):
        """
        Required. A pod affinity term, associated with the corresponding weight.
        """

        label_selector: NotRequired[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgsDict"
            ]
        ]
        match_label_keys: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        MatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both matchLabelKeys and labelSelector.
        Also, matchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        mismatch_label_keys: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        MismatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
        Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        namespace_selector: NotRequired[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgsDict"
            ]
        ]
        namespaces: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        namespaces specifies a static list of namespace names that the term applies to.
        The term is applied to the union of the namespaces listed in this field
        and the ones selected by namespaceSelector.
        null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        """
        topology_key: NotRequired[pulumi.Input[str]]
        """
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
        the labelSelector in the specified namespaces, where co-located is defined as running on a node
        whose value of the label with key topologyKey matches that of any node on which any of the
        selected pods is running.
        Empty topologyKey is not allowed.
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs:
    def __init__(
        __self__,
        *,
        label_selector: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs"
            ]
        ] = None,
        match_label_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        mismatch_label_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        namespace_selector: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs"
            ]
        ] = None,
        namespaces: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        topology_key: Optional[pulumi.Input[str]] = None
    ):
        """
        Required. A pod affinity term, associated with the corresponding weight.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] match_label_keys: MatchLabelKeys is a set of pod label keys to select which pods will
               be taken into consideration. The keys are used to lookup values from the
               incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
               to select the group of existing pods which pods will be taken into consideration
               for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
               pod labels will be ignored. The default value is empty.
               The same key is forbidden to exist in both matchLabelKeys and labelSelector.
               Also, matchLabelKeys cannot be set when labelSelector isn't set.
               This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] mismatch_label_keys: MismatchLabelKeys is a set of pod label keys to select which pods will
               be taken into consideration. The keys are used to lookup values from the
               incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
               to select the group of existing pods which pods will be taken into consideration
               for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
               pod labels will be ignored. The default value is empty.
               The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
               Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
               This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] namespaces: namespaces specifies a static list of namespace names that the term applies to.
               The term is applied to the union of the namespaces listed in this field
               and the ones selected by namespaceSelector.
               null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        :param pulumi.Input[str] topology_key: This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
               the labelSelector in the specified namespaces, where co-located is defined as running on a node
               whose value of the label with key topologyKey matches that of any node on which any of the
               selected pods is running.
               Empty topologyKey is not allowed.
        """
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if match_label_keys is not None:
            pulumi.set(__self__, "match_label_keys", match_label_keys)
        if mismatch_label_keys is not None:
            pulumi.set(__self__, "mismatch_label_keys", mismatch_label_keys)
        if namespace_selector is not None:
            pulumi.set(__self__, "namespace_selector", namespace_selector)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)
        if topology_key is not None:
            pulumi.set(__self__, "topology_key", topology_key)

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(
        self,
    ) -> Optional[
        pulumi.Input[
            "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs"
        ]
    ]:
        return pulumi.get(self, "label_selector")

    @label_selector.setter
    def label_selector(
        self,
        value: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs"
            ]
        ],
    ):
        pulumi.set(self, "label_selector", value)

    @property
    @pulumi.getter(name="matchLabelKeys")
    def match_label_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        MatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both matchLabelKeys and labelSelector.
        Also, matchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        return pulumi.get(self, "match_label_keys")

    @match_label_keys.setter
    def match_label_keys(
        self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]
    ):
        pulumi.set(self, "match_label_keys", value)

    @property
    @pulumi.getter(name="mismatchLabelKeys")
    def mismatch_label_keys(
        self,
    ) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        MismatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
        Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        return pulumi.get(self, "mismatch_label_keys")

    @mismatch_label_keys.setter
    def mismatch_label_keys(
        self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]
    ):
        pulumi.set(self, "mismatch_label_keys", value)

    @property
    @pulumi.getter(name="namespaceSelector")
    def namespace_selector(
        self,
    ) -> Optional[
        pulumi.Input[
            "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs"
        ]
    ]:
        return pulumi.get(self, "namespace_selector")

    @namespace_selector.setter
    def namespace_selector(
        self,
        value: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs"
            ]
        ],
    ):
        pulumi.set(self, "namespace_selector", value)

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        namespaces specifies a static list of namespace names that the term applies to.
        The term is applied to the union of the namespaces listed in this field
        and the ones selected by namespaceSelector.
        null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        """
        return pulumi.get(self, "namespaces")

    @namespaces.setter
    def namespaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "namespaces", value)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> Optional[pulumi.Input[str]]:
        """
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
        the labelSelector in the specified namespaces, where co-located is defined as running on a node
        whose value of the label with key topologyKey matches that of any node on which any of the
        selected pods is running.
        Empty topologyKey is not allowed.
        """
        return pulumi.get(self, "topology_key")

    @topology_key.setter
    def topology_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topology_key", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgsDict(
        TypedDict
    ):
        """
        The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
        """

        pod_affinity_term: NotRequired[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgsDict"
            ]
        ]
        weight: NotRequired[pulumi.Input[int]]
        """
        weight associated with matching the corresponding podAffinityTerm,
        in the range 1-100.
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs:
    def __init__(
        __self__,
        *,
        pod_affinity_term: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs"
            ]
        ] = None,
        weight: Optional[pulumi.Input[int]] = None
    ):
        """
        The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
        :param pulumi.Input[int] weight: weight associated with matching the corresponding podAffinityTerm,
               in the range 1-100.
        """
        if pod_affinity_term is not None:
            pulumi.set(__self__, "pod_affinity_term", pod_affinity_term)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter(name="podAffinityTerm")
    def pod_affinity_term(
        self,
    ) -> Optional[
        pulumi.Input[
            "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs"
        ]
    ]:
        return pulumi.get(self, "pod_affinity_term")

    @pod_affinity_term.setter
    def pod_affinity_term(
        self,
        value: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs"
            ]
        ],
    ):
        pulumi.set(self, "pod_affinity_term", value)

    @property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[int]]:
        """
        weight associated with matching the corresponding podAffinityTerm,
        in the range 1-100.
        """
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "weight", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArgsDict(
        TypedDict
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        key is the label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        operator: Optional[pulumi.Input[str]] = None,
        values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        :param pulumi.Input[str] key: key is the label key that the selector applies to.
        :param pulumi.Input[str] operator: operator represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists and DoesNotExist.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: values is an array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. This array is replaced during a strategic
               merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgsDict(
        TypedDict
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        key is the label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        operator: Optional[pulumi.Input[str]] = None,
        values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        :param pulumi.Input[str] key: key is the label key that the selector applies to.
        :param pulumi.Input[str] operator: operator represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists and DoesNotExist.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: values is an array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. This array is replaced during a strategic
               merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchArgsDict(
        TypedDict
    ):
        """
        A label query over a set of resources, in this case pods.
        If it's null, this PodAffinityTerm matches with no Pods.
        """

        match_expressions: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArgsDict"
                    ]
                ]
            ]
        ]
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        match_labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchArgs:
    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArgs"
                    ]
                ]
            ]
        ] = None,
        match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None
    ):
        """
        A label query over a set of resources, in this case pods.
        If it's null, this PodAffinityTerm matches with no Pods.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArgs']]] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
               map is equivalent to an element of matchExpressions, whose key field is "key", the
               operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArgs"
                ]
            ]
        ]
    ]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(
        self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
    ):
        pulumi.set(self, "match_labels", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgsDict(
        TypedDict
    ):
        """
        A label query over a set of resources, in this case pods.
        If it's null, this PodAffinityTerm matches with no Pods.
        """

        match_expressions: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgsDict"
                    ]
                ]
            ]
        ]
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        match_labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs:
    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs"
                    ]
                ]
            ]
        ] = None,
        match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None
    ):
        """
        A label query over a set of resources, in this case pods.
        If it's null, this PodAffinityTerm matches with no Pods.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs']]] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
               map is equivalent to an element of matchExpressions, whose key field is "key", the
               operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs"
                ]
            ]
        ]
    ]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(
        self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
    ):
        pulumi.set(self, "match_labels", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArgsDict(
        TypedDict
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        key is the label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        operator: Optional[pulumi.Input[str]] = None,
        values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        :param pulumi.Input[str] key: key is the label key that the selector applies to.
        :param pulumi.Input[str] operator: operator represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists and DoesNotExist.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: values is an array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. This array is replaced during a strategic
               merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgsDict(
        TypedDict
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        key is the label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        operator: Optional[pulumi.Input[str]] = None,
        values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        :param pulumi.Input[str] key: key is the label key that the selector applies to.
        :param pulumi.Input[str] operator: operator represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists and DoesNotExist.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: values is an array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. This array is replaced during a strategic
               merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchArgsDict(
        TypedDict
    ):
        """
        A label query over the set of namespaces that the term applies to.
        The term is applied to the union of the namespaces selected by this field
        and the ones listed in the namespaces field.
        null selector and null or empty namespaces list means "this pod's namespace".
        An empty selector ({}) matches all namespaces.
        """

        match_expressions: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArgsDict"
                    ]
                ]
            ]
        ]
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        match_labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchArgs:
    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArgs"
                    ]
                ]
            ]
        ] = None,
        match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None
    ):
        """
        A label query over the set of namespaces that the term applies to.
        The term is applied to the union of the namespaces selected by this field
        and the ones listed in the namespaces field.
        null selector and null or empty namespaces list means "this pod's namespace".
        An empty selector ({}) matches all namespaces.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArgs']]] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
               map is equivalent to an element of matchExpressions, whose key field is "key", the
               operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArgs"
                ]
            ]
        ]
    ]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(
        self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
    ):
        pulumi.set(self, "match_labels", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgsDict(
        TypedDict
    ):
        """
        A label query over the set of namespaces that the term applies to.
        The term is applied to the union of the namespaces selected by this field
        and the ones listed in the namespaces field.
        null selector and null or empty namespaces list means "this pod's namespace".
        An empty selector ({}) matches all namespaces.
        """

        match_expressions: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgsDict"
                    ]
                ]
            ]
        ]
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        match_labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs:
    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs"
                    ]
                ]
            ]
        ] = None,
        match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None
    ):
        """
        A label query over the set of namespaces that the term applies to.
        The term is applied to the union of the namespaces selected by this field
        and the ones listed in the namespaces field.
        null selector and null or empty namespaces list means "this pod's namespace".
        An empty selector ({}) matches all namespaces.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs']]] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
               map is equivalent to an element of matchExpressions, whose key field is "key", the
               operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs"
                ]
            ]
        ]
    ]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(
        self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
    ):
        pulumi.set(self, "match_labels", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgsDict(
        TypedDict
    ):
        """
        Defines a set of pods (namely those matching the labelSelector
        relative to the given namespace(s)) that this pod should be
        co-located (affinity) or not co-located (anti-affinity) with,
        where co-located is defined as running on a node whose value of
        the label with key <topologyKey> matches that of any node on which
        a pod of the set of pods is running
        """

        label_selector: NotRequired[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchArgsDict"
            ]
        ]
        match_label_keys: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        MatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both matchLabelKeys and labelSelector.
        Also, matchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        mismatch_label_keys: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        MismatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
        Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        namespace_selector: NotRequired[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchArgsDict"
            ]
        ]
        namespaces: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        namespaces specifies a static list of namespace names that the term applies to.
        The term is applied to the union of the namespaces listed in this field
        and the ones selected by namespaceSelector.
        null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        """
        topology_key: NotRequired[pulumi.Input[str]]
        """
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
        the labelSelector in the specified namespaces, where co-located is defined as running on a node
        whose value of the label with key topologyKey matches that of any node on which any of the
        selected pods is running.
        Empty topologyKey is not allowed.
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgs:
    def __init__(
        __self__,
        *,
        label_selector: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchArgs"
            ]
        ] = None,
        match_label_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        mismatch_label_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        namespace_selector: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchArgs"
            ]
        ] = None,
        namespaces: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        topology_key: Optional[pulumi.Input[str]] = None
    ):
        """
        Defines a set of pods (namely those matching the labelSelector
        relative to the given namespace(s)) that this pod should be
        co-located (affinity) or not co-located (anti-affinity) with,
        where co-located is defined as running on a node whose value of
        the label with key <topologyKey> matches that of any node on which
        a pod of the set of pods is running
        :param pulumi.Input[Sequence[pulumi.Input[str]]] match_label_keys: MatchLabelKeys is a set of pod label keys to select which pods will
               be taken into consideration. The keys are used to lookup values from the
               incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
               to select the group of existing pods which pods will be taken into consideration
               for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
               pod labels will be ignored. The default value is empty.
               The same key is forbidden to exist in both matchLabelKeys and labelSelector.
               Also, matchLabelKeys cannot be set when labelSelector isn't set.
               This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] mismatch_label_keys: MismatchLabelKeys is a set of pod label keys to select which pods will
               be taken into consideration. The keys are used to lookup values from the
               incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
               to select the group of existing pods which pods will be taken into consideration
               for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
               pod labels will be ignored. The default value is empty.
               The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
               Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
               This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] namespaces: namespaces specifies a static list of namespace names that the term applies to.
               The term is applied to the union of the namespaces listed in this field
               and the ones selected by namespaceSelector.
               null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        :param pulumi.Input[str] topology_key: This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
               the labelSelector in the specified namespaces, where co-located is defined as running on a node
               whose value of the label with key topologyKey matches that of any node on which any of the
               selected pods is running.
               Empty topologyKey is not allowed.
        """
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if match_label_keys is not None:
            pulumi.set(__self__, "match_label_keys", match_label_keys)
        if mismatch_label_keys is not None:
            pulumi.set(__self__, "mismatch_label_keys", mismatch_label_keys)
        if namespace_selector is not None:
            pulumi.set(__self__, "namespace_selector", namespace_selector)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)
        if topology_key is not None:
            pulumi.set(__self__, "topology_key", topology_key)

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(
        self,
    ) -> Optional[
        pulumi.Input[
            "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchArgs"
        ]
    ]:
        return pulumi.get(self, "label_selector")

    @label_selector.setter
    def label_selector(
        self,
        value: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "label_selector", value)

    @property
    @pulumi.getter(name="matchLabelKeys")
    def match_label_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        MatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both matchLabelKeys and labelSelector.
        Also, matchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        return pulumi.get(self, "match_label_keys")

    @match_label_keys.setter
    def match_label_keys(
        self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]
    ):
        pulumi.set(self, "match_label_keys", value)

    @property
    @pulumi.getter(name="mismatchLabelKeys")
    def mismatch_label_keys(
        self,
    ) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        MismatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
        Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        return pulumi.get(self, "mismatch_label_keys")

    @mismatch_label_keys.setter
    def mismatch_label_keys(
        self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]
    ):
        pulumi.set(self, "mismatch_label_keys", value)

    @property
    @pulumi.getter(name="namespaceSelector")
    def namespace_selector(
        self,
    ) -> Optional[
        pulumi.Input[
            "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchArgs"
        ]
    ]:
        return pulumi.get(self, "namespace_selector")

    @namespace_selector.setter
    def namespace_selector(
        self,
        value: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "namespace_selector", value)

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        namespaces specifies a static list of namespace names that the term applies to.
        The term is applied to the union of the namespaces listed in this field
        and the ones selected by namespaceSelector.
        null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        """
        return pulumi.get(self, "namespaces")

    @namespaces.setter
    def namespaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "namespaces", value)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> Optional[pulumi.Input[str]]:
        """
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
        the labelSelector in the specified namespaces, where co-located is defined as running on a node
        whose value of the label with key topologyKey matches that of any node on which any of the
        selected pods is running.
        Empty topologyKey is not allowed.
        """
        return pulumi.get(self, "topology_key")

    @topology_key.setter
    def topology_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topology_key", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgsDict(
        TypedDict
    ):
        """
        Defines a set of pods (namely those matching the labelSelector
        relative to the given namespace(s)) that this pod should be
        co-located (affinity) or not co-located (anti-affinity) with,
        where co-located is defined as running on a node whose value of
        the label with key <topologyKey> matches that of any node on which
        a pod of the set of pods is running
        """

        label_selector: NotRequired[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgsDict"
            ]
        ]
        match_label_keys: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        MatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both matchLabelKeys and labelSelector.
        Also, matchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        mismatch_label_keys: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        MismatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
        Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        namespace_selector: NotRequired[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgsDict"
            ]
        ]
        namespaces: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        namespaces specifies a static list of namespace names that the term applies to.
        The term is applied to the union of the namespaces listed in this field
        and the ones selected by namespaceSelector.
        null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        """
        topology_key: NotRequired[pulumi.Input[str]]
        """
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
        the labelSelector in the specified namespaces, where co-located is defined as running on a node
        whose value of the label with key topologyKey matches that of any node on which any of the
        selected pods is running.
        Empty topologyKey is not allowed.
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs:
    def __init__(
        __self__,
        *,
        label_selector: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs"
            ]
        ] = None,
        match_label_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        mismatch_label_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        namespace_selector: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs"
            ]
        ] = None,
        namespaces: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        topology_key: Optional[pulumi.Input[str]] = None
    ):
        """
        Defines a set of pods (namely those matching the labelSelector
        relative to the given namespace(s)) that this pod should be
        co-located (affinity) or not co-located (anti-affinity) with,
        where co-located is defined as running on a node whose value of
        the label with key <topologyKey> matches that of any node on which
        a pod of the set of pods is running
        :param pulumi.Input[Sequence[pulumi.Input[str]]] match_label_keys: MatchLabelKeys is a set of pod label keys to select which pods will
               be taken into consideration. The keys are used to lookup values from the
               incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
               to select the group of existing pods which pods will be taken into consideration
               for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
               pod labels will be ignored. The default value is empty.
               The same key is forbidden to exist in both matchLabelKeys and labelSelector.
               Also, matchLabelKeys cannot be set when labelSelector isn't set.
               This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] mismatch_label_keys: MismatchLabelKeys is a set of pod label keys to select which pods will
               be taken into consideration. The keys are used to lookup values from the
               incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
               to select the group of existing pods which pods will be taken into consideration
               for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
               pod labels will be ignored. The default value is empty.
               The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
               Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
               This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] namespaces: namespaces specifies a static list of namespace names that the term applies to.
               The term is applied to the union of the namespaces listed in this field
               and the ones selected by namespaceSelector.
               null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        :param pulumi.Input[str] topology_key: This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
               the labelSelector in the specified namespaces, where co-located is defined as running on a node
               whose value of the label with key topologyKey matches that of any node on which any of the
               selected pods is running.
               Empty topologyKey is not allowed.
        """
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if match_label_keys is not None:
            pulumi.set(__self__, "match_label_keys", match_label_keys)
        if mismatch_label_keys is not None:
            pulumi.set(__self__, "mismatch_label_keys", mismatch_label_keys)
        if namespace_selector is not None:
            pulumi.set(__self__, "namespace_selector", namespace_selector)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)
        if topology_key is not None:
            pulumi.set(__self__, "topology_key", topology_key)

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(
        self,
    ) -> Optional[
        pulumi.Input[
            "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs"
        ]
    ]:
        return pulumi.get(self, "label_selector")

    @label_selector.setter
    def label_selector(
        self,
        value: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs"
            ]
        ],
    ):
        pulumi.set(self, "label_selector", value)

    @property
    @pulumi.getter(name="matchLabelKeys")
    def match_label_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        MatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both matchLabelKeys and labelSelector.
        Also, matchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        return pulumi.get(self, "match_label_keys")

    @match_label_keys.setter
    def match_label_keys(
        self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]
    ):
        pulumi.set(self, "match_label_keys", value)

    @property
    @pulumi.getter(name="mismatchLabelKeys")
    def mismatch_label_keys(
        self,
    ) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        MismatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
        Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        return pulumi.get(self, "mismatch_label_keys")

    @mismatch_label_keys.setter
    def mismatch_label_keys(
        self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]
    ):
        pulumi.set(self, "mismatch_label_keys", value)

    @property
    @pulumi.getter(name="namespaceSelector")
    def namespace_selector(
        self,
    ) -> Optional[
        pulumi.Input[
            "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs"
        ]
    ]:
        return pulumi.get(self, "namespace_selector")

    @namespace_selector.setter
    def namespace_selector(
        self,
        value: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs"
            ]
        ],
    ):
        pulumi.set(self, "namespace_selector", value)

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        namespaces specifies a static list of namespace names that the term applies to.
        The term is applied to the union of the namespaces listed in this field
        and the ones selected by namespaceSelector.
        null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        """
        return pulumi.get(self, "namespaces")

    @namespaces.setter
    def namespaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "namespaces", value)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> Optional[pulumi.Input[str]]:
        """
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
        the labelSelector in the specified namespaces, where co-located is defined as running on a node
        whose value of the label with key topologyKey matches that of any node on which any of the
        selected pods is running.
        Empty topologyKey is not allowed.
        """
        return pulumi.get(self, "topology_key")

    @topology_key.setter
    def topology_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topology_key", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityArgsDict(
        TypedDict
    ):
        """
        Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
        """

        preferred_during_scheduling_ignored_during_execution: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgsDict"
                    ]
                ]
            ]
        ]
        """
        The scheduler will prefer to schedule pods to nodes that satisfy
        the affinity expressions specified by this field, but it may choose
        a node that violates one or more of the expressions. The node that is
        most preferred is the one with the greatest sum of weights, i.e.
        for each node that meets all of the scheduling requirements (resource
        request, requiredDuringScheduling affinity expressions, etc.),
        compute a sum by iterating through the elements of this field and adding
        "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
        node(s) with the highest sum are the most preferred.
        """
        required_during_scheduling_ignored_during_execution: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgsDict"
                    ]
                ]
            ]
        ]
        """
        If the affinity requirements specified by this field are not met at
        scheduling time, the pod will not be scheduled onto the node.
        If the affinity requirements specified by this field cease to be met
        at some point during pod execution (e.g. due to a pod label update), the
        system may or may not try to eventually evict the pod from its node.
        When there are multiple elements, the lists of nodes corresponding to each
        podAffinityTerm are intersected, i.e. all terms must be satisfied.
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityArgs:
    def __init__(
        __self__,
        *,
        preferred_during_scheduling_ignored_during_execution: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs"
                    ]
                ]
            ]
        ] = None,
        required_during_scheduling_ignored_during_execution: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs"
                    ]
                ]
            ]
        ] = None
    ):
        """
        Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
        :param pulumi.Input[Sequence[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs']]] preferred_during_scheduling_ignored_during_execution: The scheduler will prefer to schedule pods to nodes that satisfy
               the affinity expressions specified by this field, but it may choose
               a node that violates one or more of the expressions. The node that is
               most preferred is the one with the greatest sum of weights, i.e.
               for each node that meets all of the scheduling requirements (resource
               request, requiredDuringScheduling affinity expressions, etc.),
               compute a sum by iterating through the elements of this field and adding
               "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
               node(s) with the highest sum are the most preferred.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs']]] required_during_scheduling_ignored_during_execution: If the affinity requirements specified by this field are not met at
               scheduling time, the pod will not be scheduled onto the node.
               If the affinity requirements specified by this field cease to be met
               at some point during pod execution (e.g. due to a pod label update), the
               system may or may not try to eventually evict the pod from its node.
               When there are multiple elements, the lists of nodes corresponding to each
               podAffinityTerm are intersected, i.e. all terms must be satisfied.
        """
        if preferred_during_scheduling_ignored_during_execution is not None:
            pulumi.set(
                __self__,
                "preferred_during_scheduling_ignored_during_execution",
                preferred_during_scheduling_ignored_during_execution,
            )
        if required_during_scheduling_ignored_during_execution is not None:
            pulumi.set(
                __self__,
                "required_during_scheduling_ignored_during_execution",
                required_during_scheduling_ignored_during_execution,
            )

    @property
    @pulumi.getter(name="preferredDuringSchedulingIgnoredDuringExecution")
    def preferred_during_scheduling_ignored_during_execution(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs"
                ]
            ]
        ]
    ]:
        """
        The scheduler will prefer to schedule pods to nodes that satisfy
        the affinity expressions specified by this field, but it may choose
        a node that violates one or more of the expressions. The node that is
        most preferred is the one with the greatest sum of weights, i.e.
        for each node that meets all of the scheduling requirements (resource
        request, requiredDuringScheduling affinity expressions, etc.),
        compute a sum by iterating through the elements of this field and adding
        "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
        node(s) with the highest sum are the most preferred.
        """
        return pulumi.get(self, "preferred_during_scheduling_ignored_during_execution")

    @preferred_during_scheduling_ignored_during_execution.setter
    def preferred_during_scheduling_ignored_during_execution(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "preferred_during_scheduling_ignored_during_execution", value)

    @property
    @pulumi.getter(name="requiredDuringSchedulingIgnoredDuringExecution")
    def required_during_scheduling_ignored_during_execution(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs"
                ]
            ]
        ]
    ]:
        """
        If the affinity requirements specified by this field are not met at
        scheduling time, the pod will not be scheduled onto the node.
        If the affinity requirements specified by this field cease to be met
        at some point during pod execution (e.g. due to a pod label update), the
        system may or may not try to eventually evict the pod from its node.
        When there are multiple elements, the lists of nodes corresponding to each
        podAffinityTerm are intersected, i.e. all terms must be satisfied.
        """
        return pulumi.get(self, "required_during_scheduling_ignored_during_execution")

    @required_during_scheduling_ignored_during_execution.setter
    def required_during_scheduling_ignored_during_execution(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "required_during_scheduling_ignored_during_execution", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPatchArgsDict(
        TypedDict
    ):
        """
        Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
        """

        preferred_during_scheduling_ignored_during_execution: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgsDict"
                    ]
                ]
            ]
        ]
        """
        The scheduler will prefer to schedule pods to nodes that satisfy
        the anti-affinity expressions specified by this field, but it may choose
        a node that violates one or more of the expressions. The node that is
        most preferred is the one with the greatest sum of weights, i.e.
        for each node that meets all of the scheduling requirements (resource
        request, requiredDuringScheduling anti-affinity expressions, etc.),
        compute a sum by iterating through the elements of this field and adding
        "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
        node(s) with the highest sum are the most preferred.
        """
        required_during_scheduling_ignored_during_execution: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgsDict"
                    ]
                ]
            ]
        ]
        """
        If the anti-affinity requirements specified by this field are not met at
        scheduling time, the pod will not be scheduled onto the node.
        If the anti-affinity requirements specified by this field cease to be met
        at some point during pod execution (e.g. due to a pod label update), the
        system may or may not try to eventually evict the pod from its node.
        When there are multiple elements, the lists of nodes corresponding to each
        podAffinityTerm are intersected, i.e. all terms must be satisfied.
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPatchArgs:
    def __init__(
        __self__,
        *,
        preferred_during_scheduling_ignored_during_execution: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgs"
                    ]
                ]
            ]
        ] = None,
        required_during_scheduling_ignored_during_execution: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgs"
                    ]
                ]
            ]
        ] = None
    ):
        """
        Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
        :param pulumi.Input[Sequence[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgs']]] preferred_during_scheduling_ignored_during_execution: The scheduler will prefer to schedule pods to nodes that satisfy
               the anti-affinity expressions specified by this field, but it may choose
               a node that violates one or more of the expressions. The node that is
               most preferred is the one with the greatest sum of weights, i.e.
               for each node that meets all of the scheduling requirements (resource
               request, requiredDuringScheduling anti-affinity expressions, etc.),
               compute a sum by iterating through the elements of this field and adding
               "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
               node(s) with the highest sum are the most preferred.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgs']]] required_during_scheduling_ignored_during_execution: If the anti-affinity requirements specified by this field are not met at
               scheduling time, the pod will not be scheduled onto the node.
               If the anti-affinity requirements specified by this field cease to be met
               at some point during pod execution (e.g. due to a pod label update), the
               system may or may not try to eventually evict the pod from its node.
               When there are multiple elements, the lists of nodes corresponding to each
               podAffinityTerm are intersected, i.e. all terms must be satisfied.
        """
        if preferred_during_scheduling_ignored_during_execution is not None:
            pulumi.set(
                __self__,
                "preferred_during_scheduling_ignored_during_execution",
                preferred_during_scheduling_ignored_during_execution,
            )
        if required_during_scheduling_ignored_during_execution is not None:
            pulumi.set(
                __self__,
                "required_during_scheduling_ignored_during_execution",
                required_during_scheduling_ignored_during_execution,
            )

    @property
    @pulumi.getter(name="preferredDuringSchedulingIgnoredDuringExecution")
    def preferred_during_scheduling_ignored_during_execution(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgs"
                ]
            ]
        ]
    ]:
        """
        The scheduler will prefer to schedule pods to nodes that satisfy
        the anti-affinity expressions specified by this field, but it may choose
        a node that violates one or more of the expressions. The node that is
        most preferred is the one with the greatest sum of weights, i.e.
        for each node that meets all of the scheduling requirements (resource
        request, requiredDuringScheduling anti-affinity expressions, etc.),
        compute a sum by iterating through the elements of this field and adding
        "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
        node(s) with the highest sum are the most preferred.
        """
        return pulumi.get(self, "preferred_during_scheduling_ignored_during_execution")

    @preferred_during_scheduling_ignored_during_execution.setter
    def preferred_during_scheduling_ignored_during_execution(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "preferred_during_scheduling_ignored_during_execution", value)

    @property
    @pulumi.getter(name="requiredDuringSchedulingIgnoredDuringExecution")
    def required_during_scheduling_ignored_during_execution(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgs"
                ]
            ]
        ]
    ]:
        """
        If the anti-affinity requirements specified by this field are not met at
        scheduling time, the pod will not be scheduled onto the node.
        If the anti-affinity requirements specified by this field cease to be met
        at some point during pod execution (e.g. due to a pod label update), the
        system may or may not try to eventually evict the pod from its node.
        When there are multiple elements, the lists of nodes corresponding to each
        podAffinityTerm are intersected, i.e. all terms must be satisfied.
        """
        return pulumi.get(self, "required_during_scheduling_ignored_during_execution")

    @required_during_scheduling_ignored_during_execution.setter
    def required_during_scheduling_ignored_during_execution(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "required_during_scheduling_ignored_during_execution", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgsDict(
        TypedDict
    ):
        """
        The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
        """

        pod_affinity_term: NotRequired[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchArgsDict"
            ]
        ]
        weight: NotRequired[pulumi.Input[int]]
        """
        weight associated with matching the corresponding podAffinityTerm,
        in the range 1-100.
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgs:
    def __init__(
        __self__,
        *,
        pod_affinity_term: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchArgs"
            ]
        ] = None,
        weight: Optional[pulumi.Input[int]] = None
    ):
        """
        The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
        :param pulumi.Input[int] weight: weight associated with matching the corresponding podAffinityTerm,
               in the range 1-100.
        """
        if pod_affinity_term is not None:
            pulumi.set(__self__, "pod_affinity_term", pod_affinity_term)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter(name="podAffinityTerm")
    def pod_affinity_term(
        self,
    ) -> Optional[
        pulumi.Input[
            "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchArgs"
        ]
    ]:
        return pulumi.get(self, "pod_affinity_term")

    @pod_affinity_term.setter
    def pod_affinity_term(
        self,
        value: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "pod_affinity_term", value)

    @property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[int]]:
        """
        weight associated with matching the corresponding podAffinityTerm,
        in the range 1-100.
        """
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "weight", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArgsDict(
        TypedDict
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        key is the label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        operator: Optional[pulumi.Input[str]] = None,
        values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        :param pulumi.Input[str] key: key is the label key that the selector applies to.
        :param pulumi.Input[str] operator: operator represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists and DoesNotExist.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: values is an array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. This array is replaced during a strategic
               merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgsDict(
        TypedDict
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        key is the label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        operator: Optional[pulumi.Input[str]] = None,
        values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        :param pulumi.Input[str] key: key is the label key that the selector applies to.
        :param pulumi.Input[str] operator: operator represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists and DoesNotExist.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: values is an array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. This array is replaced during a strategic
               merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchArgsDict(
        TypedDict
    ):
        """
        A label query over a set of resources, in this case pods.
        If it's null, this PodAffinityTerm matches with no Pods.
        """

        match_expressions: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArgsDict"
                    ]
                ]
            ]
        ]
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        match_labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchArgs:
    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArgs"
                    ]
                ]
            ]
        ] = None,
        match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None
    ):
        """
        A label query over a set of resources, in this case pods.
        If it's null, this PodAffinityTerm matches with no Pods.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArgs']]] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
               map is equivalent to an element of matchExpressions, whose key field is "key", the
               operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArgs"
                ]
            ]
        ]
    ]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(
        self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
    ):
        pulumi.set(self, "match_labels", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgsDict(
        TypedDict
    ):
        """
        A label query over a set of resources, in this case pods.
        If it's null, this PodAffinityTerm matches with no Pods.
        """

        match_expressions: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgsDict"
                    ]
                ]
            ]
        ]
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        match_labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs:
    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs"
                    ]
                ]
            ]
        ] = None,
        match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None
    ):
        """
        A label query over a set of resources, in this case pods.
        If it's null, this PodAffinityTerm matches with no Pods.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs']]] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
               map is equivalent to an element of matchExpressions, whose key field is "key", the
               operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs"
                ]
            ]
        ]
    ]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(
        self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
    ):
        pulumi.set(self, "match_labels", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArgsDict(
        TypedDict
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        key is the label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        operator: Optional[pulumi.Input[str]] = None,
        values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        :param pulumi.Input[str] key: key is the label key that the selector applies to.
        :param pulumi.Input[str] operator: operator represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists and DoesNotExist.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: values is an array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. This array is replaced during a strategic
               merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgsDict(
        TypedDict
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        key is the label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        operator: Optional[pulumi.Input[str]] = None,
        values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        :param pulumi.Input[str] key: key is the label key that the selector applies to.
        :param pulumi.Input[str] operator: operator represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists and DoesNotExist.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: values is an array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. This array is replaced during a strategic
               merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchArgsDict(
        TypedDict
    ):
        """
        A label query over the set of namespaces that the term applies to.
        The term is applied to the union of the namespaces selected by this field
        and the ones listed in the namespaces field.
        null selector and null or empty namespaces list means "this pod's namespace".
        An empty selector ({}) matches all namespaces.
        """

        match_expressions: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArgsDict"
                    ]
                ]
            ]
        ]
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        match_labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchArgs:
    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArgs"
                    ]
                ]
            ]
        ] = None,
        match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None
    ):
        """
        A label query over the set of namespaces that the term applies to.
        The term is applied to the union of the namespaces selected by this field
        and the ones listed in the namespaces field.
        null selector and null or empty namespaces list means "this pod's namespace".
        An empty selector ({}) matches all namespaces.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArgs']]] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
               map is equivalent to an element of matchExpressions, whose key field is "key", the
               operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArgs"
                ]
            ]
        ]
    ]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(
        self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
    ):
        pulumi.set(self, "match_labels", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgsDict(
        TypedDict
    ):
        """
        A label query over the set of namespaces that the term applies to.
        The term is applied to the union of the namespaces selected by this field
        and the ones listed in the namespaces field.
        null selector and null or empty namespaces list means "this pod's namespace".
        An empty selector ({}) matches all namespaces.
        """

        match_expressions: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgsDict"
                    ]
                ]
            ]
        ]
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        match_labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs:
    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs"
                    ]
                ]
            ]
        ] = None,
        match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None
    ):
        """
        A label query over the set of namespaces that the term applies to.
        The term is applied to the union of the namespaces selected by this field
        and the ones listed in the namespaces field.
        null selector and null or empty namespaces list means "this pod's namespace".
        An empty selector ({}) matches all namespaces.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs']]] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
               map is equivalent to an element of matchExpressions, whose key field is "key", the
               operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs"
                ]
            ]
        ]
    ]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(
        self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
    ):
        pulumi.set(self, "match_labels", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchArgsDict(
        TypedDict
    ):
        """
        Required. A pod affinity term, associated with the corresponding weight.
        """

        label_selector: NotRequired[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchArgsDict"
            ]
        ]
        match_label_keys: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        MatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both matchLabelKeys and labelSelector.
        Also, matchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        mismatch_label_keys: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        MismatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
        Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        namespace_selector: NotRequired[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchArgsDict"
            ]
        ]
        namespaces: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        namespaces specifies a static list of namespace names that the term applies to.
        The term is applied to the union of the namespaces listed in this field
        and the ones selected by namespaceSelector.
        null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        """
        topology_key: NotRequired[pulumi.Input[str]]
        """
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
        the labelSelector in the specified namespaces, where co-located is defined as running on a node
        whose value of the label with key topologyKey matches that of any node on which any of the
        selected pods is running.
        Empty topologyKey is not allowed.
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchArgs:
    def __init__(
        __self__,
        *,
        label_selector: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchArgs"
            ]
        ] = None,
        match_label_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        mismatch_label_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        namespace_selector: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchArgs"
            ]
        ] = None,
        namespaces: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        topology_key: Optional[pulumi.Input[str]] = None
    ):
        """
        Required. A pod affinity term, associated with the corresponding weight.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] match_label_keys: MatchLabelKeys is a set of pod label keys to select which pods will
               be taken into consideration. The keys are used to lookup values from the
               incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
               to select the group of existing pods which pods will be taken into consideration
               for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
               pod labels will be ignored. The default value is empty.
               The same key is forbidden to exist in both matchLabelKeys and labelSelector.
               Also, matchLabelKeys cannot be set when labelSelector isn't set.
               This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] mismatch_label_keys: MismatchLabelKeys is a set of pod label keys to select which pods will
               be taken into consideration. The keys are used to lookup values from the
               incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
               to select the group of existing pods which pods will be taken into consideration
               for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
               pod labels will be ignored. The default value is empty.
               The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
               Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
               This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] namespaces: namespaces specifies a static list of namespace names that the term applies to.
               The term is applied to the union of the namespaces listed in this field
               and the ones selected by namespaceSelector.
               null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        :param pulumi.Input[str] topology_key: This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
               the labelSelector in the specified namespaces, where co-located is defined as running on a node
               whose value of the label with key topologyKey matches that of any node on which any of the
               selected pods is running.
               Empty topologyKey is not allowed.
        """
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if match_label_keys is not None:
            pulumi.set(__self__, "match_label_keys", match_label_keys)
        if mismatch_label_keys is not None:
            pulumi.set(__self__, "mismatch_label_keys", mismatch_label_keys)
        if namespace_selector is not None:
            pulumi.set(__self__, "namespace_selector", namespace_selector)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)
        if topology_key is not None:
            pulumi.set(__self__, "topology_key", topology_key)

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(
        self,
    ) -> Optional[
        pulumi.Input[
            "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchArgs"
        ]
    ]:
        return pulumi.get(self, "label_selector")

    @label_selector.setter
    def label_selector(
        self,
        value: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "label_selector", value)

    @property
    @pulumi.getter(name="matchLabelKeys")
    def match_label_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        MatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both matchLabelKeys and labelSelector.
        Also, matchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        return pulumi.get(self, "match_label_keys")

    @match_label_keys.setter
    def match_label_keys(
        self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]
    ):
        pulumi.set(self, "match_label_keys", value)

    @property
    @pulumi.getter(name="mismatchLabelKeys")
    def mismatch_label_keys(
        self,
    ) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        MismatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
        Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        return pulumi.get(self, "mismatch_label_keys")

    @mismatch_label_keys.setter
    def mismatch_label_keys(
        self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]
    ):
        pulumi.set(self, "mismatch_label_keys", value)

    @property
    @pulumi.getter(name="namespaceSelector")
    def namespace_selector(
        self,
    ) -> Optional[
        pulumi.Input[
            "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchArgs"
        ]
    ]:
        return pulumi.get(self, "namespace_selector")

    @namespace_selector.setter
    def namespace_selector(
        self,
        value: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "namespace_selector", value)

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        namespaces specifies a static list of namespace names that the term applies to.
        The term is applied to the union of the namespaces listed in this field
        and the ones selected by namespaceSelector.
        null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        """
        return pulumi.get(self, "namespaces")

    @namespaces.setter
    def namespaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "namespaces", value)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> Optional[pulumi.Input[str]]:
        """
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
        the labelSelector in the specified namespaces, where co-located is defined as running on a node
        whose value of the label with key topologyKey matches that of any node on which any of the
        selected pods is running.
        Empty topologyKey is not allowed.
        """
        return pulumi.get(self, "topology_key")

    @topology_key.setter
    def topology_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topology_key", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgsDict(
        TypedDict
    ):
        """
        Required. A pod affinity term, associated with the corresponding weight.
        """

        label_selector: NotRequired[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgsDict"
            ]
        ]
        match_label_keys: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        MatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both matchLabelKeys and labelSelector.
        Also, matchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        mismatch_label_keys: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        MismatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
        Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        namespace_selector: NotRequired[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgsDict"
            ]
        ]
        namespaces: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        namespaces specifies a static list of namespace names that the term applies to.
        The term is applied to the union of the namespaces listed in this field
        and the ones selected by namespaceSelector.
        null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        """
        topology_key: NotRequired[pulumi.Input[str]]
        """
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
        the labelSelector in the specified namespaces, where co-located is defined as running on a node
        whose value of the label with key topologyKey matches that of any node on which any of the
        selected pods is running.
        Empty topologyKey is not allowed.
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs:
    def __init__(
        __self__,
        *,
        label_selector: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs"
            ]
        ] = None,
        match_label_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        mismatch_label_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        namespace_selector: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs"
            ]
        ] = None,
        namespaces: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        topology_key: Optional[pulumi.Input[str]] = None
    ):
        """
        Required. A pod affinity term, associated with the corresponding weight.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] match_label_keys: MatchLabelKeys is a set of pod label keys to select which pods will
               be taken into consideration. The keys are used to lookup values from the
               incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
               to select the group of existing pods which pods will be taken into consideration
               for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
               pod labels will be ignored. The default value is empty.
               The same key is forbidden to exist in both matchLabelKeys and labelSelector.
               Also, matchLabelKeys cannot be set when labelSelector isn't set.
               This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] mismatch_label_keys: MismatchLabelKeys is a set of pod label keys to select which pods will
               be taken into consideration. The keys are used to lookup values from the
               incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
               to select the group of existing pods which pods will be taken into consideration
               for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
               pod labels will be ignored. The default value is empty.
               The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
               Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
               This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] namespaces: namespaces specifies a static list of namespace names that the term applies to.
               The term is applied to the union of the namespaces listed in this field
               and the ones selected by namespaceSelector.
               null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        :param pulumi.Input[str] topology_key: This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
               the labelSelector in the specified namespaces, where co-located is defined as running on a node
               whose value of the label with key topologyKey matches that of any node on which any of the
               selected pods is running.
               Empty topologyKey is not allowed.
        """
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if match_label_keys is not None:
            pulumi.set(__self__, "match_label_keys", match_label_keys)
        if mismatch_label_keys is not None:
            pulumi.set(__self__, "mismatch_label_keys", mismatch_label_keys)
        if namespace_selector is not None:
            pulumi.set(__self__, "namespace_selector", namespace_selector)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)
        if topology_key is not None:
            pulumi.set(__self__, "topology_key", topology_key)

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(
        self,
    ) -> Optional[
        pulumi.Input[
            "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs"
        ]
    ]:
        return pulumi.get(self, "label_selector")

    @label_selector.setter
    def label_selector(
        self,
        value: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs"
            ]
        ],
    ):
        pulumi.set(self, "label_selector", value)

    @property
    @pulumi.getter(name="matchLabelKeys")
    def match_label_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        MatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both matchLabelKeys and labelSelector.
        Also, matchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        return pulumi.get(self, "match_label_keys")

    @match_label_keys.setter
    def match_label_keys(
        self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]
    ):
        pulumi.set(self, "match_label_keys", value)

    @property
    @pulumi.getter(name="mismatchLabelKeys")
    def mismatch_label_keys(
        self,
    ) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        MismatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
        Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        return pulumi.get(self, "mismatch_label_keys")

    @mismatch_label_keys.setter
    def mismatch_label_keys(
        self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]
    ):
        pulumi.set(self, "mismatch_label_keys", value)

    @property
    @pulumi.getter(name="namespaceSelector")
    def namespace_selector(
        self,
    ) -> Optional[
        pulumi.Input[
            "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs"
        ]
    ]:
        return pulumi.get(self, "namespace_selector")

    @namespace_selector.setter
    def namespace_selector(
        self,
        value: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs"
            ]
        ],
    ):
        pulumi.set(self, "namespace_selector", value)

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        namespaces specifies a static list of namespace names that the term applies to.
        The term is applied to the union of the namespaces listed in this field
        and the ones selected by namespaceSelector.
        null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        """
        return pulumi.get(self, "namespaces")

    @namespaces.setter
    def namespaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "namespaces", value)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> Optional[pulumi.Input[str]]:
        """
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
        the labelSelector in the specified namespaces, where co-located is defined as running on a node
        whose value of the label with key topologyKey matches that of any node on which any of the
        selected pods is running.
        Empty topologyKey is not allowed.
        """
        return pulumi.get(self, "topology_key")

    @topology_key.setter
    def topology_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topology_key", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgsDict(
        TypedDict
    ):
        """
        The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
        """

        pod_affinity_term: NotRequired[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgsDict"
            ]
        ]
        weight: NotRequired[pulumi.Input[int]]
        """
        weight associated with matching the corresponding podAffinityTerm,
        in the range 1-100.
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs:
    def __init__(
        __self__,
        *,
        pod_affinity_term: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs"
            ]
        ] = None,
        weight: Optional[pulumi.Input[int]] = None
    ):
        """
        The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
        :param pulumi.Input[int] weight: weight associated with matching the corresponding podAffinityTerm,
               in the range 1-100.
        """
        if pod_affinity_term is not None:
            pulumi.set(__self__, "pod_affinity_term", pod_affinity_term)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter(name="podAffinityTerm")
    def pod_affinity_term(
        self,
    ) -> Optional[
        pulumi.Input[
            "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs"
        ]
    ]:
        return pulumi.get(self, "pod_affinity_term")

    @pod_affinity_term.setter
    def pod_affinity_term(
        self,
        value: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs"
            ]
        ],
    ):
        pulumi.set(self, "pod_affinity_term", value)

    @property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[int]]:
        """
        weight associated with matching the corresponding podAffinityTerm,
        in the range 1-100.
        """
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "weight", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArgsDict(
        TypedDict
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        key is the label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        operator: Optional[pulumi.Input[str]] = None,
        values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        :param pulumi.Input[str] key: key is the label key that the selector applies to.
        :param pulumi.Input[str] operator: operator represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists and DoesNotExist.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: values is an array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. This array is replaced during a strategic
               merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgsDict(
        TypedDict
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        key is the label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        operator: Optional[pulumi.Input[str]] = None,
        values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        :param pulumi.Input[str] key: key is the label key that the selector applies to.
        :param pulumi.Input[str] operator: operator represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists and DoesNotExist.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: values is an array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. This array is replaced during a strategic
               merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchArgsDict(
        TypedDict
    ):
        """
        A label query over a set of resources, in this case pods.
        If it's null, this PodAffinityTerm matches with no Pods.
        """

        match_expressions: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArgsDict"
                    ]
                ]
            ]
        ]
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        match_labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchArgs:
    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArgs"
                    ]
                ]
            ]
        ] = None,
        match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None
    ):
        """
        A label query over a set of resources, in this case pods.
        If it's null, this PodAffinityTerm matches with no Pods.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArgs']]] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
               map is equivalent to an element of matchExpressions, whose key field is "key", the
               operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArgs"
                ]
            ]
        ]
    ]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(
        self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
    ):
        pulumi.set(self, "match_labels", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgsDict(
        TypedDict
    ):
        """
        A label query over a set of resources, in this case pods.
        If it's null, this PodAffinityTerm matches with no Pods.
        """

        match_expressions: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgsDict"
                    ]
                ]
            ]
        ]
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        match_labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs:
    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs"
                    ]
                ]
            ]
        ] = None,
        match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None
    ):
        """
        A label query over a set of resources, in this case pods.
        If it's null, this PodAffinityTerm matches with no Pods.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs']]] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
               map is equivalent to an element of matchExpressions, whose key field is "key", the
               operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs"
                ]
            ]
        ]
    ]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(
        self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
    ):
        pulumi.set(self, "match_labels", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArgsDict(
        TypedDict
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        key is the label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        operator: Optional[pulumi.Input[str]] = None,
        values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        :param pulumi.Input[str] key: key is the label key that the selector applies to.
        :param pulumi.Input[str] operator: operator represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists and DoesNotExist.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: values is an array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. This array is replaced during a strategic
               merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgsDict(
        TypedDict
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        key is the label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        operator: Optional[pulumi.Input[str]] = None,
        values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        :param pulumi.Input[str] key: key is the label key that the selector applies to.
        :param pulumi.Input[str] operator: operator represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists and DoesNotExist.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: values is an array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. This array is replaced during a strategic
               merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchArgsDict(
        TypedDict
    ):
        """
        A label query over the set of namespaces that the term applies to.
        The term is applied to the union of the namespaces selected by this field
        and the ones listed in the namespaces field.
        null selector and null or empty namespaces list means "this pod's namespace".
        An empty selector ({}) matches all namespaces.
        """

        match_expressions: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArgsDict"
                    ]
                ]
            ]
        ]
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        match_labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchArgs:
    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArgs"
                    ]
                ]
            ]
        ] = None,
        match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None
    ):
        """
        A label query over the set of namespaces that the term applies to.
        The term is applied to the union of the namespaces selected by this field
        and the ones listed in the namespaces field.
        null selector and null or empty namespaces list means "this pod's namespace".
        An empty selector ({}) matches all namespaces.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArgs']]] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
               map is equivalent to an element of matchExpressions, whose key field is "key", the
               operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArgs"
                ]
            ]
        ]
    ]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(
        self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
    ):
        pulumi.set(self, "match_labels", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgsDict(
        TypedDict
    ):
        """
        A label query over the set of namespaces that the term applies to.
        The term is applied to the union of the namespaces selected by this field
        and the ones listed in the namespaces field.
        null selector and null or empty namespaces list means "this pod's namespace".
        An empty selector ({}) matches all namespaces.
        """

        match_expressions: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgsDict"
                    ]
                ]
            ]
        ]
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        match_labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs:
    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs"
                    ]
                ]
            ]
        ] = None,
        match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None
    ):
        """
        A label query over the set of namespaces that the term applies to.
        The term is applied to the union of the namespaces selected by this field
        and the ones listed in the namespaces field.
        null selector and null or empty namespaces list means "this pod's namespace".
        An empty selector ({}) matches all namespaces.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs']]] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
               map is equivalent to an element of matchExpressions, whose key field is "key", the
               operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs"
                ]
            ]
        ]
    ]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(
        self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
    ):
        pulumi.set(self, "match_labels", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgsDict(
        TypedDict
    ):
        """
        Defines a set of pods (namely those matching the labelSelector
        relative to the given namespace(s)) that this pod should be
        co-located (affinity) or not co-located (anti-affinity) with,
        where co-located is defined as running on a node whose value of
        the label with key <topologyKey> matches that of any node on which
        a pod of the set of pods is running
        """

        label_selector: NotRequired[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchArgsDict"
            ]
        ]
        match_label_keys: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        MatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both matchLabelKeys and labelSelector.
        Also, matchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        mismatch_label_keys: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        MismatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
        Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        namespace_selector: NotRequired[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchArgsDict"
            ]
        ]
        namespaces: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        namespaces specifies a static list of namespace names that the term applies to.
        The term is applied to the union of the namespaces listed in this field
        and the ones selected by namespaceSelector.
        null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        """
        topology_key: NotRequired[pulumi.Input[str]]
        """
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
        the labelSelector in the specified namespaces, where co-located is defined as running on a node
        whose value of the label with key topologyKey matches that of any node on which any of the
        selected pods is running.
        Empty topologyKey is not allowed.
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgs:
    def __init__(
        __self__,
        *,
        label_selector: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchArgs"
            ]
        ] = None,
        match_label_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        mismatch_label_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        namespace_selector: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchArgs"
            ]
        ] = None,
        namespaces: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        topology_key: Optional[pulumi.Input[str]] = None
    ):
        """
        Defines a set of pods (namely those matching the labelSelector
        relative to the given namespace(s)) that this pod should be
        co-located (affinity) or not co-located (anti-affinity) with,
        where co-located is defined as running on a node whose value of
        the label with key <topologyKey> matches that of any node on which
        a pod of the set of pods is running
        :param pulumi.Input[Sequence[pulumi.Input[str]]] match_label_keys: MatchLabelKeys is a set of pod label keys to select which pods will
               be taken into consideration. The keys are used to lookup values from the
               incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
               to select the group of existing pods which pods will be taken into consideration
               for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
               pod labels will be ignored. The default value is empty.
               The same key is forbidden to exist in both matchLabelKeys and labelSelector.
               Also, matchLabelKeys cannot be set when labelSelector isn't set.
               This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] mismatch_label_keys: MismatchLabelKeys is a set of pod label keys to select which pods will
               be taken into consideration. The keys are used to lookup values from the
               incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
               to select the group of existing pods which pods will be taken into consideration
               for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
               pod labels will be ignored. The default value is empty.
               The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
               Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
               This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] namespaces: namespaces specifies a static list of namespace names that the term applies to.
               The term is applied to the union of the namespaces listed in this field
               and the ones selected by namespaceSelector.
               null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        :param pulumi.Input[str] topology_key: This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
               the labelSelector in the specified namespaces, where co-located is defined as running on a node
               whose value of the label with key topologyKey matches that of any node on which any of the
               selected pods is running.
               Empty topologyKey is not allowed.
        """
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if match_label_keys is not None:
            pulumi.set(__self__, "match_label_keys", match_label_keys)
        if mismatch_label_keys is not None:
            pulumi.set(__self__, "mismatch_label_keys", mismatch_label_keys)
        if namespace_selector is not None:
            pulumi.set(__self__, "namespace_selector", namespace_selector)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)
        if topology_key is not None:
            pulumi.set(__self__, "topology_key", topology_key)

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(
        self,
    ) -> Optional[
        pulumi.Input[
            "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchArgs"
        ]
    ]:
        return pulumi.get(self, "label_selector")

    @label_selector.setter
    def label_selector(
        self,
        value: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "label_selector", value)

    @property
    @pulumi.getter(name="matchLabelKeys")
    def match_label_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        MatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both matchLabelKeys and labelSelector.
        Also, matchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        return pulumi.get(self, "match_label_keys")

    @match_label_keys.setter
    def match_label_keys(
        self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]
    ):
        pulumi.set(self, "match_label_keys", value)

    @property
    @pulumi.getter(name="mismatchLabelKeys")
    def mismatch_label_keys(
        self,
    ) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        MismatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
        Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        return pulumi.get(self, "mismatch_label_keys")

    @mismatch_label_keys.setter
    def mismatch_label_keys(
        self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]
    ):
        pulumi.set(self, "mismatch_label_keys", value)

    @property
    @pulumi.getter(name="namespaceSelector")
    def namespace_selector(
        self,
    ) -> Optional[
        pulumi.Input[
            "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchArgs"
        ]
    ]:
        return pulumi.get(self, "namespace_selector")

    @namespace_selector.setter
    def namespace_selector(
        self,
        value: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "namespace_selector", value)

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        namespaces specifies a static list of namespace names that the term applies to.
        The term is applied to the union of the namespaces listed in this field
        and the ones selected by namespaceSelector.
        null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        """
        return pulumi.get(self, "namespaces")

    @namespaces.setter
    def namespaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "namespaces", value)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> Optional[pulumi.Input[str]]:
        """
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
        the labelSelector in the specified namespaces, where co-located is defined as running on a node
        whose value of the label with key topologyKey matches that of any node on which any of the
        selected pods is running.
        Empty topologyKey is not allowed.
        """
        return pulumi.get(self, "topology_key")

    @topology_key.setter
    def topology_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topology_key", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgsDict(
        TypedDict
    ):
        """
        Defines a set of pods (namely those matching the labelSelector
        relative to the given namespace(s)) that this pod should be
        co-located (affinity) or not co-located (anti-affinity) with,
        where co-located is defined as running on a node whose value of
        the label with key <topologyKey> matches that of any node on which
        a pod of the set of pods is running
        """

        label_selector: NotRequired[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgsDict"
            ]
        ]
        match_label_keys: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        MatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both matchLabelKeys and labelSelector.
        Also, matchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        mismatch_label_keys: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        MismatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
        Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        namespace_selector: NotRequired[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgsDict"
            ]
        ]
        namespaces: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        namespaces specifies a static list of namespace names that the term applies to.
        The term is applied to the union of the namespaces listed in this field
        and the ones selected by namespaceSelector.
        null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        """
        topology_key: NotRequired[pulumi.Input[str]]
        """
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
        the labelSelector in the specified namespaces, where co-located is defined as running on a node
        whose value of the label with key topologyKey matches that of any node on which any of the
        selected pods is running.
        Empty topologyKey is not allowed.
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs:
    def __init__(
        __self__,
        *,
        label_selector: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs"
            ]
        ] = None,
        match_label_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        mismatch_label_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        namespace_selector: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs"
            ]
        ] = None,
        namespaces: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        topology_key: Optional[pulumi.Input[str]] = None
    ):
        """
        Defines a set of pods (namely those matching the labelSelector
        relative to the given namespace(s)) that this pod should be
        co-located (affinity) or not co-located (anti-affinity) with,
        where co-located is defined as running on a node whose value of
        the label with key <topologyKey> matches that of any node on which
        a pod of the set of pods is running
        :param pulumi.Input[Sequence[pulumi.Input[str]]] match_label_keys: MatchLabelKeys is a set of pod label keys to select which pods will
               be taken into consideration. The keys are used to lookup values from the
               incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
               to select the group of existing pods which pods will be taken into consideration
               for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
               pod labels will be ignored. The default value is empty.
               The same key is forbidden to exist in both matchLabelKeys and labelSelector.
               Also, matchLabelKeys cannot be set when labelSelector isn't set.
               This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] mismatch_label_keys: MismatchLabelKeys is a set of pod label keys to select which pods will
               be taken into consideration. The keys are used to lookup values from the
               incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
               to select the group of existing pods which pods will be taken into consideration
               for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
               pod labels will be ignored. The default value is empty.
               The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
               Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
               This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] namespaces: namespaces specifies a static list of namespace names that the term applies to.
               The term is applied to the union of the namespaces listed in this field
               and the ones selected by namespaceSelector.
               null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        :param pulumi.Input[str] topology_key: This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
               the labelSelector in the specified namespaces, where co-located is defined as running on a node
               whose value of the label with key topologyKey matches that of any node on which any of the
               selected pods is running.
               Empty topologyKey is not allowed.
        """
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if match_label_keys is not None:
            pulumi.set(__self__, "match_label_keys", match_label_keys)
        if mismatch_label_keys is not None:
            pulumi.set(__self__, "mismatch_label_keys", mismatch_label_keys)
        if namespace_selector is not None:
            pulumi.set(__self__, "namespace_selector", namespace_selector)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)
        if topology_key is not None:
            pulumi.set(__self__, "topology_key", topology_key)

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(
        self,
    ) -> Optional[
        pulumi.Input[
            "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs"
        ]
    ]:
        return pulumi.get(self, "label_selector")

    @label_selector.setter
    def label_selector(
        self,
        value: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs"
            ]
        ],
    ):
        pulumi.set(self, "label_selector", value)

    @property
    @pulumi.getter(name="matchLabelKeys")
    def match_label_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        MatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both matchLabelKeys and labelSelector.
        Also, matchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        return pulumi.get(self, "match_label_keys")

    @match_label_keys.setter
    def match_label_keys(
        self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]
    ):
        pulumi.set(self, "match_label_keys", value)

    @property
    @pulumi.getter(name="mismatchLabelKeys")
    def mismatch_label_keys(
        self,
    ) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        MismatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
        Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        return pulumi.get(self, "mismatch_label_keys")

    @mismatch_label_keys.setter
    def mismatch_label_keys(
        self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]
    ):
        pulumi.set(self, "mismatch_label_keys", value)

    @property
    @pulumi.getter(name="namespaceSelector")
    def namespace_selector(
        self,
    ) -> Optional[
        pulumi.Input[
            "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs"
        ]
    ]:
        return pulumi.get(self, "namespace_selector")

    @namespace_selector.setter
    def namespace_selector(
        self,
        value: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs"
            ]
        ],
    ):
        pulumi.set(self, "namespace_selector", value)

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        namespaces specifies a static list of namespace names that the term applies to.
        The term is applied to the union of the namespaces listed in this field
        and the ones selected by namespaceSelector.
        null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        """
        return pulumi.get(self, "namespaces")

    @namespaces.setter
    def namespaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "namespaces", value)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> Optional[pulumi.Input[str]]:
        """
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
        the labelSelector in the specified namespaces, where co-located is defined as running on a node
        whose value of the label with key topologyKey matches that of any node on which any of the
        selected pods is running.
        Empty topologyKey is not allowed.
        """
        return pulumi.get(self, "topology_key")

    @topology_key.setter
    def topology_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topology_key", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityArgsDict(
        TypedDict
    ):
        """
        Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
        """

        preferred_during_scheduling_ignored_during_execution: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgsDict"
                    ]
                ]
            ]
        ]
        """
        The scheduler will prefer to schedule pods to nodes that satisfy
        the anti-affinity expressions specified by this field, but it may choose
        a node that violates one or more of the expressions. The node that is
        most preferred is the one with the greatest sum of weights, i.e.
        for each node that meets all of the scheduling requirements (resource
        request, requiredDuringScheduling anti-affinity expressions, etc.),
        compute a sum by iterating through the elements of this field and adding
        "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
        node(s) with the highest sum are the most preferred.
        """
        required_during_scheduling_ignored_during_execution: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgsDict"
                    ]
                ]
            ]
        ]
        """
        If the anti-affinity requirements specified by this field are not met at
        scheduling time, the pod will not be scheduled onto the node.
        If the anti-affinity requirements specified by this field cease to be met
        at some point during pod execution (e.g. due to a pod label update), the
        system may or may not try to eventually evict the pod from its node.
        When there are multiple elements, the lists of nodes corresponding to each
        podAffinityTerm are intersected, i.e. all terms must be satisfied.
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityArgs:
    def __init__(
        __self__,
        *,
        preferred_during_scheduling_ignored_during_execution: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs"
                    ]
                ]
            ]
        ] = None,
        required_during_scheduling_ignored_during_execution: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs"
                    ]
                ]
            ]
        ] = None
    ):
        """
        Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
        :param pulumi.Input[Sequence[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs']]] preferred_during_scheduling_ignored_during_execution: The scheduler will prefer to schedule pods to nodes that satisfy
               the anti-affinity expressions specified by this field, but it may choose
               a node that violates one or more of the expressions. The node that is
               most preferred is the one with the greatest sum of weights, i.e.
               for each node that meets all of the scheduling requirements (resource
               request, requiredDuringScheduling anti-affinity expressions, etc.),
               compute a sum by iterating through the elements of this field and adding
               "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
               node(s) with the highest sum are the most preferred.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs']]] required_during_scheduling_ignored_during_execution: If the anti-affinity requirements specified by this field are not met at
               scheduling time, the pod will not be scheduled onto the node.
               If the anti-affinity requirements specified by this field cease to be met
               at some point during pod execution (e.g. due to a pod label update), the
               system may or may not try to eventually evict the pod from its node.
               When there are multiple elements, the lists of nodes corresponding to each
               podAffinityTerm are intersected, i.e. all terms must be satisfied.
        """
        if preferred_during_scheduling_ignored_during_execution is not None:
            pulumi.set(
                __self__,
                "preferred_during_scheduling_ignored_during_execution",
                preferred_during_scheduling_ignored_during_execution,
            )
        if required_during_scheduling_ignored_during_execution is not None:
            pulumi.set(
                __self__,
                "required_during_scheduling_ignored_during_execution",
                required_during_scheduling_ignored_during_execution,
            )

    @property
    @pulumi.getter(name="preferredDuringSchedulingIgnoredDuringExecution")
    def preferred_during_scheduling_ignored_during_execution(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs"
                ]
            ]
        ]
    ]:
        """
        The scheduler will prefer to schedule pods to nodes that satisfy
        the anti-affinity expressions specified by this field, but it may choose
        a node that violates one or more of the expressions. The node that is
        most preferred is the one with the greatest sum of weights, i.e.
        for each node that meets all of the scheduling requirements (resource
        request, requiredDuringScheduling anti-affinity expressions, etc.),
        compute a sum by iterating through the elements of this field and adding
        "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
        node(s) with the highest sum are the most preferred.
        """
        return pulumi.get(self, "preferred_during_scheduling_ignored_during_execution")

    @preferred_during_scheduling_ignored_during_execution.setter
    def preferred_during_scheduling_ignored_during_execution(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "preferred_during_scheduling_ignored_during_execution", value)

    @property
    @pulumi.getter(name="requiredDuringSchedulingIgnoredDuringExecution")
    def required_during_scheduling_ignored_during_execution(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs"
                ]
            ]
        ]
    ]:
        """
        If the anti-affinity requirements specified by this field are not met at
        scheduling time, the pod will not be scheduled onto the node.
        If the anti-affinity requirements specified by this field cease to be met
        at some point during pod execution (e.g. due to a pod label update), the
        system may or may not try to eventually evict the pod from its node.
        When there are multiple elements, the lists of nodes corresponding to each
        podAffinityTerm are intersected, i.e. all terms must be satisfied.
        """
        return pulumi.get(self, "required_during_scheduling_ignored_during_execution")

    @required_during_scheduling_ignored_during_execution.setter
    def required_during_scheduling_ignored_during_execution(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "required_during_scheduling_ignored_during_execution", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityArgsDict(
        TypedDict
    ):
        """
        If specified, the pod's scheduling constraints
        """

        node_affinity: NotRequired[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityArgsDict"
            ]
        ]
        pod_affinity: NotRequired[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityArgsDict"
            ]
        ]
        pod_anti_affinity: NotRequired[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityArgsDict"
            ]
        ]

elif False:
    ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityArgs:
    def __init__(
        __self__,
        *,
        node_affinity: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityArgs"
            ]
        ] = None,
        pod_affinity: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityArgs"
            ]
        ] = None,
        pod_anti_affinity: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityArgs"
            ]
        ] = None
    ):
        """
        If specified, the pod's scheduling constraints
        """
        if node_affinity is not None:
            pulumi.set(__self__, "node_affinity", node_affinity)
        if pod_affinity is not None:
            pulumi.set(__self__, "pod_affinity", pod_affinity)
        if pod_anti_affinity is not None:
            pulumi.set(__self__, "pod_anti_affinity", pod_anti_affinity)

    @property
    @pulumi.getter(name="nodeAffinity")
    def node_affinity(
        self,
    ) -> Optional[
        pulumi.Input[
            "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityArgs"
        ]
    ]:
        return pulumi.get(self, "node_affinity")

    @node_affinity.setter
    def node_affinity(
        self,
        value: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityArgs"
            ]
        ],
    ):
        pulumi.set(self, "node_affinity", value)

    @property
    @pulumi.getter(name="podAffinity")
    def pod_affinity(
        self,
    ) -> Optional[
        pulumi.Input[
            "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityArgs"
        ]
    ]:
        return pulumi.get(self, "pod_affinity")

    @pod_affinity.setter
    def pod_affinity(
        self,
        value: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityArgs"
            ]
        ],
    ):
        pulumi.set(self, "pod_affinity", value)

    @property
    @pulumi.getter(name="podAntiAffinity")
    def pod_anti_affinity(
        self,
    ) -> Optional[
        pulumi.Input[
            "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityArgs"
        ]
    ]:
        return pulumi.get(self, "pod_anti_affinity")

    @pod_anti_affinity.setter
    def pod_anti_affinity(
        self,
        value: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityArgs"
            ]
        ],
    ):
        pulumi.set(self, "pod_anti_affinity", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecImagePullSecretsPatchArgsDict(
        TypedDict
    ):
        """
        LocalObjectReference contains enough information to let you locate the
        referenced object inside the same namespace.
        """

        name: NotRequired[pulumi.Input[str]]
        """
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecImagePullSecretsPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecImagePullSecretsPatchArgs:
    def __init__(__self__, *, name: Optional[pulumi.Input[str]] = None):
        """
        LocalObjectReference contains enough information to let you locate the
        referenced object inside the same namespace.
        :param pulumi.Input[str] name: Name of the referent.
               This field is effectively required, but due to backwards compatibility is
               allowed to be empty. Instances of this type with an empty value here are
               almost certainly wrong.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecImagePullSecretsArgsDict(
        TypedDict
    ):
        """
        LocalObjectReference contains enough information to let you locate the
        referenced object inside the same namespace.
        """

        name: NotRequired[pulumi.Input[str]]
        """
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecImagePullSecretsArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecImagePullSecretsArgs:
    def __init__(__self__, *, name: Optional[pulumi.Input[str]] = None):
        """
        LocalObjectReference contains enough information to let you locate the
        referenced object inside the same namespace.
        :param pulumi.Input[str] name: Name of the referent.
               This field is effectively required, but due to backwards compatibility is
               allowed to be empty. Instances of this type with an empty value here are
               almost certainly wrong.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecPatchArgsDict(
        TypedDict
    ):
        """
        PodSpec defines overrides for the HTTP01 challenge solver pod.
        Check ACMEChallengeSolverHTTP01IngressPodSpec to find out currently supported fields.
        All other fields will be ignored.
        """

        affinity: NotRequired[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPatchArgsDict"
            ]
        ]
        image_pull_secrets: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecImagePullSecretsPatchArgsDict"
                    ]
                ]
            ]
        ]
        """
        If specified, the pod's imagePullSecrets
        """
        node_selector: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        NodeSelector is a selector which must be true for the pod to fit on a node.
        Selector which must match a node's labels for the pod to be scheduled on that node.
        More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
        """
        priority_class_name: NotRequired[pulumi.Input[str]]
        """
        If specified, the pod's priorityClassName.
        """
        security_context: NotRequired[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextPatchArgsDict"
            ]
        ]
        service_account_name: NotRequired[pulumi.Input[str]]
        """
        If specified, the pod's service account
        """
        tolerations: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecTolerationsPatchArgsDict"
                    ]
                ]
            ]
        ]
        """
        If specified, the pod's tolerations.
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecPatchArgs:
    def __init__(
        __self__,
        *,
        affinity: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPatchArgs"
            ]
        ] = None,
        image_pull_secrets: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecImagePullSecretsPatchArgs"
                    ]
                ]
            ]
        ] = None,
        node_selector: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
        priority_class_name: Optional[pulumi.Input[str]] = None,
        security_context: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextPatchArgs"
            ]
        ] = None,
        service_account_name: Optional[pulumi.Input[str]] = None,
        tolerations: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecTolerationsPatchArgs"
                    ]
                ]
            ]
        ] = None
    ):
        """
        PodSpec defines overrides for the HTTP01 challenge solver pod.
        Check ACMEChallengeSolverHTTP01IngressPodSpec to find out currently supported fields.
        All other fields will be ignored.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecImagePullSecretsPatchArgs']]] image_pull_secrets: If specified, the pod's imagePullSecrets
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] node_selector: NodeSelector is a selector which must be true for the pod to fit on a node.
               Selector which must match a node's labels for the pod to be scheduled on that node.
               More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
        :param pulumi.Input[str] priority_class_name: If specified, the pod's priorityClassName.
        :param pulumi.Input[str] service_account_name: If specified, the pod's service account
        :param pulumi.Input[Sequence[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecTolerationsPatchArgs']]] tolerations: If specified, the pod's tolerations.
        """
        if affinity is not None:
            pulumi.set(__self__, "affinity", affinity)
        if image_pull_secrets is not None:
            pulumi.set(__self__, "image_pull_secrets", image_pull_secrets)
        if node_selector is not None:
            pulumi.set(__self__, "node_selector", node_selector)
        if priority_class_name is not None:
            pulumi.set(__self__, "priority_class_name", priority_class_name)
        if security_context is not None:
            pulumi.set(__self__, "security_context", security_context)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tolerations is not None:
            pulumi.set(__self__, "tolerations", tolerations)

    @property
    @pulumi.getter
    def affinity(
        self,
    ) -> Optional[
        pulumi.Input[
            "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPatchArgs"
        ]
    ]:
        return pulumi.get(self, "affinity")

    @affinity.setter
    def affinity(
        self,
        value: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "affinity", value)

    @property
    @pulumi.getter(name="imagePullSecrets")
    def image_pull_secrets(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecImagePullSecretsPatchArgs"
                ]
            ]
        ]
    ]:
        """
        If specified, the pod's imagePullSecrets
        """
        return pulumi.get(self, "image_pull_secrets")

    @image_pull_secrets.setter
    def image_pull_secrets(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecImagePullSecretsPatchArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "image_pull_secrets", value)

    @property
    @pulumi.getter(name="nodeSelector")
    def node_selector(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        NodeSelector is a selector which must be true for the pod to fit on a node.
        Selector which must match a node's labels for the pod to be scheduled on that node.
        More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
        """
        return pulumi.get(self, "node_selector")

    @node_selector.setter
    def node_selector(
        self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
    ):
        pulumi.set(self, "node_selector", value)

    @property
    @pulumi.getter(name="priorityClassName")
    def priority_class_name(self) -> Optional[pulumi.Input[str]]:
        """
        If specified, the pod's priorityClassName.
        """
        return pulumi.get(self, "priority_class_name")

    @priority_class_name.setter
    def priority_class_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "priority_class_name", value)

    @property
    @pulumi.getter(name="securityContext")
    def security_context(
        self,
    ) -> Optional[
        pulumi.Input[
            "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextPatchArgs"
        ]
    ]:
        return pulumi.get(self, "security_context")

    @security_context.setter
    def security_context(
        self,
        value: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextPatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "security_context", value)

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[pulumi.Input[str]]:
        """
        If specified, the pod's service account
        """
        return pulumi.get(self, "service_account_name")

    @service_account_name.setter
    def service_account_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account_name", value)

    @property
    @pulumi.getter
    def tolerations(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecTolerationsPatchArgs"
                ]
            ]
        ]
    ]:
        """
        If specified, the pod's tolerations.
        """
        return pulumi.get(self, "tolerations")

    @tolerations.setter
    def tolerations(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecTolerationsPatchArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "tolerations", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextPatchArgsDict(
        TypedDict
    ):
        """
        If specified, the pod's security context
        """

        fs_group: NotRequired[pulumi.Input[int]]
        """
        A special supplemental group that applies to all containers in a pod.
        Some volume types allow the Kubelet to change the ownership of that volume
        to be owned by the pod:

        1. The owning GID will be the FSGroup
        2. The setgid bit is set (new files created in the volume will be owned by FSGroup)
        3. The permission bits are OR'd with rw-rw----

        If unset, the Kubelet will not modify the ownership and permissions of any volume.
        Note that this field cannot be set when spec.os.name is windows.
        """
        fs_group_change_policy: NotRequired[pulumi.Input[str]]
        """
        fsGroupChangePolicy defines behavior of changing ownership and permission of the volume
        before being exposed inside Pod. This field will only apply to
        volume types which support fsGroup based ownership(and permissions).
        It will have no effect on ephemeral volume types such as: secret, configmaps
        and emptydir.
        Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used.
        Note that this field cannot be set when spec.os.name is windows.
        """
        run_as_group: NotRequired[pulumi.Input[int]]
        """
        The GID to run the entrypoint of the container process.
        Uses runtime default if unset.
        May also be set in SecurityContext.  If set in both SecurityContext and
        PodSecurityContext, the value specified in SecurityContext takes precedence
        for that container.
        Note that this field cannot be set when spec.os.name is windows.
        """
        run_as_non_root: NotRequired[pulumi.Input[bool]]
        """
        Indicates that the container must run as a non-root user.
        If true, the Kubelet will validate the image at runtime to ensure that it
        does not run as UID 0 (root) and fail to start the container if it does.
        If unset or false, no such validation will be performed.
        May also be set in SecurityContext.  If set in both SecurityContext and
        PodSecurityContext, the value specified in SecurityContext takes precedence.
        """
        run_as_user: NotRequired[pulumi.Input[int]]
        """
        The UID to run the entrypoint of the container process.
        Defaults to user specified in image metadata if unspecified.
        May also be set in SecurityContext.  If set in both SecurityContext and
        PodSecurityContext, the value specified in SecurityContext takes precedence
        for that container.
        Note that this field cannot be set when spec.os.name is windows.
        """
        se_linux_options: NotRequired[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSeLinuxOptionsPatchArgsDict"
            ]
        ]
        seccomp_profile: NotRequired[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSeccompProfilePatchArgsDict"
            ]
        ]
        supplemental_groups: NotRequired[pulumi.Input[Sequence[pulumi.Input[int]]]]
        """
        A list of groups applied to the first process run in each container, in addition
        to the container's primary GID, the fsGroup (if specified), and group memberships
        defined in the container image for the uid of the container process. If unspecified,
        no additional groups are added to any container. Note that group memberships
        defined in the container image for the uid of the container process are still effective,
        even if they are not included in this list.
        Note that this field cannot be set when spec.os.name is windows.
        """
        sysctls: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSysctlsPatchArgsDict"
                    ]
                ]
            ]
        ]
        """
        Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported
        sysctls (by the container runtime) might fail to launch.
        Note that this field cannot be set when spec.os.name is windows.
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextPatchArgs:
    def __init__(
        __self__,
        *,
        fs_group: Optional[pulumi.Input[int]] = None,
        fs_group_change_policy: Optional[pulumi.Input[str]] = None,
        run_as_group: Optional[pulumi.Input[int]] = None,
        run_as_non_root: Optional[pulumi.Input[bool]] = None,
        run_as_user: Optional[pulumi.Input[int]] = None,
        se_linux_options: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSeLinuxOptionsPatchArgs"
            ]
        ] = None,
        seccomp_profile: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSeccompProfilePatchArgs"
            ]
        ] = None,
        supplemental_groups: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
        sysctls: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSysctlsPatchArgs"
                    ]
                ]
            ]
        ] = None
    ):
        """
        If specified, the pod's security context
        :param pulumi.Input[int] fs_group: A special supplemental group that applies to all containers in a pod.
               Some volume types allow the Kubelet to change the ownership of that volume
               to be owned by the pod:

               1. The owning GID will be the FSGroup
               2. The setgid bit is set (new files created in the volume will be owned by FSGroup)
               3. The permission bits are OR'd with rw-rw----

               If unset, the Kubelet will not modify the ownership and permissions of any volume.
               Note that this field cannot be set when spec.os.name is windows.
        :param pulumi.Input[str] fs_group_change_policy: fsGroupChangePolicy defines behavior of changing ownership and permission of the volume
               before being exposed inside Pod. This field will only apply to
               volume types which support fsGroup based ownership(and permissions).
               It will have no effect on ephemeral volume types such as: secret, configmaps
               and emptydir.
               Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used.
               Note that this field cannot be set when spec.os.name is windows.
        :param pulumi.Input[int] run_as_group: The GID to run the entrypoint of the container process.
               Uses runtime default if unset.
               May also be set in SecurityContext.  If set in both SecurityContext and
               PodSecurityContext, the value specified in SecurityContext takes precedence
               for that container.
               Note that this field cannot be set when spec.os.name is windows.
        :param pulumi.Input[bool] run_as_non_root: Indicates that the container must run as a non-root user.
               If true, the Kubelet will validate the image at runtime to ensure that it
               does not run as UID 0 (root) and fail to start the container if it does.
               If unset or false, no such validation will be performed.
               May also be set in SecurityContext.  If set in both SecurityContext and
               PodSecurityContext, the value specified in SecurityContext takes precedence.
        :param pulumi.Input[int] run_as_user: The UID to run the entrypoint of the container process.
               Defaults to user specified in image metadata if unspecified.
               May also be set in SecurityContext.  If set in both SecurityContext and
               PodSecurityContext, the value specified in SecurityContext takes precedence
               for that container.
               Note that this field cannot be set when spec.os.name is windows.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] supplemental_groups: A list of groups applied to the first process run in each container, in addition
               to the container's primary GID, the fsGroup (if specified), and group memberships
               defined in the container image for the uid of the container process. If unspecified,
               no additional groups are added to any container. Note that group memberships
               defined in the container image for the uid of the container process are still effective,
               even if they are not included in this list.
               Note that this field cannot be set when spec.os.name is windows.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSysctlsPatchArgs']]] sysctls: Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported
               sysctls (by the container runtime) might fail to launch.
               Note that this field cannot be set when spec.os.name is windows.
        """
        if fs_group is not None:
            pulumi.set(__self__, "fs_group", fs_group)
        if fs_group_change_policy is not None:
            pulumi.set(__self__, "fs_group_change_policy", fs_group_change_policy)
        if run_as_group is not None:
            pulumi.set(__self__, "run_as_group", run_as_group)
        if run_as_non_root is not None:
            pulumi.set(__self__, "run_as_non_root", run_as_non_root)
        if run_as_user is not None:
            pulumi.set(__self__, "run_as_user", run_as_user)
        if se_linux_options is not None:
            pulumi.set(__self__, "se_linux_options", se_linux_options)
        if seccomp_profile is not None:
            pulumi.set(__self__, "seccomp_profile", seccomp_profile)
        if supplemental_groups is not None:
            pulumi.set(__self__, "supplemental_groups", supplemental_groups)
        if sysctls is not None:
            pulumi.set(__self__, "sysctls", sysctls)

    @property
    @pulumi.getter(name="fsGroup")
    def fs_group(self) -> Optional[pulumi.Input[int]]:
        """
        A special supplemental group that applies to all containers in a pod.
        Some volume types allow the Kubelet to change the ownership of that volume
        to be owned by the pod:

        1. The owning GID will be the FSGroup
        2. The setgid bit is set (new files created in the volume will be owned by FSGroup)
        3. The permission bits are OR'd with rw-rw----

        If unset, the Kubelet will not modify the ownership and permissions of any volume.
        Note that this field cannot be set when spec.os.name is windows.
        """
        return pulumi.get(self, "fs_group")

    @fs_group.setter
    def fs_group(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fs_group", value)

    @property
    @pulumi.getter(name="fsGroupChangePolicy")
    def fs_group_change_policy(self) -> Optional[pulumi.Input[str]]:
        """
        fsGroupChangePolicy defines behavior of changing ownership and permission of the volume
        before being exposed inside Pod. This field will only apply to
        volume types which support fsGroup based ownership(and permissions).
        It will have no effect on ephemeral volume types such as: secret, configmaps
        and emptydir.
        Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used.
        Note that this field cannot be set when spec.os.name is windows.
        """
        return pulumi.get(self, "fs_group_change_policy")

    @fs_group_change_policy.setter
    def fs_group_change_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fs_group_change_policy", value)

    @property
    @pulumi.getter(name="runAsGroup")
    def run_as_group(self) -> Optional[pulumi.Input[int]]:
        """
        The GID to run the entrypoint of the container process.
        Uses runtime default if unset.
        May also be set in SecurityContext.  If set in both SecurityContext and
        PodSecurityContext, the value specified in SecurityContext takes precedence
        for that container.
        Note that this field cannot be set when spec.os.name is windows.
        """
        return pulumi.get(self, "run_as_group")

    @run_as_group.setter
    def run_as_group(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "run_as_group", value)

    @property
    @pulumi.getter(name="runAsNonRoot")
    def run_as_non_root(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates that the container must run as a non-root user.
        If true, the Kubelet will validate the image at runtime to ensure that it
        does not run as UID 0 (root) and fail to start the container if it does.
        If unset or false, no such validation will be performed.
        May also be set in SecurityContext.  If set in both SecurityContext and
        PodSecurityContext, the value specified in SecurityContext takes precedence.
        """
        return pulumi.get(self, "run_as_non_root")

    @run_as_non_root.setter
    def run_as_non_root(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "run_as_non_root", value)

    @property
    @pulumi.getter(name="runAsUser")
    def run_as_user(self) -> Optional[pulumi.Input[int]]:
        """
        The UID to run the entrypoint of the container process.
        Defaults to user specified in image metadata if unspecified.
        May also be set in SecurityContext.  If set in both SecurityContext and
        PodSecurityContext, the value specified in SecurityContext takes precedence
        for that container.
        Note that this field cannot be set when spec.os.name is windows.
        """
        return pulumi.get(self, "run_as_user")

    @run_as_user.setter
    def run_as_user(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "run_as_user", value)

    @property
    @pulumi.getter(name="seLinuxOptions")
    def se_linux_options(
        self,
    ) -> Optional[
        pulumi.Input[
            "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSeLinuxOptionsPatchArgs"
        ]
    ]:
        return pulumi.get(self, "se_linux_options")

    @se_linux_options.setter
    def se_linux_options(
        self,
        value: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSeLinuxOptionsPatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "se_linux_options", value)

    @property
    @pulumi.getter(name="seccompProfile")
    def seccomp_profile(
        self,
    ) -> Optional[
        pulumi.Input[
            "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSeccompProfilePatchArgs"
        ]
    ]:
        return pulumi.get(self, "seccomp_profile")

    @seccomp_profile.setter
    def seccomp_profile(
        self,
        value: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSeccompProfilePatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "seccomp_profile", value)

    @property
    @pulumi.getter(name="supplementalGroups")
    def supplemental_groups(
        self,
    ) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        A list of groups applied to the first process run in each container, in addition
        to the container's primary GID, the fsGroup (if specified), and group memberships
        defined in the container image for the uid of the container process. If unspecified,
        no additional groups are added to any container. Note that group memberships
        defined in the container image for the uid of the container process are still effective,
        even if they are not included in this list.
        Note that this field cannot be set when spec.os.name is windows.
        """
        return pulumi.get(self, "supplemental_groups")

    @supplemental_groups.setter
    def supplemental_groups(
        self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]
    ):
        pulumi.set(self, "supplemental_groups", value)

    @property
    @pulumi.getter
    def sysctls(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSysctlsPatchArgs"
                ]
            ]
        ]
    ]:
        """
        Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported
        sysctls (by the container runtime) might fail to launch.
        Note that this field cannot be set when spec.os.name is windows.
        """
        return pulumi.get(self, "sysctls")

    @sysctls.setter
    def sysctls(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSysctlsPatchArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "sysctls", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSeLinuxOptionsPatchArgsDict(
        TypedDict
    ):
        """
        The SELinux context to be applied to all containers.
        If unspecified, the container runtime will allocate a random SELinux context for each
        container.  May also be set in SecurityContext.  If set in
        both SecurityContext and PodSecurityContext, the value specified in SecurityContext
        takes precedence for that container.
        Note that this field cannot be set when spec.os.name is windows.
        """

        level: NotRequired[pulumi.Input[str]]
        """
        Level is SELinux level label that applies to the container.
        """
        role: NotRequired[pulumi.Input[str]]
        """
        Role is a SELinux role label that applies to the container.
        """
        type: NotRequired[pulumi.Input[str]]
        """
        Type is a SELinux type label that applies to the container.
        """
        user: NotRequired[pulumi.Input[str]]
        """
        User is a SELinux user label that applies to the container.
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSeLinuxOptionsPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSeLinuxOptionsPatchArgs:
    def __init__(
        __self__,
        *,
        level: Optional[pulumi.Input[str]] = None,
        role: Optional[pulumi.Input[str]] = None,
        type: Optional[pulumi.Input[str]] = None,
        user: Optional[pulumi.Input[str]] = None
    ):
        """
        The SELinux context to be applied to all containers.
        If unspecified, the container runtime will allocate a random SELinux context for each
        container.  May also be set in SecurityContext.  If set in
        both SecurityContext and PodSecurityContext, the value specified in SecurityContext
        takes precedence for that container.
        Note that this field cannot be set when spec.os.name is windows.
        :param pulumi.Input[str] level: Level is SELinux level label that applies to the container.
        :param pulumi.Input[str] role: Role is a SELinux role label that applies to the container.
        :param pulumi.Input[str] type: Type is a SELinux type label that applies to the container.
        :param pulumi.Input[str] user: User is a SELinux user label that applies to the container.
        """
        if level is not None:
            pulumi.set(__self__, "level", level)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        """
        Level is SELinux level label that applies to the container.
        """
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input[str]]:
        """
        Role is a SELinux role label that applies to the container.
        """
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Type is a SELinux type label that applies to the container.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def user(self) -> Optional[pulumi.Input[str]]:
        """
        User is a SELinux user label that applies to the container.
        """
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSeLinuxOptionsArgsDict(
        TypedDict
    ):
        """
        The SELinux context to be applied to all containers.
        If unspecified, the container runtime will allocate a random SELinux context for each
        container.  May also be set in SecurityContext.  If set in
        both SecurityContext and PodSecurityContext, the value specified in SecurityContext
        takes precedence for that container.
        Note that this field cannot be set when spec.os.name is windows.
        """

        level: NotRequired[pulumi.Input[str]]
        """
        Level is SELinux level label that applies to the container.
        """
        role: NotRequired[pulumi.Input[str]]
        """
        Role is a SELinux role label that applies to the container.
        """
        type: NotRequired[pulumi.Input[str]]
        """
        Type is a SELinux type label that applies to the container.
        """
        user: NotRequired[pulumi.Input[str]]
        """
        User is a SELinux user label that applies to the container.
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSeLinuxOptionsArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSeLinuxOptionsArgs:
    def __init__(
        __self__,
        *,
        level: Optional[pulumi.Input[str]] = None,
        role: Optional[pulumi.Input[str]] = None,
        type: Optional[pulumi.Input[str]] = None,
        user: Optional[pulumi.Input[str]] = None
    ):
        """
        The SELinux context to be applied to all containers.
        If unspecified, the container runtime will allocate a random SELinux context for each
        container.  May also be set in SecurityContext.  If set in
        both SecurityContext and PodSecurityContext, the value specified in SecurityContext
        takes precedence for that container.
        Note that this field cannot be set when spec.os.name is windows.
        :param pulumi.Input[str] level: Level is SELinux level label that applies to the container.
        :param pulumi.Input[str] role: Role is a SELinux role label that applies to the container.
        :param pulumi.Input[str] type: Type is a SELinux type label that applies to the container.
        :param pulumi.Input[str] user: User is a SELinux user label that applies to the container.
        """
        if level is not None:
            pulumi.set(__self__, "level", level)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        """
        Level is SELinux level label that applies to the container.
        """
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input[str]]:
        """
        Role is a SELinux role label that applies to the container.
        """
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Type is a SELinux type label that applies to the container.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def user(self) -> Optional[pulumi.Input[str]]:
        """
        User is a SELinux user label that applies to the container.
        """
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSeccompProfilePatchArgsDict(
        TypedDict
    ):
        """
        The seccomp options to use by the containers in this pod.
        Note that this field cannot be set when spec.os.name is windows.
        """

        localhost_profile: NotRequired[pulumi.Input[str]]
        """
        localhostProfile indicates a profile defined in a file on the node should be used.
        The profile must be preconfigured on the node to work.
        Must be a descending path, relative to the kubelet's configured seccomp profile location.
        Must be set if type is "Localhost". Must NOT be set for any other type.
        """
        type: NotRequired[pulumi.Input[str]]
        """
        type indicates which kind of seccomp profile will be applied.
        Valid options are:

        Localhost - a profile defined in a file on the node should be used.
        RuntimeDefault - the container runtime default profile should be used.
        Unconfined - no profile should be applied.
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSeccompProfilePatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSeccompProfilePatchArgs:
    def __init__(
        __self__,
        *,
        localhost_profile: Optional[pulumi.Input[str]] = None,
        type: Optional[pulumi.Input[str]] = None
    ):
        """
        The seccomp options to use by the containers in this pod.
        Note that this field cannot be set when spec.os.name is windows.
        :param pulumi.Input[str] localhost_profile: localhostProfile indicates a profile defined in a file on the node should be used.
               The profile must be preconfigured on the node to work.
               Must be a descending path, relative to the kubelet's configured seccomp profile location.
               Must be set if type is "Localhost". Must NOT be set for any other type.
        :param pulumi.Input[str] type: type indicates which kind of seccomp profile will be applied.
               Valid options are:

               Localhost - a profile defined in a file on the node should be used.
               RuntimeDefault - the container runtime default profile should be used.
               Unconfined - no profile should be applied.
        """
        if localhost_profile is not None:
            pulumi.set(__self__, "localhost_profile", localhost_profile)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="localhostProfile")
    def localhost_profile(self) -> Optional[pulumi.Input[str]]:
        """
        localhostProfile indicates a profile defined in a file on the node should be used.
        The profile must be preconfigured on the node to work.
        Must be a descending path, relative to the kubelet's configured seccomp profile location.
        Must be set if type is "Localhost". Must NOT be set for any other type.
        """
        return pulumi.get(self, "localhost_profile")

    @localhost_profile.setter
    def localhost_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "localhost_profile", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        type indicates which kind of seccomp profile will be applied.
        Valid options are:

        Localhost - a profile defined in a file on the node should be used.
        RuntimeDefault - the container runtime default profile should be used.
        Unconfined - no profile should be applied.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSeccompProfileArgsDict(
        TypedDict
    ):
        """
        The seccomp options to use by the containers in this pod.
        Note that this field cannot be set when spec.os.name is windows.
        """

        localhost_profile: NotRequired[pulumi.Input[str]]
        """
        localhostProfile indicates a profile defined in a file on the node should be used.
        The profile must be preconfigured on the node to work.
        Must be a descending path, relative to the kubelet's configured seccomp profile location.
        Must be set if type is "Localhost". Must NOT be set for any other type.
        """
        type: NotRequired[pulumi.Input[str]]
        """
        type indicates which kind of seccomp profile will be applied.
        Valid options are:

        Localhost - a profile defined in a file on the node should be used.
        RuntimeDefault - the container runtime default profile should be used.
        Unconfined - no profile should be applied.
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSeccompProfileArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSeccompProfileArgs:
    def __init__(
        __self__,
        *,
        localhost_profile: Optional[pulumi.Input[str]] = None,
        type: Optional[pulumi.Input[str]] = None
    ):
        """
        The seccomp options to use by the containers in this pod.
        Note that this field cannot be set when spec.os.name is windows.
        :param pulumi.Input[str] localhost_profile: localhostProfile indicates a profile defined in a file on the node should be used.
               The profile must be preconfigured on the node to work.
               Must be a descending path, relative to the kubelet's configured seccomp profile location.
               Must be set if type is "Localhost". Must NOT be set for any other type.
        :param pulumi.Input[str] type: type indicates which kind of seccomp profile will be applied.
               Valid options are:

               Localhost - a profile defined in a file on the node should be used.
               RuntimeDefault - the container runtime default profile should be used.
               Unconfined - no profile should be applied.
        """
        if localhost_profile is not None:
            pulumi.set(__self__, "localhost_profile", localhost_profile)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="localhostProfile")
    def localhost_profile(self) -> Optional[pulumi.Input[str]]:
        """
        localhostProfile indicates a profile defined in a file on the node should be used.
        The profile must be preconfigured on the node to work.
        Must be a descending path, relative to the kubelet's configured seccomp profile location.
        Must be set if type is "Localhost". Must NOT be set for any other type.
        """
        return pulumi.get(self, "localhost_profile")

    @localhost_profile.setter
    def localhost_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "localhost_profile", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        type indicates which kind of seccomp profile will be applied.
        Valid options are:

        Localhost - a profile defined in a file on the node should be used.
        RuntimeDefault - the container runtime default profile should be used.
        Unconfined - no profile should be applied.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSysctlsPatchArgsDict(
        TypedDict
    ):
        """
        Sysctl defines a kernel parameter to be set
        """

        name: NotRequired[pulumi.Input[str]]
        """
        Name of a property to set
        """
        value: NotRequired[pulumi.Input[str]]
        """
        Value of a property to set
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSysctlsPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSysctlsPatchArgs:
    def __init__(
        __self__,
        *,
        name: Optional[pulumi.Input[str]] = None,
        value: Optional[pulumi.Input[str]] = None
    ):
        """
        Sysctl defines a kernel parameter to be set
        :param pulumi.Input[str] name: Name of a property to set
        :param pulumi.Input[str] value: Value of a property to set
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of a property to set
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Value of a property to set
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSysctlsArgsDict(
        TypedDict
    ):
        """
        Sysctl defines a kernel parameter to be set
        """

        name: NotRequired[pulumi.Input[str]]
        """
        Name of a property to set
        """
        value: NotRequired[pulumi.Input[str]]
        """
        Value of a property to set
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSysctlsArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSysctlsArgs:
    def __init__(
        __self__,
        *,
        name: Optional[pulumi.Input[str]] = None,
        value: Optional[pulumi.Input[str]] = None
    ):
        """
        Sysctl defines a kernel parameter to be set
        :param pulumi.Input[str] name: Name of a property to set
        :param pulumi.Input[str] value: Value of a property to set
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of a property to set
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Value of a property to set
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextArgsDict(
        TypedDict
    ):
        """
        If specified, the pod's security context
        """

        fs_group: NotRequired[pulumi.Input[int]]
        """
        A special supplemental group that applies to all containers in a pod.
        Some volume types allow the Kubelet to change the ownership of that volume
        to be owned by the pod:

        1. The owning GID will be the FSGroup
        2. The setgid bit is set (new files created in the volume will be owned by FSGroup)
        3. The permission bits are OR'd with rw-rw----

        If unset, the Kubelet will not modify the ownership and permissions of any volume.
        Note that this field cannot be set when spec.os.name is windows.
        """
        fs_group_change_policy: NotRequired[pulumi.Input[str]]
        """
        fsGroupChangePolicy defines behavior of changing ownership and permission of the volume
        before being exposed inside Pod. This field will only apply to
        volume types which support fsGroup based ownership(and permissions).
        It will have no effect on ephemeral volume types such as: secret, configmaps
        and emptydir.
        Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used.
        Note that this field cannot be set when spec.os.name is windows.
        """
        run_as_group: NotRequired[pulumi.Input[int]]
        """
        The GID to run the entrypoint of the container process.
        Uses runtime default if unset.
        May also be set in SecurityContext.  If set in both SecurityContext and
        PodSecurityContext, the value specified in SecurityContext takes precedence
        for that container.
        Note that this field cannot be set when spec.os.name is windows.
        """
        run_as_non_root: NotRequired[pulumi.Input[bool]]
        """
        Indicates that the container must run as a non-root user.
        If true, the Kubelet will validate the image at runtime to ensure that it
        does not run as UID 0 (root) and fail to start the container if it does.
        If unset or false, no such validation will be performed.
        May also be set in SecurityContext.  If set in both SecurityContext and
        PodSecurityContext, the value specified in SecurityContext takes precedence.
        """
        run_as_user: NotRequired[pulumi.Input[int]]
        """
        The UID to run the entrypoint of the container process.
        Defaults to user specified in image metadata if unspecified.
        May also be set in SecurityContext.  If set in both SecurityContext and
        PodSecurityContext, the value specified in SecurityContext takes precedence
        for that container.
        Note that this field cannot be set when spec.os.name is windows.
        """
        se_linux_options: NotRequired[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSeLinuxOptionsArgsDict"
            ]
        ]
        seccomp_profile: NotRequired[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSeccompProfileArgsDict"
            ]
        ]
        supplemental_groups: NotRequired[pulumi.Input[Sequence[pulumi.Input[int]]]]
        """
        A list of groups applied to the first process run in each container, in addition
        to the container's primary GID, the fsGroup (if specified), and group memberships
        defined in the container image for the uid of the container process. If unspecified,
        no additional groups are added to any container. Note that group memberships
        defined in the container image for the uid of the container process are still effective,
        even if they are not included in this list.
        Note that this field cannot be set when spec.os.name is windows.
        """
        sysctls: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSysctlsArgsDict"
                    ]
                ]
            ]
        ]
        """
        Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported
        sysctls (by the container runtime) might fail to launch.
        Note that this field cannot be set when spec.os.name is windows.
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextArgs:
    def __init__(
        __self__,
        *,
        fs_group: Optional[pulumi.Input[int]] = None,
        fs_group_change_policy: Optional[pulumi.Input[str]] = None,
        run_as_group: Optional[pulumi.Input[int]] = None,
        run_as_non_root: Optional[pulumi.Input[bool]] = None,
        run_as_user: Optional[pulumi.Input[int]] = None,
        se_linux_options: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSeLinuxOptionsArgs"
            ]
        ] = None,
        seccomp_profile: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSeccompProfileArgs"
            ]
        ] = None,
        supplemental_groups: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
        sysctls: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSysctlsArgs"
                    ]
                ]
            ]
        ] = None
    ):
        """
        If specified, the pod's security context
        :param pulumi.Input[int] fs_group: A special supplemental group that applies to all containers in a pod.
               Some volume types allow the Kubelet to change the ownership of that volume
               to be owned by the pod:

               1. The owning GID will be the FSGroup
               2. The setgid bit is set (new files created in the volume will be owned by FSGroup)
               3. The permission bits are OR'd with rw-rw----

               If unset, the Kubelet will not modify the ownership and permissions of any volume.
               Note that this field cannot be set when spec.os.name is windows.
        :param pulumi.Input[str] fs_group_change_policy: fsGroupChangePolicy defines behavior of changing ownership and permission of the volume
               before being exposed inside Pod. This field will only apply to
               volume types which support fsGroup based ownership(and permissions).
               It will have no effect on ephemeral volume types such as: secret, configmaps
               and emptydir.
               Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used.
               Note that this field cannot be set when spec.os.name is windows.
        :param pulumi.Input[int] run_as_group: The GID to run the entrypoint of the container process.
               Uses runtime default if unset.
               May also be set in SecurityContext.  If set in both SecurityContext and
               PodSecurityContext, the value specified in SecurityContext takes precedence
               for that container.
               Note that this field cannot be set when spec.os.name is windows.
        :param pulumi.Input[bool] run_as_non_root: Indicates that the container must run as a non-root user.
               If true, the Kubelet will validate the image at runtime to ensure that it
               does not run as UID 0 (root) and fail to start the container if it does.
               If unset or false, no such validation will be performed.
               May also be set in SecurityContext.  If set in both SecurityContext and
               PodSecurityContext, the value specified in SecurityContext takes precedence.
        :param pulumi.Input[int] run_as_user: The UID to run the entrypoint of the container process.
               Defaults to user specified in image metadata if unspecified.
               May also be set in SecurityContext.  If set in both SecurityContext and
               PodSecurityContext, the value specified in SecurityContext takes precedence
               for that container.
               Note that this field cannot be set when spec.os.name is windows.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] supplemental_groups: A list of groups applied to the first process run in each container, in addition
               to the container's primary GID, the fsGroup (if specified), and group memberships
               defined in the container image for the uid of the container process. If unspecified,
               no additional groups are added to any container. Note that group memberships
               defined in the container image for the uid of the container process are still effective,
               even if they are not included in this list.
               Note that this field cannot be set when spec.os.name is windows.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSysctlsArgs']]] sysctls: Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported
               sysctls (by the container runtime) might fail to launch.
               Note that this field cannot be set when spec.os.name is windows.
        """
        if fs_group is not None:
            pulumi.set(__self__, "fs_group", fs_group)
        if fs_group_change_policy is not None:
            pulumi.set(__self__, "fs_group_change_policy", fs_group_change_policy)
        if run_as_group is not None:
            pulumi.set(__self__, "run_as_group", run_as_group)
        if run_as_non_root is not None:
            pulumi.set(__self__, "run_as_non_root", run_as_non_root)
        if run_as_user is not None:
            pulumi.set(__self__, "run_as_user", run_as_user)
        if se_linux_options is not None:
            pulumi.set(__self__, "se_linux_options", se_linux_options)
        if seccomp_profile is not None:
            pulumi.set(__self__, "seccomp_profile", seccomp_profile)
        if supplemental_groups is not None:
            pulumi.set(__self__, "supplemental_groups", supplemental_groups)
        if sysctls is not None:
            pulumi.set(__self__, "sysctls", sysctls)

    @property
    @pulumi.getter(name="fsGroup")
    def fs_group(self) -> Optional[pulumi.Input[int]]:
        """
        A special supplemental group that applies to all containers in a pod.
        Some volume types allow the Kubelet to change the ownership of that volume
        to be owned by the pod:

        1. The owning GID will be the FSGroup
        2. The setgid bit is set (new files created in the volume will be owned by FSGroup)
        3. The permission bits are OR'd with rw-rw----

        If unset, the Kubelet will not modify the ownership and permissions of any volume.
        Note that this field cannot be set when spec.os.name is windows.
        """
        return pulumi.get(self, "fs_group")

    @fs_group.setter
    def fs_group(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fs_group", value)

    @property
    @pulumi.getter(name="fsGroupChangePolicy")
    def fs_group_change_policy(self) -> Optional[pulumi.Input[str]]:
        """
        fsGroupChangePolicy defines behavior of changing ownership and permission of the volume
        before being exposed inside Pod. This field will only apply to
        volume types which support fsGroup based ownership(and permissions).
        It will have no effect on ephemeral volume types such as: secret, configmaps
        and emptydir.
        Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used.
        Note that this field cannot be set when spec.os.name is windows.
        """
        return pulumi.get(self, "fs_group_change_policy")

    @fs_group_change_policy.setter
    def fs_group_change_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fs_group_change_policy", value)

    @property
    @pulumi.getter(name="runAsGroup")
    def run_as_group(self) -> Optional[pulumi.Input[int]]:
        """
        The GID to run the entrypoint of the container process.
        Uses runtime default if unset.
        May also be set in SecurityContext.  If set in both SecurityContext and
        PodSecurityContext, the value specified in SecurityContext takes precedence
        for that container.
        Note that this field cannot be set when spec.os.name is windows.
        """
        return pulumi.get(self, "run_as_group")

    @run_as_group.setter
    def run_as_group(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "run_as_group", value)

    @property
    @pulumi.getter(name="runAsNonRoot")
    def run_as_non_root(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates that the container must run as a non-root user.
        If true, the Kubelet will validate the image at runtime to ensure that it
        does not run as UID 0 (root) and fail to start the container if it does.
        If unset or false, no such validation will be performed.
        May also be set in SecurityContext.  If set in both SecurityContext and
        PodSecurityContext, the value specified in SecurityContext takes precedence.
        """
        return pulumi.get(self, "run_as_non_root")

    @run_as_non_root.setter
    def run_as_non_root(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "run_as_non_root", value)

    @property
    @pulumi.getter(name="runAsUser")
    def run_as_user(self) -> Optional[pulumi.Input[int]]:
        """
        The UID to run the entrypoint of the container process.
        Defaults to user specified in image metadata if unspecified.
        May also be set in SecurityContext.  If set in both SecurityContext and
        PodSecurityContext, the value specified in SecurityContext takes precedence
        for that container.
        Note that this field cannot be set when spec.os.name is windows.
        """
        return pulumi.get(self, "run_as_user")

    @run_as_user.setter
    def run_as_user(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "run_as_user", value)

    @property
    @pulumi.getter(name="seLinuxOptions")
    def se_linux_options(
        self,
    ) -> Optional[
        pulumi.Input[
            "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSeLinuxOptionsArgs"
        ]
    ]:
        return pulumi.get(self, "se_linux_options")

    @se_linux_options.setter
    def se_linux_options(
        self,
        value: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSeLinuxOptionsArgs"
            ]
        ],
    ):
        pulumi.set(self, "se_linux_options", value)

    @property
    @pulumi.getter(name="seccompProfile")
    def seccomp_profile(
        self,
    ) -> Optional[
        pulumi.Input[
            "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSeccompProfileArgs"
        ]
    ]:
        return pulumi.get(self, "seccomp_profile")

    @seccomp_profile.setter
    def seccomp_profile(
        self,
        value: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSeccompProfileArgs"
            ]
        ],
    ):
        pulumi.set(self, "seccomp_profile", value)

    @property
    @pulumi.getter(name="supplementalGroups")
    def supplemental_groups(
        self,
    ) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        A list of groups applied to the first process run in each container, in addition
        to the container's primary GID, the fsGroup (if specified), and group memberships
        defined in the container image for the uid of the container process. If unspecified,
        no additional groups are added to any container. Note that group memberships
        defined in the container image for the uid of the container process are still effective,
        even if they are not included in this list.
        Note that this field cannot be set when spec.os.name is windows.
        """
        return pulumi.get(self, "supplemental_groups")

    @supplemental_groups.setter
    def supplemental_groups(
        self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]
    ):
        pulumi.set(self, "supplemental_groups", value)

    @property
    @pulumi.getter
    def sysctls(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSysctlsArgs"
                ]
            ]
        ]
    ]:
        """
        Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported
        sysctls (by the container runtime) might fail to launch.
        Note that this field cannot be set when spec.os.name is windows.
        """
        return pulumi.get(self, "sysctls")

    @sysctls.setter
    def sysctls(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSysctlsArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "sysctls", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecTolerationsPatchArgsDict(
        TypedDict
    ):
        """
        The pod this Toleration is attached to tolerates any taint that matches
        the triple <key,value,effect> using the matching operator <operator>.
        """

        effect: NotRequired[pulumi.Input[str]]
        """
        Effect indicates the taint effect to match. Empty means match all taint effects.
        When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
        """
        key: NotRequired[pulumi.Input[str]]
        """
        Key is the taint key that the toleration applies to. Empty means match all taint keys.
        If the key is empty, operator must be Exists; this combination means to match all values and all keys.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        Operator represents a key's relationship to the value.
        Valid operators are Exists and Equal. Defaults to Equal.
        Exists is equivalent to wildcard for value, so that a pod can
        tolerate all taints of a particular category.
        """
        toleration_seconds: NotRequired[pulumi.Input[int]]
        """
        TolerationSeconds represents the period of time the toleration (which must be
        of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,
        it is not set, which means tolerate the taint forever (do not evict). Zero and
        negative values will be treated as 0 (evict immediately) by the system.
        """
        value: NotRequired[pulumi.Input[str]]
        """
        Value is the taint value the toleration matches to.
        If the operator is Exists, the value should be empty, otherwise just a regular string.
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecTolerationsPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecTolerationsPatchArgs:
    def __init__(
        __self__,
        *,
        effect: Optional[pulumi.Input[str]] = None,
        key: Optional[pulumi.Input[str]] = None,
        operator: Optional[pulumi.Input[str]] = None,
        toleration_seconds: Optional[pulumi.Input[int]] = None,
        value: Optional[pulumi.Input[str]] = None
    ):
        """
        The pod this Toleration is attached to tolerates any taint that matches
        the triple <key,value,effect> using the matching operator <operator>.
        :param pulumi.Input[str] effect: Effect indicates the taint effect to match. Empty means match all taint effects.
               When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
        :param pulumi.Input[str] key: Key is the taint key that the toleration applies to. Empty means match all taint keys.
               If the key is empty, operator must be Exists; this combination means to match all values and all keys.
        :param pulumi.Input[str] operator: Operator represents a key's relationship to the value.
               Valid operators are Exists and Equal. Defaults to Equal.
               Exists is equivalent to wildcard for value, so that a pod can
               tolerate all taints of a particular category.
        :param pulumi.Input[int] toleration_seconds: TolerationSeconds represents the period of time the toleration (which must be
               of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,
               it is not set, which means tolerate the taint forever (do not evict). Zero and
               negative values will be treated as 0 (evict immediately) by the system.
        :param pulumi.Input[str] value: Value is the taint value the toleration matches to.
               If the operator is Exists, the value should be empty, otherwise just a regular string.
        """
        if effect is not None:
            pulumi.set(__self__, "effect", effect)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if toleration_seconds is not None:
            pulumi.set(__self__, "toleration_seconds", toleration_seconds)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def effect(self) -> Optional[pulumi.Input[str]]:
        """
        Effect indicates the taint effect to match. Empty means match all taint effects.
        When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
        """
        return pulumi.get(self, "effect")

    @effect.setter
    def effect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "effect", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        Key is the taint key that the toleration applies to. Empty means match all taint keys.
        If the key is empty, operator must be Exists; this combination means to match all values and all keys.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        Operator represents a key's relationship to the value.
        Valid operators are Exists and Equal. Defaults to Equal.
        Exists is equivalent to wildcard for value, so that a pod can
        tolerate all taints of a particular category.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter(name="tolerationSeconds")
    def toleration_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        TolerationSeconds represents the period of time the toleration (which must be
        of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,
        it is not set, which means tolerate the taint forever (do not evict). Zero and
        negative values will be treated as 0 (evict immediately) by the system.
        """
        return pulumi.get(self, "toleration_seconds")

    @toleration_seconds.setter
    def toleration_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "toleration_seconds", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Value is the taint value the toleration matches to.
        If the operator is Exists, the value should be empty, otherwise just a regular string.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecTolerationsArgsDict(
        TypedDict
    ):
        """
        The pod this Toleration is attached to tolerates any taint that matches
        the triple <key,value,effect> using the matching operator <operator>.
        """

        effect: NotRequired[pulumi.Input[str]]
        """
        Effect indicates the taint effect to match. Empty means match all taint effects.
        When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
        """
        key: NotRequired[pulumi.Input[str]]
        """
        Key is the taint key that the toleration applies to. Empty means match all taint keys.
        If the key is empty, operator must be Exists; this combination means to match all values and all keys.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        Operator represents a key's relationship to the value.
        Valid operators are Exists and Equal. Defaults to Equal.
        Exists is equivalent to wildcard for value, so that a pod can
        tolerate all taints of a particular category.
        """
        toleration_seconds: NotRequired[pulumi.Input[int]]
        """
        TolerationSeconds represents the period of time the toleration (which must be
        of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,
        it is not set, which means tolerate the taint forever (do not evict). Zero and
        negative values will be treated as 0 (evict immediately) by the system.
        """
        value: NotRequired[pulumi.Input[str]]
        """
        Value is the taint value the toleration matches to.
        If the operator is Exists, the value should be empty, otherwise just a regular string.
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecTolerationsArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecTolerationsArgs:
    def __init__(
        __self__,
        *,
        effect: Optional[pulumi.Input[str]] = None,
        key: Optional[pulumi.Input[str]] = None,
        operator: Optional[pulumi.Input[str]] = None,
        toleration_seconds: Optional[pulumi.Input[int]] = None,
        value: Optional[pulumi.Input[str]] = None
    ):
        """
        The pod this Toleration is attached to tolerates any taint that matches
        the triple <key,value,effect> using the matching operator <operator>.
        :param pulumi.Input[str] effect: Effect indicates the taint effect to match. Empty means match all taint effects.
               When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
        :param pulumi.Input[str] key: Key is the taint key that the toleration applies to. Empty means match all taint keys.
               If the key is empty, operator must be Exists; this combination means to match all values and all keys.
        :param pulumi.Input[str] operator: Operator represents a key's relationship to the value.
               Valid operators are Exists and Equal. Defaults to Equal.
               Exists is equivalent to wildcard for value, so that a pod can
               tolerate all taints of a particular category.
        :param pulumi.Input[int] toleration_seconds: TolerationSeconds represents the period of time the toleration (which must be
               of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,
               it is not set, which means tolerate the taint forever (do not evict). Zero and
               negative values will be treated as 0 (evict immediately) by the system.
        :param pulumi.Input[str] value: Value is the taint value the toleration matches to.
               If the operator is Exists, the value should be empty, otherwise just a regular string.
        """
        if effect is not None:
            pulumi.set(__self__, "effect", effect)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if toleration_seconds is not None:
            pulumi.set(__self__, "toleration_seconds", toleration_seconds)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def effect(self) -> Optional[pulumi.Input[str]]:
        """
        Effect indicates the taint effect to match. Empty means match all taint effects.
        When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
        """
        return pulumi.get(self, "effect")

    @effect.setter
    def effect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "effect", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        Key is the taint key that the toleration applies to. Empty means match all taint keys.
        If the key is empty, operator must be Exists; this combination means to match all values and all keys.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        Operator represents a key's relationship to the value.
        Valid operators are Exists and Equal. Defaults to Equal.
        Exists is equivalent to wildcard for value, so that a pod can
        tolerate all taints of a particular category.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter(name="tolerationSeconds")
    def toleration_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        TolerationSeconds represents the period of time the toleration (which must be
        of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,
        it is not set, which means tolerate the taint forever (do not evict). Zero and
        negative values will be treated as 0 (evict immediately) by the system.
        """
        return pulumi.get(self, "toleration_seconds")

    @toleration_seconds.setter
    def toleration_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "toleration_seconds", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Value is the taint value the toleration matches to.
        If the operator is Exists, the value should be empty, otherwise just a regular string.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecArgsDict(
        TypedDict
    ):
        """
        PodSpec defines overrides for the HTTP01 challenge solver pod.
        Check ACMEChallengeSolverHTTP01IngressPodSpec to find out currently supported fields.
        All other fields will be ignored.
        """

        affinity: NotRequired[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityArgsDict"
            ]
        ]
        image_pull_secrets: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecImagePullSecretsArgsDict"
                    ]
                ]
            ]
        ]
        """
        If specified, the pod's imagePullSecrets
        """
        node_selector: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        NodeSelector is a selector which must be true for the pod to fit on a node.
        Selector which must match a node's labels for the pod to be scheduled on that node.
        More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
        """
        priority_class_name: NotRequired[pulumi.Input[str]]
        """
        If specified, the pod's priorityClassName.
        """
        security_context: NotRequired[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextArgsDict"
            ]
        ]
        service_account_name: NotRequired[pulumi.Input[str]]
        """
        If specified, the pod's service account
        """
        tolerations: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecTolerationsArgsDict"
                    ]
                ]
            ]
        ]
        """
        If specified, the pod's tolerations.
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecArgs:
    def __init__(
        __self__,
        *,
        affinity: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityArgs"
            ]
        ] = None,
        image_pull_secrets: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecImagePullSecretsArgs"
                    ]
                ]
            ]
        ] = None,
        node_selector: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
        priority_class_name: Optional[pulumi.Input[str]] = None,
        security_context: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextArgs"
            ]
        ] = None,
        service_account_name: Optional[pulumi.Input[str]] = None,
        tolerations: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecTolerationsArgs"
                    ]
                ]
            ]
        ] = None
    ):
        """
        PodSpec defines overrides for the HTTP01 challenge solver pod.
        Check ACMEChallengeSolverHTTP01IngressPodSpec to find out currently supported fields.
        All other fields will be ignored.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecImagePullSecretsArgs']]] image_pull_secrets: If specified, the pod's imagePullSecrets
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] node_selector: NodeSelector is a selector which must be true for the pod to fit on a node.
               Selector which must match a node's labels for the pod to be scheduled on that node.
               More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
        :param pulumi.Input[str] priority_class_name: If specified, the pod's priorityClassName.
        :param pulumi.Input[str] service_account_name: If specified, the pod's service account
        :param pulumi.Input[Sequence[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecTolerationsArgs']]] tolerations: If specified, the pod's tolerations.
        """
        if affinity is not None:
            pulumi.set(__self__, "affinity", affinity)
        if image_pull_secrets is not None:
            pulumi.set(__self__, "image_pull_secrets", image_pull_secrets)
        if node_selector is not None:
            pulumi.set(__self__, "node_selector", node_selector)
        if priority_class_name is not None:
            pulumi.set(__self__, "priority_class_name", priority_class_name)
        if security_context is not None:
            pulumi.set(__self__, "security_context", security_context)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tolerations is not None:
            pulumi.set(__self__, "tolerations", tolerations)

    @property
    @pulumi.getter
    def affinity(
        self,
    ) -> Optional[
        pulumi.Input[
            "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityArgs"
        ]
    ]:
        return pulumi.get(self, "affinity")

    @affinity.setter
    def affinity(
        self,
        value: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityArgs"
            ]
        ],
    ):
        pulumi.set(self, "affinity", value)

    @property
    @pulumi.getter(name="imagePullSecrets")
    def image_pull_secrets(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecImagePullSecretsArgs"
                ]
            ]
        ]
    ]:
        """
        If specified, the pod's imagePullSecrets
        """
        return pulumi.get(self, "image_pull_secrets")

    @image_pull_secrets.setter
    def image_pull_secrets(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecImagePullSecretsArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "image_pull_secrets", value)

    @property
    @pulumi.getter(name="nodeSelector")
    def node_selector(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        NodeSelector is a selector which must be true for the pod to fit on a node.
        Selector which must match a node's labels for the pod to be scheduled on that node.
        More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
        """
        return pulumi.get(self, "node_selector")

    @node_selector.setter
    def node_selector(
        self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
    ):
        pulumi.set(self, "node_selector", value)

    @property
    @pulumi.getter(name="priorityClassName")
    def priority_class_name(self) -> Optional[pulumi.Input[str]]:
        """
        If specified, the pod's priorityClassName.
        """
        return pulumi.get(self, "priority_class_name")

    @priority_class_name.setter
    def priority_class_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "priority_class_name", value)

    @property
    @pulumi.getter(name="securityContext")
    def security_context(
        self,
    ) -> Optional[
        pulumi.Input[
            "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextArgs"
        ]
    ]:
        return pulumi.get(self, "security_context")

    @security_context.setter
    def security_context(
        self,
        value: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextArgs"
            ]
        ],
    ):
        pulumi.set(self, "security_context", value)

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[pulumi.Input[str]]:
        """
        If specified, the pod's service account
        """
        return pulumi.get(self, "service_account_name")

    @service_account_name.setter
    def service_account_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account_name", value)

    @property
    @pulumi.getter
    def tolerations(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecTolerationsArgs"
                ]
            ]
        ]
    ]:
        """
        If specified, the pod's tolerations.
        """
        return pulumi.get(self, "tolerations")

    @tolerations.setter
    def tolerations(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecTolerationsArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "tolerations", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateArgsDict(
        TypedDict
    ):
        """
        Optional pod template used to configure the ACME challenge solver pods
        used for HTTP01 challenges.
        """

        metadata: NotRequired[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateMetadataArgsDict"
            ]
        ]
        spec: NotRequired[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecArgsDict"
            ]
        ]

elif False:
    ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateArgsDict: TypeAlias = (
        Mapping[str, Any]
    )


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateArgs:
    def __init__(
        __self__,
        *,
        metadata: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateMetadataArgs"
            ]
        ] = None,
        spec: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecArgs"
            ]
        ] = None
    ):
        """
        Optional pod template used to configure the ACME challenge solver pods
        used for HTTP01 challenges.
        """
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if spec is not None:
            pulumi.set(__self__, "spec", spec)

    @property
    @pulumi.getter
    def metadata(
        self,
    ) -> Optional[
        pulumi.Input[
            "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateMetadataArgs"
        ]
    ]:
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(
        self,
        value: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateMetadataArgs"
            ]
        ],
    ):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter
    def spec(
        self,
    ) -> Optional[
        pulumi.Input[
            "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecArgs"
        ]
    ]:
        return pulumi.get(self, "spec")

    @spec.setter
    def spec(
        self,
        value: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecArgs"
            ]
        ],
    ):
        pulumi.set(self, "spec", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRouteArgsDict(TypedDict):
        """
        The Gateway API is a sig-network community API that models service networking
        in Kubernetes (https://gateway-api.sigs.k8s.io/). The Gateway solver will
        create HTTPRoutes with the specified labels in the same namespace as the challenge.
        This solver is experimental, and fields / behaviour may change in the future.
        """

        labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Custom labels that will be applied to HTTPRoutes created by cert-manager
        while solving HTTP-01 challenges.
        """
        parent_refs: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRouteParentRefsArgsDict"
                    ]
                ]
            ]
        ]
        """
        When solving an HTTP-01 challenge, cert-manager creates an HTTPRoute.
        cert-manager needs to know which parentRefs should be used when creating
        the HTTPRoute. Usually, the parentRef references a Gateway. See:
        https://gateway-api.sigs.k8s.io/api-types/httproute/#attaching-to-gateways
        """
        pod_template: NotRequired[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateArgsDict"
            ]
        ]
        service_type: NotRequired[pulumi.Input[str]]
        """
        Optional service type for Kubernetes solver service. Supported values
        are NodePort or ClusterIP. If unset, defaults to NodePort.
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRouteArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRouteArgs:
    def __init__(
        __self__,
        *,
        labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
        parent_refs: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRouteParentRefsArgs"
                    ]
                ]
            ]
        ] = None,
        pod_template: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateArgs"
            ]
        ] = None,
        service_type: Optional[pulumi.Input[str]] = None
    ):
        """
        The Gateway API is a sig-network community API that models service networking
        in Kubernetes (https://gateway-api.sigs.k8s.io/). The Gateway solver will
        create HTTPRoutes with the specified labels in the same namespace as the challenge.
        This solver is experimental, and fields / behaviour may change in the future.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: Custom labels that will be applied to HTTPRoutes created by cert-manager
               while solving HTTP-01 challenges.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRouteParentRefsArgs']]] parent_refs: When solving an HTTP-01 challenge, cert-manager creates an HTTPRoute.
               cert-manager needs to know which parentRefs should be used when creating
               the HTTPRoute. Usually, the parentRef references a Gateway. See:
               https://gateway-api.sigs.k8s.io/api-types/httproute/#attaching-to-gateways
        :param pulumi.Input[str] service_type: Optional service type for Kubernetes solver service. Supported values
               are NodePort or ClusterIP. If unset, defaults to NodePort.
        """
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if parent_refs is not None:
            pulumi.set(__self__, "parent_refs", parent_refs)
        if pod_template is not None:
            pulumi.set(__self__, "pod_template", pod_template)
        if service_type is not None:
            pulumi.set(__self__, "service_type", service_type)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Custom labels that will be applied to HTTPRoutes created by cert-manager
        while solving HTTP-01 challenges.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter(name="parentRefs")
    def parent_refs(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRouteParentRefsArgs"
                ]
            ]
        ]
    ]:
        """
        When solving an HTTP-01 challenge, cert-manager creates an HTTPRoute.
        cert-manager needs to know which parentRefs should be used when creating
        the HTTPRoute. Usually, the parentRef references a Gateway. See:
        https://gateway-api.sigs.k8s.io/api-types/httproute/#attaching-to-gateways
        """
        return pulumi.get(self, "parent_refs")

    @parent_refs.setter
    def parent_refs(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRouteParentRefsArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "parent_refs", value)

    @property
    @pulumi.getter(name="podTemplate")
    def pod_template(
        self,
    ) -> Optional[
        pulumi.Input[
            "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateArgs"
        ]
    ]:
        return pulumi.get(self, "pod_template")

    @pod_template.setter
    def pod_template(
        self,
        value: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateArgs"
            ]
        ],
    ):
        pulumi.set(self, "pod_template", value)

    @property
    @pulumi.getter(name="serviceType")
    def service_type(self) -> Optional[pulumi.Input[str]]:
        """
        Optional service type for Kubernetes solver service. Supported values
        are NodePort or ClusterIP. If unset, defaults to NodePort.
        """
        return pulumi.get(self, "service_type")

    @service_type.setter
    def service_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_type", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01IngressIngressTemplateMetadataPatchArgsDict(
        TypedDict
    ):
        """
        ObjectMeta overrides for the ingress used to solve HTTP01 challenges.
        Only the 'labels' and 'annotations' fields may be set.
        If labels or annotations overlap with in-built values, the values here
        will override the in-built values.
        """

        annotations: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Annotations that should be added to the created ACME HTTP01 solver ingress.
        """
        labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Labels that should be added to the created ACME HTTP01 solver ingress.
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01IngressIngressTemplateMetadataPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01IngressIngressTemplateMetadataPatchArgs:
    def __init__(
        __self__,
        *,
        annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
        labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None
    ):
        """
        ObjectMeta overrides for the ingress used to solve HTTP01 challenges.
        Only the 'labels' and 'annotations' fields may be set.
        If labels or annotations overlap with in-built values, the values here
        will override the in-built values.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] annotations: Annotations that should be added to the created ACME HTTP01 solver ingress.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: Labels that should be added to the created ACME HTTP01 solver ingress.
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Annotations that should be added to the created ACME HTTP01 solver ingress.
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(
        self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
    ):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Labels that should be added to the created ACME HTTP01 solver ingress.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01IngressIngressTemplateMetadataArgsDict(
        TypedDict
    ):
        """
        ObjectMeta overrides for the ingress used to solve HTTP01 challenges.
        Only the 'labels' and 'annotations' fields may be set.
        If labels or annotations overlap with in-built values, the values here
        will override the in-built values.
        """

        annotations: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Annotations that should be added to the created ACME HTTP01 solver ingress.
        """
        labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Labels that should be added to the created ACME HTTP01 solver ingress.
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01IngressIngressTemplateMetadataArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01IngressIngressTemplateMetadataArgs:
    def __init__(
        __self__,
        *,
        annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
        labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None
    ):
        """
        ObjectMeta overrides for the ingress used to solve HTTP01 challenges.
        Only the 'labels' and 'annotations' fields may be set.
        If labels or annotations overlap with in-built values, the values here
        will override the in-built values.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] annotations: Annotations that should be added to the created ACME HTTP01 solver ingress.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: Labels that should be added to the created ACME HTTP01 solver ingress.
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Annotations that should be added to the created ACME HTTP01 solver ingress.
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(
        self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
    ):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Labels that should be added to the created ACME HTTP01 solver ingress.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01IngressIngressTemplatePatchArgsDict(
        TypedDict
    ):
        """
        Optional ingress template used to configure the ACME challenge solver
        ingress used for HTTP01 challenges.
        """

        metadata: NotRequired[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01IngressIngressTemplateMetadataPatchArgsDict"
            ]
        ]

elif False:
    ClusterIssuerSpecAcmeSolversHttp01IngressIngressTemplatePatchArgsDict: TypeAlias = (
        Mapping[str, Any]
    )


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01IngressIngressTemplatePatchArgs:
    def __init__(
        __self__,
        *,
        metadata: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01IngressIngressTemplateMetadataPatchArgs"
            ]
        ] = None
    ):
        """
        Optional ingress template used to configure the ACME challenge solver
        ingress used for HTTP01 challenges.
        """
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)

    @property
    @pulumi.getter
    def metadata(
        self,
    ) -> Optional[
        pulumi.Input[
            "ClusterIssuerSpecAcmeSolversHttp01IngressIngressTemplateMetadataPatchArgs"
        ]
    ]:
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(
        self,
        value: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01IngressIngressTemplateMetadataPatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "metadata", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01IngressIngressTemplateArgsDict(TypedDict):
        """
        Optional ingress template used to configure the ACME challenge solver
        ingress used for HTTP01 challenges.
        """

        metadata: NotRequired[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01IngressIngressTemplateMetadataArgsDict"
            ]
        ]

elif False:
    ClusterIssuerSpecAcmeSolversHttp01IngressIngressTemplateArgsDict: TypeAlias = (
        Mapping[str, Any]
    )


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01IngressIngressTemplateArgs:
    def __init__(
        __self__,
        *,
        metadata: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01IngressIngressTemplateMetadataArgs"
            ]
        ] = None
    ):
        """
        Optional ingress template used to configure the ACME challenge solver
        ingress used for HTTP01 challenges.
        """
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)

    @property
    @pulumi.getter
    def metadata(
        self,
    ) -> Optional[
        pulumi.Input[
            "ClusterIssuerSpecAcmeSolversHttp01IngressIngressTemplateMetadataArgs"
        ]
    ]:
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(
        self,
        value: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01IngressIngressTemplateMetadataArgs"
            ]
        ],
    ):
        pulumi.set(self, "metadata", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01IngressPatchArgsDict(TypedDict):
        """
        The ingress based HTTP01 challenge solver will solve challenges by
        creating or modifying Ingress resources in order to route requests for
        '/.well-known/acme-challenge/XYZ' to 'challenge solver' pods that are
        provisioned by cert-manager for each Challenge to be completed.
        """

        class_: NotRequired[pulumi.Input[str]]
        """
        This field configures the annotation `kubernetes.io/ingress.class` when
        creating Ingress resources to solve ACME challenges that use this
        challenge solver. Only one of `class`, `name` or `ingressClassName` may
        be specified.
        """
        ingress_class_name: NotRequired[pulumi.Input[str]]
        """
        This field configures the field `ingressClassName` on the created Ingress
        resources used to solve ACME challenges that use this challenge solver.
        This is the recommended way of configuring the ingress class. Only one of
        `class`, `name` or `ingressClassName` may be specified.
        """
        ingress_template: NotRequired[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01IngressIngressTemplatePatchArgsDict"
            ]
        ]
        name: NotRequired[pulumi.Input[str]]
        """
        The name of the ingress resource that should have ACME challenge solving
        routes inserted into it in order to solve HTTP01 challenges.
        This is typically used in conjunction with ingress controllers like
        ingress-gce, which maintains a 1:1 mapping between external IPs and
        ingress resources. Only one of `class`, `name` or `ingressClassName` may
        be specified.
        """
        pod_template: NotRequired[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplatePatchArgsDict"
            ]
        ]
        service_type: NotRequired[pulumi.Input[str]]
        """
        Optional service type for Kubernetes solver service. Supported values
        are NodePort or ClusterIP. If unset, defaults to NodePort.
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01IngressPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01IngressPatchArgs:
    def __init__(
        __self__,
        *,
        class_: Optional[pulumi.Input[str]] = None,
        ingress_class_name: Optional[pulumi.Input[str]] = None,
        ingress_template: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01IngressIngressTemplatePatchArgs"
            ]
        ] = None,
        name: Optional[pulumi.Input[str]] = None,
        pod_template: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplatePatchArgs"
            ]
        ] = None,
        service_type: Optional[pulumi.Input[str]] = None
    ):
        """
        The ingress based HTTP01 challenge solver will solve challenges by
        creating or modifying Ingress resources in order to route requests for
        '/.well-known/acme-challenge/XYZ' to 'challenge solver' pods that are
        provisioned by cert-manager for each Challenge to be completed.
        :param pulumi.Input[str] class_: This field configures the annotation `kubernetes.io/ingress.class` when
               creating Ingress resources to solve ACME challenges that use this
               challenge solver. Only one of `class`, `name` or `ingressClassName` may
               be specified.
        :param pulumi.Input[str] ingress_class_name: This field configures the field `ingressClassName` on the created Ingress
               resources used to solve ACME challenges that use this challenge solver.
               This is the recommended way of configuring the ingress class. Only one of
               `class`, `name` or `ingressClassName` may be specified.
        :param pulumi.Input[str] name: The name of the ingress resource that should have ACME challenge solving
               routes inserted into it in order to solve HTTP01 challenges.
               This is typically used in conjunction with ingress controllers like
               ingress-gce, which maintains a 1:1 mapping between external IPs and
               ingress resources. Only one of `class`, `name` or `ingressClassName` may
               be specified.
        :param pulumi.Input[str] service_type: Optional service type for Kubernetes solver service. Supported values
               are NodePort or ClusterIP. If unset, defaults to NodePort.
        """
        if class_ is not None:
            pulumi.set(__self__, "class_", class_)
        if ingress_class_name is not None:
            pulumi.set(__self__, "ingress_class_name", ingress_class_name)
        if ingress_template is not None:
            pulumi.set(__self__, "ingress_template", ingress_template)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if pod_template is not None:
            pulumi.set(__self__, "pod_template", pod_template)
        if service_type is not None:
            pulumi.set(__self__, "service_type", service_type)

    @property
    @pulumi.getter(name="class")
    def class_(self) -> Optional[pulumi.Input[str]]:
        """
        This field configures the annotation `kubernetes.io/ingress.class` when
        creating Ingress resources to solve ACME challenges that use this
        challenge solver. Only one of `class`, `name` or `ingressClassName` may
        be specified.
        """
        return pulumi.get(self, "class_")

    @class_.setter
    def class_(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "class_", value)

    @property
    @pulumi.getter(name="ingressClassName")
    def ingress_class_name(self) -> Optional[pulumi.Input[str]]:
        """
        This field configures the field `ingressClassName` on the created Ingress
        resources used to solve ACME challenges that use this challenge solver.
        This is the recommended way of configuring the ingress class. Only one of
        `class`, `name` or `ingressClassName` may be specified.
        """
        return pulumi.get(self, "ingress_class_name")

    @ingress_class_name.setter
    def ingress_class_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ingress_class_name", value)

    @property
    @pulumi.getter(name="ingressTemplate")
    def ingress_template(
        self,
    ) -> Optional[
        pulumi.Input[
            "ClusterIssuerSpecAcmeSolversHttp01IngressIngressTemplatePatchArgs"
        ]
    ]:
        return pulumi.get(self, "ingress_template")

    @ingress_template.setter
    def ingress_template(
        self,
        value: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01IngressIngressTemplatePatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "ingress_template", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the ingress resource that should have ACME challenge solving
        routes inserted into it in order to solve HTTP01 challenges.
        This is typically used in conjunction with ingress controllers like
        ingress-gce, which maintains a 1:1 mapping between external IPs and
        ingress resources. Only one of `class`, `name` or `ingressClassName` may
        be specified.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="podTemplate")
    def pod_template(
        self,
    ) -> Optional[
        pulumi.Input["ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplatePatchArgs"]
    ]:
        return pulumi.get(self, "pod_template")

    @pod_template.setter
    def pod_template(
        self,
        value: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplatePatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "pod_template", value)

    @property
    @pulumi.getter(name="serviceType")
    def service_type(self) -> Optional[pulumi.Input[str]]:
        """
        Optional service type for Kubernetes solver service. Supported values
        are NodePort or ClusterIP. If unset, defaults to NodePort.
        """
        return pulumi.get(self, "service_type")

    @service_type.setter
    def service_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_type", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateMetadataPatchArgsDict(
        TypedDict
    ):
        """
        ObjectMeta overrides for the pod used to solve HTTP01 challenges.
        Only the 'labels' and 'annotations' fields may be set.
        If labels or annotations overlap with in-built values, the values here
        will override the in-built values.
        """

        annotations: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Annotations that should be added to the created ACME HTTP01 solver pods.
        """
        labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Labels that should be added to the created ACME HTTP01 solver pods.
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateMetadataPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateMetadataPatchArgs:
    def __init__(
        __self__,
        *,
        annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
        labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None
    ):
        """
        ObjectMeta overrides for the pod used to solve HTTP01 challenges.
        Only the 'labels' and 'annotations' fields may be set.
        If labels or annotations overlap with in-built values, the values here
        will override the in-built values.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] annotations: Annotations that should be added to the created ACME HTTP01 solver pods.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: Labels that should be added to the created ACME HTTP01 solver pods.
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Annotations that should be added to the created ACME HTTP01 solver pods.
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(
        self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
    ):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Labels that should be added to the created ACME HTTP01 solver pods.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateMetadataArgsDict(
        TypedDict
    ):
        """
        ObjectMeta overrides for the pod used to solve HTTP01 challenges.
        Only the 'labels' and 'annotations' fields may be set.
        If labels or annotations overlap with in-built values, the values here
        will override the in-built values.
        """

        annotations: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Annotations that should be added to the created ACME HTTP01 solver pods.
        """
        labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Labels that should be added to the created ACME HTTP01 solver pods.
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateMetadataArgsDict: TypeAlias = (
        Mapping[str, Any]
    )


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateMetadataArgs:
    def __init__(
        __self__,
        *,
        annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
        labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None
    ):
        """
        ObjectMeta overrides for the pod used to solve HTTP01 challenges.
        Only the 'labels' and 'annotations' fields may be set.
        If labels or annotations overlap with in-built values, the values here
        will override the in-built values.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] annotations: Annotations that should be added to the created ACME HTTP01 solver pods.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: Labels that should be added to the created ACME HTTP01 solver pods.
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Annotations that should be added to the created ACME HTTP01 solver pods.
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(
        self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
    ):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Labels that should be added to the created ACME HTTP01 solver pods.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplatePatchArgsDict(TypedDict):
        """
        Optional pod template used to configure the ACME challenge solver pods
        used for HTTP01 challenges.
        """

        metadata: NotRequired[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateMetadataPatchArgsDict"
            ]
        ]
        spec: NotRequired[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecPatchArgsDict"
            ]
        ]

elif False:
    ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplatePatchArgsDict: TypeAlias = (
        Mapping[str, Any]
    )


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplatePatchArgs:
    def __init__(
        __self__,
        *,
        metadata: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateMetadataPatchArgs"
            ]
        ] = None,
        spec: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecPatchArgs"
            ]
        ] = None
    ):
        """
        Optional pod template used to configure the ACME challenge solver pods
        used for HTTP01 challenges.
        """
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if spec is not None:
            pulumi.set(__self__, "spec", spec)

    @property
    @pulumi.getter
    def metadata(
        self,
    ) -> Optional[
        pulumi.Input[
            "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateMetadataPatchArgs"
        ]
    ]:
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(
        self,
        value: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateMetadataPatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter
    def spec(
        self,
    ) -> Optional[
        pulumi.Input[
            "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecPatchArgs"
        ]
    ]:
        return pulumi.get(self, "spec")

    @spec.setter
    def spec(
        self,
        value: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecPatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "spec", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPatchArgsDict(
        TypedDict
    ):
        """
        Describes node affinity scheduling rules for the pod.
        """

        preferred_during_scheduling_ignored_during_execution: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgsDict"
                    ]
                ]
            ]
        ]
        """
        The scheduler will prefer to schedule pods to nodes that satisfy
        the affinity expressions specified by this field, but it may choose
        a node that violates one or more of the expressions. The node that is
        most preferred is the one with the greatest sum of weights, i.e.
        for each node that meets all of the scheduling requirements (resource
        request, requiredDuringScheduling affinity expressions, etc.),
        compute a sum by iterating through the elements of this field and adding
        "weight" to the sum if the node matches the corresponding matchExpressions; the
        node(s) with the highest sum are the most preferred.
        """
        required_during_scheduling_ignored_during_execution: NotRequired[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgsDict"
            ]
        ]

elif False:
    ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPatchArgs:
    def __init__(
        __self__,
        *,
        preferred_during_scheduling_ignored_during_execution: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgs"
                    ]
                ]
            ]
        ] = None,
        required_during_scheduling_ignored_during_execution: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgs"
            ]
        ] = None
    ):
        """
        Describes node affinity scheduling rules for the pod.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgs']]] preferred_during_scheduling_ignored_during_execution: The scheduler will prefer to schedule pods to nodes that satisfy
               the affinity expressions specified by this field, but it may choose
               a node that violates one or more of the expressions. The node that is
               most preferred is the one with the greatest sum of weights, i.e.
               for each node that meets all of the scheduling requirements (resource
               request, requiredDuringScheduling affinity expressions, etc.),
               compute a sum by iterating through the elements of this field and adding
               "weight" to the sum if the node matches the corresponding matchExpressions; the
               node(s) with the highest sum are the most preferred.
        """
        if preferred_during_scheduling_ignored_during_execution is not None:
            pulumi.set(
                __self__,
                "preferred_during_scheduling_ignored_during_execution",
                preferred_during_scheduling_ignored_during_execution,
            )
        if required_during_scheduling_ignored_during_execution is not None:
            pulumi.set(
                __self__,
                "required_during_scheduling_ignored_during_execution",
                required_during_scheduling_ignored_during_execution,
            )

    @property
    @pulumi.getter(name="preferredDuringSchedulingIgnoredDuringExecution")
    def preferred_during_scheduling_ignored_during_execution(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgs"
                ]
            ]
        ]
    ]:
        """
        The scheduler will prefer to schedule pods to nodes that satisfy
        the affinity expressions specified by this field, but it may choose
        a node that violates one or more of the expressions. The node that is
        most preferred is the one with the greatest sum of weights, i.e.
        for each node that meets all of the scheduling requirements (resource
        request, requiredDuringScheduling affinity expressions, etc.),
        compute a sum by iterating through the elements of this field and adding
        "weight" to the sum if the node matches the corresponding matchExpressions; the
        node(s) with the highest sum are the most preferred.
        """
        return pulumi.get(self, "preferred_during_scheduling_ignored_during_execution")

    @preferred_during_scheduling_ignored_during_execution.setter
    def preferred_during_scheduling_ignored_during_execution(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "preferred_during_scheduling_ignored_during_execution", value)

    @property
    @pulumi.getter(name="requiredDuringSchedulingIgnoredDuringExecution")
    def required_during_scheduling_ignored_during_execution(
        self,
    ) -> Optional[
        pulumi.Input[
            "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgs"
        ]
    ]:
        return pulumi.get(self, "required_during_scheduling_ignored_during_execution")

    @required_during_scheduling_ignored_during_execution.setter
    def required_during_scheduling_ignored_during_execution(
        self,
        value: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "required_during_scheduling_ignored_during_execution", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgsDict(
        TypedDict
    ):
        """
        An empty preferred scheduling term matches all objects with implicit weight 0
        (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
        """

        preference: NotRequired[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatchArgsDict"
            ]
        ]
        weight: NotRequired[pulumi.Input[int]]
        """
        Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgs:
    def __init__(
        __self__,
        *,
        preference: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatchArgs"
            ]
        ] = None,
        weight: Optional[pulumi.Input[int]] = None
    ):
        """
        An empty preferred scheduling term matches all objects with implicit weight 0
        (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
        :param pulumi.Input[int] weight: Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
        """
        if preference is not None:
            pulumi.set(__self__, "preference", preference)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def preference(
        self,
    ) -> Optional[
        pulumi.Input[
            "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatchArgs"
        ]
    ]:
        return pulumi.get(self, "preference")

    @preference.setter
    def preference(
        self,
        value: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "preference", value)

    @property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[int]]:
        """
        Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
        """
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "weight", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatchArgsDict(
        TypedDict
    ):
        """
        A node selector requirement is a selector that contains values, a key, and an operator
        that relates the key and values.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        Represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        An array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. If the operator is Gt or Lt, the values
        array must have a single element, which will be interpreted as an integer.
        This array is replaced during a strategic merge patch.
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatchArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        operator: Optional[pulumi.Input[str]] = None,
        values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None
    ):
        """
        A node selector requirement is a selector that contains values, a key, and an operator
        that relates the key and values.
        :param pulumi.Input[str] key: The label key that the selector applies to.
        :param pulumi.Input[str] operator: Represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: An array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. If the operator is Gt or Lt, the values
               array must have a single element, which will be interpreted as an integer.
               This array is replaced during a strategic merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        Represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        An array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. If the operator is Gt or Lt, the values
        array must have a single element, which will be interpreted as an integer.
        This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgsDict(
        TypedDict
    ):
        """
        A node selector requirement is a selector that contains values, a key, and an operator
        that relates the key and values.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        Represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        An array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. If the operator is Gt or Lt, the values
        array must have a single element, which will be interpreted as an integer.
        This array is replaced during a strategic merge patch.
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        operator: Optional[pulumi.Input[str]] = None,
        values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None
    ):
        """
        A node selector requirement is a selector that contains values, a key, and an operator
        that relates the key and values.
        :param pulumi.Input[str] key: The label key that the selector applies to.
        :param pulumi.Input[str] operator: Represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: An array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. If the operator is Gt or Lt, the values
               array must have a single element, which will be interpreted as an integer.
               This array is replaced during a strategic merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        Represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        An array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. If the operator is Gt or Lt, the values
        array must have a single element, which will be interpreted as an integer.
        This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatchArgsDict(
        TypedDict
    ):
        """
        A node selector requirement is a selector that contains values, a key, and an operator
        that relates the key and values.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        Represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        An array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. If the operator is Gt or Lt, the values
        array must have a single element, which will be interpreted as an integer.
        This array is replaced during a strategic merge patch.
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatchArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        operator: Optional[pulumi.Input[str]] = None,
        values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None
    ):
        """
        A node selector requirement is a selector that contains values, a key, and an operator
        that relates the key and values.
        :param pulumi.Input[str] key: The label key that the selector applies to.
        :param pulumi.Input[str] operator: Represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: An array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. If the operator is Gt or Lt, the values
               array must have a single element, which will be interpreted as an integer.
               This array is replaced during a strategic merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        Represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        An array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. If the operator is Gt or Lt, the values
        array must have a single element, which will be interpreted as an integer.
        This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgsDict(
        TypedDict
    ):
        """
        A node selector requirement is a selector that contains values, a key, and an operator
        that relates the key and values.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        Represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        An array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. If the operator is Gt or Lt, the values
        array must have a single element, which will be interpreted as an integer.
        This array is replaced during a strategic merge patch.
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        operator: Optional[pulumi.Input[str]] = None,
        values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None
    ):
        """
        A node selector requirement is a selector that contains values, a key, and an operator
        that relates the key and values.
        :param pulumi.Input[str] key: The label key that the selector applies to.
        :param pulumi.Input[str] operator: Represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: An array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. If the operator is Gt or Lt, the values
               array must have a single element, which will be interpreted as an integer.
               This array is replaced during a strategic merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        Represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        An array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. If the operator is Gt or Lt, the values
        array must have a single element, which will be interpreted as an integer.
        This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatchArgsDict(
        TypedDict
    ):
        """
        A node selector term, associated with the corresponding weight.
        """

        match_expressions: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatchArgsDict"
                    ]
                ]
            ]
        ]
        """
        A list of node selector requirements by node's labels.
        """
        match_fields: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatchArgsDict"
                    ]
                ]
            ]
        ]
        """
        A list of node selector requirements by node's fields.
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatchArgs:
    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatchArgs"
                    ]
                ]
            ]
        ] = None,
        match_fields: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatchArgs"
                    ]
                ]
            ]
        ] = None
    ):
        """
        A node selector term, associated with the corresponding weight.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatchArgs']]] match_expressions: A list of node selector requirements by node's labels.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatchArgs']]] match_fields: A list of node selector requirements by node's fields.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_fields is not None:
            pulumi.set(__self__, "match_fields", match_fields)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatchArgs"
                ]
            ]
        ]
    ]:
        """
        A list of node selector requirements by node's labels.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatchArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchFields")
    def match_fields(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatchArgs"
                ]
            ]
        ]
    ]:
        """
        A list of node selector requirements by node's fields.
        """
        return pulumi.get(self, "match_fields")

    @match_fields.setter
    def match_fields(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatchArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "match_fields", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgsDict(
        TypedDict
    ):
        """
        A node selector term, associated with the corresponding weight.
        """

        match_expressions: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgsDict"
                    ]
                ]
            ]
        ]
        """
        A list of node selector requirements by node's labels.
        """
        match_fields: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgsDict"
                    ]
                ]
            ]
        ]
        """
        A list of node selector requirements by node's fields.
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgs:
    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgs"
                    ]
                ]
            ]
        ] = None,
        match_fields: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgs"
                    ]
                ]
            ]
        ] = None
    ):
        """
        A node selector term, associated with the corresponding weight.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgs']]] match_expressions: A list of node selector requirements by node's labels.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgs']]] match_fields: A list of node selector requirements by node's fields.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_fields is not None:
            pulumi.set(__self__, "match_fields", match_fields)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgs"
                ]
            ]
        ]
    ]:
        """
        A list of node selector requirements by node's labels.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchFields")
    def match_fields(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgs"
                ]
            ]
        ]
    ]:
        """
        A list of node selector requirements by node's fields.
        """
        return pulumi.get(self, "match_fields")

    @match_fields.setter
    def match_fields(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "match_fields", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgsDict(
        TypedDict
    ):
        """
        An empty preferred scheduling term matches all objects with implicit weight 0
        (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
        """

        preference: NotRequired[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgsDict"
            ]
        ]
        weight: NotRequired[pulumi.Input[int]]
        """
        Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs:
    def __init__(
        __self__,
        *,
        preference: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgs"
            ]
        ] = None,
        weight: Optional[pulumi.Input[int]] = None
    ):
        """
        An empty preferred scheduling term matches all objects with implicit weight 0
        (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
        :param pulumi.Input[int] weight: Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
        """
        if preference is not None:
            pulumi.set(__self__, "preference", preference)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def preference(
        self,
    ) -> Optional[
        pulumi.Input[
            "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgs"
        ]
    ]:
        return pulumi.get(self, "preference")

    @preference.setter
    def preference(
        self,
        value: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgs"
            ]
        ],
    ):
        pulumi.set(self, "preference", value)

    @property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[int]]:
        """
        Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
        """
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "weight", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatchArgsDict(
        TypedDict
    ):
        """
        A node selector requirement is a selector that contains values, a key, and an operator
        that relates the key and values.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        Represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        An array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. If the operator is Gt or Lt, the values
        array must have a single element, which will be interpreted as an integer.
        This array is replaced during a strategic merge patch.
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatchArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        operator: Optional[pulumi.Input[str]] = None,
        values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None
    ):
        """
        A node selector requirement is a selector that contains values, a key, and an operator
        that relates the key and values.
        :param pulumi.Input[str] key: The label key that the selector applies to.
        :param pulumi.Input[str] operator: Represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: An array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. If the operator is Gt or Lt, the values
               array must have a single element, which will be interpreted as an integer.
               This array is replaced during a strategic merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        Represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        An array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. If the operator is Gt or Lt, the values
        array must have a single element, which will be interpreted as an integer.
        This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgsDict(
        TypedDict
    ):
        """
        A node selector requirement is a selector that contains values, a key, and an operator
        that relates the key and values.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        Represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        An array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. If the operator is Gt or Lt, the values
        array must have a single element, which will be interpreted as an integer.
        This array is replaced during a strategic merge patch.
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        operator: Optional[pulumi.Input[str]] = None,
        values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None
    ):
        """
        A node selector requirement is a selector that contains values, a key, and an operator
        that relates the key and values.
        :param pulumi.Input[str] key: The label key that the selector applies to.
        :param pulumi.Input[str] operator: Represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: An array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. If the operator is Gt or Lt, the values
               array must have a single element, which will be interpreted as an integer.
               This array is replaced during a strategic merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        Represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        An array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. If the operator is Gt or Lt, the values
        array must have a single element, which will be interpreted as an integer.
        This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatchArgsDict(
        TypedDict
    ):
        """
        A node selector requirement is a selector that contains values, a key, and an operator
        that relates the key and values.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        Represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        An array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. If the operator is Gt or Lt, the values
        array must have a single element, which will be interpreted as an integer.
        This array is replaced during a strategic merge patch.
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatchArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        operator: Optional[pulumi.Input[str]] = None,
        values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None
    ):
        """
        A node selector requirement is a selector that contains values, a key, and an operator
        that relates the key and values.
        :param pulumi.Input[str] key: The label key that the selector applies to.
        :param pulumi.Input[str] operator: Represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: An array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. If the operator is Gt or Lt, the values
               array must have a single element, which will be interpreted as an integer.
               This array is replaced during a strategic merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        Represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        An array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. If the operator is Gt or Lt, the values
        array must have a single element, which will be interpreted as an integer.
        This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgsDict(
        TypedDict
    ):
        """
        A node selector requirement is a selector that contains values, a key, and an operator
        that relates the key and values.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        Represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        An array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. If the operator is Gt or Lt, the values
        array must have a single element, which will be interpreted as an integer.
        This array is replaced during a strategic merge patch.
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        operator: Optional[pulumi.Input[str]] = None,
        values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None
    ):
        """
        A node selector requirement is a selector that contains values, a key, and an operator
        that relates the key and values.
        :param pulumi.Input[str] key: The label key that the selector applies to.
        :param pulumi.Input[str] operator: Represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: An array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. If the operator is Gt or Lt, the values
               array must have a single element, which will be interpreted as an integer.
               This array is replaced during a strategic merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        Represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        An array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. If the operator is Gt or Lt, the values
        array must have a single element, which will be interpreted as an integer.
        This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatchArgsDict(
        TypedDict
    ):
        """
        A null or empty node selector term matches no objects. The requirements of
        them are ANDed.
        The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
        """

        match_expressions: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatchArgsDict"
                    ]
                ]
            ]
        ]
        """
        A list of node selector requirements by node's labels.
        """
        match_fields: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatchArgsDict"
                    ]
                ]
            ]
        ]
        """
        A list of node selector requirements by node's fields.
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatchArgs:
    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatchArgs"
                    ]
                ]
            ]
        ] = None,
        match_fields: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatchArgs"
                    ]
                ]
            ]
        ] = None
    ):
        """
        A null or empty node selector term matches no objects. The requirements of
        them are ANDed.
        The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatchArgs']]] match_expressions: A list of node selector requirements by node's labels.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatchArgs']]] match_fields: A list of node selector requirements by node's fields.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_fields is not None:
            pulumi.set(__self__, "match_fields", match_fields)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatchArgs"
                ]
            ]
        ]
    ]:
        """
        A list of node selector requirements by node's labels.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatchArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchFields")
    def match_fields(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatchArgs"
                ]
            ]
        ]
    ]:
        """
        A list of node selector requirements by node's fields.
        """
        return pulumi.get(self, "match_fields")

    @match_fields.setter
    def match_fields(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatchArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "match_fields", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgsDict(
        TypedDict
    ):
        """
        A null or empty node selector term matches no objects. The requirements of
        them are ANDed.
        The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
        """

        match_expressions: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgsDict"
                    ]
                ]
            ]
        ]
        """
        A list of node selector requirements by node's labels.
        """
        match_fields: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgsDict"
                    ]
                ]
            ]
        ]
        """
        A list of node selector requirements by node's fields.
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgs:
    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgs"
                    ]
                ]
            ]
        ] = None,
        match_fields: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgs"
                    ]
                ]
            ]
        ] = None
    ):
        """
        A null or empty node selector term matches no objects. The requirements of
        them are ANDed.
        The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgs']]] match_expressions: A list of node selector requirements by node's labels.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgs']]] match_fields: A list of node selector requirements by node's fields.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_fields is not None:
            pulumi.set(__self__, "match_fields", match_fields)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgs"
                ]
            ]
        ]
    ]:
        """
        A list of node selector requirements by node's labels.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchFields")
    def match_fields(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgs"
                ]
            ]
        ]
    ]:
        """
        A list of node selector requirements by node's fields.
        """
        return pulumi.get(self, "match_fields")

    @match_fields.setter
    def match_fields(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "match_fields", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgsDict(
        TypedDict
    ):
        """
        If the affinity requirements specified by this field are not met at
        scheduling time, the pod will not be scheduled onto the node.
        If the affinity requirements specified by this field cease to be met
        at some point during pod execution (e.g. due to an update), the system
        may or may not try to eventually evict the pod from its node.
        """

        node_selector_terms: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatchArgsDict"
                    ]
                ]
            ]
        ]
        """
        Required. A list of node selector terms. The terms are ORed.
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgs:
    def __init__(
        __self__,
        *,
        node_selector_terms: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatchArgs"
                    ]
                ]
            ]
        ] = None
    ):
        """
        If the affinity requirements specified by this field are not met at
        scheduling time, the pod will not be scheduled onto the node.
        If the affinity requirements specified by this field cease to be met
        at some point during pod execution (e.g. due to an update), the system
        may or may not try to eventually evict the pod from its node.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatchArgs']]] node_selector_terms: Required. A list of node selector terms. The terms are ORed.
        """
        if node_selector_terms is not None:
            pulumi.set(__self__, "node_selector_terms", node_selector_terms)

    @property
    @pulumi.getter(name="nodeSelectorTerms")
    def node_selector_terms(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatchArgs"
                ]
            ]
        ]
    ]:
        """
        Required. A list of node selector terms. The terms are ORed.
        """
        return pulumi.get(self, "node_selector_terms")

    @node_selector_terms.setter
    def node_selector_terms(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatchArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "node_selector_terms", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgsDict(
        TypedDict
    ):
        """
        If the affinity requirements specified by this field are not met at
        scheduling time, the pod will not be scheduled onto the node.
        If the affinity requirements specified by this field cease to be met
        at some point during pod execution (e.g. due to an update), the system
        may or may not try to eventually evict the pod from its node.
        """

        node_selector_terms: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgsDict"
                    ]
                ]
            ]
        ]
        """
        Required. A list of node selector terms. The terms are ORed.
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs:
    def __init__(
        __self__,
        *,
        node_selector_terms: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgs"
                    ]
                ]
            ]
        ] = None
    ):
        """
        If the affinity requirements specified by this field are not met at
        scheduling time, the pod will not be scheduled onto the node.
        If the affinity requirements specified by this field cease to be met
        at some point during pod execution (e.g. due to an update), the system
        may or may not try to eventually evict the pod from its node.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgs']]] node_selector_terms: Required. A list of node selector terms. The terms are ORed.
        """
        if node_selector_terms is not None:
            pulumi.set(__self__, "node_selector_terms", node_selector_terms)

    @property
    @pulumi.getter(name="nodeSelectorTerms")
    def node_selector_terms(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgs"
                ]
            ]
        ]
    ]:
        """
        Required. A list of node selector terms. The terms are ORed.
        """
        return pulumi.get(self, "node_selector_terms")

    @node_selector_terms.setter
    def node_selector_terms(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "node_selector_terms", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityArgsDict(
        TypedDict
    ):
        """
        Describes node affinity scheduling rules for the pod.
        """

        preferred_during_scheduling_ignored_during_execution: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgsDict"
                    ]
                ]
            ]
        ]
        """
        The scheduler will prefer to schedule pods to nodes that satisfy
        the affinity expressions specified by this field, but it may choose
        a node that violates one or more of the expressions. The node that is
        most preferred is the one with the greatest sum of weights, i.e.
        for each node that meets all of the scheduling requirements (resource
        request, requiredDuringScheduling affinity expressions, etc.),
        compute a sum by iterating through the elements of this field and adding
        "weight" to the sum if the node matches the corresponding matchExpressions; the
        node(s) with the highest sum are the most preferred.
        """
        required_during_scheduling_ignored_during_execution: NotRequired[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgsDict"
            ]
        ]

elif False:
    ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityArgs:
    def __init__(
        __self__,
        *,
        preferred_during_scheduling_ignored_during_execution: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs"
                    ]
                ]
            ]
        ] = None,
        required_during_scheduling_ignored_during_execution: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs"
            ]
        ] = None
    ):
        """
        Describes node affinity scheduling rules for the pod.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs']]] preferred_during_scheduling_ignored_during_execution: The scheduler will prefer to schedule pods to nodes that satisfy
               the affinity expressions specified by this field, but it may choose
               a node that violates one or more of the expressions. The node that is
               most preferred is the one with the greatest sum of weights, i.e.
               for each node that meets all of the scheduling requirements (resource
               request, requiredDuringScheduling affinity expressions, etc.),
               compute a sum by iterating through the elements of this field and adding
               "weight" to the sum if the node matches the corresponding matchExpressions; the
               node(s) with the highest sum are the most preferred.
        """
        if preferred_during_scheduling_ignored_during_execution is not None:
            pulumi.set(
                __self__,
                "preferred_during_scheduling_ignored_during_execution",
                preferred_during_scheduling_ignored_during_execution,
            )
        if required_during_scheduling_ignored_during_execution is not None:
            pulumi.set(
                __self__,
                "required_during_scheduling_ignored_during_execution",
                required_during_scheduling_ignored_during_execution,
            )

    @property
    @pulumi.getter(name="preferredDuringSchedulingIgnoredDuringExecution")
    def preferred_during_scheduling_ignored_during_execution(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs"
                ]
            ]
        ]
    ]:
        """
        The scheduler will prefer to schedule pods to nodes that satisfy
        the affinity expressions specified by this field, but it may choose
        a node that violates one or more of the expressions. The node that is
        most preferred is the one with the greatest sum of weights, i.e.
        for each node that meets all of the scheduling requirements (resource
        request, requiredDuringScheduling affinity expressions, etc.),
        compute a sum by iterating through the elements of this field and adding
        "weight" to the sum if the node matches the corresponding matchExpressions; the
        node(s) with the highest sum are the most preferred.
        """
        return pulumi.get(self, "preferred_during_scheduling_ignored_during_execution")

    @preferred_during_scheduling_ignored_during_execution.setter
    def preferred_during_scheduling_ignored_during_execution(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "preferred_during_scheduling_ignored_during_execution", value)

    @property
    @pulumi.getter(name="requiredDuringSchedulingIgnoredDuringExecution")
    def required_during_scheduling_ignored_during_execution(
        self,
    ) -> Optional[
        pulumi.Input[
            "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs"
        ]
    ]:
        return pulumi.get(self, "required_during_scheduling_ignored_during_execution")

    @required_during_scheduling_ignored_during_execution.setter
    def required_during_scheduling_ignored_during_execution(
        self,
        value: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs"
            ]
        ],
    ):
        pulumi.set(self, "required_during_scheduling_ignored_during_execution", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPatchArgsDict(
        TypedDict
    ):
        """
        If specified, the pod's scheduling constraints
        """

        node_affinity: NotRequired[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPatchArgsDict"
            ]
        ]
        pod_affinity: NotRequired[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPatchArgsDict"
            ]
        ]
        pod_anti_affinity: NotRequired[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPatchArgsDict"
            ]
        ]

elif False:
    ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPatchArgs:
    def __init__(
        __self__,
        *,
        node_affinity: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPatchArgs"
            ]
        ] = None,
        pod_affinity: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPatchArgs"
            ]
        ] = None,
        pod_anti_affinity: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPatchArgs"
            ]
        ] = None
    ):
        """
        If specified, the pod's scheduling constraints
        """
        if node_affinity is not None:
            pulumi.set(__self__, "node_affinity", node_affinity)
        if pod_affinity is not None:
            pulumi.set(__self__, "pod_affinity", pod_affinity)
        if pod_anti_affinity is not None:
            pulumi.set(__self__, "pod_anti_affinity", pod_anti_affinity)

    @property
    @pulumi.getter(name="nodeAffinity")
    def node_affinity(
        self,
    ) -> Optional[
        pulumi.Input[
            "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPatchArgs"
        ]
    ]:
        return pulumi.get(self, "node_affinity")

    @node_affinity.setter
    def node_affinity(
        self,
        value: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "node_affinity", value)

    @property
    @pulumi.getter(name="podAffinity")
    def pod_affinity(
        self,
    ) -> Optional[
        pulumi.Input[
            "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPatchArgs"
        ]
    ]:
        return pulumi.get(self, "pod_affinity")

    @pod_affinity.setter
    def pod_affinity(
        self,
        value: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "pod_affinity", value)

    @property
    @pulumi.getter(name="podAntiAffinity")
    def pod_anti_affinity(
        self,
    ) -> Optional[
        pulumi.Input[
            "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPatchArgs"
        ]
    ]:
        return pulumi.get(self, "pod_anti_affinity")

    @pod_anti_affinity.setter
    def pod_anti_affinity(
        self,
        value: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "pod_anti_affinity", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPatchArgsDict(
        TypedDict
    ):
        """
        Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
        """

        preferred_during_scheduling_ignored_during_execution: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgsDict"
                    ]
                ]
            ]
        ]
        """
        The scheduler will prefer to schedule pods to nodes that satisfy
        the affinity expressions specified by this field, but it may choose
        a node that violates one or more of the expressions. The node that is
        most preferred is the one with the greatest sum of weights, i.e.
        for each node that meets all of the scheduling requirements (resource
        request, requiredDuringScheduling affinity expressions, etc.),
        compute a sum by iterating through the elements of this field and adding
        "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
        node(s) with the highest sum are the most preferred.
        """
        required_during_scheduling_ignored_during_execution: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgsDict"
                    ]
                ]
            ]
        ]
        """
        If the affinity requirements specified by this field are not met at
        scheduling time, the pod will not be scheduled onto the node.
        If the affinity requirements specified by this field cease to be met
        at some point during pod execution (e.g. due to a pod label update), the
        system may or may not try to eventually evict the pod from its node.
        When there are multiple elements, the lists of nodes corresponding to each
        podAffinityTerm are intersected, i.e. all terms must be satisfied.
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPatchArgs:
    def __init__(
        __self__,
        *,
        preferred_during_scheduling_ignored_during_execution: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgs"
                    ]
                ]
            ]
        ] = None,
        required_during_scheduling_ignored_during_execution: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgs"
                    ]
                ]
            ]
        ] = None
    ):
        """
        Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
        :param pulumi.Input[Sequence[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgs']]] preferred_during_scheduling_ignored_during_execution: The scheduler will prefer to schedule pods to nodes that satisfy
               the affinity expressions specified by this field, but it may choose
               a node that violates one or more of the expressions. The node that is
               most preferred is the one with the greatest sum of weights, i.e.
               for each node that meets all of the scheduling requirements (resource
               request, requiredDuringScheduling affinity expressions, etc.),
               compute a sum by iterating through the elements of this field and adding
               "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
               node(s) with the highest sum are the most preferred.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgs']]] required_during_scheduling_ignored_during_execution: If the affinity requirements specified by this field are not met at
               scheduling time, the pod will not be scheduled onto the node.
               If the affinity requirements specified by this field cease to be met
               at some point during pod execution (e.g. due to a pod label update), the
               system may or may not try to eventually evict the pod from its node.
               When there are multiple elements, the lists of nodes corresponding to each
               podAffinityTerm are intersected, i.e. all terms must be satisfied.
        """
        if preferred_during_scheduling_ignored_during_execution is not None:
            pulumi.set(
                __self__,
                "preferred_during_scheduling_ignored_during_execution",
                preferred_during_scheduling_ignored_during_execution,
            )
        if required_during_scheduling_ignored_during_execution is not None:
            pulumi.set(
                __self__,
                "required_during_scheduling_ignored_during_execution",
                required_during_scheduling_ignored_during_execution,
            )

    @property
    @pulumi.getter(name="preferredDuringSchedulingIgnoredDuringExecution")
    def preferred_during_scheduling_ignored_during_execution(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgs"
                ]
            ]
        ]
    ]:
        """
        The scheduler will prefer to schedule pods to nodes that satisfy
        the affinity expressions specified by this field, but it may choose
        a node that violates one or more of the expressions. The node that is
        most preferred is the one with the greatest sum of weights, i.e.
        for each node that meets all of the scheduling requirements (resource
        request, requiredDuringScheduling affinity expressions, etc.),
        compute a sum by iterating through the elements of this field and adding
        "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
        node(s) with the highest sum are the most preferred.
        """
        return pulumi.get(self, "preferred_during_scheduling_ignored_during_execution")

    @preferred_during_scheduling_ignored_during_execution.setter
    def preferred_during_scheduling_ignored_during_execution(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "preferred_during_scheduling_ignored_during_execution", value)

    @property
    @pulumi.getter(name="requiredDuringSchedulingIgnoredDuringExecution")
    def required_during_scheduling_ignored_during_execution(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgs"
                ]
            ]
        ]
    ]:
        """
        If the affinity requirements specified by this field are not met at
        scheduling time, the pod will not be scheduled onto the node.
        If the affinity requirements specified by this field cease to be met
        at some point during pod execution (e.g. due to a pod label update), the
        system may or may not try to eventually evict the pod from its node.
        When there are multiple elements, the lists of nodes corresponding to each
        podAffinityTerm are intersected, i.e. all terms must be satisfied.
        """
        return pulumi.get(self, "required_during_scheduling_ignored_during_execution")

    @required_during_scheduling_ignored_during_execution.setter
    def required_during_scheduling_ignored_during_execution(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "required_during_scheduling_ignored_during_execution", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgsDict(
        TypedDict
    ):
        """
        The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
        """

        pod_affinity_term: NotRequired[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchArgsDict"
            ]
        ]
        weight: NotRequired[pulumi.Input[int]]
        """
        weight associated with matching the corresponding podAffinityTerm,
        in the range 1-100.
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgs:
    def __init__(
        __self__,
        *,
        pod_affinity_term: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchArgs"
            ]
        ] = None,
        weight: Optional[pulumi.Input[int]] = None
    ):
        """
        The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
        :param pulumi.Input[int] weight: weight associated with matching the corresponding podAffinityTerm,
               in the range 1-100.
        """
        if pod_affinity_term is not None:
            pulumi.set(__self__, "pod_affinity_term", pod_affinity_term)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter(name="podAffinityTerm")
    def pod_affinity_term(
        self,
    ) -> Optional[
        pulumi.Input[
            "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchArgs"
        ]
    ]:
        return pulumi.get(self, "pod_affinity_term")

    @pod_affinity_term.setter
    def pod_affinity_term(
        self,
        value: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "pod_affinity_term", value)

    @property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[int]]:
        """
        weight associated with matching the corresponding podAffinityTerm,
        in the range 1-100.
        """
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "weight", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArgsDict(
        TypedDict
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        key is the label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        operator: Optional[pulumi.Input[str]] = None,
        values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        :param pulumi.Input[str] key: key is the label key that the selector applies to.
        :param pulumi.Input[str] operator: operator represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists and DoesNotExist.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: values is an array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. This array is replaced during a strategic
               merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgsDict(
        TypedDict
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        key is the label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        operator: Optional[pulumi.Input[str]] = None,
        values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        :param pulumi.Input[str] key: key is the label key that the selector applies to.
        :param pulumi.Input[str] operator: operator represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists and DoesNotExist.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: values is an array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. This array is replaced during a strategic
               merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchArgsDict(
        TypedDict
    ):
        """
        A label query over a set of resources, in this case pods.
        If it's null, this PodAffinityTerm matches with no Pods.
        """

        match_expressions: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArgsDict"
                    ]
                ]
            ]
        ]
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        match_labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchArgs:
    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArgs"
                    ]
                ]
            ]
        ] = None,
        match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None
    ):
        """
        A label query over a set of resources, in this case pods.
        If it's null, this PodAffinityTerm matches with no Pods.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArgs']]] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
               map is equivalent to an element of matchExpressions, whose key field is "key", the
               operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArgs"
                ]
            ]
        ]
    ]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(
        self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
    ):
        pulumi.set(self, "match_labels", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgsDict(
        TypedDict
    ):
        """
        A label query over a set of resources, in this case pods.
        If it's null, this PodAffinityTerm matches with no Pods.
        """

        match_expressions: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgsDict"
                    ]
                ]
            ]
        ]
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        match_labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs:
    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs"
                    ]
                ]
            ]
        ] = None,
        match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None
    ):
        """
        A label query over a set of resources, in this case pods.
        If it's null, this PodAffinityTerm matches with no Pods.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs']]] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
               map is equivalent to an element of matchExpressions, whose key field is "key", the
               operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs"
                ]
            ]
        ]
    ]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(
        self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
    ):
        pulumi.set(self, "match_labels", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArgsDict(
        TypedDict
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        key is the label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        operator: Optional[pulumi.Input[str]] = None,
        values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        :param pulumi.Input[str] key: key is the label key that the selector applies to.
        :param pulumi.Input[str] operator: operator represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists and DoesNotExist.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: values is an array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. This array is replaced during a strategic
               merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgsDict(
        TypedDict
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        key is the label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        operator: Optional[pulumi.Input[str]] = None,
        values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        :param pulumi.Input[str] key: key is the label key that the selector applies to.
        :param pulumi.Input[str] operator: operator represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists and DoesNotExist.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: values is an array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. This array is replaced during a strategic
               merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchArgsDict(
        TypedDict
    ):
        """
        A label query over the set of namespaces that the term applies to.
        The term is applied to the union of the namespaces selected by this field
        and the ones listed in the namespaces field.
        null selector and null or empty namespaces list means "this pod's namespace".
        An empty selector ({}) matches all namespaces.
        """

        match_expressions: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArgsDict"
                    ]
                ]
            ]
        ]
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        match_labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchArgs:
    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArgs"
                    ]
                ]
            ]
        ] = None,
        match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None
    ):
        """
        A label query over the set of namespaces that the term applies to.
        The term is applied to the union of the namespaces selected by this field
        and the ones listed in the namespaces field.
        null selector and null or empty namespaces list means "this pod's namespace".
        An empty selector ({}) matches all namespaces.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArgs']]] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
               map is equivalent to an element of matchExpressions, whose key field is "key", the
               operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArgs"
                ]
            ]
        ]
    ]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(
        self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
    ):
        pulumi.set(self, "match_labels", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgsDict(
        TypedDict
    ):
        """
        A label query over the set of namespaces that the term applies to.
        The term is applied to the union of the namespaces selected by this field
        and the ones listed in the namespaces field.
        null selector and null or empty namespaces list means "this pod's namespace".
        An empty selector ({}) matches all namespaces.
        """

        match_expressions: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgsDict"
                    ]
                ]
            ]
        ]
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        match_labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs:
    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs"
                    ]
                ]
            ]
        ] = None,
        match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None
    ):
        """
        A label query over the set of namespaces that the term applies to.
        The term is applied to the union of the namespaces selected by this field
        and the ones listed in the namespaces field.
        null selector and null or empty namespaces list means "this pod's namespace".
        An empty selector ({}) matches all namespaces.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs']]] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
               map is equivalent to an element of matchExpressions, whose key field is "key", the
               operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs"
                ]
            ]
        ]
    ]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(
        self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
    ):
        pulumi.set(self, "match_labels", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchArgsDict(
        TypedDict
    ):
        """
        Required. A pod affinity term, associated with the corresponding weight.
        """

        label_selector: NotRequired[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchArgsDict"
            ]
        ]
        match_label_keys: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        MatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both matchLabelKeys and labelSelector.
        Also, matchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        mismatch_label_keys: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        MismatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
        Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        namespace_selector: NotRequired[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchArgsDict"
            ]
        ]
        namespaces: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        namespaces specifies a static list of namespace names that the term applies to.
        The term is applied to the union of the namespaces listed in this field
        and the ones selected by namespaceSelector.
        null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        """
        topology_key: NotRequired[pulumi.Input[str]]
        """
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
        the labelSelector in the specified namespaces, where co-located is defined as running on a node
        whose value of the label with key topologyKey matches that of any node on which any of the
        selected pods is running.
        Empty topologyKey is not allowed.
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchArgs:
    def __init__(
        __self__,
        *,
        label_selector: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchArgs"
            ]
        ] = None,
        match_label_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        mismatch_label_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        namespace_selector: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchArgs"
            ]
        ] = None,
        namespaces: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        topology_key: Optional[pulumi.Input[str]] = None
    ):
        """
        Required. A pod affinity term, associated with the corresponding weight.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] match_label_keys: MatchLabelKeys is a set of pod label keys to select which pods will
               be taken into consideration. The keys are used to lookup values from the
               incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
               to select the group of existing pods which pods will be taken into consideration
               for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
               pod labels will be ignored. The default value is empty.
               The same key is forbidden to exist in both matchLabelKeys and labelSelector.
               Also, matchLabelKeys cannot be set when labelSelector isn't set.
               This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] mismatch_label_keys: MismatchLabelKeys is a set of pod label keys to select which pods will
               be taken into consideration. The keys are used to lookup values from the
               incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
               to select the group of existing pods which pods will be taken into consideration
               for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
               pod labels will be ignored. The default value is empty.
               The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
               Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
               This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] namespaces: namespaces specifies a static list of namespace names that the term applies to.
               The term is applied to the union of the namespaces listed in this field
               and the ones selected by namespaceSelector.
               null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        :param pulumi.Input[str] topology_key: This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
               the labelSelector in the specified namespaces, where co-located is defined as running on a node
               whose value of the label with key topologyKey matches that of any node on which any of the
               selected pods is running.
               Empty topologyKey is not allowed.
        """
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if match_label_keys is not None:
            pulumi.set(__self__, "match_label_keys", match_label_keys)
        if mismatch_label_keys is not None:
            pulumi.set(__self__, "mismatch_label_keys", mismatch_label_keys)
        if namespace_selector is not None:
            pulumi.set(__self__, "namespace_selector", namespace_selector)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)
        if topology_key is not None:
            pulumi.set(__self__, "topology_key", topology_key)

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(
        self,
    ) -> Optional[
        pulumi.Input[
            "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchArgs"
        ]
    ]:
        return pulumi.get(self, "label_selector")

    @label_selector.setter
    def label_selector(
        self,
        value: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "label_selector", value)

    @property
    @pulumi.getter(name="matchLabelKeys")
    def match_label_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        MatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both matchLabelKeys and labelSelector.
        Also, matchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        return pulumi.get(self, "match_label_keys")

    @match_label_keys.setter
    def match_label_keys(
        self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]
    ):
        pulumi.set(self, "match_label_keys", value)

    @property
    @pulumi.getter(name="mismatchLabelKeys")
    def mismatch_label_keys(
        self,
    ) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        MismatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
        Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        return pulumi.get(self, "mismatch_label_keys")

    @mismatch_label_keys.setter
    def mismatch_label_keys(
        self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]
    ):
        pulumi.set(self, "mismatch_label_keys", value)

    @property
    @pulumi.getter(name="namespaceSelector")
    def namespace_selector(
        self,
    ) -> Optional[
        pulumi.Input[
            "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchArgs"
        ]
    ]:
        return pulumi.get(self, "namespace_selector")

    @namespace_selector.setter
    def namespace_selector(
        self,
        value: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "namespace_selector", value)

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        namespaces specifies a static list of namespace names that the term applies to.
        The term is applied to the union of the namespaces listed in this field
        and the ones selected by namespaceSelector.
        null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        """
        return pulumi.get(self, "namespaces")

    @namespaces.setter
    def namespaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "namespaces", value)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> Optional[pulumi.Input[str]]:
        """
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
        the labelSelector in the specified namespaces, where co-located is defined as running on a node
        whose value of the label with key topologyKey matches that of any node on which any of the
        selected pods is running.
        Empty topologyKey is not allowed.
        """
        return pulumi.get(self, "topology_key")

    @topology_key.setter
    def topology_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topology_key", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgsDict(
        TypedDict
    ):
        """
        Required. A pod affinity term, associated with the corresponding weight.
        """

        label_selector: NotRequired[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgsDict"
            ]
        ]
        match_label_keys: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        MatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both matchLabelKeys and labelSelector.
        Also, matchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        mismatch_label_keys: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        MismatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
        Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        namespace_selector: NotRequired[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgsDict"
            ]
        ]
        namespaces: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        namespaces specifies a static list of namespace names that the term applies to.
        The term is applied to the union of the namespaces listed in this field
        and the ones selected by namespaceSelector.
        null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        """
        topology_key: NotRequired[pulumi.Input[str]]
        """
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
        the labelSelector in the specified namespaces, where co-located is defined as running on a node
        whose value of the label with key topologyKey matches that of any node on which any of the
        selected pods is running.
        Empty topologyKey is not allowed.
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs:
    def __init__(
        __self__,
        *,
        label_selector: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs"
            ]
        ] = None,
        match_label_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        mismatch_label_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        namespace_selector: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs"
            ]
        ] = None,
        namespaces: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        topology_key: Optional[pulumi.Input[str]] = None
    ):
        """
        Required. A pod affinity term, associated with the corresponding weight.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] match_label_keys: MatchLabelKeys is a set of pod label keys to select which pods will
               be taken into consideration. The keys are used to lookup values from the
               incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
               to select the group of existing pods which pods will be taken into consideration
               for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
               pod labels will be ignored. The default value is empty.
               The same key is forbidden to exist in both matchLabelKeys and labelSelector.
               Also, matchLabelKeys cannot be set when labelSelector isn't set.
               This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] mismatch_label_keys: MismatchLabelKeys is a set of pod label keys to select which pods will
               be taken into consideration. The keys are used to lookup values from the
               incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
               to select the group of existing pods which pods will be taken into consideration
               for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
               pod labels will be ignored. The default value is empty.
               The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
               Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
               This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] namespaces: namespaces specifies a static list of namespace names that the term applies to.
               The term is applied to the union of the namespaces listed in this field
               and the ones selected by namespaceSelector.
               null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        :param pulumi.Input[str] topology_key: This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
               the labelSelector in the specified namespaces, where co-located is defined as running on a node
               whose value of the label with key topologyKey matches that of any node on which any of the
               selected pods is running.
               Empty topologyKey is not allowed.
        """
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if match_label_keys is not None:
            pulumi.set(__self__, "match_label_keys", match_label_keys)
        if mismatch_label_keys is not None:
            pulumi.set(__self__, "mismatch_label_keys", mismatch_label_keys)
        if namespace_selector is not None:
            pulumi.set(__self__, "namespace_selector", namespace_selector)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)
        if topology_key is not None:
            pulumi.set(__self__, "topology_key", topology_key)

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(
        self,
    ) -> Optional[
        pulumi.Input[
            "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs"
        ]
    ]:
        return pulumi.get(self, "label_selector")

    @label_selector.setter
    def label_selector(
        self,
        value: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs"
            ]
        ],
    ):
        pulumi.set(self, "label_selector", value)

    @property
    @pulumi.getter(name="matchLabelKeys")
    def match_label_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        MatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both matchLabelKeys and labelSelector.
        Also, matchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        return pulumi.get(self, "match_label_keys")

    @match_label_keys.setter
    def match_label_keys(
        self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]
    ):
        pulumi.set(self, "match_label_keys", value)

    @property
    @pulumi.getter(name="mismatchLabelKeys")
    def mismatch_label_keys(
        self,
    ) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        MismatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
        Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        return pulumi.get(self, "mismatch_label_keys")

    @mismatch_label_keys.setter
    def mismatch_label_keys(
        self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]
    ):
        pulumi.set(self, "mismatch_label_keys", value)

    @property
    @pulumi.getter(name="namespaceSelector")
    def namespace_selector(
        self,
    ) -> Optional[
        pulumi.Input[
            "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs"
        ]
    ]:
        return pulumi.get(self, "namespace_selector")

    @namespace_selector.setter
    def namespace_selector(
        self,
        value: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs"
            ]
        ],
    ):
        pulumi.set(self, "namespace_selector", value)

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        namespaces specifies a static list of namespace names that the term applies to.
        The term is applied to the union of the namespaces listed in this field
        and the ones selected by namespaceSelector.
        null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        """
        return pulumi.get(self, "namespaces")

    @namespaces.setter
    def namespaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "namespaces", value)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> Optional[pulumi.Input[str]]:
        """
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
        the labelSelector in the specified namespaces, where co-located is defined as running on a node
        whose value of the label with key topologyKey matches that of any node on which any of the
        selected pods is running.
        Empty topologyKey is not allowed.
        """
        return pulumi.get(self, "topology_key")

    @topology_key.setter
    def topology_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topology_key", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgsDict(
        TypedDict
    ):
        """
        The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
        """

        pod_affinity_term: NotRequired[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgsDict"
            ]
        ]
        weight: NotRequired[pulumi.Input[int]]
        """
        weight associated with matching the corresponding podAffinityTerm,
        in the range 1-100.
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs:
    def __init__(
        __self__,
        *,
        pod_affinity_term: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs"
            ]
        ] = None,
        weight: Optional[pulumi.Input[int]] = None
    ):
        """
        The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
        :param pulumi.Input[int] weight: weight associated with matching the corresponding podAffinityTerm,
               in the range 1-100.
        """
        if pod_affinity_term is not None:
            pulumi.set(__self__, "pod_affinity_term", pod_affinity_term)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter(name="podAffinityTerm")
    def pod_affinity_term(
        self,
    ) -> Optional[
        pulumi.Input[
            "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs"
        ]
    ]:
        return pulumi.get(self, "pod_affinity_term")

    @pod_affinity_term.setter
    def pod_affinity_term(
        self,
        value: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs"
            ]
        ],
    ):
        pulumi.set(self, "pod_affinity_term", value)

    @property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[int]]:
        """
        weight associated with matching the corresponding podAffinityTerm,
        in the range 1-100.
        """
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "weight", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArgsDict(
        TypedDict
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        key is the label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        operator: Optional[pulumi.Input[str]] = None,
        values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        :param pulumi.Input[str] key: key is the label key that the selector applies to.
        :param pulumi.Input[str] operator: operator represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists and DoesNotExist.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: values is an array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. This array is replaced during a strategic
               merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgsDict(
        TypedDict
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        key is the label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        operator: Optional[pulumi.Input[str]] = None,
        values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        :param pulumi.Input[str] key: key is the label key that the selector applies to.
        :param pulumi.Input[str] operator: operator represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists and DoesNotExist.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: values is an array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. This array is replaced during a strategic
               merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchArgsDict(
        TypedDict
    ):
        """
        A label query over a set of resources, in this case pods.
        If it's null, this PodAffinityTerm matches with no Pods.
        """

        match_expressions: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArgsDict"
                    ]
                ]
            ]
        ]
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        match_labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchArgs:
    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArgs"
                    ]
                ]
            ]
        ] = None,
        match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None
    ):
        """
        A label query over a set of resources, in this case pods.
        If it's null, this PodAffinityTerm matches with no Pods.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArgs']]] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
               map is equivalent to an element of matchExpressions, whose key field is "key", the
               operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArgs"
                ]
            ]
        ]
    ]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(
        self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
    ):
        pulumi.set(self, "match_labels", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgsDict(
        TypedDict
    ):
        """
        A label query over a set of resources, in this case pods.
        If it's null, this PodAffinityTerm matches with no Pods.
        """

        match_expressions: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgsDict"
                    ]
                ]
            ]
        ]
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        match_labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs:
    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs"
                    ]
                ]
            ]
        ] = None,
        match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None
    ):
        """
        A label query over a set of resources, in this case pods.
        If it's null, this PodAffinityTerm matches with no Pods.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs']]] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
               map is equivalent to an element of matchExpressions, whose key field is "key", the
               operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs"
                ]
            ]
        ]
    ]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(
        self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
    ):
        pulumi.set(self, "match_labels", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArgsDict(
        TypedDict
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        key is the label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        operator: Optional[pulumi.Input[str]] = None,
        values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        :param pulumi.Input[str] key: key is the label key that the selector applies to.
        :param pulumi.Input[str] operator: operator represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists and DoesNotExist.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: values is an array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. This array is replaced during a strategic
               merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgsDict(
        TypedDict
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        key is the label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        operator: Optional[pulumi.Input[str]] = None,
        values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        :param pulumi.Input[str] key: key is the label key that the selector applies to.
        :param pulumi.Input[str] operator: operator represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists and DoesNotExist.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: values is an array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. This array is replaced during a strategic
               merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchArgsDict(
        TypedDict
    ):
        """
        A label query over the set of namespaces that the term applies to.
        The term is applied to the union of the namespaces selected by this field
        and the ones listed in the namespaces field.
        null selector and null or empty namespaces list means "this pod's namespace".
        An empty selector ({}) matches all namespaces.
        """

        match_expressions: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArgsDict"
                    ]
                ]
            ]
        ]
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        match_labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchArgs:
    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArgs"
                    ]
                ]
            ]
        ] = None,
        match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None
    ):
        """
        A label query over the set of namespaces that the term applies to.
        The term is applied to the union of the namespaces selected by this field
        and the ones listed in the namespaces field.
        null selector and null or empty namespaces list means "this pod's namespace".
        An empty selector ({}) matches all namespaces.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArgs']]] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
               map is equivalent to an element of matchExpressions, whose key field is "key", the
               operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArgs"
                ]
            ]
        ]
    ]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(
        self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
    ):
        pulumi.set(self, "match_labels", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgsDict(
        TypedDict
    ):
        """
        A label query over the set of namespaces that the term applies to.
        The term is applied to the union of the namespaces selected by this field
        and the ones listed in the namespaces field.
        null selector and null or empty namespaces list means "this pod's namespace".
        An empty selector ({}) matches all namespaces.
        """

        match_expressions: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgsDict"
                    ]
                ]
            ]
        ]
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        match_labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs:
    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs"
                    ]
                ]
            ]
        ] = None,
        match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None
    ):
        """
        A label query over the set of namespaces that the term applies to.
        The term is applied to the union of the namespaces selected by this field
        and the ones listed in the namespaces field.
        null selector and null or empty namespaces list means "this pod's namespace".
        An empty selector ({}) matches all namespaces.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs']]] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
               map is equivalent to an element of matchExpressions, whose key field is "key", the
               operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs"
                ]
            ]
        ]
    ]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(
        self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
    ):
        pulumi.set(self, "match_labels", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgsDict(
        TypedDict
    ):
        """
        Defines a set of pods (namely those matching the labelSelector
        relative to the given namespace(s)) that this pod should be
        co-located (affinity) or not co-located (anti-affinity) with,
        where co-located is defined as running on a node whose value of
        the label with key <topologyKey> matches that of any node on which
        a pod of the set of pods is running
        """

        label_selector: NotRequired[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchArgsDict"
            ]
        ]
        match_label_keys: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        MatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both matchLabelKeys and labelSelector.
        Also, matchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        mismatch_label_keys: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        MismatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
        Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        namespace_selector: NotRequired[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchArgsDict"
            ]
        ]
        namespaces: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        namespaces specifies a static list of namespace names that the term applies to.
        The term is applied to the union of the namespaces listed in this field
        and the ones selected by namespaceSelector.
        null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        """
        topology_key: NotRequired[pulumi.Input[str]]
        """
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
        the labelSelector in the specified namespaces, where co-located is defined as running on a node
        whose value of the label with key topologyKey matches that of any node on which any of the
        selected pods is running.
        Empty topologyKey is not allowed.
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgs:
    def __init__(
        __self__,
        *,
        label_selector: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchArgs"
            ]
        ] = None,
        match_label_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        mismatch_label_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        namespace_selector: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchArgs"
            ]
        ] = None,
        namespaces: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        topology_key: Optional[pulumi.Input[str]] = None
    ):
        """
        Defines a set of pods (namely those matching the labelSelector
        relative to the given namespace(s)) that this pod should be
        co-located (affinity) or not co-located (anti-affinity) with,
        where co-located is defined as running on a node whose value of
        the label with key <topologyKey> matches that of any node on which
        a pod of the set of pods is running
        :param pulumi.Input[Sequence[pulumi.Input[str]]] match_label_keys: MatchLabelKeys is a set of pod label keys to select which pods will
               be taken into consideration. The keys are used to lookup values from the
               incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
               to select the group of existing pods which pods will be taken into consideration
               for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
               pod labels will be ignored. The default value is empty.
               The same key is forbidden to exist in both matchLabelKeys and labelSelector.
               Also, matchLabelKeys cannot be set when labelSelector isn't set.
               This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] mismatch_label_keys: MismatchLabelKeys is a set of pod label keys to select which pods will
               be taken into consideration. The keys are used to lookup values from the
               incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
               to select the group of existing pods which pods will be taken into consideration
               for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
               pod labels will be ignored. The default value is empty.
               The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
               Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
               This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] namespaces: namespaces specifies a static list of namespace names that the term applies to.
               The term is applied to the union of the namespaces listed in this field
               and the ones selected by namespaceSelector.
               null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        :param pulumi.Input[str] topology_key: This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
               the labelSelector in the specified namespaces, where co-located is defined as running on a node
               whose value of the label with key topologyKey matches that of any node on which any of the
               selected pods is running.
               Empty topologyKey is not allowed.
        """
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if match_label_keys is not None:
            pulumi.set(__self__, "match_label_keys", match_label_keys)
        if mismatch_label_keys is not None:
            pulumi.set(__self__, "mismatch_label_keys", mismatch_label_keys)
        if namespace_selector is not None:
            pulumi.set(__self__, "namespace_selector", namespace_selector)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)
        if topology_key is not None:
            pulumi.set(__self__, "topology_key", topology_key)

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(
        self,
    ) -> Optional[
        pulumi.Input[
            "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchArgs"
        ]
    ]:
        return pulumi.get(self, "label_selector")

    @label_selector.setter
    def label_selector(
        self,
        value: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "label_selector", value)

    @property
    @pulumi.getter(name="matchLabelKeys")
    def match_label_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        MatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both matchLabelKeys and labelSelector.
        Also, matchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        return pulumi.get(self, "match_label_keys")

    @match_label_keys.setter
    def match_label_keys(
        self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]
    ):
        pulumi.set(self, "match_label_keys", value)

    @property
    @pulumi.getter(name="mismatchLabelKeys")
    def mismatch_label_keys(
        self,
    ) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        MismatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
        Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        return pulumi.get(self, "mismatch_label_keys")

    @mismatch_label_keys.setter
    def mismatch_label_keys(
        self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]
    ):
        pulumi.set(self, "mismatch_label_keys", value)

    @property
    @pulumi.getter(name="namespaceSelector")
    def namespace_selector(
        self,
    ) -> Optional[
        pulumi.Input[
            "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchArgs"
        ]
    ]:
        return pulumi.get(self, "namespace_selector")

    @namespace_selector.setter
    def namespace_selector(
        self,
        value: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "namespace_selector", value)

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        namespaces specifies a static list of namespace names that the term applies to.
        The term is applied to the union of the namespaces listed in this field
        and the ones selected by namespaceSelector.
        null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        """
        return pulumi.get(self, "namespaces")

    @namespaces.setter
    def namespaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "namespaces", value)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> Optional[pulumi.Input[str]]:
        """
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
        the labelSelector in the specified namespaces, where co-located is defined as running on a node
        whose value of the label with key topologyKey matches that of any node on which any of the
        selected pods is running.
        Empty topologyKey is not allowed.
        """
        return pulumi.get(self, "topology_key")

    @topology_key.setter
    def topology_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topology_key", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgsDict(
        TypedDict
    ):
        """
        Defines a set of pods (namely those matching the labelSelector
        relative to the given namespace(s)) that this pod should be
        co-located (affinity) or not co-located (anti-affinity) with,
        where co-located is defined as running on a node whose value of
        the label with key <topologyKey> matches that of any node on which
        a pod of the set of pods is running
        """

        label_selector: NotRequired[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgsDict"
            ]
        ]
        match_label_keys: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        MatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both matchLabelKeys and labelSelector.
        Also, matchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        mismatch_label_keys: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        MismatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
        Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        namespace_selector: NotRequired[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgsDict"
            ]
        ]
        namespaces: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        namespaces specifies a static list of namespace names that the term applies to.
        The term is applied to the union of the namespaces listed in this field
        and the ones selected by namespaceSelector.
        null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        """
        topology_key: NotRequired[pulumi.Input[str]]
        """
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
        the labelSelector in the specified namespaces, where co-located is defined as running on a node
        whose value of the label with key topologyKey matches that of any node on which any of the
        selected pods is running.
        Empty topologyKey is not allowed.
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs:
    def __init__(
        __self__,
        *,
        label_selector: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs"
            ]
        ] = None,
        match_label_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        mismatch_label_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        namespace_selector: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs"
            ]
        ] = None,
        namespaces: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        topology_key: Optional[pulumi.Input[str]] = None
    ):
        """
        Defines a set of pods (namely those matching the labelSelector
        relative to the given namespace(s)) that this pod should be
        co-located (affinity) or not co-located (anti-affinity) with,
        where co-located is defined as running on a node whose value of
        the label with key <topologyKey> matches that of any node on which
        a pod of the set of pods is running
        :param pulumi.Input[Sequence[pulumi.Input[str]]] match_label_keys: MatchLabelKeys is a set of pod label keys to select which pods will
               be taken into consideration. The keys are used to lookup values from the
               incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
               to select the group of existing pods which pods will be taken into consideration
               for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
               pod labels will be ignored. The default value is empty.
               The same key is forbidden to exist in both matchLabelKeys and labelSelector.
               Also, matchLabelKeys cannot be set when labelSelector isn't set.
               This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] mismatch_label_keys: MismatchLabelKeys is a set of pod label keys to select which pods will
               be taken into consideration. The keys are used to lookup values from the
               incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
               to select the group of existing pods which pods will be taken into consideration
               for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
               pod labels will be ignored. The default value is empty.
               The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
               Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
               This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] namespaces: namespaces specifies a static list of namespace names that the term applies to.
               The term is applied to the union of the namespaces listed in this field
               and the ones selected by namespaceSelector.
               null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        :param pulumi.Input[str] topology_key: This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
               the labelSelector in the specified namespaces, where co-located is defined as running on a node
               whose value of the label with key topologyKey matches that of any node on which any of the
               selected pods is running.
               Empty topologyKey is not allowed.
        """
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if match_label_keys is not None:
            pulumi.set(__self__, "match_label_keys", match_label_keys)
        if mismatch_label_keys is not None:
            pulumi.set(__self__, "mismatch_label_keys", mismatch_label_keys)
        if namespace_selector is not None:
            pulumi.set(__self__, "namespace_selector", namespace_selector)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)
        if topology_key is not None:
            pulumi.set(__self__, "topology_key", topology_key)

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(
        self,
    ) -> Optional[
        pulumi.Input[
            "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs"
        ]
    ]:
        return pulumi.get(self, "label_selector")

    @label_selector.setter
    def label_selector(
        self,
        value: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs"
            ]
        ],
    ):
        pulumi.set(self, "label_selector", value)

    @property
    @pulumi.getter(name="matchLabelKeys")
    def match_label_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        MatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both matchLabelKeys and labelSelector.
        Also, matchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        return pulumi.get(self, "match_label_keys")

    @match_label_keys.setter
    def match_label_keys(
        self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]
    ):
        pulumi.set(self, "match_label_keys", value)

    @property
    @pulumi.getter(name="mismatchLabelKeys")
    def mismatch_label_keys(
        self,
    ) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        MismatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
        Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        return pulumi.get(self, "mismatch_label_keys")

    @mismatch_label_keys.setter
    def mismatch_label_keys(
        self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]
    ):
        pulumi.set(self, "mismatch_label_keys", value)

    @property
    @pulumi.getter(name="namespaceSelector")
    def namespace_selector(
        self,
    ) -> Optional[
        pulumi.Input[
            "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs"
        ]
    ]:
        return pulumi.get(self, "namespace_selector")

    @namespace_selector.setter
    def namespace_selector(
        self,
        value: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs"
            ]
        ],
    ):
        pulumi.set(self, "namespace_selector", value)

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        namespaces specifies a static list of namespace names that the term applies to.
        The term is applied to the union of the namespaces listed in this field
        and the ones selected by namespaceSelector.
        null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        """
        return pulumi.get(self, "namespaces")

    @namespaces.setter
    def namespaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "namespaces", value)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> Optional[pulumi.Input[str]]:
        """
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
        the labelSelector in the specified namespaces, where co-located is defined as running on a node
        whose value of the label with key topologyKey matches that of any node on which any of the
        selected pods is running.
        Empty topologyKey is not allowed.
        """
        return pulumi.get(self, "topology_key")

    @topology_key.setter
    def topology_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topology_key", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityArgsDict(
        TypedDict
    ):
        """
        Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
        """

        preferred_during_scheduling_ignored_during_execution: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgsDict"
                    ]
                ]
            ]
        ]
        """
        The scheduler will prefer to schedule pods to nodes that satisfy
        the affinity expressions specified by this field, but it may choose
        a node that violates one or more of the expressions. The node that is
        most preferred is the one with the greatest sum of weights, i.e.
        for each node that meets all of the scheduling requirements (resource
        request, requiredDuringScheduling affinity expressions, etc.),
        compute a sum by iterating through the elements of this field and adding
        "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
        node(s) with the highest sum are the most preferred.
        """
        required_during_scheduling_ignored_during_execution: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgsDict"
                    ]
                ]
            ]
        ]
        """
        If the affinity requirements specified by this field are not met at
        scheduling time, the pod will not be scheduled onto the node.
        If the affinity requirements specified by this field cease to be met
        at some point during pod execution (e.g. due to a pod label update), the
        system may or may not try to eventually evict the pod from its node.
        When there are multiple elements, the lists of nodes corresponding to each
        podAffinityTerm are intersected, i.e. all terms must be satisfied.
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityArgs:
    def __init__(
        __self__,
        *,
        preferred_during_scheduling_ignored_during_execution: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs"
                    ]
                ]
            ]
        ] = None,
        required_during_scheduling_ignored_during_execution: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs"
                    ]
                ]
            ]
        ] = None
    ):
        """
        Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
        :param pulumi.Input[Sequence[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs']]] preferred_during_scheduling_ignored_during_execution: The scheduler will prefer to schedule pods to nodes that satisfy
               the affinity expressions specified by this field, but it may choose
               a node that violates one or more of the expressions. The node that is
               most preferred is the one with the greatest sum of weights, i.e.
               for each node that meets all of the scheduling requirements (resource
               request, requiredDuringScheduling affinity expressions, etc.),
               compute a sum by iterating through the elements of this field and adding
               "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
               node(s) with the highest sum are the most preferred.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs']]] required_during_scheduling_ignored_during_execution: If the affinity requirements specified by this field are not met at
               scheduling time, the pod will not be scheduled onto the node.
               If the affinity requirements specified by this field cease to be met
               at some point during pod execution (e.g. due to a pod label update), the
               system may or may not try to eventually evict the pod from its node.
               When there are multiple elements, the lists of nodes corresponding to each
               podAffinityTerm are intersected, i.e. all terms must be satisfied.
        """
        if preferred_during_scheduling_ignored_during_execution is not None:
            pulumi.set(
                __self__,
                "preferred_during_scheduling_ignored_during_execution",
                preferred_during_scheduling_ignored_during_execution,
            )
        if required_during_scheduling_ignored_during_execution is not None:
            pulumi.set(
                __self__,
                "required_during_scheduling_ignored_during_execution",
                required_during_scheduling_ignored_during_execution,
            )

    @property
    @pulumi.getter(name="preferredDuringSchedulingIgnoredDuringExecution")
    def preferred_during_scheduling_ignored_during_execution(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs"
                ]
            ]
        ]
    ]:
        """
        The scheduler will prefer to schedule pods to nodes that satisfy
        the affinity expressions specified by this field, but it may choose
        a node that violates one or more of the expressions. The node that is
        most preferred is the one with the greatest sum of weights, i.e.
        for each node that meets all of the scheduling requirements (resource
        request, requiredDuringScheduling affinity expressions, etc.),
        compute a sum by iterating through the elements of this field and adding
        "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
        node(s) with the highest sum are the most preferred.
        """
        return pulumi.get(self, "preferred_during_scheduling_ignored_during_execution")

    @preferred_during_scheduling_ignored_during_execution.setter
    def preferred_during_scheduling_ignored_during_execution(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "preferred_during_scheduling_ignored_during_execution", value)

    @property
    @pulumi.getter(name="requiredDuringSchedulingIgnoredDuringExecution")
    def required_during_scheduling_ignored_during_execution(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs"
                ]
            ]
        ]
    ]:
        """
        If the affinity requirements specified by this field are not met at
        scheduling time, the pod will not be scheduled onto the node.
        If the affinity requirements specified by this field cease to be met
        at some point during pod execution (e.g. due to a pod label update), the
        system may or may not try to eventually evict the pod from its node.
        When there are multiple elements, the lists of nodes corresponding to each
        podAffinityTerm are intersected, i.e. all terms must be satisfied.
        """
        return pulumi.get(self, "required_during_scheduling_ignored_during_execution")

    @required_during_scheduling_ignored_during_execution.setter
    def required_during_scheduling_ignored_during_execution(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "required_during_scheduling_ignored_during_execution", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPatchArgsDict(
        TypedDict
    ):
        """
        Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
        """

        preferred_during_scheduling_ignored_during_execution: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgsDict"
                    ]
                ]
            ]
        ]
        """
        The scheduler will prefer to schedule pods to nodes that satisfy
        the anti-affinity expressions specified by this field, but it may choose
        a node that violates one or more of the expressions. The node that is
        most preferred is the one with the greatest sum of weights, i.e.
        for each node that meets all of the scheduling requirements (resource
        request, requiredDuringScheduling anti-affinity expressions, etc.),
        compute a sum by iterating through the elements of this field and adding
        "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
        node(s) with the highest sum are the most preferred.
        """
        required_during_scheduling_ignored_during_execution: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgsDict"
                    ]
                ]
            ]
        ]
        """
        If the anti-affinity requirements specified by this field are not met at
        scheduling time, the pod will not be scheduled onto the node.
        If the anti-affinity requirements specified by this field cease to be met
        at some point during pod execution (e.g. due to a pod label update), the
        system may or may not try to eventually evict the pod from its node.
        When there are multiple elements, the lists of nodes corresponding to each
        podAffinityTerm are intersected, i.e. all terms must be satisfied.
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPatchArgs:
    def __init__(
        __self__,
        *,
        preferred_during_scheduling_ignored_during_execution: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgs"
                    ]
                ]
            ]
        ] = None,
        required_during_scheduling_ignored_during_execution: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgs"
                    ]
                ]
            ]
        ] = None
    ):
        """
        Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
        :param pulumi.Input[Sequence[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgs']]] preferred_during_scheduling_ignored_during_execution: The scheduler will prefer to schedule pods to nodes that satisfy
               the anti-affinity expressions specified by this field, but it may choose
               a node that violates one or more of the expressions. The node that is
               most preferred is the one with the greatest sum of weights, i.e.
               for each node that meets all of the scheduling requirements (resource
               request, requiredDuringScheduling anti-affinity expressions, etc.),
               compute a sum by iterating through the elements of this field and adding
               "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
               node(s) with the highest sum are the most preferred.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgs']]] required_during_scheduling_ignored_during_execution: If the anti-affinity requirements specified by this field are not met at
               scheduling time, the pod will not be scheduled onto the node.
               If the anti-affinity requirements specified by this field cease to be met
               at some point during pod execution (e.g. due to a pod label update), the
               system may or may not try to eventually evict the pod from its node.
               When there are multiple elements, the lists of nodes corresponding to each
               podAffinityTerm are intersected, i.e. all terms must be satisfied.
        """
        if preferred_during_scheduling_ignored_during_execution is not None:
            pulumi.set(
                __self__,
                "preferred_during_scheduling_ignored_during_execution",
                preferred_during_scheduling_ignored_during_execution,
            )
        if required_during_scheduling_ignored_during_execution is not None:
            pulumi.set(
                __self__,
                "required_during_scheduling_ignored_during_execution",
                required_during_scheduling_ignored_during_execution,
            )

    @property
    @pulumi.getter(name="preferredDuringSchedulingIgnoredDuringExecution")
    def preferred_during_scheduling_ignored_during_execution(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgs"
                ]
            ]
        ]
    ]:
        """
        The scheduler will prefer to schedule pods to nodes that satisfy
        the anti-affinity expressions specified by this field, but it may choose
        a node that violates one or more of the expressions. The node that is
        most preferred is the one with the greatest sum of weights, i.e.
        for each node that meets all of the scheduling requirements (resource
        request, requiredDuringScheduling anti-affinity expressions, etc.),
        compute a sum by iterating through the elements of this field and adding
        "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
        node(s) with the highest sum are the most preferred.
        """
        return pulumi.get(self, "preferred_during_scheduling_ignored_during_execution")

    @preferred_during_scheduling_ignored_during_execution.setter
    def preferred_during_scheduling_ignored_during_execution(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "preferred_during_scheduling_ignored_during_execution", value)

    @property
    @pulumi.getter(name="requiredDuringSchedulingIgnoredDuringExecution")
    def required_during_scheduling_ignored_during_execution(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgs"
                ]
            ]
        ]
    ]:
        """
        If the anti-affinity requirements specified by this field are not met at
        scheduling time, the pod will not be scheduled onto the node.
        If the anti-affinity requirements specified by this field cease to be met
        at some point during pod execution (e.g. due to a pod label update), the
        system may or may not try to eventually evict the pod from its node.
        When there are multiple elements, the lists of nodes corresponding to each
        podAffinityTerm are intersected, i.e. all terms must be satisfied.
        """
        return pulumi.get(self, "required_during_scheduling_ignored_during_execution")

    @required_during_scheduling_ignored_during_execution.setter
    def required_during_scheduling_ignored_during_execution(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "required_during_scheduling_ignored_during_execution", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgsDict(
        TypedDict
    ):
        """
        The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
        """

        pod_affinity_term: NotRequired[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchArgsDict"
            ]
        ]
        weight: NotRequired[pulumi.Input[int]]
        """
        weight associated with matching the corresponding podAffinityTerm,
        in the range 1-100.
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgs:
    def __init__(
        __self__,
        *,
        pod_affinity_term: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchArgs"
            ]
        ] = None,
        weight: Optional[pulumi.Input[int]] = None
    ):
        """
        The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
        :param pulumi.Input[int] weight: weight associated with matching the corresponding podAffinityTerm,
               in the range 1-100.
        """
        if pod_affinity_term is not None:
            pulumi.set(__self__, "pod_affinity_term", pod_affinity_term)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter(name="podAffinityTerm")
    def pod_affinity_term(
        self,
    ) -> Optional[
        pulumi.Input[
            "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchArgs"
        ]
    ]:
        return pulumi.get(self, "pod_affinity_term")

    @pod_affinity_term.setter
    def pod_affinity_term(
        self,
        value: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "pod_affinity_term", value)

    @property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[int]]:
        """
        weight associated with matching the corresponding podAffinityTerm,
        in the range 1-100.
        """
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "weight", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArgsDict(
        TypedDict
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        key is the label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        operator: Optional[pulumi.Input[str]] = None,
        values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        :param pulumi.Input[str] key: key is the label key that the selector applies to.
        :param pulumi.Input[str] operator: operator represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists and DoesNotExist.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: values is an array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. This array is replaced during a strategic
               merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgsDict(
        TypedDict
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        key is the label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        operator: Optional[pulumi.Input[str]] = None,
        values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        :param pulumi.Input[str] key: key is the label key that the selector applies to.
        :param pulumi.Input[str] operator: operator represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists and DoesNotExist.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: values is an array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. This array is replaced during a strategic
               merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchArgsDict(
        TypedDict
    ):
        """
        A label query over a set of resources, in this case pods.
        If it's null, this PodAffinityTerm matches with no Pods.
        """

        match_expressions: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArgsDict"
                    ]
                ]
            ]
        ]
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        match_labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchArgs:
    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArgs"
                    ]
                ]
            ]
        ] = None,
        match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None
    ):
        """
        A label query over a set of resources, in this case pods.
        If it's null, this PodAffinityTerm matches with no Pods.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArgs']]] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
               map is equivalent to an element of matchExpressions, whose key field is "key", the
               operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArgs"
                ]
            ]
        ]
    ]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(
        self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
    ):
        pulumi.set(self, "match_labels", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgsDict(
        TypedDict
    ):
        """
        A label query over a set of resources, in this case pods.
        If it's null, this PodAffinityTerm matches with no Pods.
        """

        match_expressions: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgsDict"
                    ]
                ]
            ]
        ]
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        match_labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs:
    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs"
                    ]
                ]
            ]
        ] = None,
        match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None
    ):
        """
        A label query over a set of resources, in this case pods.
        If it's null, this PodAffinityTerm matches with no Pods.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs']]] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
               map is equivalent to an element of matchExpressions, whose key field is "key", the
               operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs"
                ]
            ]
        ]
    ]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(
        self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
    ):
        pulumi.set(self, "match_labels", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArgsDict(
        TypedDict
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        key is the label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        operator: Optional[pulumi.Input[str]] = None,
        values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        :param pulumi.Input[str] key: key is the label key that the selector applies to.
        :param pulumi.Input[str] operator: operator represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists and DoesNotExist.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: values is an array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. This array is replaced during a strategic
               merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgsDict(
        TypedDict
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        key is the label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        operator: Optional[pulumi.Input[str]] = None,
        values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        :param pulumi.Input[str] key: key is the label key that the selector applies to.
        :param pulumi.Input[str] operator: operator represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists and DoesNotExist.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: values is an array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. This array is replaced during a strategic
               merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchArgsDict(
        TypedDict
    ):
        """
        A label query over the set of namespaces that the term applies to.
        The term is applied to the union of the namespaces selected by this field
        and the ones listed in the namespaces field.
        null selector and null or empty namespaces list means "this pod's namespace".
        An empty selector ({}) matches all namespaces.
        """

        match_expressions: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArgsDict"
                    ]
                ]
            ]
        ]
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        match_labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchArgs:
    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArgs"
                    ]
                ]
            ]
        ] = None,
        match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None
    ):
        """
        A label query over the set of namespaces that the term applies to.
        The term is applied to the union of the namespaces selected by this field
        and the ones listed in the namespaces field.
        null selector and null or empty namespaces list means "this pod's namespace".
        An empty selector ({}) matches all namespaces.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArgs']]] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
               map is equivalent to an element of matchExpressions, whose key field is "key", the
               operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArgs"
                ]
            ]
        ]
    ]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(
        self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
    ):
        pulumi.set(self, "match_labels", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgsDict(
        TypedDict
    ):
        """
        A label query over the set of namespaces that the term applies to.
        The term is applied to the union of the namespaces selected by this field
        and the ones listed in the namespaces field.
        null selector and null or empty namespaces list means "this pod's namespace".
        An empty selector ({}) matches all namespaces.
        """

        match_expressions: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgsDict"
                    ]
                ]
            ]
        ]
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        match_labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs:
    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs"
                    ]
                ]
            ]
        ] = None,
        match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None
    ):
        """
        A label query over the set of namespaces that the term applies to.
        The term is applied to the union of the namespaces selected by this field
        and the ones listed in the namespaces field.
        null selector and null or empty namespaces list means "this pod's namespace".
        An empty selector ({}) matches all namespaces.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs']]] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
               map is equivalent to an element of matchExpressions, whose key field is "key", the
               operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs"
                ]
            ]
        ]
    ]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(
        self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
    ):
        pulumi.set(self, "match_labels", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchArgsDict(
        TypedDict
    ):
        """
        Required. A pod affinity term, associated with the corresponding weight.
        """

        label_selector: NotRequired[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchArgsDict"
            ]
        ]
        match_label_keys: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        MatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both matchLabelKeys and labelSelector.
        Also, matchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        mismatch_label_keys: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        MismatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
        Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        namespace_selector: NotRequired[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchArgsDict"
            ]
        ]
        namespaces: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        namespaces specifies a static list of namespace names that the term applies to.
        The term is applied to the union of the namespaces listed in this field
        and the ones selected by namespaceSelector.
        null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        """
        topology_key: NotRequired[pulumi.Input[str]]
        """
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
        the labelSelector in the specified namespaces, where co-located is defined as running on a node
        whose value of the label with key topologyKey matches that of any node on which any of the
        selected pods is running.
        Empty topologyKey is not allowed.
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchArgs:
    def __init__(
        __self__,
        *,
        label_selector: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchArgs"
            ]
        ] = None,
        match_label_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        mismatch_label_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        namespace_selector: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchArgs"
            ]
        ] = None,
        namespaces: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        topology_key: Optional[pulumi.Input[str]] = None
    ):
        """
        Required. A pod affinity term, associated with the corresponding weight.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] match_label_keys: MatchLabelKeys is a set of pod label keys to select which pods will
               be taken into consideration. The keys are used to lookup values from the
               incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
               to select the group of existing pods which pods will be taken into consideration
               for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
               pod labels will be ignored. The default value is empty.
               The same key is forbidden to exist in both matchLabelKeys and labelSelector.
               Also, matchLabelKeys cannot be set when labelSelector isn't set.
               This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] mismatch_label_keys: MismatchLabelKeys is a set of pod label keys to select which pods will
               be taken into consideration. The keys are used to lookup values from the
               incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
               to select the group of existing pods which pods will be taken into consideration
               for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
               pod labels will be ignored. The default value is empty.
               The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
               Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
               This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] namespaces: namespaces specifies a static list of namespace names that the term applies to.
               The term is applied to the union of the namespaces listed in this field
               and the ones selected by namespaceSelector.
               null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        :param pulumi.Input[str] topology_key: This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
               the labelSelector in the specified namespaces, where co-located is defined as running on a node
               whose value of the label with key topologyKey matches that of any node on which any of the
               selected pods is running.
               Empty topologyKey is not allowed.
        """
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if match_label_keys is not None:
            pulumi.set(__self__, "match_label_keys", match_label_keys)
        if mismatch_label_keys is not None:
            pulumi.set(__self__, "mismatch_label_keys", mismatch_label_keys)
        if namespace_selector is not None:
            pulumi.set(__self__, "namespace_selector", namespace_selector)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)
        if topology_key is not None:
            pulumi.set(__self__, "topology_key", topology_key)

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(
        self,
    ) -> Optional[
        pulumi.Input[
            "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchArgs"
        ]
    ]:
        return pulumi.get(self, "label_selector")

    @label_selector.setter
    def label_selector(
        self,
        value: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "label_selector", value)

    @property
    @pulumi.getter(name="matchLabelKeys")
    def match_label_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        MatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both matchLabelKeys and labelSelector.
        Also, matchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        return pulumi.get(self, "match_label_keys")

    @match_label_keys.setter
    def match_label_keys(
        self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]
    ):
        pulumi.set(self, "match_label_keys", value)

    @property
    @pulumi.getter(name="mismatchLabelKeys")
    def mismatch_label_keys(
        self,
    ) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        MismatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
        Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        return pulumi.get(self, "mismatch_label_keys")

    @mismatch_label_keys.setter
    def mismatch_label_keys(
        self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]
    ):
        pulumi.set(self, "mismatch_label_keys", value)

    @property
    @pulumi.getter(name="namespaceSelector")
    def namespace_selector(
        self,
    ) -> Optional[
        pulumi.Input[
            "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchArgs"
        ]
    ]:
        return pulumi.get(self, "namespace_selector")

    @namespace_selector.setter
    def namespace_selector(
        self,
        value: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "namespace_selector", value)

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        namespaces specifies a static list of namespace names that the term applies to.
        The term is applied to the union of the namespaces listed in this field
        and the ones selected by namespaceSelector.
        null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        """
        return pulumi.get(self, "namespaces")

    @namespaces.setter
    def namespaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "namespaces", value)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> Optional[pulumi.Input[str]]:
        """
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
        the labelSelector in the specified namespaces, where co-located is defined as running on a node
        whose value of the label with key topologyKey matches that of any node on which any of the
        selected pods is running.
        Empty topologyKey is not allowed.
        """
        return pulumi.get(self, "topology_key")

    @topology_key.setter
    def topology_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topology_key", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgsDict(
        TypedDict
    ):
        """
        Required. A pod affinity term, associated with the corresponding weight.
        """

        label_selector: NotRequired[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgsDict"
            ]
        ]
        match_label_keys: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        MatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both matchLabelKeys and labelSelector.
        Also, matchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        mismatch_label_keys: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        MismatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
        Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        namespace_selector: NotRequired[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgsDict"
            ]
        ]
        namespaces: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        namespaces specifies a static list of namespace names that the term applies to.
        The term is applied to the union of the namespaces listed in this field
        and the ones selected by namespaceSelector.
        null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        """
        topology_key: NotRequired[pulumi.Input[str]]
        """
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
        the labelSelector in the specified namespaces, where co-located is defined as running on a node
        whose value of the label with key topologyKey matches that of any node on which any of the
        selected pods is running.
        Empty topologyKey is not allowed.
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs:
    def __init__(
        __self__,
        *,
        label_selector: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs"
            ]
        ] = None,
        match_label_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        mismatch_label_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        namespace_selector: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs"
            ]
        ] = None,
        namespaces: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        topology_key: Optional[pulumi.Input[str]] = None
    ):
        """
        Required. A pod affinity term, associated with the corresponding weight.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] match_label_keys: MatchLabelKeys is a set of pod label keys to select which pods will
               be taken into consideration. The keys are used to lookup values from the
               incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
               to select the group of existing pods which pods will be taken into consideration
               for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
               pod labels will be ignored. The default value is empty.
               The same key is forbidden to exist in both matchLabelKeys and labelSelector.
               Also, matchLabelKeys cannot be set when labelSelector isn't set.
               This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] mismatch_label_keys: MismatchLabelKeys is a set of pod label keys to select which pods will
               be taken into consideration. The keys are used to lookup values from the
               incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
               to select the group of existing pods which pods will be taken into consideration
               for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
               pod labels will be ignored. The default value is empty.
               The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
               Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
               This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] namespaces: namespaces specifies a static list of namespace names that the term applies to.
               The term is applied to the union of the namespaces listed in this field
               and the ones selected by namespaceSelector.
               null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        :param pulumi.Input[str] topology_key: This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
               the labelSelector in the specified namespaces, where co-located is defined as running on a node
               whose value of the label with key topologyKey matches that of any node on which any of the
               selected pods is running.
               Empty topologyKey is not allowed.
        """
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if match_label_keys is not None:
            pulumi.set(__self__, "match_label_keys", match_label_keys)
        if mismatch_label_keys is not None:
            pulumi.set(__self__, "mismatch_label_keys", mismatch_label_keys)
        if namespace_selector is not None:
            pulumi.set(__self__, "namespace_selector", namespace_selector)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)
        if topology_key is not None:
            pulumi.set(__self__, "topology_key", topology_key)

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(
        self,
    ) -> Optional[
        pulumi.Input[
            "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs"
        ]
    ]:
        return pulumi.get(self, "label_selector")

    @label_selector.setter
    def label_selector(
        self,
        value: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs"
            ]
        ],
    ):
        pulumi.set(self, "label_selector", value)

    @property
    @pulumi.getter(name="matchLabelKeys")
    def match_label_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        MatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both matchLabelKeys and labelSelector.
        Also, matchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        return pulumi.get(self, "match_label_keys")

    @match_label_keys.setter
    def match_label_keys(
        self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]
    ):
        pulumi.set(self, "match_label_keys", value)

    @property
    @pulumi.getter(name="mismatchLabelKeys")
    def mismatch_label_keys(
        self,
    ) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        MismatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
        Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        return pulumi.get(self, "mismatch_label_keys")

    @mismatch_label_keys.setter
    def mismatch_label_keys(
        self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]
    ):
        pulumi.set(self, "mismatch_label_keys", value)

    @property
    @pulumi.getter(name="namespaceSelector")
    def namespace_selector(
        self,
    ) -> Optional[
        pulumi.Input[
            "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs"
        ]
    ]:
        return pulumi.get(self, "namespace_selector")

    @namespace_selector.setter
    def namespace_selector(
        self,
        value: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs"
            ]
        ],
    ):
        pulumi.set(self, "namespace_selector", value)

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        namespaces specifies a static list of namespace names that the term applies to.
        The term is applied to the union of the namespaces listed in this field
        and the ones selected by namespaceSelector.
        null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        """
        return pulumi.get(self, "namespaces")

    @namespaces.setter
    def namespaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "namespaces", value)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> Optional[pulumi.Input[str]]:
        """
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
        the labelSelector in the specified namespaces, where co-located is defined as running on a node
        whose value of the label with key topologyKey matches that of any node on which any of the
        selected pods is running.
        Empty topologyKey is not allowed.
        """
        return pulumi.get(self, "topology_key")

    @topology_key.setter
    def topology_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topology_key", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgsDict(
        TypedDict
    ):
        """
        The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
        """

        pod_affinity_term: NotRequired[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgsDict"
            ]
        ]
        weight: NotRequired[pulumi.Input[int]]
        """
        weight associated with matching the corresponding podAffinityTerm,
        in the range 1-100.
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs:
    def __init__(
        __self__,
        *,
        pod_affinity_term: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs"
            ]
        ] = None,
        weight: Optional[pulumi.Input[int]] = None
    ):
        """
        The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
        :param pulumi.Input[int] weight: weight associated with matching the corresponding podAffinityTerm,
               in the range 1-100.
        """
        if pod_affinity_term is not None:
            pulumi.set(__self__, "pod_affinity_term", pod_affinity_term)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter(name="podAffinityTerm")
    def pod_affinity_term(
        self,
    ) -> Optional[
        pulumi.Input[
            "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs"
        ]
    ]:
        return pulumi.get(self, "pod_affinity_term")

    @pod_affinity_term.setter
    def pod_affinity_term(
        self,
        value: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs"
            ]
        ],
    ):
        pulumi.set(self, "pod_affinity_term", value)

    @property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[int]]:
        """
        weight associated with matching the corresponding podAffinityTerm,
        in the range 1-100.
        """
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "weight", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArgsDict(
        TypedDict
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        key is the label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        operator: Optional[pulumi.Input[str]] = None,
        values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        :param pulumi.Input[str] key: key is the label key that the selector applies to.
        :param pulumi.Input[str] operator: operator represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists and DoesNotExist.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: values is an array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. This array is replaced during a strategic
               merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgsDict(
        TypedDict
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        key is the label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        operator: Optional[pulumi.Input[str]] = None,
        values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        :param pulumi.Input[str] key: key is the label key that the selector applies to.
        :param pulumi.Input[str] operator: operator represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists and DoesNotExist.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: values is an array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. This array is replaced during a strategic
               merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchArgsDict(
        TypedDict
    ):
        """
        A label query over a set of resources, in this case pods.
        If it's null, this PodAffinityTerm matches with no Pods.
        """

        match_expressions: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArgsDict"
                    ]
                ]
            ]
        ]
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        match_labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchArgs:
    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArgs"
                    ]
                ]
            ]
        ] = None,
        match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None
    ):
        """
        A label query over a set of resources, in this case pods.
        If it's null, this PodAffinityTerm matches with no Pods.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArgs']]] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
               map is equivalent to an element of matchExpressions, whose key field is "key", the
               operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArgs"
                ]
            ]
        ]
    ]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(
        self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
    ):
        pulumi.set(self, "match_labels", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgsDict(
        TypedDict
    ):
        """
        A label query over a set of resources, in this case pods.
        If it's null, this PodAffinityTerm matches with no Pods.
        """

        match_expressions: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgsDict"
                    ]
                ]
            ]
        ]
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        match_labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs:
    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs"
                    ]
                ]
            ]
        ] = None,
        match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None
    ):
        """
        A label query over a set of resources, in this case pods.
        If it's null, this PodAffinityTerm matches with no Pods.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs']]] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
               map is equivalent to an element of matchExpressions, whose key field is "key", the
               operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs"
                ]
            ]
        ]
    ]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(
        self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
    ):
        pulumi.set(self, "match_labels", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArgsDict(
        TypedDict
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        key is the label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        operator: Optional[pulumi.Input[str]] = None,
        values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        :param pulumi.Input[str] key: key is the label key that the selector applies to.
        :param pulumi.Input[str] operator: operator represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists and DoesNotExist.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: values is an array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. This array is replaced during a strategic
               merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgsDict(
        TypedDict
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        key is the label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        operator: Optional[pulumi.Input[str]] = None,
        values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        :param pulumi.Input[str] key: key is the label key that the selector applies to.
        :param pulumi.Input[str] operator: operator represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists and DoesNotExist.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: values is an array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. This array is replaced during a strategic
               merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchArgsDict(
        TypedDict
    ):
        """
        A label query over the set of namespaces that the term applies to.
        The term is applied to the union of the namespaces selected by this field
        and the ones listed in the namespaces field.
        null selector and null or empty namespaces list means "this pod's namespace".
        An empty selector ({}) matches all namespaces.
        """

        match_expressions: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArgsDict"
                    ]
                ]
            ]
        ]
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        match_labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchArgs:
    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArgs"
                    ]
                ]
            ]
        ] = None,
        match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None
    ):
        """
        A label query over the set of namespaces that the term applies to.
        The term is applied to the union of the namespaces selected by this field
        and the ones listed in the namespaces field.
        null selector and null or empty namespaces list means "this pod's namespace".
        An empty selector ({}) matches all namespaces.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArgs']]] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
               map is equivalent to an element of matchExpressions, whose key field is "key", the
               operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArgs"
                ]
            ]
        ]
    ]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(
        self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
    ):
        pulumi.set(self, "match_labels", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgsDict(
        TypedDict
    ):
        """
        A label query over the set of namespaces that the term applies to.
        The term is applied to the union of the namespaces selected by this field
        and the ones listed in the namespaces field.
        null selector and null or empty namespaces list means "this pod's namespace".
        An empty selector ({}) matches all namespaces.
        """

        match_expressions: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgsDict"
                    ]
                ]
            ]
        ]
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        match_labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs:
    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs"
                    ]
                ]
            ]
        ] = None,
        match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None
    ):
        """
        A label query over the set of namespaces that the term applies to.
        The term is applied to the union of the namespaces selected by this field
        and the ones listed in the namespaces field.
        null selector and null or empty namespaces list means "this pod's namespace".
        An empty selector ({}) matches all namespaces.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs']]] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
               map is equivalent to an element of matchExpressions, whose key field is "key", the
               operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs"
                ]
            ]
        ]
    ]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(
        self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
    ):
        pulumi.set(self, "match_labels", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgsDict(
        TypedDict
    ):
        """
        Defines a set of pods (namely those matching the labelSelector
        relative to the given namespace(s)) that this pod should be
        co-located (affinity) or not co-located (anti-affinity) with,
        where co-located is defined as running on a node whose value of
        the label with key <topologyKey> matches that of any node on which
        a pod of the set of pods is running
        """

        label_selector: NotRequired[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchArgsDict"
            ]
        ]
        match_label_keys: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        MatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both matchLabelKeys and labelSelector.
        Also, matchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        mismatch_label_keys: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        MismatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
        Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        namespace_selector: NotRequired[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchArgsDict"
            ]
        ]
        namespaces: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        namespaces specifies a static list of namespace names that the term applies to.
        The term is applied to the union of the namespaces listed in this field
        and the ones selected by namespaceSelector.
        null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        """
        topology_key: NotRequired[pulumi.Input[str]]
        """
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
        the labelSelector in the specified namespaces, where co-located is defined as running on a node
        whose value of the label with key topologyKey matches that of any node on which any of the
        selected pods is running.
        Empty topologyKey is not allowed.
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgs:
    def __init__(
        __self__,
        *,
        label_selector: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchArgs"
            ]
        ] = None,
        match_label_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        mismatch_label_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        namespace_selector: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchArgs"
            ]
        ] = None,
        namespaces: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        topology_key: Optional[pulumi.Input[str]] = None
    ):
        """
        Defines a set of pods (namely those matching the labelSelector
        relative to the given namespace(s)) that this pod should be
        co-located (affinity) or not co-located (anti-affinity) with,
        where co-located is defined as running on a node whose value of
        the label with key <topologyKey> matches that of any node on which
        a pod of the set of pods is running
        :param pulumi.Input[Sequence[pulumi.Input[str]]] match_label_keys: MatchLabelKeys is a set of pod label keys to select which pods will
               be taken into consideration. The keys are used to lookup values from the
               incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
               to select the group of existing pods which pods will be taken into consideration
               for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
               pod labels will be ignored. The default value is empty.
               The same key is forbidden to exist in both matchLabelKeys and labelSelector.
               Also, matchLabelKeys cannot be set when labelSelector isn't set.
               This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] mismatch_label_keys: MismatchLabelKeys is a set of pod label keys to select which pods will
               be taken into consideration. The keys are used to lookup values from the
               incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
               to select the group of existing pods which pods will be taken into consideration
               for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
               pod labels will be ignored. The default value is empty.
               The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
               Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
               This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] namespaces: namespaces specifies a static list of namespace names that the term applies to.
               The term is applied to the union of the namespaces listed in this field
               and the ones selected by namespaceSelector.
               null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        :param pulumi.Input[str] topology_key: This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
               the labelSelector in the specified namespaces, where co-located is defined as running on a node
               whose value of the label with key topologyKey matches that of any node on which any of the
               selected pods is running.
               Empty topologyKey is not allowed.
        """
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if match_label_keys is not None:
            pulumi.set(__self__, "match_label_keys", match_label_keys)
        if mismatch_label_keys is not None:
            pulumi.set(__self__, "mismatch_label_keys", mismatch_label_keys)
        if namespace_selector is not None:
            pulumi.set(__self__, "namespace_selector", namespace_selector)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)
        if topology_key is not None:
            pulumi.set(__self__, "topology_key", topology_key)

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(
        self,
    ) -> Optional[
        pulumi.Input[
            "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchArgs"
        ]
    ]:
        return pulumi.get(self, "label_selector")

    @label_selector.setter
    def label_selector(
        self,
        value: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "label_selector", value)

    @property
    @pulumi.getter(name="matchLabelKeys")
    def match_label_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        MatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both matchLabelKeys and labelSelector.
        Also, matchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        return pulumi.get(self, "match_label_keys")

    @match_label_keys.setter
    def match_label_keys(
        self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]
    ):
        pulumi.set(self, "match_label_keys", value)

    @property
    @pulumi.getter(name="mismatchLabelKeys")
    def mismatch_label_keys(
        self,
    ) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        MismatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
        Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        return pulumi.get(self, "mismatch_label_keys")

    @mismatch_label_keys.setter
    def mismatch_label_keys(
        self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]
    ):
        pulumi.set(self, "mismatch_label_keys", value)

    @property
    @pulumi.getter(name="namespaceSelector")
    def namespace_selector(
        self,
    ) -> Optional[
        pulumi.Input[
            "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchArgs"
        ]
    ]:
        return pulumi.get(self, "namespace_selector")

    @namespace_selector.setter
    def namespace_selector(
        self,
        value: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "namespace_selector", value)

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        namespaces specifies a static list of namespace names that the term applies to.
        The term is applied to the union of the namespaces listed in this field
        and the ones selected by namespaceSelector.
        null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        """
        return pulumi.get(self, "namespaces")

    @namespaces.setter
    def namespaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "namespaces", value)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> Optional[pulumi.Input[str]]:
        """
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
        the labelSelector in the specified namespaces, where co-located is defined as running on a node
        whose value of the label with key topologyKey matches that of any node on which any of the
        selected pods is running.
        Empty topologyKey is not allowed.
        """
        return pulumi.get(self, "topology_key")

    @topology_key.setter
    def topology_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topology_key", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgsDict(
        TypedDict
    ):
        """
        Defines a set of pods (namely those matching the labelSelector
        relative to the given namespace(s)) that this pod should be
        co-located (affinity) or not co-located (anti-affinity) with,
        where co-located is defined as running on a node whose value of
        the label with key <topologyKey> matches that of any node on which
        a pod of the set of pods is running
        """

        label_selector: NotRequired[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgsDict"
            ]
        ]
        match_label_keys: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        MatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both matchLabelKeys and labelSelector.
        Also, matchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        mismatch_label_keys: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        MismatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
        Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        namespace_selector: NotRequired[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgsDict"
            ]
        ]
        namespaces: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        namespaces specifies a static list of namespace names that the term applies to.
        The term is applied to the union of the namespaces listed in this field
        and the ones selected by namespaceSelector.
        null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        """
        topology_key: NotRequired[pulumi.Input[str]]
        """
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
        the labelSelector in the specified namespaces, where co-located is defined as running on a node
        whose value of the label with key topologyKey matches that of any node on which any of the
        selected pods is running.
        Empty topologyKey is not allowed.
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs:
    def __init__(
        __self__,
        *,
        label_selector: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs"
            ]
        ] = None,
        match_label_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        mismatch_label_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        namespace_selector: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs"
            ]
        ] = None,
        namespaces: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        topology_key: Optional[pulumi.Input[str]] = None
    ):
        """
        Defines a set of pods (namely those matching the labelSelector
        relative to the given namespace(s)) that this pod should be
        co-located (affinity) or not co-located (anti-affinity) with,
        where co-located is defined as running on a node whose value of
        the label with key <topologyKey> matches that of any node on which
        a pod of the set of pods is running
        :param pulumi.Input[Sequence[pulumi.Input[str]]] match_label_keys: MatchLabelKeys is a set of pod label keys to select which pods will
               be taken into consideration. The keys are used to lookup values from the
               incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
               to select the group of existing pods which pods will be taken into consideration
               for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
               pod labels will be ignored. The default value is empty.
               The same key is forbidden to exist in both matchLabelKeys and labelSelector.
               Also, matchLabelKeys cannot be set when labelSelector isn't set.
               This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] mismatch_label_keys: MismatchLabelKeys is a set of pod label keys to select which pods will
               be taken into consideration. The keys are used to lookup values from the
               incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
               to select the group of existing pods which pods will be taken into consideration
               for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
               pod labels will be ignored. The default value is empty.
               The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
               Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
               This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] namespaces: namespaces specifies a static list of namespace names that the term applies to.
               The term is applied to the union of the namespaces listed in this field
               and the ones selected by namespaceSelector.
               null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        :param pulumi.Input[str] topology_key: This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
               the labelSelector in the specified namespaces, where co-located is defined as running on a node
               whose value of the label with key topologyKey matches that of any node on which any of the
               selected pods is running.
               Empty topologyKey is not allowed.
        """
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if match_label_keys is not None:
            pulumi.set(__self__, "match_label_keys", match_label_keys)
        if mismatch_label_keys is not None:
            pulumi.set(__self__, "mismatch_label_keys", mismatch_label_keys)
        if namespace_selector is not None:
            pulumi.set(__self__, "namespace_selector", namespace_selector)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)
        if topology_key is not None:
            pulumi.set(__self__, "topology_key", topology_key)

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(
        self,
    ) -> Optional[
        pulumi.Input[
            "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs"
        ]
    ]:
        return pulumi.get(self, "label_selector")

    @label_selector.setter
    def label_selector(
        self,
        value: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs"
            ]
        ],
    ):
        pulumi.set(self, "label_selector", value)

    @property
    @pulumi.getter(name="matchLabelKeys")
    def match_label_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        MatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both matchLabelKeys and labelSelector.
        Also, matchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        return pulumi.get(self, "match_label_keys")

    @match_label_keys.setter
    def match_label_keys(
        self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]
    ):
        pulumi.set(self, "match_label_keys", value)

    @property
    @pulumi.getter(name="mismatchLabelKeys")
    def mismatch_label_keys(
        self,
    ) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        MismatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
        Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        return pulumi.get(self, "mismatch_label_keys")

    @mismatch_label_keys.setter
    def mismatch_label_keys(
        self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]
    ):
        pulumi.set(self, "mismatch_label_keys", value)

    @property
    @pulumi.getter(name="namespaceSelector")
    def namespace_selector(
        self,
    ) -> Optional[
        pulumi.Input[
            "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs"
        ]
    ]:
        return pulumi.get(self, "namespace_selector")

    @namespace_selector.setter
    def namespace_selector(
        self,
        value: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs"
            ]
        ],
    ):
        pulumi.set(self, "namespace_selector", value)

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        namespaces specifies a static list of namespace names that the term applies to.
        The term is applied to the union of the namespaces listed in this field
        and the ones selected by namespaceSelector.
        null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        """
        return pulumi.get(self, "namespaces")

    @namespaces.setter
    def namespaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "namespaces", value)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> Optional[pulumi.Input[str]]:
        """
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
        the labelSelector in the specified namespaces, where co-located is defined as running on a node
        whose value of the label with key topologyKey matches that of any node on which any of the
        selected pods is running.
        Empty topologyKey is not allowed.
        """
        return pulumi.get(self, "topology_key")

    @topology_key.setter
    def topology_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topology_key", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityArgsDict(
        TypedDict
    ):
        """
        Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
        """

        preferred_during_scheduling_ignored_during_execution: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgsDict"
                    ]
                ]
            ]
        ]
        """
        The scheduler will prefer to schedule pods to nodes that satisfy
        the anti-affinity expressions specified by this field, but it may choose
        a node that violates one or more of the expressions. The node that is
        most preferred is the one with the greatest sum of weights, i.e.
        for each node that meets all of the scheduling requirements (resource
        request, requiredDuringScheduling anti-affinity expressions, etc.),
        compute a sum by iterating through the elements of this field and adding
        "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
        node(s) with the highest sum are the most preferred.
        """
        required_during_scheduling_ignored_during_execution: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgsDict"
                    ]
                ]
            ]
        ]
        """
        If the anti-affinity requirements specified by this field are not met at
        scheduling time, the pod will not be scheduled onto the node.
        If the anti-affinity requirements specified by this field cease to be met
        at some point during pod execution (e.g. due to a pod label update), the
        system may or may not try to eventually evict the pod from its node.
        When there are multiple elements, the lists of nodes corresponding to each
        podAffinityTerm are intersected, i.e. all terms must be satisfied.
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityArgs:
    def __init__(
        __self__,
        *,
        preferred_during_scheduling_ignored_during_execution: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs"
                    ]
                ]
            ]
        ] = None,
        required_during_scheduling_ignored_during_execution: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs"
                    ]
                ]
            ]
        ] = None
    ):
        """
        Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
        :param pulumi.Input[Sequence[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs']]] preferred_during_scheduling_ignored_during_execution: The scheduler will prefer to schedule pods to nodes that satisfy
               the anti-affinity expressions specified by this field, but it may choose
               a node that violates one or more of the expressions. The node that is
               most preferred is the one with the greatest sum of weights, i.e.
               for each node that meets all of the scheduling requirements (resource
               request, requiredDuringScheduling anti-affinity expressions, etc.),
               compute a sum by iterating through the elements of this field and adding
               "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
               node(s) with the highest sum are the most preferred.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs']]] required_during_scheduling_ignored_during_execution: If the anti-affinity requirements specified by this field are not met at
               scheduling time, the pod will not be scheduled onto the node.
               If the anti-affinity requirements specified by this field cease to be met
               at some point during pod execution (e.g. due to a pod label update), the
               system may or may not try to eventually evict the pod from its node.
               When there are multiple elements, the lists of nodes corresponding to each
               podAffinityTerm are intersected, i.e. all terms must be satisfied.
        """
        if preferred_during_scheduling_ignored_during_execution is not None:
            pulumi.set(
                __self__,
                "preferred_during_scheduling_ignored_during_execution",
                preferred_during_scheduling_ignored_during_execution,
            )
        if required_during_scheduling_ignored_during_execution is not None:
            pulumi.set(
                __self__,
                "required_during_scheduling_ignored_during_execution",
                required_during_scheduling_ignored_during_execution,
            )

    @property
    @pulumi.getter(name="preferredDuringSchedulingIgnoredDuringExecution")
    def preferred_during_scheduling_ignored_during_execution(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs"
                ]
            ]
        ]
    ]:
        """
        The scheduler will prefer to schedule pods to nodes that satisfy
        the anti-affinity expressions specified by this field, but it may choose
        a node that violates one or more of the expressions. The node that is
        most preferred is the one with the greatest sum of weights, i.e.
        for each node that meets all of the scheduling requirements (resource
        request, requiredDuringScheduling anti-affinity expressions, etc.),
        compute a sum by iterating through the elements of this field and adding
        "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
        node(s) with the highest sum are the most preferred.
        """
        return pulumi.get(self, "preferred_during_scheduling_ignored_during_execution")

    @preferred_during_scheduling_ignored_during_execution.setter
    def preferred_during_scheduling_ignored_during_execution(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "preferred_during_scheduling_ignored_during_execution", value)

    @property
    @pulumi.getter(name="requiredDuringSchedulingIgnoredDuringExecution")
    def required_during_scheduling_ignored_during_execution(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs"
                ]
            ]
        ]
    ]:
        """
        If the anti-affinity requirements specified by this field are not met at
        scheduling time, the pod will not be scheduled onto the node.
        If the anti-affinity requirements specified by this field cease to be met
        at some point during pod execution (e.g. due to a pod label update), the
        system may or may not try to eventually evict the pod from its node.
        When there are multiple elements, the lists of nodes corresponding to each
        podAffinityTerm are intersected, i.e. all terms must be satisfied.
        """
        return pulumi.get(self, "required_during_scheduling_ignored_during_execution")

    @required_during_scheduling_ignored_during_execution.setter
    def required_during_scheduling_ignored_during_execution(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "required_during_scheduling_ignored_during_execution", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityArgsDict(
        TypedDict
    ):
        """
        If specified, the pod's scheduling constraints
        """

        node_affinity: NotRequired[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityArgsDict"
            ]
        ]
        pod_affinity: NotRequired[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityArgsDict"
            ]
        ]
        pod_anti_affinity: NotRequired[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityArgsDict"
            ]
        ]

elif False:
    ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityArgs:
    def __init__(
        __self__,
        *,
        node_affinity: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityArgs"
            ]
        ] = None,
        pod_affinity: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityArgs"
            ]
        ] = None,
        pod_anti_affinity: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityArgs"
            ]
        ] = None
    ):
        """
        If specified, the pod's scheduling constraints
        """
        if node_affinity is not None:
            pulumi.set(__self__, "node_affinity", node_affinity)
        if pod_affinity is not None:
            pulumi.set(__self__, "pod_affinity", pod_affinity)
        if pod_anti_affinity is not None:
            pulumi.set(__self__, "pod_anti_affinity", pod_anti_affinity)

    @property
    @pulumi.getter(name="nodeAffinity")
    def node_affinity(
        self,
    ) -> Optional[
        pulumi.Input[
            "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityArgs"
        ]
    ]:
        return pulumi.get(self, "node_affinity")

    @node_affinity.setter
    def node_affinity(
        self,
        value: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityArgs"
            ]
        ],
    ):
        pulumi.set(self, "node_affinity", value)

    @property
    @pulumi.getter(name="podAffinity")
    def pod_affinity(
        self,
    ) -> Optional[
        pulumi.Input[
            "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityArgs"
        ]
    ]:
        return pulumi.get(self, "pod_affinity")

    @pod_affinity.setter
    def pod_affinity(
        self,
        value: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityArgs"
            ]
        ],
    ):
        pulumi.set(self, "pod_affinity", value)

    @property
    @pulumi.getter(name="podAntiAffinity")
    def pod_anti_affinity(
        self,
    ) -> Optional[
        pulumi.Input[
            "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityArgs"
        ]
    ]:
        return pulumi.get(self, "pod_anti_affinity")

    @pod_anti_affinity.setter
    def pod_anti_affinity(
        self,
        value: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityArgs"
            ]
        ],
    ):
        pulumi.set(self, "pod_anti_affinity", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecImagePullSecretsPatchArgsDict(
        TypedDict
    ):
        """
        LocalObjectReference contains enough information to let you locate the
        referenced object inside the same namespace.
        """

        name: NotRequired[pulumi.Input[str]]
        """
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecImagePullSecretsPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecImagePullSecretsPatchArgs:
    def __init__(__self__, *, name: Optional[pulumi.Input[str]] = None):
        """
        LocalObjectReference contains enough information to let you locate the
        referenced object inside the same namespace.
        :param pulumi.Input[str] name: Name of the referent.
               This field is effectively required, but due to backwards compatibility is
               allowed to be empty. Instances of this type with an empty value here are
               almost certainly wrong.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecImagePullSecretsArgsDict(
        TypedDict
    ):
        """
        LocalObjectReference contains enough information to let you locate the
        referenced object inside the same namespace.
        """

        name: NotRequired[pulumi.Input[str]]
        """
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecImagePullSecretsArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecImagePullSecretsArgs:
    def __init__(__self__, *, name: Optional[pulumi.Input[str]] = None):
        """
        LocalObjectReference contains enough information to let you locate the
        referenced object inside the same namespace.
        :param pulumi.Input[str] name: Name of the referent.
               This field is effectively required, but due to backwards compatibility is
               allowed to be empty. Instances of this type with an empty value here are
               almost certainly wrong.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecPatchArgsDict(
        TypedDict
    ):
        """
        PodSpec defines overrides for the HTTP01 challenge solver pod.
        Check ACMEChallengeSolverHTTP01IngressPodSpec to find out currently supported fields.
        All other fields will be ignored.
        """

        affinity: NotRequired[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPatchArgsDict"
            ]
        ]
        image_pull_secrets: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecImagePullSecretsPatchArgsDict"
                    ]
                ]
            ]
        ]
        """
        If specified, the pod's imagePullSecrets
        """
        node_selector: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        NodeSelector is a selector which must be true for the pod to fit on a node.
        Selector which must match a node's labels for the pod to be scheduled on that node.
        More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
        """
        priority_class_name: NotRequired[pulumi.Input[str]]
        """
        If specified, the pod's priorityClassName.
        """
        security_context: NotRequired[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextPatchArgsDict"
            ]
        ]
        service_account_name: NotRequired[pulumi.Input[str]]
        """
        If specified, the pod's service account
        """
        tolerations: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecTolerationsPatchArgsDict"
                    ]
                ]
            ]
        ]
        """
        If specified, the pod's tolerations.
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecPatchArgsDict: TypeAlias = (
        Mapping[str, Any]
    )


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecPatchArgs:
    def __init__(
        __self__,
        *,
        affinity: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPatchArgs"
            ]
        ] = None,
        image_pull_secrets: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecImagePullSecretsPatchArgs"
                    ]
                ]
            ]
        ] = None,
        node_selector: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
        priority_class_name: Optional[pulumi.Input[str]] = None,
        security_context: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextPatchArgs"
            ]
        ] = None,
        service_account_name: Optional[pulumi.Input[str]] = None,
        tolerations: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecTolerationsPatchArgs"
                    ]
                ]
            ]
        ] = None
    ):
        """
        PodSpec defines overrides for the HTTP01 challenge solver pod.
        Check ACMEChallengeSolverHTTP01IngressPodSpec to find out currently supported fields.
        All other fields will be ignored.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecImagePullSecretsPatchArgs']]] image_pull_secrets: If specified, the pod's imagePullSecrets
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] node_selector: NodeSelector is a selector which must be true for the pod to fit on a node.
               Selector which must match a node's labels for the pod to be scheduled on that node.
               More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
        :param pulumi.Input[str] priority_class_name: If specified, the pod's priorityClassName.
        :param pulumi.Input[str] service_account_name: If specified, the pod's service account
        :param pulumi.Input[Sequence[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecTolerationsPatchArgs']]] tolerations: If specified, the pod's tolerations.
        """
        if affinity is not None:
            pulumi.set(__self__, "affinity", affinity)
        if image_pull_secrets is not None:
            pulumi.set(__self__, "image_pull_secrets", image_pull_secrets)
        if node_selector is not None:
            pulumi.set(__self__, "node_selector", node_selector)
        if priority_class_name is not None:
            pulumi.set(__self__, "priority_class_name", priority_class_name)
        if security_context is not None:
            pulumi.set(__self__, "security_context", security_context)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tolerations is not None:
            pulumi.set(__self__, "tolerations", tolerations)

    @property
    @pulumi.getter
    def affinity(
        self,
    ) -> Optional[
        pulumi.Input[
            "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPatchArgs"
        ]
    ]:
        return pulumi.get(self, "affinity")

    @affinity.setter
    def affinity(
        self,
        value: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "affinity", value)

    @property
    @pulumi.getter(name="imagePullSecrets")
    def image_pull_secrets(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecImagePullSecretsPatchArgs"
                ]
            ]
        ]
    ]:
        """
        If specified, the pod's imagePullSecrets
        """
        return pulumi.get(self, "image_pull_secrets")

    @image_pull_secrets.setter
    def image_pull_secrets(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecImagePullSecretsPatchArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "image_pull_secrets", value)

    @property
    @pulumi.getter(name="nodeSelector")
    def node_selector(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        NodeSelector is a selector which must be true for the pod to fit on a node.
        Selector which must match a node's labels for the pod to be scheduled on that node.
        More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
        """
        return pulumi.get(self, "node_selector")

    @node_selector.setter
    def node_selector(
        self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
    ):
        pulumi.set(self, "node_selector", value)

    @property
    @pulumi.getter(name="priorityClassName")
    def priority_class_name(self) -> Optional[pulumi.Input[str]]:
        """
        If specified, the pod's priorityClassName.
        """
        return pulumi.get(self, "priority_class_name")

    @priority_class_name.setter
    def priority_class_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "priority_class_name", value)

    @property
    @pulumi.getter(name="securityContext")
    def security_context(
        self,
    ) -> Optional[
        pulumi.Input[
            "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextPatchArgs"
        ]
    ]:
        return pulumi.get(self, "security_context")

    @security_context.setter
    def security_context(
        self,
        value: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextPatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "security_context", value)

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[pulumi.Input[str]]:
        """
        If specified, the pod's service account
        """
        return pulumi.get(self, "service_account_name")

    @service_account_name.setter
    def service_account_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account_name", value)

    @property
    @pulumi.getter
    def tolerations(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecTolerationsPatchArgs"
                ]
            ]
        ]
    ]:
        """
        If specified, the pod's tolerations.
        """
        return pulumi.get(self, "tolerations")

    @tolerations.setter
    def tolerations(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecTolerationsPatchArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "tolerations", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextPatchArgsDict(
        TypedDict
    ):
        """
        If specified, the pod's security context
        """

        fs_group: NotRequired[pulumi.Input[int]]
        """
        A special supplemental group that applies to all containers in a pod.
        Some volume types allow the Kubelet to change the ownership of that volume
        to be owned by the pod:

        1. The owning GID will be the FSGroup
        2. The setgid bit is set (new files created in the volume will be owned by FSGroup)
        3. The permission bits are OR'd with rw-rw----

        If unset, the Kubelet will not modify the ownership and permissions of any volume.
        Note that this field cannot be set when spec.os.name is windows.
        """
        fs_group_change_policy: NotRequired[pulumi.Input[str]]
        """
        fsGroupChangePolicy defines behavior of changing ownership and permission of the volume
        before being exposed inside Pod. This field will only apply to
        volume types which support fsGroup based ownership(and permissions).
        It will have no effect on ephemeral volume types such as: secret, configmaps
        and emptydir.
        Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used.
        Note that this field cannot be set when spec.os.name is windows.
        """
        run_as_group: NotRequired[pulumi.Input[int]]
        """
        The GID to run the entrypoint of the container process.
        Uses runtime default if unset.
        May also be set in SecurityContext.  If set in both SecurityContext and
        PodSecurityContext, the value specified in SecurityContext takes precedence
        for that container.
        Note that this field cannot be set when spec.os.name is windows.
        """
        run_as_non_root: NotRequired[pulumi.Input[bool]]
        """
        Indicates that the container must run as a non-root user.
        If true, the Kubelet will validate the image at runtime to ensure that it
        does not run as UID 0 (root) and fail to start the container if it does.
        If unset or false, no such validation will be performed.
        May also be set in SecurityContext.  If set in both SecurityContext and
        PodSecurityContext, the value specified in SecurityContext takes precedence.
        """
        run_as_user: NotRequired[pulumi.Input[int]]
        """
        The UID to run the entrypoint of the container process.
        Defaults to user specified in image metadata if unspecified.
        May also be set in SecurityContext.  If set in both SecurityContext and
        PodSecurityContext, the value specified in SecurityContext takes precedence
        for that container.
        Note that this field cannot be set when spec.os.name is windows.
        """
        se_linux_options: NotRequired[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextSeLinuxOptionsPatchArgsDict"
            ]
        ]
        seccomp_profile: NotRequired[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextSeccompProfilePatchArgsDict"
            ]
        ]
        supplemental_groups: NotRequired[pulumi.Input[Sequence[pulumi.Input[int]]]]
        """
        A list of groups applied to the first process run in each container, in addition
        to the container's primary GID, the fsGroup (if specified), and group memberships
        defined in the container image for the uid of the container process. If unspecified,
        no additional groups are added to any container. Note that group memberships
        defined in the container image for the uid of the container process are still effective,
        even if they are not included in this list.
        Note that this field cannot be set when spec.os.name is windows.
        """
        sysctls: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextSysctlsPatchArgsDict"
                    ]
                ]
            ]
        ]
        """
        Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported
        sysctls (by the container runtime) might fail to launch.
        Note that this field cannot be set when spec.os.name is windows.
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextPatchArgs:
    def __init__(
        __self__,
        *,
        fs_group: Optional[pulumi.Input[int]] = None,
        fs_group_change_policy: Optional[pulumi.Input[str]] = None,
        run_as_group: Optional[pulumi.Input[int]] = None,
        run_as_non_root: Optional[pulumi.Input[bool]] = None,
        run_as_user: Optional[pulumi.Input[int]] = None,
        se_linux_options: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextSeLinuxOptionsPatchArgs"
            ]
        ] = None,
        seccomp_profile: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextSeccompProfilePatchArgs"
            ]
        ] = None,
        supplemental_groups: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
        sysctls: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextSysctlsPatchArgs"
                    ]
                ]
            ]
        ] = None
    ):
        """
        If specified, the pod's security context
        :param pulumi.Input[int] fs_group: A special supplemental group that applies to all containers in a pod.
               Some volume types allow the Kubelet to change the ownership of that volume
               to be owned by the pod:

               1. The owning GID will be the FSGroup
               2. The setgid bit is set (new files created in the volume will be owned by FSGroup)
               3. The permission bits are OR'd with rw-rw----

               If unset, the Kubelet will not modify the ownership and permissions of any volume.
               Note that this field cannot be set when spec.os.name is windows.
        :param pulumi.Input[str] fs_group_change_policy: fsGroupChangePolicy defines behavior of changing ownership and permission of the volume
               before being exposed inside Pod. This field will only apply to
               volume types which support fsGroup based ownership(and permissions).
               It will have no effect on ephemeral volume types such as: secret, configmaps
               and emptydir.
               Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used.
               Note that this field cannot be set when spec.os.name is windows.
        :param pulumi.Input[int] run_as_group: The GID to run the entrypoint of the container process.
               Uses runtime default if unset.
               May also be set in SecurityContext.  If set in both SecurityContext and
               PodSecurityContext, the value specified in SecurityContext takes precedence
               for that container.
               Note that this field cannot be set when spec.os.name is windows.
        :param pulumi.Input[bool] run_as_non_root: Indicates that the container must run as a non-root user.
               If true, the Kubelet will validate the image at runtime to ensure that it
               does not run as UID 0 (root) and fail to start the container if it does.
               If unset or false, no such validation will be performed.
               May also be set in SecurityContext.  If set in both SecurityContext and
               PodSecurityContext, the value specified in SecurityContext takes precedence.
        :param pulumi.Input[int] run_as_user: The UID to run the entrypoint of the container process.
               Defaults to user specified in image metadata if unspecified.
               May also be set in SecurityContext.  If set in both SecurityContext and
               PodSecurityContext, the value specified in SecurityContext takes precedence
               for that container.
               Note that this field cannot be set when spec.os.name is windows.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] supplemental_groups: A list of groups applied to the first process run in each container, in addition
               to the container's primary GID, the fsGroup (if specified), and group memberships
               defined in the container image for the uid of the container process. If unspecified,
               no additional groups are added to any container. Note that group memberships
               defined in the container image for the uid of the container process are still effective,
               even if they are not included in this list.
               Note that this field cannot be set when spec.os.name is windows.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextSysctlsPatchArgs']]] sysctls: Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported
               sysctls (by the container runtime) might fail to launch.
               Note that this field cannot be set when spec.os.name is windows.
        """
        if fs_group is not None:
            pulumi.set(__self__, "fs_group", fs_group)
        if fs_group_change_policy is not None:
            pulumi.set(__self__, "fs_group_change_policy", fs_group_change_policy)
        if run_as_group is not None:
            pulumi.set(__self__, "run_as_group", run_as_group)
        if run_as_non_root is not None:
            pulumi.set(__self__, "run_as_non_root", run_as_non_root)
        if run_as_user is not None:
            pulumi.set(__self__, "run_as_user", run_as_user)
        if se_linux_options is not None:
            pulumi.set(__self__, "se_linux_options", se_linux_options)
        if seccomp_profile is not None:
            pulumi.set(__self__, "seccomp_profile", seccomp_profile)
        if supplemental_groups is not None:
            pulumi.set(__self__, "supplemental_groups", supplemental_groups)
        if sysctls is not None:
            pulumi.set(__self__, "sysctls", sysctls)

    @property
    @pulumi.getter(name="fsGroup")
    def fs_group(self) -> Optional[pulumi.Input[int]]:
        """
        A special supplemental group that applies to all containers in a pod.
        Some volume types allow the Kubelet to change the ownership of that volume
        to be owned by the pod:

        1. The owning GID will be the FSGroup
        2. The setgid bit is set (new files created in the volume will be owned by FSGroup)
        3. The permission bits are OR'd with rw-rw----

        If unset, the Kubelet will not modify the ownership and permissions of any volume.
        Note that this field cannot be set when spec.os.name is windows.
        """
        return pulumi.get(self, "fs_group")

    @fs_group.setter
    def fs_group(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fs_group", value)

    @property
    @pulumi.getter(name="fsGroupChangePolicy")
    def fs_group_change_policy(self) -> Optional[pulumi.Input[str]]:
        """
        fsGroupChangePolicy defines behavior of changing ownership and permission of the volume
        before being exposed inside Pod. This field will only apply to
        volume types which support fsGroup based ownership(and permissions).
        It will have no effect on ephemeral volume types such as: secret, configmaps
        and emptydir.
        Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used.
        Note that this field cannot be set when spec.os.name is windows.
        """
        return pulumi.get(self, "fs_group_change_policy")

    @fs_group_change_policy.setter
    def fs_group_change_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fs_group_change_policy", value)

    @property
    @pulumi.getter(name="runAsGroup")
    def run_as_group(self) -> Optional[pulumi.Input[int]]:
        """
        The GID to run the entrypoint of the container process.
        Uses runtime default if unset.
        May also be set in SecurityContext.  If set in both SecurityContext and
        PodSecurityContext, the value specified in SecurityContext takes precedence
        for that container.
        Note that this field cannot be set when spec.os.name is windows.
        """
        return pulumi.get(self, "run_as_group")

    @run_as_group.setter
    def run_as_group(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "run_as_group", value)

    @property
    @pulumi.getter(name="runAsNonRoot")
    def run_as_non_root(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates that the container must run as a non-root user.
        If true, the Kubelet will validate the image at runtime to ensure that it
        does not run as UID 0 (root) and fail to start the container if it does.
        If unset or false, no such validation will be performed.
        May also be set in SecurityContext.  If set in both SecurityContext and
        PodSecurityContext, the value specified in SecurityContext takes precedence.
        """
        return pulumi.get(self, "run_as_non_root")

    @run_as_non_root.setter
    def run_as_non_root(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "run_as_non_root", value)

    @property
    @pulumi.getter(name="runAsUser")
    def run_as_user(self) -> Optional[pulumi.Input[int]]:
        """
        The UID to run the entrypoint of the container process.
        Defaults to user specified in image metadata if unspecified.
        May also be set in SecurityContext.  If set in both SecurityContext and
        PodSecurityContext, the value specified in SecurityContext takes precedence
        for that container.
        Note that this field cannot be set when spec.os.name is windows.
        """
        return pulumi.get(self, "run_as_user")

    @run_as_user.setter
    def run_as_user(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "run_as_user", value)

    @property
    @pulumi.getter(name="seLinuxOptions")
    def se_linux_options(
        self,
    ) -> Optional[
        pulumi.Input[
            "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextSeLinuxOptionsPatchArgs"
        ]
    ]:
        return pulumi.get(self, "se_linux_options")

    @se_linux_options.setter
    def se_linux_options(
        self,
        value: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextSeLinuxOptionsPatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "se_linux_options", value)

    @property
    @pulumi.getter(name="seccompProfile")
    def seccomp_profile(
        self,
    ) -> Optional[
        pulumi.Input[
            "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextSeccompProfilePatchArgs"
        ]
    ]:
        return pulumi.get(self, "seccomp_profile")

    @seccomp_profile.setter
    def seccomp_profile(
        self,
        value: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextSeccompProfilePatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "seccomp_profile", value)

    @property
    @pulumi.getter(name="supplementalGroups")
    def supplemental_groups(
        self,
    ) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        A list of groups applied to the first process run in each container, in addition
        to the container's primary GID, the fsGroup (if specified), and group memberships
        defined in the container image for the uid of the container process. If unspecified,
        no additional groups are added to any container. Note that group memberships
        defined in the container image for the uid of the container process are still effective,
        even if they are not included in this list.
        Note that this field cannot be set when spec.os.name is windows.
        """
        return pulumi.get(self, "supplemental_groups")

    @supplemental_groups.setter
    def supplemental_groups(
        self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]
    ):
        pulumi.set(self, "supplemental_groups", value)

    @property
    @pulumi.getter
    def sysctls(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextSysctlsPatchArgs"
                ]
            ]
        ]
    ]:
        """
        Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported
        sysctls (by the container runtime) might fail to launch.
        Note that this field cannot be set when spec.os.name is windows.
        """
        return pulumi.get(self, "sysctls")

    @sysctls.setter
    def sysctls(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextSysctlsPatchArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "sysctls", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextSeLinuxOptionsPatchArgsDict(
        TypedDict
    ):
        """
        The SELinux context to be applied to all containers.
        If unspecified, the container runtime will allocate a random SELinux context for each
        container.  May also be set in SecurityContext.  If set in
        both SecurityContext and PodSecurityContext, the value specified in SecurityContext
        takes precedence for that container.
        Note that this field cannot be set when spec.os.name is windows.
        """

        level: NotRequired[pulumi.Input[str]]
        """
        Level is SELinux level label that applies to the container.
        """
        role: NotRequired[pulumi.Input[str]]
        """
        Role is a SELinux role label that applies to the container.
        """
        type: NotRequired[pulumi.Input[str]]
        """
        Type is a SELinux type label that applies to the container.
        """
        user: NotRequired[pulumi.Input[str]]
        """
        User is a SELinux user label that applies to the container.
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextSeLinuxOptionsPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextSeLinuxOptionsPatchArgs:
    def __init__(
        __self__,
        *,
        level: Optional[pulumi.Input[str]] = None,
        role: Optional[pulumi.Input[str]] = None,
        type: Optional[pulumi.Input[str]] = None,
        user: Optional[pulumi.Input[str]] = None
    ):
        """
        The SELinux context to be applied to all containers.
        If unspecified, the container runtime will allocate a random SELinux context for each
        container.  May also be set in SecurityContext.  If set in
        both SecurityContext and PodSecurityContext, the value specified in SecurityContext
        takes precedence for that container.
        Note that this field cannot be set when spec.os.name is windows.
        :param pulumi.Input[str] level: Level is SELinux level label that applies to the container.
        :param pulumi.Input[str] role: Role is a SELinux role label that applies to the container.
        :param pulumi.Input[str] type: Type is a SELinux type label that applies to the container.
        :param pulumi.Input[str] user: User is a SELinux user label that applies to the container.
        """
        if level is not None:
            pulumi.set(__self__, "level", level)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        """
        Level is SELinux level label that applies to the container.
        """
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input[str]]:
        """
        Role is a SELinux role label that applies to the container.
        """
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Type is a SELinux type label that applies to the container.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def user(self) -> Optional[pulumi.Input[str]]:
        """
        User is a SELinux user label that applies to the container.
        """
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextSeLinuxOptionsArgsDict(
        TypedDict
    ):
        """
        The SELinux context to be applied to all containers.
        If unspecified, the container runtime will allocate a random SELinux context for each
        container.  May also be set in SecurityContext.  If set in
        both SecurityContext and PodSecurityContext, the value specified in SecurityContext
        takes precedence for that container.
        Note that this field cannot be set when spec.os.name is windows.
        """

        level: NotRequired[pulumi.Input[str]]
        """
        Level is SELinux level label that applies to the container.
        """
        role: NotRequired[pulumi.Input[str]]
        """
        Role is a SELinux role label that applies to the container.
        """
        type: NotRequired[pulumi.Input[str]]
        """
        Type is a SELinux type label that applies to the container.
        """
        user: NotRequired[pulumi.Input[str]]
        """
        User is a SELinux user label that applies to the container.
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextSeLinuxOptionsArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextSeLinuxOptionsArgs:
    def __init__(
        __self__,
        *,
        level: Optional[pulumi.Input[str]] = None,
        role: Optional[pulumi.Input[str]] = None,
        type: Optional[pulumi.Input[str]] = None,
        user: Optional[pulumi.Input[str]] = None
    ):
        """
        The SELinux context to be applied to all containers.
        If unspecified, the container runtime will allocate a random SELinux context for each
        container.  May also be set in SecurityContext.  If set in
        both SecurityContext and PodSecurityContext, the value specified in SecurityContext
        takes precedence for that container.
        Note that this field cannot be set when spec.os.name is windows.
        :param pulumi.Input[str] level: Level is SELinux level label that applies to the container.
        :param pulumi.Input[str] role: Role is a SELinux role label that applies to the container.
        :param pulumi.Input[str] type: Type is a SELinux type label that applies to the container.
        :param pulumi.Input[str] user: User is a SELinux user label that applies to the container.
        """
        if level is not None:
            pulumi.set(__self__, "level", level)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        """
        Level is SELinux level label that applies to the container.
        """
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input[str]]:
        """
        Role is a SELinux role label that applies to the container.
        """
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Type is a SELinux type label that applies to the container.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def user(self) -> Optional[pulumi.Input[str]]:
        """
        User is a SELinux user label that applies to the container.
        """
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextSeccompProfilePatchArgsDict(
        TypedDict
    ):
        """
        The seccomp options to use by the containers in this pod.
        Note that this field cannot be set when spec.os.name is windows.
        """

        localhost_profile: NotRequired[pulumi.Input[str]]
        """
        localhostProfile indicates a profile defined in a file on the node should be used.
        The profile must be preconfigured on the node to work.
        Must be a descending path, relative to the kubelet's configured seccomp profile location.
        Must be set if type is "Localhost". Must NOT be set for any other type.
        """
        type: NotRequired[pulumi.Input[str]]
        """
        type indicates which kind of seccomp profile will be applied.
        Valid options are:

        Localhost - a profile defined in a file on the node should be used.
        RuntimeDefault - the container runtime default profile should be used.
        Unconfined - no profile should be applied.
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextSeccompProfilePatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextSeccompProfilePatchArgs:
    def __init__(
        __self__,
        *,
        localhost_profile: Optional[pulumi.Input[str]] = None,
        type: Optional[pulumi.Input[str]] = None
    ):
        """
        The seccomp options to use by the containers in this pod.
        Note that this field cannot be set when spec.os.name is windows.
        :param pulumi.Input[str] localhost_profile: localhostProfile indicates a profile defined in a file on the node should be used.
               The profile must be preconfigured on the node to work.
               Must be a descending path, relative to the kubelet's configured seccomp profile location.
               Must be set if type is "Localhost". Must NOT be set for any other type.
        :param pulumi.Input[str] type: type indicates which kind of seccomp profile will be applied.
               Valid options are:

               Localhost - a profile defined in a file on the node should be used.
               RuntimeDefault - the container runtime default profile should be used.
               Unconfined - no profile should be applied.
        """
        if localhost_profile is not None:
            pulumi.set(__self__, "localhost_profile", localhost_profile)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="localhostProfile")
    def localhost_profile(self) -> Optional[pulumi.Input[str]]:
        """
        localhostProfile indicates a profile defined in a file on the node should be used.
        The profile must be preconfigured on the node to work.
        Must be a descending path, relative to the kubelet's configured seccomp profile location.
        Must be set if type is "Localhost". Must NOT be set for any other type.
        """
        return pulumi.get(self, "localhost_profile")

    @localhost_profile.setter
    def localhost_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "localhost_profile", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        type indicates which kind of seccomp profile will be applied.
        Valid options are:

        Localhost - a profile defined in a file on the node should be used.
        RuntimeDefault - the container runtime default profile should be used.
        Unconfined - no profile should be applied.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextSeccompProfileArgsDict(
        TypedDict
    ):
        """
        The seccomp options to use by the containers in this pod.
        Note that this field cannot be set when spec.os.name is windows.
        """

        localhost_profile: NotRequired[pulumi.Input[str]]
        """
        localhostProfile indicates a profile defined in a file on the node should be used.
        The profile must be preconfigured on the node to work.
        Must be a descending path, relative to the kubelet's configured seccomp profile location.
        Must be set if type is "Localhost". Must NOT be set for any other type.
        """
        type: NotRequired[pulumi.Input[str]]
        """
        type indicates which kind of seccomp profile will be applied.
        Valid options are:

        Localhost - a profile defined in a file on the node should be used.
        RuntimeDefault - the container runtime default profile should be used.
        Unconfined - no profile should be applied.
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextSeccompProfileArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextSeccompProfileArgs:
    def __init__(
        __self__,
        *,
        localhost_profile: Optional[pulumi.Input[str]] = None,
        type: Optional[pulumi.Input[str]] = None
    ):
        """
        The seccomp options to use by the containers in this pod.
        Note that this field cannot be set when spec.os.name is windows.
        :param pulumi.Input[str] localhost_profile: localhostProfile indicates a profile defined in a file on the node should be used.
               The profile must be preconfigured on the node to work.
               Must be a descending path, relative to the kubelet's configured seccomp profile location.
               Must be set if type is "Localhost". Must NOT be set for any other type.
        :param pulumi.Input[str] type: type indicates which kind of seccomp profile will be applied.
               Valid options are:

               Localhost - a profile defined in a file on the node should be used.
               RuntimeDefault - the container runtime default profile should be used.
               Unconfined - no profile should be applied.
        """
        if localhost_profile is not None:
            pulumi.set(__self__, "localhost_profile", localhost_profile)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="localhostProfile")
    def localhost_profile(self) -> Optional[pulumi.Input[str]]:
        """
        localhostProfile indicates a profile defined in a file on the node should be used.
        The profile must be preconfigured on the node to work.
        Must be a descending path, relative to the kubelet's configured seccomp profile location.
        Must be set if type is "Localhost". Must NOT be set for any other type.
        """
        return pulumi.get(self, "localhost_profile")

    @localhost_profile.setter
    def localhost_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "localhost_profile", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        type indicates which kind of seccomp profile will be applied.
        Valid options are:

        Localhost - a profile defined in a file on the node should be used.
        RuntimeDefault - the container runtime default profile should be used.
        Unconfined - no profile should be applied.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextSysctlsPatchArgsDict(
        TypedDict
    ):
        """
        Sysctl defines a kernel parameter to be set
        """

        name: NotRequired[pulumi.Input[str]]
        """
        Name of a property to set
        """
        value: NotRequired[pulumi.Input[str]]
        """
        Value of a property to set
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextSysctlsPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextSysctlsPatchArgs:
    def __init__(
        __self__,
        *,
        name: Optional[pulumi.Input[str]] = None,
        value: Optional[pulumi.Input[str]] = None
    ):
        """
        Sysctl defines a kernel parameter to be set
        :param pulumi.Input[str] name: Name of a property to set
        :param pulumi.Input[str] value: Value of a property to set
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of a property to set
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Value of a property to set
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextSysctlsArgsDict(
        TypedDict
    ):
        """
        Sysctl defines a kernel parameter to be set
        """

        name: NotRequired[pulumi.Input[str]]
        """
        Name of a property to set
        """
        value: NotRequired[pulumi.Input[str]]
        """
        Value of a property to set
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextSysctlsArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextSysctlsArgs:
    def __init__(
        __self__,
        *,
        name: Optional[pulumi.Input[str]] = None,
        value: Optional[pulumi.Input[str]] = None
    ):
        """
        Sysctl defines a kernel parameter to be set
        :param pulumi.Input[str] name: Name of a property to set
        :param pulumi.Input[str] value: Value of a property to set
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of a property to set
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Value of a property to set
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextArgsDict(
        TypedDict
    ):
        """
        If specified, the pod's security context
        """

        fs_group: NotRequired[pulumi.Input[int]]
        """
        A special supplemental group that applies to all containers in a pod.
        Some volume types allow the Kubelet to change the ownership of that volume
        to be owned by the pod:

        1. The owning GID will be the FSGroup
        2. The setgid bit is set (new files created in the volume will be owned by FSGroup)
        3. The permission bits are OR'd with rw-rw----

        If unset, the Kubelet will not modify the ownership and permissions of any volume.
        Note that this field cannot be set when spec.os.name is windows.
        """
        fs_group_change_policy: NotRequired[pulumi.Input[str]]
        """
        fsGroupChangePolicy defines behavior of changing ownership and permission of the volume
        before being exposed inside Pod. This field will only apply to
        volume types which support fsGroup based ownership(and permissions).
        It will have no effect on ephemeral volume types such as: secret, configmaps
        and emptydir.
        Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used.
        Note that this field cannot be set when spec.os.name is windows.
        """
        run_as_group: NotRequired[pulumi.Input[int]]
        """
        The GID to run the entrypoint of the container process.
        Uses runtime default if unset.
        May also be set in SecurityContext.  If set in both SecurityContext and
        PodSecurityContext, the value specified in SecurityContext takes precedence
        for that container.
        Note that this field cannot be set when spec.os.name is windows.
        """
        run_as_non_root: NotRequired[pulumi.Input[bool]]
        """
        Indicates that the container must run as a non-root user.
        If true, the Kubelet will validate the image at runtime to ensure that it
        does not run as UID 0 (root) and fail to start the container if it does.
        If unset or false, no such validation will be performed.
        May also be set in SecurityContext.  If set in both SecurityContext and
        PodSecurityContext, the value specified in SecurityContext takes precedence.
        """
        run_as_user: NotRequired[pulumi.Input[int]]
        """
        The UID to run the entrypoint of the container process.
        Defaults to user specified in image metadata if unspecified.
        May also be set in SecurityContext.  If set in both SecurityContext and
        PodSecurityContext, the value specified in SecurityContext takes precedence
        for that container.
        Note that this field cannot be set when spec.os.name is windows.
        """
        se_linux_options: NotRequired[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextSeLinuxOptionsArgsDict"
            ]
        ]
        seccomp_profile: NotRequired[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextSeccompProfileArgsDict"
            ]
        ]
        supplemental_groups: NotRequired[pulumi.Input[Sequence[pulumi.Input[int]]]]
        """
        A list of groups applied to the first process run in each container, in addition
        to the container's primary GID, the fsGroup (if specified), and group memberships
        defined in the container image for the uid of the container process. If unspecified,
        no additional groups are added to any container. Note that group memberships
        defined in the container image for the uid of the container process are still effective,
        even if they are not included in this list.
        Note that this field cannot be set when spec.os.name is windows.
        """
        sysctls: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextSysctlsArgsDict"
                    ]
                ]
            ]
        ]
        """
        Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported
        sysctls (by the container runtime) might fail to launch.
        Note that this field cannot be set when spec.os.name is windows.
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextArgs:
    def __init__(
        __self__,
        *,
        fs_group: Optional[pulumi.Input[int]] = None,
        fs_group_change_policy: Optional[pulumi.Input[str]] = None,
        run_as_group: Optional[pulumi.Input[int]] = None,
        run_as_non_root: Optional[pulumi.Input[bool]] = None,
        run_as_user: Optional[pulumi.Input[int]] = None,
        se_linux_options: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextSeLinuxOptionsArgs"
            ]
        ] = None,
        seccomp_profile: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextSeccompProfileArgs"
            ]
        ] = None,
        supplemental_groups: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
        sysctls: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextSysctlsArgs"
                    ]
                ]
            ]
        ] = None
    ):
        """
        If specified, the pod's security context
        :param pulumi.Input[int] fs_group: A special supplemental group that applies to all containers in a pod.
               Some volume types allow the Kubelet to change the ownership of that volume
               to be owned by the pod:

               1. The owning GID will be the FSGroup
               2. The setgid bit is set (new files created in the volume will be owned by FSGroup)
               3. The permission bits are OR'd with rw-rw----

               If unset, the Kubelet will not modify the ownership and permissions of any volume.
               Note that this field cannot be set when spec.os.name is windows.
        :param pulumi.Input[str] fs_group_change_policy: fsGroupChangePolicy defines behavior of changing ownership and permission of the volume
               before being exposed inside Pod. This field will only apply to
               volume types which support fsGroup based ownership(and permissions).
               It will have no effect on ephemeral volume types such as: secret, configmaps
               and emptydir.
               Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used.
               Note that this field cannot be set when spec.os.name is windows.
        :param pulumi.Input[int] run_as_group: The GID to run the entrypoint of the container process.
               Uses runtime default if unset.
               May also be set in SecurityContext.  If set in both SecurityContext and
               PodSecurityContext, the value specified in SecurityContext takes precedence
               for that container.
               Note that this field cannot be set when spec.os.name is windows.
        :param pulumi.Input[bool] run_as_non_root: Indicates that the container must run as a non-root user.
               If true, the Kubelet will validate the image at runtime to ensure that it
               does not run as UID 0 (root) and fail to start the container if it does.
               If unset or false, no such validation will be performed.
               May also be set in SecurityContext.  If set in both SecurityContext and
               PodSecurityContext, the value specified in SecurityContext takes precedence.
        :param pulumi.Input[int] run_as_user: The UID to run the entrypoint of the container process.
               Defaults to user specified in image metadata if unspecified.
               May also be set in SecurityContext.  If set in both SecurityContext and
               PodSecurityContext, the value specified in SecurityContext takes precedence
               for that container.
               Note that this field cannot be set when spec.os.name is windows.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] supplemental_groups: A list of groups applied to the first process run in each container, in addition
               to the container's primary GID, the fsGroup (if specified), and group memberships
               defined in the container image for the uid of the container process. If unspecified,
               no additional groups are added to any container. Note that group memberships
               defined in the container image for the uid of the container process are still effective,
               even if they are not included in this list.
               Note that this field cannot be set when spec.os.name is windows.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextSysctlsArgs']]] sysctls: Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported
               sysctls (by the container runtime) might fail to launch.
               Note that this field cannot be set when spec.os.name is windows.
        """
        if fs_group is not None:
            pulumi.set(__self__, "fs_group", fs_group)
        if fs_group_change_policy is not None:
            pulumi.set(__self__, "fs_group_change_policy", fs_group_change_policy)
        if run_as_group is not None:
            pulumi.set(__self__, "run_as_group", run_as_group)
        if run_as_non_root is not None:
            pulumi.set(__self__, "run_as_non_root", run_as_non_root)
        if run_as_user is not None:
            pulumi.set(__self__, "run_as_user", run_as_user)
        if se_linux_options is not None:
            pulumi.set(__self__, "se_linux_options", se_linux_options)
        if seccomp_profile is not None:
            pulumi.set(__self__, "seccomp_profile", seccomp_profile)
        if supplemental_groups is not None:
            pulumi.set(__self__, "supplemental_groups", supplemental_groups)
        if sysctls is not None:
            pulumi.set(__self__, "sysctls", sysctls)

    @property
    @pulumi.getter(name="fsGroup")
    def fs_group(self) -> Optional[pulumi.Input[int]]:
        """
        A special supplemental group that applies to all containers in a pod.
        Some volume types allow the Kubelet to change the ownership of that volume
        to be owned by the pod:

        1. The owning GID will be the FSGroup
        2. The setgid bit is set (new files created in the volume will be owned by FSGroup)
        3. The permission bits are OR'd with rw-rw----

        If unset, the Kubelet will not modify the ownership and permissions of any volume.
        Note that this field cannot be set when spec.os.name is windows.
        """
        return pulumi.get(self, "fs_group")

    @fs_group.setter
    def fs_group(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fs_group", value)

    @property
    @pulumi.getter(name="fsGroupChangePolicy")
    def fs_group_change_policy(self) -> Optional[pulumi.Input[str]]:
        """
        fsGroupChangePolicy defines behavior of changing ownership and permission of the volume
        before being exposed inside Pod. This field will only apply to
        volume types which support fsGroup based ownership(and permissions).
        It will have no effect on ephemeral volume types such as: secret, configmaps
        and emptydir.
        Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used.
        Note that this field cannot be set when spec.os.name is windows.
        """
        return pulumi.get(self, "fs_group_change_policy")

    @fs_group_change_policy.setter
    def fs_group_change_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fs_group_change_policy", value)

    @property
    @pulumi.getter(name="runAsGroup")
    def run_as_group(self) -> Optional[pulumi.Input[int]]:
        """
        The GID to run the entrypoint of the container process.
        Uses runtime default if unset.
        May also be set in SecurityContext.  If set in both SecurityContext and
        PodSecurityContext, the value specified in SecurityContext takes precedence
        for that container.
        Note that this field cannot be set when spec.os.name is windows.
        """
        return pulumi.get(self, "run_as_group")

    @run_as_group.setter
    def run_as_group(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "run_as_group", value)

    @property
    @pulumi.getter(name="runAsNonRoot")
    def run_as_non_root(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates that the container must run as a non-root user.
        If true, the Kubelet will validate the image at runtime to ensure that it
        does not run as UID 0 (root) and fail to start the container if it does.
        If unset or false, no such validation will be performed.
        May also be set in SecurityContext.  If set in both SecurityContext and
        PodSecurityContext, the value specified in SecurityContext takes precedence.
        """
        return pulumi.get(self, "run_as_non_root")

    @run_as_non_root.setter
    def run_as_non_root(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "run_as_non_root", value)

    @property
    @pulumi.getter(name="runAsUser")
    def run_as_user(self) -> Optional[pulumi.Input[int]]:
        """
        The UID to run the entrypoint of the container process.
        Defaults to user specified in image metadata if unspecified.
        May also be set in SecurityContext.  If set in both SecurityContext and
        PodSecurityContext, the value specified in SecurityContext takes precedence
        for that container.
        Note that this field cannot be set when spec.os.name is windows.
        """
        return pulumi.get(self, "run_as_user")

    @run_as_user.setter
    def run_as_user(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "run_as_user", value)

    @property
    @pulumi.getter(name="seLinuxOptions")
    def se_linux_options(
        self,
    ) -> Optional[
        pulumi.Input[
            "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextSeLinuxOptionsArgs"
        ]
    ]:
        return pulumi.get(self, "se_linux_options")

    @se_linux_options.setter
    def se_linux_options(
        self,
        value: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextSeLinuxOptionsArgs"
            ]
        ],
    ):
        pulumi.set(self, "se_linux_options", value)

    @property
    @pulumi.getter(name="seccompProfile")
    def seccomp_profile(
        self,
    ) -> Optional[
        pulumi.Input[
            "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextSeccompProfileArgs"
        ]
    ]:
        return pulumi.get(self, "seccomp_profile")

    @seccomp_profile.setter
    def seccomp_profile(
        self,
        value: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextSeccompProfileArgs"
            ]
        ],
    ):
        pulumi.set(self, "seccomp_profile", value)

    @property
    @pulumi.getter(name="supplementalGroups")
    def supplemental_groups(
        self,
    ) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        A list of groups applied to the first process run in each container, in addition
        to the container's primary GID, the fsGroup (if specified), and group memberships
        defined in the container image for the uid of the container process. If unspecified,
        no additional groups are added to any container. Note that group memberships
        defined in the container image for the uid of the container process are still effective,
        even if they are not included in this list.
        Note that this field cannot be set when spec.os.name is windows.
        """
        return pulumi.get(self, "supplemental_groups")

    @supplemental_groups.setter
    def supplemental_groups(
        self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]
    ):
        pulumi.set(self, "supplemental_groups", value)

    @property
    @pulumi.getter
    def sysctls(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextSysctlsArgs"
                ]
            ]
        ]
    ]:
        """
        Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported
        sysctls (by the container runtime) might fail to launch.
        Note that this field cannot be set when spec.os.name is windows.
        """
        return pulumi.get(self, "sysctls")

    @sysctls.setter
    def sysctls(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextSysctlsArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "sysctls", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecTolerationsPatchArgsDict(
        TypedDict
    ):
        """
        The pod this Toleration is attached to tolerates any taint that matches
        the triple <key,value,effect> using the matching operator <operator>.
        """

        effect: NotRequired[pulumi.Input[str]]
        """
        Effect indicates the taint effect to match. Empty means match all taint effects.
        When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
        """
        key: NotRequired[pulumi.Input[str]]
        """
        Key is the taint key that the toleration applies to. Empty means match all taint keys.
        If the key is empty, operator must be Exists; this combination means to match all values and all keys.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        Operator represents a key's relationship to the value.
        Valid operators are Exists and Equal. Defaults to Equal.
        Exists is equivalent to wildcard for value, so that a pod can
        tolerate all taints of a particular category.
        """
        toleration_seconds: NotRequired[pulumi.Input[int]]
        """
        TolerationSeconds represents the period of time the toleration (which must be
        of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,
        it is not set, which means tolerate the taint forever (do not evict). Zero and
        negative values will be treated as 0 (evict immediately) by the system.
        """
        value: NotRequired[pulumi.Input[str]]
        """
        Value is the taint value the toleration matches to.
        If the operator is Exists, the value should be empty, otherwise just a regular string.
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecTolerationsPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecTolerationsPatchArgs:
    def __init__(
        __self__,
        *,
        effect: Optional[pulumi.Input[str]] = None,
        key: Optional[pulumi.Input[str]] = None,
        operator: Optional[pulumi.Input[str]] = None,
        toleration_seconds: Optional[pulumi.Input[int]] = None,
        value: Optional[pulumi.Input[str]] = None
    ):
        """
        The pod this Toleration is attached to tolerates any taint that matches
        the triple <key,value,effect> using the matching operator <operator>.
        :param pulumi.Input[str] effect: Effect indicates the taint effect to match. Empty means match all taint effects.
               When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
        :param pulumi.Input[str] key: Key is the taint key that the toleration applies to. Empty means match all taint keys.
               If the key is empty, operator must be Exists; this combination means to match all values and all keys.
        :param pulumi.Input[str] operator: Operator represents a key's relationship to the value.
               Valid operators are Exists and Equal. Defaults to Equal.
               Exists is equivalent to wildcard for value, so that a pod can
               tolerate all taints of a particular category.
        :param pulumi.Input[int] toleration_seconds: TolerationSeconds represents the period of time the toleration (which must be
               of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,
               it is not set, which means tolerate the taint forever (do not evict). Zero and
               negative values will be treated as 0 (evict immediately) by the system.
        :param pulumi.Input[str] value: Value is the taint value the toleration matches to.
               If the operator is Exists, the value should be empty, otherwise just a regular string.
        """
        if effect is not None:
            pulumi.set(__self__, "effect", effect)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if toleration_seconds is not None:
            pulumi.set(__self__, "toleration_seconds", toleration_seconds)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def effect(self) -> Optional[pulumi.Input[str]]:
        """
        Effect indicates the taint effect to match. Empty means match all taint effects.
        When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
        """
        return pulumi.get(self, "effect")

    @effect.setter
    def effect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "effect", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        Key is the taint key that the toleration applies to. Empty means match all taint keys.
        If the key is empty, operator must be Exists; this combination means to match all values and all keys.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        Operator represents a key's relationship to the value.
        Valid operators are Exists and Equal. Defaults to Equal.
        Exists is equivalent to wildcard for value, so that a pod can
        tolerate all taints of a particular category.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter(name="tolerationSeconds")
    def toleration_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        TolerationSeconds represents the period of time the toleration (which must be
        of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,
        it is not set, which means tolerate the taint forever (do not evict). Zero and
        negative values will be treated as 0 (evict immediately) by the system.
        """
        return pulumi.get(self, "toleration_seconds")

    @toleration_seconds.setter
    def toleration_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "toleration_seconds", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Value is the taint value the toleration matches to.
        If the operator is Exists, the value should be empty, otherwise just a regular string.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecTolerationsArgsDict(
        TypedDict
    ):
        """
        The pod this Toleration is attached to tolerates any taint that matches
        the triple <key,value,effect> using the matching operator <operator>.
        """

        effect: NotRequired[pulumi.Input[str]]
        """
        Effect indicates the taint effect to match. Empty means match all taint effects.
        When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
        """
        key: NotRequired[pulumi.Input[str]]
        """
        Key is the taint key that the toleration applies to. Empty means match all taint keys.
        If the key is empty, operator must be Exists; this combination means to match all values and all keys.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        Operator represents a key's relationship to the value.
        Valid operators are Exists and Equal. Defaults to Equal.
        Exists is equivalent to wildcard for value, so that a pod can
        tolerate all taints of a particular category.
        """
        toleration_seconds: NotRequired[pulumi.Input[int]]
        """
        TolerationSeconds represents the period of time the toleration (which must be
        of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,
        it is not set, which means tolerate the taint forever (do not evict). Zero and
        negative values will be treated as 0 (evict immediately) by the system.
        """
        value: NotRequired[pulumi.Input[str]]
        """
        Value is the taint value the toleration matches to.
        If the operator is Exists, the value should be empty, otherwise just a regular string.
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecTolerationsArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecTolerationsArgs:
    def __init__(
        __self__,
        *,
        effect: Optional[pulumi.Input[str]] = None,
        key: Optional[pulumi.Input[str]] = None,
        operator: Optional[pulumi.Input[str]] = None,
        toleration_seconds: Optional[pulumi.Input[int]] = None,
        value: Optional[pulumi.Input[str]] = None
    ):
        """
        The pod this Toleration is attached to tolerates any taint that matches
        the triple <key,value,effect> using the matching operator <operator>.
        :param pulumi.Input[str] effect: Effect indicates the taint effect to match. Empty means match all taint effects.
               When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
        :param pulumi.Input[str] key: Key is the taint key that the toleration applies to. Empty means match all taint keys.
               If the key is empty, operator must be Exists; this combination means to match all values and all keys.
        :param pulumi.Input[str] operator: Operator represents a key's relationship to the value.
               Valid operators are Exists and Equal. Defaults to Equal.
               Exists is equivalent to wildcard for value, so that a pod can
               tolerate all taints of a particular category.
        :param pulumi.Input[int] toleration_seconds: TolerationSeconds represents the period of time the toleration (which must be
               of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,
               it is not set, which means tolerate the taint forever (do not evict). Zero and
               negative values will be treated as 0 (evict immediately) by the system.
        :param pulumi.Input[str] value: Value is the taint value the toleration matches to.
               If the operator is Exists, the value should be empty, otherwise just a regular string.
        """
        if effect is not None:
            pulumi.set(__self__, "effect", effect)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if toleration_seconds is not None:
            pulumi.set(__self__, "toleration_seconds", toleration_seconds)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def effect(self) -> Optional[pulumi.Input[str]]:
        """
        Effect indicates the taint effect to match. Empty means match all taint effects.
        When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
        """
        return pulumi.get(self, "effect")

    @effect.setter
    def effect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "effect", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        Key is the taint key that the toleration applies to. Empty means match all taint keys.
        If the key is empty, operator must be Exists; this combination means to match all values and all keys.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        Operator represents a key's relationship to the value.
        Valid operators are Exists and Equal. Defaults to Equal.
        Exists is equivalent to wildcard for value, so that a pod can
        tolerate all taints of a particular category.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter(name="tolerationSeconds")
    def toleration_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        TolerationSeconds represents the period of time the toleration (which must be
        of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,
        it is not set, which means tolerate the taint forever (do not evict). Zero and
        negative values will be treated as 0 (evict immediately) by the system.
        """
        return pulumi.get(self, "toleration_seconds")

    @toleration_seconds.setter
    def toleration_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "toleration_seconds", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Value is the taint value the toleration matches to.
        If the operator is Exists, the value should be empty, otherwise just a regular string.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecArgsDict(TypedDict):
        """
        PodSpec defines overrides for the HTTP01 challenge solver pod.
        Check ACMEChallengeSolverHTTP01IngressPodSpec to find out currently supported fields.
        All other fields will be ignored.
        """

        affinity: NotRequired[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityArgsDict"
            ]
        ]
        image_pull_secrets: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecImagePullSecretsArgsDict"
                    ]
                ]
            ]
        ]
        """
        If specified, the pod's imagePullSecrets
        """
        node_selector: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        NodeSelector is a selector which must be true for the pod to fit on a node.
        Selector which must match a node's labels for the pod to be scheduled on that node.
        More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
        """
        priority_class_name: NotRequired[pulumi.Input[str]]
        """
        If specified, the pod's priorityClassName.
        """
        security_context: NotRequired[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextArgsDict"
            ]
        ]
        service_account_name: NotRequired[pulumi.Input[str]]
        """
        If specified, the pod's service account
        """
        tolerations: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecTolerationsArgsDict"
                    ]
                ]
            ]
        ]
        """
        If specified, the pod's tolerations.
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecArgsDict: TypeAlias = (
        Mapping[str, Any]
    )


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecArgs:
    def __init__(
        __self__,
        *,
        affinity: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityArgs"
            ]
        ] = None,
        image_pull_secrets: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecImagePullSecretsArgs"
                    ]
                ]
            ]
        ] = None,
        node_selector: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
        priority_class_name: Optional[pulumi.Input[str]] = None,
        security_context: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextArgs"
            ]
        ] = None,
        service_account_name: Optional[pulumi.Input[str]] = None,
        tolerations: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecTolerationsArgs"
                    ]
                ]
            ]
        ] = None
    ):
        """
        PodSpec defines overrides for the HTTP01 challenge solver pod.
        Check ACMEChallengeSolverHTTP01IngressPodSpec to find out currently supported fields.
        All other fields will be ignored.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecImagePullSecretsArgs']]] image_pull_secrets: If specified, the pod's imagePullSecrets
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] node_selector: NodeSelector is a selector which must be true for the pod to fit on a node.
               Selector which must match a node's labels for the pod to be scheduled on that node.
               More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
        :param pulumi.Input[str] priority_class_name: If specified, the pod's priorityClassName.
        :param pulumi.Input[str] service_account_name: If specified, the pod's service account
        :param pulumi.Input[Sequence[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecTolerationsArgs']]] tolerations: If specified, the pod's tolerations.
        """
        if affinity is not None:
            pulumi.set(__self__, "affinity", affinity)
        if image_pull_secrets is not None:
            pulumi.set(__self__, "image_pull_secrets", image_pull_secrets)
        if node_selector is not None:
            pulumi.set(__self__, "node_selector", node_selector)
        if priority_class_name is not None:
            pulumi.set(__self__, "priority_class_name", priority_class_name)
        if security_context is not None:
            pulumi.set(__self__, "security_context", security_context)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tolerations is not None:
            pulumi.set(__self__, "tolerations", tolerations)

    @property
    @pulumi.getter
    def affinity(
        self,
    ) -> Optional[
        pulumi.Input[
            "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityArgs"
        ]
    ]:
        return pulumi.get(self, "affinity")

    @affinity.setter
    def affinity(
        self,
        value: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityArgs"
            ]
        ],
    ):
        pulumi.set(self, "affinity", value)

    @property
    @pulumi.getter(name="imagePullSecrets")
    def image_pull_secrets(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecImagePullSecretsArgs"
                ]
            ]
        ]
    ]:
        """
        If specified, the pod's imagePullSecrets
        """
        return pulumi.get(self, "image_pull_secrets")

    @image_pull_secrets.setter
    def image_pull_secrets(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecImagePullSecretsArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "image_pull_secrets", value)

    @property
    @pulumi.getter(name="nodeSelector")
    def node_selector(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        NodeSelector is a selector which must be true for the pod to fit on a node.
        Selector which must match a node's labels for the pod to be scheduled on that node.
        More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
        """
        return pulumi.get(self, "node_selector")

    @node_selector.setter
    def node_selector(
        self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
    ):
        pulumi.set(self, "node_selector", value)

    @property
    @pulumi.getter(name="priorityClassName")
    def priority_class_name(self) -> Optional[pulumi.Input[str]]:
        """
        If specified, the pod's priorityClassName.
        """
        return pulumi.get(self, "priority_class_name")

    @priority_class_name.setter
    def priority_class_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "priority_class_name", value)

    @property
    @pulumi.getter(name="securityContext")
    def security_context(
        self,
    ) -> Optional[
        pulumi.Input[
            "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextArgs"
        ]
    ]:
        return pulumi.get(self, "security_context")

    @security_context.setter
    def security_context(
        self,
        value: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextArgs"
            ]
        ],
    ):
        pulumi.set(self, "security_context", value)

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[pulumi.Input[str]]:
        """
        If specified, the pod's service account
        """
        return pulumi.get(self, "service_account_name")

    @service_account_name.setter
    def service_account_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account_name", value)

    @property
    @pulumi.getter
    def tolerations(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecTolerationsArgs"
                ]
            ]
        ]
    ]:
        """
        If specified, the pod's tolerations.
        """
        return pulumi.get(self, "tolerations")

    @tolerations.setter
    def tolerations(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecTolerationsArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "tolerations", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateArgsDict(TypedDict):
        """
        Optional pod template used to configure the ACME challenge solver pods
        used for HTTP01 challenges.
        """

        metadata: NotRequired[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateMetadataArgsDict"
            ]
        ]
        spec: NotRequired[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecArgsDict"
            ]
        ]

elif False:
    ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateArgs:
    def __init__(
        __self__,
        *,
        metadata: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateMetadataArgs"
            ]
        ] = None,
        spec: Optional[
            pulumi.Input["ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecArgs"]
        ] = None
    ):
        """
        Optional pod template used to configure the ACME challenge solver pods
        used for HTTP01 challenges.
        """
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if spec is not None:
            pulumi.set(__self__, "spec", spec)

    @property
    @pulumi.getter
    def metadata(
        self,
    ) -> Optional[
        pulumi.Input["ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateMetadataArgs"]
    ]:
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(
        self,
        value: Optional[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateMetadataArgs"
            ]
        ],
    ):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter
    def spec(
        self,
    ) -> Optional[
        pulumi.Input["ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecArgs"]
    ]:
        return pulumi.get(self, "spec")

    @spec.setter
    def spec(
        self,
        value: Optional[
            pulumi.Input["ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecArgs"]
        ],
    ):
        pulumi.set(self, "spec", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01IngressArgsDict(TypedDict):
        """
        The ingress based HTTP01 challenge solver will solve challenges by
        creating or modifying Ingress resources in order to route requests for
        '/.well-known/acme-challenge/XYZ' to 'challenge solver' pods that are
        provisioned by cert-manager for each Challenge to be completed.
        """

        class_: NotRequired[pulumi.Input[str]]
        """
        This field configures the annotation `kubernetes.io/ingress.class` when
        creating Ingress resources to solve ACME challenges that use this
        challenge solver. Only one of `class`, `name` or `ingressClassName` may
        be specified.
        """
        ingress_class_name: NotRequired[pulumi.Input[str]]
        """
        This field configures the field `ingressClassName` on the created Ingress
        resources used to solve ACME challenges that use this challenge solver.
        This is the recommended way of configuring the ingress class. Only one of
        `class`, `name` or `ingressClassName` may be specified.
        """
        ingress_template: NotRequired[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01IngressIngressTemplateArgsDict"
            ]
        ]
        name: NotRequired[pulumi.Input[str]]
        """
        The name of the ingress resource that should have ACME challenge solving
        routes inserted into it in order to solve HTTP01 challenges.
        This is typically used in conjunction with ingress controllers like
        ingress-gce, which maintains a 1:1 mapping between external IPs and
        ingress resources. Only one of `class`, `name` or `ingressClassName` may
        be specified.
        """
        pod_template: NotRequired[
            pulumi.Input["ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateArgsDict"]
        ]
        service_type: NotRequired[pulumi.Input[str]]
        """
        Optional service type for Kubernetes solver service. Supported values
        are NodePort or ClusterIP. If unset, defaults to NodePort.
        """

elif False:
    ClusterIssuerSpecAcmeSolversHttp01IngressArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01IngressArgs:
    def __init__(
        __self__,
        *,
        class_: Optional[pulumi.Input[str]] = None,
        ingress_class_name: Optional[pulumi.Input[str]] = None,
        ingress_template: Optional[
            pulumi.Input["ClusterIssuerSpecAcmeSolversHttp01IngressIngressTemplateArgs"]
        ] = None,
        name: Optional[pulumi.Input[str]] = None,
        pod_template: Optional[
            pulumi.Input["ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateArgs"]
        ] = None,
        service_type: Optional[pulumi.Input[str]] = None
    ):
        """
        The ingress based HTTP01 challenge solver will solve challenges by
        creating or modifying Ingress resources in order to route requests for
        '/.well-known/acme-challenge/XYZ' to 'challenge solver' pods that are
        provisioned by cert-manager for each Challenge to be completed.
        :param pulumi.Input[str] class_: This field configures the annotation `kubernetes.io/ingress.class` when
               creating Ingress resources to solve ACME challenges that use this
               challenge solver. Only one of `class`, `name` or `ingressClassName` may
               be specified.
        :param pulumi.Input[str] ingress_class_name: This field configures the field `ingressClassName` on the created Ingress
               resources used to solve ACME challenges that use this challenge solver.
               This is the recommended way of configuring the ingress class. Only one of
               `class`, `name` or `ingressClassName` may be specified.
        :param pulumi.Input[str] name: The name of the ingress resource that should have ACME challenge solving
               routes inserted into it in order to solve HTTP01 challenges.
               This is typically used in conjunction with ingress controllers like
               ingress-gce, which maintains a 1:1 mapping between external IPs and
               ingress resources. Only one of `class`, `name` or `ingressClassName` may
               be specified.
        :param pulumi.Input[str] service_type: Optional service type for Kubernetes solver service. Supported values
               are NodePort or ClusterIP. If unset, defaults to NodePort.
        """
        if class_ is not None:
            pulumi.set(__self__, "class_", class_)
        if ingress_class_name is not None:
            pulumi.set(__self__, "ingress_class_name", ingress_class_name)
        if ingress_template is not None:
            pulumi.set(__self__, "ingress_template", ingress_template)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if pod_template is not None:
            pulumi.set(__self__, "pod_template", pod_template)
        if service_type is not None:
            pulumi.set(__self__, "service_type", service_type)

    @property
    @pulumi.getter(name="class")
    def class_(self) -> Optional[pulumi.Input[str]]:
        """
        This field configures the annotation `kubernetes.io/ingress.class` when
        creating Ingress resources to solve ACME challenges that use this
        challenge solver. Only one of `class`, `name` or `ingressClassName` may
        be specified.
        """
        return pulumi.get(self, "class_")

    @class_.setter
    def class_(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "class_", value)

    @property
    @pulumi.getter(name="ingressClassName")
    def ingress_class_name(self) -> Optional[pulumi.Input[str]]:
        """
        This field configures the field `ingressClassName` on the created Ingress
        resources used to solve ACME challenges that use this challenge solver.
        This is the recommended way of configuring the ingress class. Only one of
        `class`, `name` or `ingressClassName` may be specified.
        """
        return pulumi.get(self, "ingress_class_name")

    @ingress_class_name.setter
    def ingress_class_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ingress_class_name", value)

    @property
    @pulumi.getter(name="ingressTemplate")
    def ingress_template(
        self,
    ) -> Optional[
        pulumi.Input["ClusterIssuerSpecAcmeSolversHttp01IngressIngressTemplateArgs"]
    ]:
        return pulumi.get(self, "ingress_template")

    @ingress_template.setter
    def ingress_template(
        self,
        value: Optional[
            pulumi.Input["ClusterIssuerSpecAcmeSolversHttp01IngressIngressTemplateArgs"]
        ],
    ):
        pulumi.set(self, "ingress_template", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the ingress resource that should have ACME challenge solving
        routes inserted into it in order to solve HTTP01 challenges.
        This is typically used in conjunction with ingress controllers like
        ingress-gce, which maintains a 1:1 mapping between external IPs and
        ingress resources. Only one of `class`, `name` or `ingressClassName` may
        be specified.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="podTemplate")
    def pod_template(
        self,
    ) -> Optional[
        pulumi.Input["ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateArgs"]
    ]:
        return pulumi.get(self, "pod_template")

    @pod_template.setter
    def pod_template(
        self,
        value: Optional[
            pulumi.Input["ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateArgs"]
        ],
    ):
        pulumi.set(self, "pod_template", value)

    @property
    @pulumi.getter(name="serviceType")
    def service_type(self) -> Optional[pulumi.Input[str]]:
        """
        Optional service type for Kubernetes solver service. Supported values
        are NodePort or ClusterIP. If unset, defaults to NodePort.
        """
        return pulumi.get(self, "service_type")

    @service_type.setter
    def service_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_type", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01PatchArgsDict(TypedDict):
        """
        Configures cert-manager to attempt to complete authorizations by
        performing the HTTP01 challenge flow.
        It is not possible to obtain certificates for wildcard domain names
        (e.g. `*.example.com`) using the HTTP01 challenge mechanism.
        """

        gateway_http_route: NotRequired[
            pulumi.Input[
                "ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePatchArgsDict"
            ]
        ]
        ingress: NotRequired[
            pulumi.Input["ClusterIssuerSpecAcmeSolversHttp01IngressPatchArgsDict"]
        ]

elif False:
    ClusterIssuerSpecAcmeSolversHttp01PatchArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01PatchArgs:
    def __init__(
        __self__,
        *,
        gateway_http_route: Optional[
            pulumi.Input["ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePatchArgs"]
        ] = None,
        ingress: Optional[
            pulumi.Input["ClusterIssuerSpecAcmeSolversHttp01IngressPatchArgs"]
        ] = None
    ):
        """
        Configures cert-manager to attempt to complete authorizations by
        performing the HTTP01 challenge flow.
        It is not possible to obtain certificates for wildcard domain names
        (e.g. `*.example.com`) using the HTTP01 challenge mechanism.
        """
        if gateway_http_route is not None:
            pulumi.set(__self__, "gateway_http_route", gateway_http_route)
        if ingress is not None:
            pulumi.set(__self__, "ingress", ingress)

    @property
    @pulumi.getter(name="gatewayHTTPRoute")
    def gateway_http_route(
        self,
    ) -> Optional[
        pulumi.Input["ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePatchArgs"]
    ]:
        return pulumi.get(self, "gateway_http_route")

    @gateway_http_route.setter
    def gateway_http_route(
        self,
        value: Optional[
            pulumi.Input["ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePatchArgs"]
        ],
    ):
        pulumi.set(self, "gateway_http_route", value)

    @property
    @pulumi.getter
    def ingress(
        self,
    ) -> Optional[pulumi.Input["ClusterIssuerSpecAcmeSolversHttp01IngressPatchArgs"]]:
        return pulumi.get(self, "ingress")

    @ingress.setter
    def ingress(
        self,
        value: Optional[
            pulumi.Input["ClusterIssuerSpecAcmeSolversHttp01IngressPatchArgs"]
        ],
    ):
        pulumi.set(self, "ingress", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversHttp01ArgsDict(TypedDict):
        """
        Configures cert-manager to attempt to complete authorizations by
        performing the HTTP01 challenge flow.
        It is not possible to obtain certificates for wildcard domain names
        (e.g. `*.example.com`) using the HTTP01 challenge mechanism.
        """

        gateway_http_route: NotRequired[
            pulumi.Input["ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRouteArgsDict"]
        ]
        ingress: NotRequired[
            pulumi.Input["ClusterIssuerSpecAcmeSolversHttp01IngressArgsDict"]
        ]

elif False:
    ClusterIssuerSpecAcmeSolversHttp01ArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01Args:
    def __init__(
        __self__,
        *,
        gateway_http_route: Optional[
            pulumi.Input["ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRouteArgs"]
        ] = None,
        ingress: Optional[
            pulumi.Input["ClusterIssuerSpecAcmeSolversHttp01IngressArgs"]
        ] = None
    ):
        """
        Configures cert-manager to attempt to complete authorizations by
        performing the HTTP01 challenge flow.
        It is not possible to obtain certificates for wildcard domain names
        (e.g. `*.example.com`) using the HTTP01 challenge mechanism.
        """
        if gateway_http_route is not None:
            pulumi.set(__self__, "gateway_http_route", gateway_http_route)
        if ingress is not None:
            pulumi.set(__self__, "ingress", ingress)

    @property
    @pulumi.getter(name="gatewayHTTPRoute")
    def gateway_http_route(
        self,
    ) -> Optional[
        pulumi.Input["ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRouteArgs"]
    ]:
        return pulumi.get(self, "gateway_http_route")

    @gateway_http_route.setter
    def gateway_http_route(
        self,
        value: Optional[
            pulumi.Input["ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRouteArgs"]
        ],
    ):
        pulumi.set(self, "gateway_http_route", value)

    @property
    @pulumi.getter
    def ingress(
        self,
    ) -> Optional[pulumi.Input["ClusterIssuerSpecAcmeSolversHttp01IngressArgs"]]:
        return pulumi.get(self, "ingress")

    @ingress.setter
    def ingress(
        self,
        value: Optional[pulumi.Input["ClusterIssuerSpecAcmeSolversHttp01IngressArgs"]],
    ):
        pulumi.set(self, "ingress", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversPatchArgsDict(TypedDict):
        """
        An ACMEChallengeSolver describes how to solve ACME challenges for the issuer it is part of.
        A selector may be provided to use different solving strategies for different DNS names.
        Only one of HTTP01 or DNS01 must be provided.
        """

        dns01: NotRequired[
            pulumi.Input["ClusterIssuerSpecAcmeSolversDns01PatchArgsDict"]
        ]
        http01: NotRequired[
            pulumi.Input["ClusterIssuerSpecAcmeSolversHttp01PatchArgsDict"]
        ]
        selector: NotRequired[
            pulumi.Input["ClusterIssuerSpecAcmeSolversSelectorPatchArgsDict"]
        ]

elif False:
    ClusterIssuerSpecAcmeSolversPatchArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversPatchArgs:
    def __init__(
        __self__,
        *,
        dns01: Optional[
            pulumi.Input["ClusterIssuerSpecAcmeSolversDns01PatchArgs"]
        ] = None,
        http01: Optional[
            pulumi.Input["ClusterIssuerSpecAcmeSolversHttp01PatchArgs"]
        ] = None,
        selector: Optional[
            pulumi.Input["ClusterIssuerSpecAcmeSolversSelectorPatchArgs"]
        ] = None
    ):
        """
        An ACMEChallengeSolver describes how to solve ACME challenges for the issuer it is part of.
        A selector may be provided to use different solving strategies for different DNS names.
        Only one of HTTP01 or DNS01 must be provided.
        """
        if dns01 is not None:
            pulumi.set(__self__, "dns01", dns01)
        if http01 is not None:
            pulumi.set(__self__, "http01", http01)
        if selector is not None:
            pulumi.set(__self__, "selector", selector)

    @property
    @pulumi.getter
    def dns01(
        self,
    ) -> Optional[pulumi.Input["ClusterIssuerSpecAcmeSolversDns01PatchArgs"]]:
        return pulumi.get(self, "dns01")

    @dns01.setter
    def dns01(
        self,
        value: Optional[pulumi.Input["ClusterIssuerSpecAcmeSolversDns01PatchArgs"]],
    ):
        pulumi.set(self, "dns01", value)

    @property
    @pulumi.getter
    def http01(
        self,
    ) -> Optional[pulumi.Input["ClusterIssuerSpecAcmeSolversHttp01PatchArgs"]]:
        return pulumi.get(self, "http01")

    @http01.setter
    def http01(
        self,
        value: Optional[pulumi.Input["ClusterIssuerSpecAcmeSolversHttp01PatchArgs"]],
    ):
        pulumi.set(self, "http01", value)

    @property
    @pulumi.getter
    def selector(
        self,
    ) -> Optional[pulumi.Input["ClusterIssuerSpecAcmeSolversSelectorPatchArgs"]]:
        return pulumi.get(self, "selector")

    @selector.setter
    def selector(
        self,
        value: Optional[pulumi.Input["ClusterIssuerSpecAcmeSolversSelectorPatchArgs"]],
    ):
        pulumi.set(self, "selector", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversSelectorPatchArgsDict(TypedDict):
        """
        Selector selects a set of DNSNames on the Certificate resource that
        should be solved using this challenge solver.
        If not specified, the solver will be treated as the 'default' solver
        with the lowest priority, i.e. if any other solver has a more specific
        match, it will be used instead.
        """

        dns_names: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        List of DNSNames that this solver will be used to solve.
        If specified and a match is found, a dnsNames selector will take
        precedence over a dnsZones selector.
        If multiple solvers match with the same dnsNames value, the solver
        with the most matching labels in matchLabels will be selected.
        If neither has more matches, the solver defined earlier in the list
        will be selected.
        """
        dns_zones: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        List of DNSZones that this solver will be used to solve.
        The most specific DNS zone match specified here will take precedence
        over other DNS zone matches, so a solver specifying sys.example.com
        will be selected over one specifying example.com for the domain
        www.sys.example.com.
        If multiple solvers match with the same dnsZones value, the solver
        with the most matching labels in matchLabels will be selected.
        If neither has more matches, the solver defined earlier in the list
        will be selected.
        """
        match_labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        A label selector that is used to refine the set of certificate's that
        this challenge solver will apply to.
        """

elif False:
    ClusterIssuerSpecAcmeSolversSelectorPatchArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversSelectorPatchArgs:
    def __init__(
        __self__,
        *,
        dns_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        dns_zones: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None
    ):
        """
        Selector selects a set of DNSNames on the Certificate resource that
        should be solved using this challenge solver.
        If not specified, the solver will be treated as the 'default' solver
        with the lowest priority, i.e. if any other solver has a more specific
        match, it will be used instead.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] dns_names: List of DNSNames that this solver will be used to solve.
               If specified and a match is found, a dnsNames selector will take
               precedence over a dnsZones selector.
               If multiple solvers match with the same dnsNames value, the solver
               with the most matching labels in matchLabels will be selected.
               If neither has more matches, the solver defined earlier in the list
               will be selected.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] dns_zones: List of DNSZones that this solver will be used to solve.
               The most specific DNS zone match specified here will take precedence
               over other DNS zone matches, so a solver specifying sys.example.com
               will be selected over one specifying example.com for the domain
               www.sys.example.com.
               If multiple solvers match with the same dnsZones value, the solver
               with the most matching labels in matchLabels will be selected.
               If neither has more matches, the solver defined earlier in the list
               will be selected.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] match_labels: A label selector that is used to refine the set of certificate's that
               this challenge solver will apply to.
        """
        if dns_names is not None:
            pulumi.set(__self__, "dns_names", dns_names)
        if dns_zones is not None:
            pulumi.set(__self__, "dns_zones", dns_zones)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="dnsNames")
    def dns_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of DNSNames that this solver will be used to solve.
        If specified and a match is found, a dnsNames selector will take
        precedence over a dnsZones selector.
        If multiple solvers match with the same dnsNames value, the solver
        with the most matching labels in matchLabels will be selected.
        If neither has more matches, the solver defined earlier in the list
        will be selected.
        """
        return pulumi.get(self, "dns_names")

    @dns_names.setter
    def dns_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "dns_names", value)

    @property
    @pulumi.getter(name="dnsZones")
    def dns_zones(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of DNSZones that this solver will be used to solve.
        The most specific DNS zone match specified here will take precedence
        over other DNS zone matches, so a solver specifying sys.example.com
        will be selected over one specifying example.com for the domain
        www.sys.example.com.
        If multiple solvers match with the same dnsZones value, the solver
        with the most matching labels in matchLabels will be selected.
        If neither has more matches, the solver defined earlier in the list
        will be selected.
        """
        return pulumi.get(self, "dns_zones")

    @dns_zones.setter
    def dns_zones(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "dns_zones", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A label selector that is used to refine the set of certificate's that
        this challenge solver will apply to.
        """
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(
        self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
    ):
        pulumi.set(self, "match_labels", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversSelectorArgsDict(TypedDict):
        """
        Selector selects a set of DNSNames on the Certificate resource that
        should be solved using this challenge solver.
        If not specified, the solver will be treated as the 'default' solver
        with the lowest priority, i.e. if any other solver has a more specific
        match, it will be used instead.
        """

        dns_names: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        List of DNSNames that this solver will be used to solve.
        If specified and a match is found, a dnsNames selector will take
        precedence over a dnsZones selector.
        If multiple solvers match with the same dnsNames value, the solver
        with the most matching labels in matchLabels will be selected.
        If neither has more matches, the solver defined earlier in the list
        will be selected.
        """
        dns_zones: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        List of DNSZones that this solver will be used to solve.
        The most specific DNS zone match specified here will take precedence
        over other DNS zone matches, so a solver specifying sys.example.com
        will be selected over one specifying example.com for the domain
        www.sys.example.com.
        If multiple solvers match with the same dnsZones value, the solver
        with the most matching labels in matchLabels will be selected.
        If neither has more matches, the solver defined earlier in the list
        will be selected.
        """
        match_labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        A label selector that is used to refine the set of certificate's that
        this challenge solver will apply to.
        """

elif False:
    ClusterIssuerSpecAcmeSolversSelectorArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversSelectorArgs:
    def __init__(
        __self__,
        *,
        dns_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        dns_zones: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None
    ):
        """
        Selector selects a set of DNSNames on the Certificate resource that
        should be solved using this challenge solver.
        If not specified, the solver will be treated as the 'default' solver
        with the lowest priority, i.e. if any other solver has a more specific
        match, it will be used instead.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] dns_names: List of DNSNames that this solver will be used to solve.
               If specified and a match is found, a dnsNames selector will take
               precedence over a dnsZones selector.
               If multiple solvers match with the same dnsNames value, the solver
               with the most matching labels in matchLabels will be selected.
               If neither has more matches, the solver defined earlier in the list
               will be selected.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] dns_zones: List of DNSZones that this solver will be used to solve.
               The most specific DNS zone match specified here will take precedence
               over other DNS zone matches, so a solver specifying sys.example.com
               will be selected over one specifying example.com for the domain
               www.sys.example.com.
               If multiple solvers match with the same dnsZones value, the solver
               with the most matching labels in matchLabels will be selected.
               If neither has more matches, the solver defined earlier in the list
               will be selected.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] match_labels: A label selector that is used to refine the set of certificate's that
               this challenge solver will apply to.
        """
        if dns_names is not None:
            pulumi.set(__self__, "dns_names", dns_names)
        if dns_zones is not None:
            pulumi.set(__self__, "dns_zones", dns_zones)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="dnsNames")
    def dns_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of DNSNames that this solver will be used to solve.
        If specified and a match is found, a dnsNames selector will take
        precedence over a dnsZones selector.
        If multiple solvers match with the same dnsNames value, the solver
        with the most matching labels in matchLabels will be selected.
        If neither has more matches, the solver defined earlier in the list
        will be selected.
        """
        return pulumi.get(self, "dns_names")

    @dns_names.setter
    def dns_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "dns_names", value)

    @property
    @pulumi.getter(name="dnsZones")
    def dns_zones(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of DNSZones that this solver will be used to solve.
        The most specific DNS zone match specified here will take precedence
        over other DNS zone matches, so a solver specifying sys.example.com
        will be selected over one specifying example.com for the domain
        www.sys.example.com.
        If multiple solvers match with the same dnsZones value, the solver
        with the most matching labels in matchLabels will be selected.
        If neither has more matches, the solver defined earlier in the list
        will be selected.
        """
        return pulumi.get(self, "dns_zones")

    @dns_zones.setter
    def dns_zones(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "dns_zones", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A label selector that is used to refine the set of certificate's that
        this challenge solver will apply to.
        """
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(
        self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
    ):
        pulumi.set(self, "match_labels", value)


if not MYPY:

    class ClusterIssuerSpecAcmeSolversArgsDict(TypedDict):
        """
        An ACMEChallengeSolver describes how to solve ACME challenges for the issuer it is part of.
        A selector may be provided to use different solving strategies for different DNS names.
        Only one of HTTP01 or DNS01 must be provided.
        """

        dns01: NotRequired[pulumi.Input["ClusterIssuerSpecAcmeSolversDns01ArgsDict"]]
        http01: NotRequired[pulumi.Input["ClusterIssuerSpecAcmeSolversHttp01ArgsDict"]]
        selector: NotRequired[
            pulumi.Input["ClusterIssuerSpecAcmeSolversSelectorArgsDict"]
        ]

elif False:
    ClusterIssuerSpecAcmeSolversArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversArgs:
    def __init__(
        __self__,
        *,
        dns01: Optional[pulumi.Input["ClusterIssuerSpecAcmeSolversDns01Args"]] = None,
        http01: Optional[pulumi.Input["ClusterIssuerSpecAcmeSolversHttp01Args"]] = None,
        selector: Optional[
            pulumi.Input["ClusterIssuerSpecAcmeSolversSelectorArgs"]
        ] = None
    ):
        """
        An ACMEChallengeSolver describes how to solve ACME challenges for the issuer it is part of.
        A selector may be provided to use different solving strategies for different DNS names.
        Only one of HTTP01 or DNS01 must be provided.
        """
        if dns01 is not None:
            pulumi.set(__self__, "dns01", dns01)
        if http01 is not None:
            pulumi.set(__self__, "http01", http01)
        if selector is not None:
            pulumi.set(__self__, "selector", selector)

    @property
    @pulumi.getter
    def dns01(self) -> Optional[pulumi.Input["ClusterIssuerSpecAcmeSolversDns01Args"]]:
        return pulumi.get(self, "dns01")

    @dns01.setter
    def dns01(
        self, value: Optional[pulumi.Input["ClusterIssuerSpecAcmeSolversDns01Args"]]
    ):
        pulumi.set(self, "dns01", value)

    @property
    @pulumi.getter
    def http01(
        self,
    ) -> Optional[pulumi.Input["ClusterIssuerSpecAcmeSolversHttp01Args"]]:
        return pulumi.get(self, "http01")

    @http01.setter
    def http01(
        self, value: Optional[pulumi.Input["ClusterIssuerSpecAcmeSolversHttp01Args"]]
    ):
        pulumi.set(self, "http01", value)

    @property
    @pulumi.getter
    def selector(
        self,
    ) -> Optional[pulumi.Input["ClusterIssuerSpecAcmeSolversSelectorArgs"]]:
        return pulumi.get(self, "selector")

    @selector.setter
    def selector(
        self, value: Optional[pulumi.Input["ClusterIssuerSpecAcmeSolversSelectorArgs"]]
    ):
        pulumi.set(self, "selector", value)


if not MYPY:

    class ClusterIssuerSpecAcmeArgsDict(TypedDict):
        """
        ACME configures this issuer to communicate with a RFC8555 (ACME) server
        to obtain signed x509 certificates.
        """

        ca_bundle: NotRequired[pulumi.Input[str]]
        """
        Base64-encoded bundle of PEM CAs which can be used to validate the certificate
        chain presented by the ACME server.
        Mutually exclusive with SkipTLSVerify; prefer using CABundle to prevent various
        kinds of security vulnerabilities.
        If CABundle and SkipTLSVerify are unset, the system certificate bundle inside
        the container is used to validate the TLS connection.
        """
        disable_account_key_generation: NotRequired[pulumi.Input[bool]]
        """
        Enables or disables generating a new ACME account key.
        If true, the Issuer resource will *not* request a new account but will expect
        the account key to be supplied via an existing secret.
        If false, the cert-manager system will generate a new ACME account key
        for the Issuer.
        Defaults to false.
        """
        email: NotRequired[pulumi.Input[str]]
        """
        Email is the email address to be associated with the ACME account.
        This field is optional, but it is strongly recommended to be set.
        It will be used to contact you in case of issues with your account or
        certificates, including expiry notification emails.
        This field may be updated after the account is initially registered.
        """
        enable_duration_feature: NotRequired[pulumi.Input[bool]]
        """
        Enables requesting a Not After date on certificates that matches the
        duration of the certificate. This is not supported by all ACME servers
        like Let's Encrypt. If set to true when the ACME server does not support
        it, it will create an error on the Order.
        Defaults to false.
        """
        external_account_binding: NotRequired[
            pulumi.Input["ClusterIssuerSpecAcmeExternalAccountBindingArgsDict"]
        ]
        preferred_chain: NotRequired[pulumi.Input[str]]
        """
        PreferredChain is the chain to use if the ACME server outputs multiple.
        PreferredChain is no guarantee that this one gets delivered by the ACME
        endpoint.
        For example, for Let's Encrypt's DST crosssign you would use:
        "DST Root CA X3" or "ISRG Root X1" for the newer Let's Encrypt root CA.
        This value picks the first certificate bundle in the combined set of
        ACME default and alternative chains that has a root-most certificate with
        this value as its issuer's commonname.
        """
        private_key_secret_ref: NotRequired[
            pulumi.Input["ClusterIssuerSpecAcmePrivateKeySecretRefArgsDict"]
        ]
        server: NotRequired[pulumi.Input[str]]
        """
        Server is the URL used to access the ACME server's 'directory' endpoint.
        For example, for Let's Encrypt's staging endpoint, you would use:
        "https://acme-staging-v02.api.letsencrypt.org/directory".
        Only ACME v2 endpoints (i.e. RFC 8555) are supported.
        """
        skip_tls_verify: NotRequired[pulumi.Input[bool]]
        """
        INSECURE: Enables or disables validation of the ACME server TLS certificate.
        If true, requests to the ACME server will not have the TLS certificate chain
        validated.
        Mutually exclusive with CABundle; prefer using CABundle to prevent various
        kinds of security vulnerabilities.
        Only enable this option in development environments.
        If CABundle and SkipTLSVerify are unset, the system certificate bundle inside
        the container is used to validate the TLS connection.
        Defaults to false.
        """
        solvers: NotRequired[
            pulumi.Input[Sequence[pulumi.Input["ClusterIssuerSpecAcmeSolversArgsDict"]]]
        ]
        """
        Solvers is a list of challenge solvers that will be used to solve
        ACME challenges for the matching domains.
        Solver configurations must be provided in order to obtain certificates
        from an ACME server.
        For more information, see: https://cert-manager.io/docs/configuration/acme/
        """

elif False:
    ClusterIssuerSpecAcmeArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class ClusterIssuerSpecAcmeArgs:
    def __init__(
        __self__,
        *,
        ca_bundle: Optional[pulumi.Input[str]] = None,
        disable_account_key_generation: Optional[pulumi.Input[bool]] = None,
        email: Optional[pulumi.Input[str]] = None,
        enable_duration_feature: Optional[pulumi.Input[bool]] = None,
        external_account_binding: Optional[
            pulumi.Input["ClusterIssuerSpecAcmeExternalAccountBindingArgs"]
        ] = None,
        preferred_chain: Optional[pulumi.Input[str]] = None,
        private_key_secret_ref: Optional[
            pulumi.Input["ClusterIssuerSpecAcmePrivateKeySecretRefArgs"]
        ] = None,
        server: Optional[pulumi.Input[str]] = None,
        skip_tls_verify: Optional[pulumi.Input[bool]] = None,
        solvers: Optional[
            pulumi.Input[Sequence[pulumi.Input["ClusterIssuerSpecAcmeSolversArgs"]]]
        ] = None
    ):
        """
        ACME configures this issuer to communicate with a RFC8555 (ACME) server
        to obtain signed x509 certificates.
        :param pulumi.Input[str] ca_bundle: Base64-encoded bundle of PEM CAs which can be used to validate the certificate
               chain presented by the ACME server.
               Mutually exclusive with SkipTLSVerify; prefer using CABundle to prevent various
               kinds of security vulnerabilities.
               If CABundle and SkipTLSVerify are unset, the system certificate bundle inside
               the container is used to validate the TLS connection.
        :param pulumi.Input[bool] disable_account_key_generation: Enables or disables generating a new ACME account key.
               If true, the Issuer resource will *not* request a new account but will expect
               the account key to be supplied via an existing secret.
               If false, the cert-manager system will generate a new ACME account key
               for the Issuer.
               Defaults to false.
        :param pulumi.Input[str] email: Email is the email address to be associated with the ACME account.
               This field is optional, but it is strongly recommended to be set.
               It will be used to contact you in case of issues with your account or
               certificates, including expiry notification emails.
               This field may be updated after the account is initially registered.
        :param pulumi.Input[bool] enable_duration_feature: Enables requesting a Not After date on certificates that matches the
               duration of the certificate. This is not supported by all ACME servers
               like Let's Encrypt. If set to true when the ACME server does not support
               it, it will create an error on the Order.
               Defaults to false.
        :param pulumi.Input[str] preferred_chain: PreferredChain is the chain to use if the ACME server outputs multiple.
               PreferredChain is no guarantee that this one gets delivered by the ACME
               endpoint.
               For example, for Let's Encrypt's DST crosssign you would use:
               "DST Root CA X3" or "ISRG Root X1" for the newer Let's Encrypt root CA.
               This value picks the first certificate bundle in the combined set of
               ACME default and alternative chains that has a root-most certificate with
               this value as its issuer's commonname.
        :param pulumi.Input[str] server: Server is the URL used to access the ACME server's 'directory' endpoint.
               For example, for Let's Encrypt's staging endpoint, you would use:
               "https://acme-staging-v02.api.letsencrypt.org/directory".
               Only ACME v2 endpoints (i.e. RFC 8555) are supported.
        :param pulumi.Input[bool] skip_tls_verify: INSECURE: Enables or disables validation of the ACME server TLS certificate.
               If true, requests to the ACME server will not have the TLS certificate chain
               validated.
               Mutually exclusive with CABundle; prefer using CABundle to prevent various
               kinds of security vulnerabilities.
               Only enable this option in development environments.
               If CABundle and SkipTLSVerify are unset, the system certificate bundle inside
               the container is used to validate the TLS connection.
               Defaults to false.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterIssuerSpecAcmeSolversArgs']]] solvers: Solvers is a list of challenge solvers that will be used to solve
               ACME challenges for the matching domains.
               Solver configurations must be provided in order to obtain certificates
               from an ACME server.
               For more information, see: https://cert-manager.io/docs/configuration/acme/
        """
        if ca_bundle is not None:
            pulumi.set(__self__, "ca_bundle", ca_bundle)
        if disable_account_key_generation is not None:
            pulumi.set(
                __self__,
                "disable_account_key_generation",
                disable_account_key_generation,
            )
        if email is not None:
            pulumi.set(__self__, "email", email)
        if enable_duration_feature is not None:
            pulumi.set(__self__, "enable_duration_feature", enable_duration_feature)
        if external_account_binding is not None:
            pulumi.set(__self__, "external_account_binding", external_account_binding)
        if preferred_chain is not None:
            pulumi.set(__self__, "preferred_chain", preferred_chain)
        if private_key_secret_ref is not None:
            pulumi.set(__self__, "private_key_secret_ref", private_key_secret_ref)
        if server is not None:
            pulumi.set(__self__, "server", server)
        if skip_tls_verify is not None:
            pulumi.set(__self__, "skip_tls_verify", skip_tls_verify)
        if solvers is not None:
            pulumi.set(__self__, "solvers", solvers)

    @property
    @pulumi.getter(name="caBundle")
    def ca_bundle(self) -> Optional[pulumi.Input[str]]:
        """
        Base64-encoded bundle of PEM CAs which can be used to validate the certificate
        chain presented by the ACME server.
        Mutually exclusive with SkipTLSVerify; prefer using CABundle to prevent various
        kinds of security vulnerabilities.
        If CABundle and SkipTLSVerify are unset, the system certificate bundle inside
        the container is used to validate the TLS connection.
        """
        return pulumi.get(self, "ca_bundle")

    @ca_bundle.setter
    def ca_bundle(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ca_bundle", value)

    @property
    @pulumi.getter(name="disableAccountKeyGeneration")
    def disable_account_key_generation(self) -> Optional[pulumi.Input[bool]]:
        """
        Enables or disables generating a new ACME account key.
        If true, the Issuer resource will *not* request a new account but will expect
        the account key to be supplied via an existing secret.
        If false, the cert-manager system will generate a new ACME account key
        for the Issuer.
        Defaults to false.
        """
        return pulumi.get(self, "disable_account_key_generation")

    @disable_account_key_generation.setter
    def disable_account_key_generation(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disable_account_key_generation", value)

    @property
    @pulumi.getter
    def email(self) -> Optional[pulumi.Input[str]]:
        """
        Email is the email address to be associated with the ACME account.
        This field is optional, but it is strongly recommended to be set.
        It will be used to contact you in case of issues with your account or
        certificates, including expiry notification emails.
        This field may be updated after the account is initially registered.
        """
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email", value)

    @property
    @pulumi.getter(name="enableDurationFeature")
    def enable_duration_feature(self) -> Optional[pulumi.Input[bool]]:
        """
        Enables requesting a Not After date on certificates that matches the
        duration of the certificate. This is not supported by all ACME servers
        like Let's Encrypt. If set to true when the ACME server does not support
        it, it will create an error on the Order.
        Defaults to false.
        """
        return pulumi.get(self, "enable_duration_feature")

    @enable_duration_feature.setter
    def enable_duration_feature(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_duration_feature", value)

    @property
    @pulumi.getter(name="externalAccountBinding")
    def external_account_binding(
        self,
    ) -> Optional[pulumi.Input["ClusterIssuerSpecAcmeExternalAccountBindingArgs"]]:
        return pulumi.get(self, "external_account_binding")

    @external_account_binding.setter
    def external_account_binding(
        self,
        value: Optional[
            pulumi.Input["ClusterIssuerSpecAcmeExternalAccountBindingArgs"]
        ],
    ):
        pulumi.set(self, "external_account_binding", value)

    @property
    @pulumi.getter(name="preferredChain")
    def preferred_chain(self) -> Optional[pulumi.Input[str]]:
        """
        PreferredChain is the chain to use if the ACME server outputs multiple.
        PreferredChain is no guarantee that this one gets delivered by the ACME
        endpoint.
        For example, for Let's Encrypt's DST crosssign you would use:
        "DST Root CA X3" or "ISRG Root X1" for the newer Let's Encrypt root CA.
        This value picks the first certificate bundle in the combined set of
        ACME default and alternative chains that has a root-most certificate with
        this value as its issuer's commonname.
        """
        return pulumi.get(self, "preferred_chain")

    @preferred_chain.setter
    def preferred_chain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "preferred_chain", value)

    @property
    @pulumi.getter(name="privateKeySecretRef")
    def private_key_secret_ref(
        self,
    ) -> Optional[pulumi.Input["ClusterIssuerSpecAcmePrivateKeySecretRefArgs"]]:
        return pulumi.get(self, "private_key_secret_ref")

    @private_key_secret_ref.setter
    def private_key_secret_ref(
        self,
        value: Optional[pulumi.Input["ClusterIssuerSpecAcmePrivateKeySecretRefArgs"]],
    ):
        pulumi.set(self, "private_key_secret_ref", value)

    @property
    @pulumi.getter
    def server(self) -> Optional[pulumi.Input[str]]:
        """
        Server is the URL used to access the ACME server's 'directory' endpoint.
        For example, for Let's Encrypt's staging endpoint, you would use:
        "https://acme-staging-v02.api.letsencrypt.org/directory".
        Only ACME v2 endpoints (i.e. RFC 8555) are supported.
        """
        return pulumi.get(self, "server")

    @server.setter
    def server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server", value)

    @property
    @pulumi.getter(name="skipTLSVerify")
    def skip_tls_verify(self) -> Optional[pulumi.Input[bool]]:
        """
        INSECURE: Enables or disables validation of the ACME server TLS certificate.
        If true, requests to the ACME server will not have the TLS certificate chain
        validated.
        Mutually exclusive with CABundle; prefer using CABundle to prevent various
        kinds of security vulnerabilities.
        Only enable this option in development environments.
        If CABundle and SkipTLSVerify are unset, the system certificate bundle inside
        the container is used to validate the TLS connection.
        Defaults to false.
        """
        return pulumi.get(self, "skip_tls_verify")

    @skip_tls_verify.setter
    def skip_tls_verify(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "skip_tls_verify", value)

    @property
    @pulumi.getter
    def solvers(
        self,
    ) -> Optional[
        pulumi.Input[Sequence[pulumi.Input["ClusterIssuerSpecAcmeSolversArgs"]]]
    ]:
        """
        Solvers is a list of challenge solvers that will be used to solve
        ACME challenges for the matching domains.
        Solver configurations must be provided in order to obtain certificates
        from an ACME server.
        For more information, see: https://cert-manager.io/docs/configuration/acme/
        """
        return pulumi.get(self, "solvers")

    @solvers.setter
    def solvers(
        self,
        value: Optional[
            pulumi.Input[Sequence[pulumi.Input["ClusterIssuerSpecAcmeSolversArgs"]]]
        ],
    ):
        pulumi.set(self, "solvers", value)


if not MYPY:

    class ClusterIssuerSpecCaPatchArgsDict(TypedDict):
        """
        CA configures this issuer to sign certificates using a signing CA keypair
        stored in a Secret resource.
        This is used to build internal PKIs that are managed by cert-manager.
        """

        crl_distribution_points: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        The CRL distribution points is an X.509 v3 certificate extension which identifies
        the location of the CRL from which the revocation of this certificate can be checked.
        If not set, certificates will be issued without distribution points set.
        """
        issuing_certificate_urls: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        IssuingCertificateURLs is a list of URLs which this issuer should embed into certificates
        it creates. See https://www.rfc-editor.org/rfc/rfc5280#section-4.2.2.1 for more details.
        As an example, such a URL might be "http://ca.domain.com/ca.crt".
        """
        ocsp_servers: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        The OCSP server list is an X.509 v3 extension that defines a list of
        URLs of OCSP responders. The OCSP responders can be queried for the
        revocation status of an issued certificate. If not set, the
        certificate will be issued with no OCSP servers set. For example, an
        OCSP server URL could be "http://ocsp.int-x3.letsencrypt.org".
        """
        secretName: NotRequired[pulumi.Input[str]]
        """
        SecretName is the name of the secret used to sign Certificates issued
        by this Issuer.
        """

elif False:
    ClusterIssuerSpecCaPatchArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class ClusterIssuerSpecCaPatchArgs:
    def __init__(
        __self__,
        *,
        crl_distribution_points: Optional[
            pulumi.Input[Sequence[pulumi.Input[str]]]
        ] = None,
        issuing_certificate_urls: Optional[
            pulumi.Input[Sequence[pulumi.Input[str]]]
        ] = None,
        ocsp_servers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        secretName: Optional[pulumi.Input[str]] = None
    ):
        """
        CA configures this issuer to sign certificates using a signing CA keypair
        stored in a Secret resource.
        This is used to build internal PKIs that are managed by cert-manager.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] crl_distribution_points: The CRL distribution points is an X.509 v3 certificate extension which identifies
               the location of the CRL from which the revocation of this certificate can be checked.
               If not set, certificates will be issued without distribution points set.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] issuing_certificate_urls: IssuingCertificateURLs is a list of URLs which this issuer should embed into certificates
               it creates. See https://www.rfc-editor.org/rfc/rfc5280#section-4.2.2.1 for more details.
               As an example, such a URL might be "http://ca.domain.com/ca.crt".
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ocsp_servers: The OCSP server list is an X.509 v3 extension that defines a list of
               URLs of OCSP responders. The OCSP responders can be queried for the
               revocation status of an issued certificate. If not set, the
               certificate will be issued with no OCSP servers set. For example, an
               OCSP server URL could be "http://ocsp.int-x3.letsencrypt.org".
        :param pulumi.Input[str] secretName: SecretName is the name of the secret used to sign Certificates issued
               by this Issuer.
        """
        if crl_distribution_points is not None:
            pulumi.set(__self__, "crl_distribution_points", crl_distribution_points)
        if issuing_certificate_urls is not None:
            pulumi.set(__self__, "issuing_certificate_urls", issuing_certificate_urls)
        if ocsp_servers is not None:
            pulumi.set(__self__, "ocsp_servers", ocsp_servers)
        if secretName is not None:
            pulumi.set(__self__, "secretName", secretName)

    @property
    @pulumi.getter(name="crlDistributionPoints")
    def crl_distribution_points(
        self,
    ) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The CRL distribution points is an X.509 v3 certificate extension which identifies
        the location of the CRL from which the revocation of this certificate can be checked.
        If not set, certificates will be issued without distribution points set.
        """
        return pulumi.get(self, "crl_distribution_points")

    @crl_distribution_points.setter
    def crl_distribution_points(
        self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]
    ):
        pulumi.set(self, "crl_distribution_points", value)

    @property
    @pulumi.getter(name="issuingCertificateURLs")
    def issuing_certificate_urls(
        self,
    ) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        IssuingCertificateURLs is a list of URLs which this issuer should embed into certificates
        it creates. See https://www.rfc-editor.org/rfc/rfc5280#section-4.2.2.1 for more details.
        As an example, such a URL might be "http://ca.domain.com/ca.crt".
        """
        return pulumi.get(self, "issuing_certificate_urls")

    @issuing_certificate_urls.setter
    def issuing_certificate_urls(
        self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]
    ):
        pulumi.set(self, "issuing_certificate_urls", value)

    @property
    @pulumi.getter(name="ocspServers")
    def ocsp_servers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The OCSP server list is an X.509 v3 extension that defines a list of
        URLs of OCSP responders. The OCSP responders can be queried for the
        revocation status of an issued certificate. If not set, the
        certificate will be issued with no OCSP servers set. For example, an
        OCSP server URL could be "http://ocsp.int-x3.letsencrypt.org".
        """
        return pulumi.get(self, "ocsp_servers")

    @ocsp_servers.setter
    def ocsp_servers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ocsp_servers", value)

    @property
    @pulumi.getter(name="secretName")
    def secretName(self) -> Optional[pulumi.Input[str]]:
        """
        SecretName is the name of the secret used to sign Certificates issued
        by this Issuer.
        """
        return pulumi.get(self, "secretName")

    @secretName.setter
    def secretName(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secretName", value)


if not MYPY:

    class ClusterIssuerSpecCaArgsDict(TypedDict):
        """
        CA configures this issuer to sign certificates using a signing CA keypair
        stored in a Secret resource.
        This is used to build internal PKIs that are managed by cert-manager.
        """

        crl_distribution_points: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        The CRL distribution points is an X.509 v3 certificate extension which identifies
        the location of the CRL from which the revocation of this certificate can be checked.
        If not set, certificates will be issued without distribution points set.
        """
        issuing_certificate_urls: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        IssuingCertificateURLs is a list of URLs which this issuer should embed into certificates
        it creates. See https://www.rfc-editor.org/rfc/rfc5280#section-4.2.2.1 for more details.
        As an example, such a URL might be "http://ca.domain.com/ca.crt".
        """
        ocsp_servers: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        The OCSP server list is an X.509 v3 extension that defines a list of
        URLs of OCSP responders. The OCSP responders can be queried for the
        revocation status of an issued certificate. If not set, the
        certificate will be issued with no OCSP servers set. For example, an
        OCSP server URL could be "http://ocsp.int-x3.letsencrypt.org".
        """
        secretName: NotRequired[pulumi.Input[str]]
        """
        SecretName is the name of the secret used to sign Certificates issued
        by this Issuer.
        """

elif False:
    ClusterIssuerSpecCaArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class ClusterIssuerSpecCaArgs:
    def __init__(
        __self__,
        *,
        crl_distribution_points: Optional[
            pulumi.Input[Sequence[pulumi.Input[str]]]
        ] = None,
        issuing_certificate_urls: Optional[
            pulumi.Input[Sequence[pulumi.Input[str]]]
        ] = None,
        ocsp_servers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        secretName: Optional[pulumi.Input[str]] = None
    ):
        """
        CA configures this issuer to sign certificates using a signing CA keypair
        stored in a Secret resource.
        This is used to build internal PKIs that are managed by cert-manager.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] crl_distribution_points: The CRL distribution points is an X.509 v3 certificate extension which identifies
               the location of the CRL from which the revocation of this certificate can be checked.
               If not set, certificates will be issued without distribution points set.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] issuing_certificate_urls: IssuingCertificateURLs is a list of URLs which this issuer should embed into certificates
               it creates. See https://www.rfc-editor.org/rfc/rfc5280#section-4.2.2.1 for more details.
               As an example, such a URL might be "http://ca.domain.com/ca.crt".
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ocsp_servers: The OCSP server list is an X.509 v3 extension that defines a list of
               URLs of OCSP responders. The OCSP responders can be queried for the
               revocation status of an issued certificate. If not set, the
               certificate will be issued with no OCSP servers set. For example, an
               OCSP server URL could be "http://ocsp.int-x3.letsencrypt.org".
        :param pulumi.Input[str] secretName: SecretName is the name of the secret used to sign Certificates issued
               by this Issuer.
        """
        if crl_distribution_points is not None:
            pulumi.set(__self__, "crl_distribution_points", crl_distribution_points)
        if issuing_certificate_urls is not None:
            pulumi.set(__self__, "issuing_certificate_urls", issuing_certificate_urls)
        if ocsp_servers is not None:
            pulumi.set(__self__, "ocsp_servers", ocsp_servers)
        if secretName is not None:
            pulumi.set(__self__, "secretName", secretName)

    @property
    @pulumi.getter(name="crlDistributionPoints")
    def crl_distribution_points(
        self,
    ) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The CRL distribution points is an X.509 v3 certificate extension which identifies
        the location of the CRL from which the revocation of this certificate can be checked.
        If not set, certificates will be issued without distribution points set.
        """
        return pulumi.get(self, "crl_distribution_points")

    @crl_distribution_points.setter
    def crl_distribution_points(
        self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]
    ):
        pulumi.set(self, "crl_distribution_points", value)

    @property
    @pulumi.getter(name="issuingCertificateURLs")
    def issuing_certificate_urls(
        self,
    ) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        IssuingCertificateURLs is a list of URLs which this issuer should embed into certificates
        it creates. See https://www.rfc-editor.org/rfc/rfc5280#section-4.2.2.1 for more details.
        As an example, such a URL might be "http://ca.domain.com/ca.crt".
        """
        return pulumi.get(self, "issuing_certificate_urls")

    @issuing_certificate_urls.setter
    def issuing_certificate_urls(
        self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]
    ):
        pulumi.set(self, "issuing_certificate_urls", value)

    @property
    @pulumi.getter(name="ocspServers")
    def ocsp_servers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The OCSP server list is an X.509 v3 extension that defines a list of
        URLs of OCSP responders. The OCSP responders can be queried for the
        revocation status of an issued certificate. If not set, the
        certificate will be issued with no OCSP servers set. For example, an
        OCSP server URL could be "http://ocsp.int-x3.letsencrypt.org".
        """
        return pulumi.get(self, "ocsp_servers")

    @ocsp_servers.setter
    def ocsp_servers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ocsp_servers", value)

    @property
    @pulumi.getter(name="secretName")
    def secretName(self) -> Optional[pulumi.Input[str]]:
        """
        SecretName is the name of the secret used to sign Certificates issued
        by this Issuer.
        """
        return pulumi.get(self, "secretName")

    @secretName.setter
    def secretName(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secretName", value)


if not MYPY:

    class ClusterIssuerSpecPatchArgsDict(TypedDict):
        """
        Desired state of the ClusterIssuer resource.
        """

        acme: NotRequired[pulumi.Input["ClusterIssuerSpecAcmePatchArgsDict"]]
        ca: NotRequired[pulumi.Input["ClusterIssuerSpecCaPatchArgsDict"]]
        self_signed: NotRequired[
            pulumi.Input["ClusterIssuerSpecSelfSignedPatchArgsDict"]
        ]
        vault: NotRequired[pulumi.Input["ClusterIssuerSpecVaultPatchArgsDict"]]
        venafi: NotRequired[pulumi.Input["ClusterIssuerSpecVenafiPatchArgsDict"]]

elif False:
    ClusterIssuerSpecPatchArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class ClusterIssuerSpecPatchArgs:
    def __init__(
        __self__,
        *,
        acme: Optional[pulumi.Input["ClusterIssuerSpecAcmePatchArgs"]] = None,
        ca: Optional[pulumi.Input["ClusterIssuerSpecCaPatchArgs"]] = None,
        self_signed: Optional[
            pulumi.Input["ClusterIssuerSpecSelfSignedPatchArgs"]
        ] = None,
        vault: Optional[pulumi.Input["ClusterIssuerSpecVaultPatchArgs"]] = None,
        venafi: Optional[pulumi.Input["ClusterIssuerSpecVenafiPatchArgs"]] = None
    ):
        """
        Desired state of the ClusterIssuer resource.
        """
        if acme is not None:
            pulumi.set(__self__, "acme", acme)
        if ca is not None:
            pulumi.set(__self__, "ca", ca)
        if self_signed is not None:
            pulumi.set(__self__, "self_signed", self_signed)
        if vault is not None:
            pulumi.set(__self__, "vault", vault)
        if venafi is not None:
            pulumi.set(__self__, "venafi", venafi)

    @property
    @pulumi.getter
    def acme(self) -> Optional[pulumi.Input["ClusterIssuerSpecAcmePatchArgs"]]:
        return pulumi.get(self, "acme")

    @acme.setter
    def acme(self, value: Optional[pulumi.Input["ClusterIssuerSpecAcmePatchArgs"]]):
        pulumi.set(self, "acme", value)

    @property
    @pulumi.getter
    def ca(self) -> Optional[pulumi.Input["ClusterIssuerSpecCaPatchArgs"]]:
        return pulumi.get(self, "ca")

    @ca.setter
    def ca(self, value: Optional[pulumi.Input["ClusterIssuerSpecCaPatchArgs"]]):
        pulumi.set(self, "ca", value)

    @property
    @pulumi.getter(name="selfSigned")
    def self_signed(
        self,
    ) -> Optional[pulumi.Input["ClusterIssuerSpecSelfSignedPatchArgs"]]:
        return pulumi.get(self, "self_signed")

    @self_signed.setter
    def self_signed(
        self, value: Optional[pulumi.Input["ClusterIssuerSpecSelfSignedPatchArgs"]]
    ):
        pulumi.set(self, "self_signed", value)

    @property
    @pulumi.getter
    def vault(self) -> Optional[pulumi.Input["ClusterIssuerSpecVaultPatchArgs"]]:
        return pulumi.get(self, "vault")

    @vault.setter
    def vault(self, value: Optional[pulumi.Input["ClusterIssuerSpecVaultPatchArgs"]]):
        pulumi.set(self, "vault", value)

    @property
    @pulumi.getter
    def venafi(self) -> Optional[pulumi.Input["ClusterIssuerSpecVenafiPatchArgs"]]:
        return pulumi.get(self, "venafi")

    @venafi.setter
    def venafi(self, value: Optional[pulumi.Input["ClusterIssuerSpecVenafiPatchArgs"]]):
        pulumi.set(self, "venafi", value)


if not MYPY:

    class ClusterIssuerSpecSelfSignedPatchArgsDict(TypedDict):
        """
        SelfSigned configures this issuer to 'self sign' certificates using the
        private key used to create the CertificateRequest object.
        """

        crl_distribution_points: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        The CRL distribution points is an X.509 v3 certificate extension which identifies
        the location of the CRL from which the revocation of this certificate can be checked.
        If not set certificate will be issued without CDP. Values are strings.
        """

elif False:
    ClusterIssuerSpecSelfSignedPatchArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class ClusterIssuerSpecSelfSignedPatchArgs:
    def __init__(
        __self__,
        *,
        crl_distribution_points: Optional[
            pulumi.Input[Sequence[pulumi.Input[str]]]
        ] = None
    ):
        """
        SelfSigned configures this issuer to 'self sign' certificates using the
        private key used to create the CertificateRequest object.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] crl_distribution_points: The CRL distribution points is an X.509 v3 certificate extension which identifies
               the location of the CRL from which the revocation of this certificate can be checked.
               If not set certificate will be issued without CDP. Values are strings.
        """
        if crl_distribution_points is not None:
            pulumi.set(__self__, "crl_distribution_points", crl_distribution_points)

    @property
    @pulumi.getter(name="crlDistributionPoints")
    def crl_distribution_points(
        self,
    ) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The CRL distribution points is an X.509 v3 certificate extension which identifies
        the location of the CRL from which the revocation of this certificate can be checked.
        If not set certificate will be issued without CDP. Values are strings.
        """
        return pulumi.get(self, "crl_distribution_points")

    @crl_distribution_points.setter
    def crl_distribution_points(
        self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]
    ):
        pulumi.set(self, "crl_distribution_points", value)


if not MYPY:

    class ClusterIssuerSpecSelfSignedArgsDict(TypedDict):
        """
        SelfSigned configures this issuer to 'self sign' certificates using the
        private key used to create the CertificateRequest object.
        """

        crl_distribution_points: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        The CRL distribution points is an X.509 v3 certificate extension which identifies
        the location of the CRL from which the revocation of this certificate can be checked.
        If not set certificate will be issued without CDP. Values are strings.
        """

elif False:
    ClusterIssuerSpecSelfSignedArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class ClusterIssuerSpecSelfSignedArgs:
    def __init__(
        __self__,
        *,
        crl_distribution_points: Optional[
            pulumi.Input[Sequence[pulumi.Input[str]]]
        ] = None
    ):
        """
        SelfSigned configures this issuer to 'self sign' certificates using the
        private key used to create the CertificateRequest object.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] crl_distribution_points: The CRL distribution points is an X.509 v3 certificate extension which identifies
               the location of the CRL from which the revocation of this certificate can be checked.
               If not set certificate will be issued without CDP. Values are strings.
        """
        if crl_distribution_points is not None:
            pulumi.set(__self__, "crl_distribution_points", crl_distribution_points)

    @property
    @pulumi.getter(name="crlDistributionPoints")
    def crl_distribution_points(
        self,
    ) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The CRL distribution points is an X.509 v3 certificate extension which identifies
        the location of the CRL from which the revocation of this certificate can be checked.
        If not set certificate will be issued without CDP. Values are strings.
        """
        return pulumi.get(self, "crl_distribution_points")

    @crl_distribution_points.setter
    def crl_distribution_points(
        self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]
    ):
        pulumi.set(self, "crl_distribution_points", value)


if not MYPY:

    class ClusterIssuerSpecVaultAuthAppRolePatchArgsDict(TypedDict):
        """
        AppRole authenticates with Vault using the App Role auth mechanism,
        with the role and secret stored in a Kubernetes Secret resource.
        """

        path: NotRequired[pulumi.Input[str]]
        """
        Path where the App Role authentication backend is mounted in Vault, e.g:
        "approle"
        """
        role_id: NotRequired[pulumi.Input[str]]
        """
        RoleID configured in the App Role authentication backend when setting
        up the authentication backend in Vault.
        """
        secret_ref: NotRequired[
            pulumi.Input["ClusterIssuerSpecVaultAuthAppRoleSecretRefPatchArgsDict"]
        ]

elif False:
    ClusterIssuerSpecVaultAuthAppRolePatchArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class ClusterIssuerSpecVaultAuthAppRolePatchArgs:
    def __init__(
        __self__,
        *,
        path: Optional[pulumi.Input[str]] = None,
        role_id: Optional[pulumi.Input[str]] = None,
        secret_ref: Optional[
            pulumi.Input["ClusterIssuerSpecVaultAuthAppRoleSecretRefPatchArgs"]
        ] = None
    ):
        """
        AppRole authenticates with Vault using the App Role auth mechanism,
        with the role and secret stored in a Kubernetes Secret resource.
        :param pulumi.Input[str] path: Path where the App Role authentication backend is mounted in Vault, e.g:
               "approle"
        :param pulumi.Input[str] role_id: RoleID configured in the App Role authentication backend when setting
               up the authentication backend in Vault.
        """
        if path is not None:
            pulumi.set(__self__, "path", path)
        if role_id is not None:
            pulumi.set(__self__, "role_id", role_id)
        if secret_ref is not None:
            pulumi.set(__self__, "secret_ref", secret_ref)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
        Path where the App Role authentication backend is mounted in Vault, e.g:
        "approle"
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter(name="roleId")
    def role_id(self) -> Optional[pulumi.Input[str]]:
        """
        RoleID configured in the App Role authentication backend when setting
        up the authentication backend in Vault.
        """
        return pulumi.get(self, "role_id")

    @role_id.setter
    def role_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role_id", value)

    @property
    @pulumi.getter(name="secretRef")
    def secret_ref(
        self,
    ) -> Optional[pulumi.Input["ClusterIssuerSpecVaultAuthAppRoleSecretRefPatchArgs"]]:
        return pulumi.get(self, "secret_ref")

    @secret_ref.setter
    def secret_ref(
        self,
        value: Optional[
            pulumi.Input["ClusterIssuerSpecVaultAuthAppRoleSecretRefPatchArgs"]
        ],
    ):
        pulumi.set(self, "secret_ref", value)


if not MYPY:

    class ClusterIssuerSpecVaultAuthAppRoleSecretRefPatchArgsDict(TypedDict):
        """
        Reference to a key in a Secret that contains the App Role secret used
        to authenticate with Vault.
        The `key` field must be specified and denotes which entry within the Secret
        resource is used as the app role secret.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """

elif False:
    ClusterIssuerSpecVaultAuthAppRoleSecretRefPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecVaultAuthAppRoleSecretRefPatchArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        name: Optional[pulumi.Input[str]] = None
    ):
        """
        Reference to a key in a Secret that contains the App Role secret used
        to authenticate with Vault.
        The `key` field must be specified and denotes which entry within the Secret
        resource is used as the app role secret.
        :param pulumi.Input[str] key: The key of the entry in the Secret resource's `data` field to be used.
               Some instances of this field may be defaulted, in others it may be
               required.
        :param pulumi.Input[str] name: Name of the resource being referred to.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:

    class ClusterIssuerSpecVaultAuthAppRoleSecretRefArgsDict(TypedDict):
        """
        Reference to a key in a Secret that contains the App Role secret used
        to authenticate with Vault.
        The `key` field must be specified and denotes which entry within the Secret
        resource is used as the app role secret.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """

elif False:
    ClusterIssuerSpecVaultAuthAppRoleSecretRefArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class ClusterIssuerSpecVaultAuthAppRoleSecretRefArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        name: Optional[pulumi.Input[str]] = None
    ):
        """
        Reference to a key in a Secret that contains the App Role secret used
        to authenticate with Vault.
        The `key` field must be specified and denotes which entry within the Secret
        resource is used as the app role secret.
        :param pulumi.Input[str] key: The key of the entry in the Secret resource's `data` field to be used.
               Some instances of this field may be defaulted, in others it may be
               required.
        :param pulumi.Input[str] name: Name of the resource being referred to.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:

    class ClusterIssuerSpecVaultAuthAppRoleArgsDict(TypedDict):
        """
        AppRole authenticates with Vault using the App Role auth mechanism,
        with the role and secret stored in a Kubernetes Secret resource.
        """

        path: NotRequired[pulumi.Input[str]]
        """
        Path where the App Role authentication backend is mounted in Vault, e.g:
        "approle"
        """
        role_id: NotRequired[pulumi.Input[str]]
        """
        RoleID configured in the App Role authentication backend when setting
        up the authentication backend in Vault.
        """
        secret_ref: NotRequired[
            pulumi.Input["ClusterIssuerSpecVaultAuthAppRoleSecretRefArgsDict"]
        ]

elif False:
    ClusterIssuerSpecVaultAuthAppRoleArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class ClusterIssuerSpecVaultAuthAppRoleArgs:
    def __init__(
        __self__,
        *,
        path: Optional[pulumi.Input[str]] = None,
        role_id: Optional[pulumi.Input[str]] = None,
        secret_ref: Optional[
            pulumi.Input["ClusterIssuerSpecVaultAuthAppRoleSecretRefArgs"]
        ] = None
    ):
        """
        AppRole authenticates with Vault using the App Role auth mechanism,
        with the role and secret stored in a Kubernetes Secret resource.
        :param pulumi.Input[str] path: Path where the App Role authentication backend is mounted in Vault, e.g:
               "approle"
        :param pulumi.Input[str] role_id: RoleID configured in the App Role authentication backend when setting
               up the authentication backend in Vault.
        """
        if path is not None:
            pulumi.set(__self__, "path", path)
        if role_id is not None:
            pulumi.set(__self__, "role_id", role_id)
        if secret_ref is not None:
            pulumi.set(__self__, "secret_ref", secret_ref)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
        Path where the App Role authentication backend is mounted in Vault, e.g:
        "approle"
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter(name="roleId")
    def role_id(self) -> Optional[pulumi.Input[str]]:
        """
        RoleID configured in the App Role authentication backend when setting
        up the authentication backend in Vault.
        """
        return pulumi.get(self, "role_id")

    @role_id.setter
    def role_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role_id", value)

    @property
    @pulumi.getter(name="secretRef")
    def secret_ref(
        self,
    ) -> Optional[pulumi.Input["ClusterIssuerSpecVaultAuthAppRoleSecretRefArgs"]]:
        return pulumi.get(self, "secret_ref")

    @secret_ref.setter
    def secret_ref(
        self,
        value: Optional[pulumi.Input["ClusterIssuerSpecVaultAuthAppRoleSecretRefArgs"]],
    ):
        pulumi.set(self, "secret_ref", value)


if not MYPY:

    class ClusterIssuerSpecVaultAuthClientCertificatePatchArgsDict(TypedDict):
        """
        ClientCertificate authenticates with Vault by presenting a client
        certificate during the request's TLS handshake.
        Works only when using HTTPS protocol.
        """

        mount_path: NotRequired[pulumi.Input[str]]
        """
        The Vault mountPath here is the mount path to use when authenticating with
        Vault. For example, setting a value to `/v1/auth/foo`, will use the path
        `/v1/auth/foo/login` to authenticate with Vault. If unspecified, the
        default value "/v1/auth/cert" will be used.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the certificate role to authenticate against.
        If not set, matching any certificate role, if available.
        """
        secretName: NotRequired[pulumi.Input[str]]
        """
        Reference to Kubernetes Secret of type "kubernetes.io/tls" (hence containing
        tls.crt and tls.key) used to authenticate to Vault using TLS client
        authentication.
        """

elif False:
    ClusterIssuerSpecVaultAuthClientCertificatePatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecVaultAuthClientCertificatePatchArgs:
    def __init__(
        __self__,
        *,
        mount_path: Optional[pulumi.Input[str]] = None,
        name: Optional[pulumi.Input[str]] = None,
        secretName: Optional[pulumi.Input[str]] = None
    ):
        """
        ClientCertificate authenticates with Vault by presenting a client
        certificate during the request's TLS handshake.
        Works only when using HTTPS protocol.
        :param pulumi.Input[str] mount_path: The Vault mountPath here is the mount path to use when authenticating with
               Vault. For example, setting a value to `/v1/auth/foo`, will use the path
               `/v1/auth/foo/login` to authenticate with Vault. If unspecified, the
               default value "/v1/auth/cert" will be used.
        :param pulumi.Input[str] name: Name of the certificate role to authenticate against.
               If not set, matching any certificate role, if available.
        :param pulumi.Input[str] secretName: Reference to Kubernetes Secret of type "kubernetes.io/tls" (hence containing
               tls.crt and tls.key) used to authenticate to Vault using TLS client
               authentication.
        """
        if mount_path is not None:
            pulumi.set(__self__, "mount_path", mount_path)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if secretName is not None:
            pulumi.set(__self__, "secretName", secretName)

    @property
    @pulumi.getter(name="mountPath")
    def mount_path(self) -> Optional[pulumi.Input[str]]:
        """
        The Vault mountPath here is the mount path to use when authenticating with
        Vault. For example, setting a value to `/v1/auth/foo`, will use the path
        `/v1/auth/foo/login` to authenticate with Vault. If unspecified, the
        default value "/v1/auth/cert" will be used.
        """
        return pulumi.get(self, "mount_path")

    @mount_path.setter
    def mount_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mount_path", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the certificate role to authenticate against.
        If not set, matching any certificate role, if available.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="secretName")
    def secretName(self) -> Optional[pulumi.Input[str]]:
        """
        Reference to Kubernetes Secret of type "kubernetes.io/tls" (hence containing
        tls.crt and tls.key) used to authenticate to Vault using TLS client
        authentication.
        """
        return pulumi.get(self, "secretName")

    @secretName.setter
    def secretName(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secretName", value)


if not MYPY:

    class ClusterIssuerSpecVaultAuthClientCertificateArgsDict(TypedDict):
        """
        ClientCertificate authenticates with Vault by presenting a client
        certificate during the request's TLS handshake.
        Works only when using HTTPS protocol.
        """

        mount_path: NotRequired[pulumi.Input[str]]
        """
        The Vault mountPath here is the mount path to use when authenticating with
        Vault. For example, setting a value to `/v1/auth/foo`, will use the path
        `/v1/auth/foo/login` to authenticate with Vault. If unspecified, the
        default value "/v1/auth/cert" will be used.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the certificate role to authenticate against.
        If not set, matching any certificate role, if available.
        """
        secretName: NotRequired[pulumi.Input[str]]
        """
        Reference to Kubernetes Secret of type "kubernetes.io/tls" (hence containing
        tls.crt and tls.key) used to authenticate to Vault using TLS client
        authentication.
        """

elif False:
    ClusterIssuerSpecVaultAuthClientCertificateArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class ClusterIssuerSpecVaultAuthClientCertificateArgs:
    def __init__(
        __self__,
        *,
        mount_path: Optional[pulumi.Input[str]] = None,
        name: Optional[pulumi.Input[str]] = None,
        secretName: Optional[pulumi.Input[str]] = None
    ):
        """
        ClientCertificate authenticates with Vault by presenting a client
        certificate during the request's TLS handshake.
        Works only when using HTTPS protocol.
        :param pulumi.Input[str] mount_path: The Vault mountPath here is the mount path to use when authenticating with
               Vault. For example, setting a value to `/v1/auth/foo`, will use the path
               `/v1/auth/foo/login` to authenticate with Vault. If unspecified, the
               default value "/v1/auth/cert" will be used.
        :param pulumi.Input[str] name: Name of the certificate role to authenticate against.
               If not set, matching any certificate role, if available.
        :param pulumi.Input[str] secretName: Reference to Kubernetes Secret of type "kubernetes.io/tls" (hence containing
               tls.crt and tls.key) used to authenticate to Vault using TLS client
               authentication.
        """
        if mount_path is not None:
            pulumi.set(__self__, "mount_path", mount_path)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if secretName is not None:
            pulumi.set(__self__, "secretName", secretName)

    @property
    @pulumi.getter(name="mountPath")
    def mount_path(self) -> Optional[pulumi.Input[str]]:
        """
        The Vault mountPath here is the mount path to use when authenticating with
        Vault. For example, setting a value to `/v1/auth/foo`, will use the path
        `/v1/auth/foo/login` to authenticate with Vault. If unspecified, the
        default value "/v1/auth/cert" will be used.
        """
        return pulumi.get(self, "mount_path")

    @mount_path.setter
    def mount_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mount_path", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the certificate role to authenticate against.
        If not set, matching any certificate role, if available.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="secretName")
    def secretName(self) -> Optional[pulumi.Input[str]]:
        """
        Reference to Kubernetes Secret of type "kubernetes.io/tls" (hence containing
        tls.crt and tls.key) used to authenticate to Vault using TLS client
        authentication.
        """
        return pulumi.get(self, "secretName")

    @secretName.setter
    def secretName(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secretName", value)


if not MYPY:

    class ClusterIssuerSpecVaultAuthKubernetesPatchArgsDict(TypedDict):
        """
        Kubernetes authenticates with Vault by passing the ServiceAccount
        token stored in the named Secret resource to the Vault server.
        """

        mount_path: NotRequired[pulumi.Input[str]]
        """
        The Vault mountPath here is the mount path to use when authenticating with
        Vault. For example, setting a value to `/v1/auth/foo`, will use the path
        `/v1/auth/foo/login` to authenticate with Vault. If unspecified, the
        default value "/v1/auth/kubernetes" will be used.
        """
        role: NotRequired[pulumi.Input[str]]
        """
        A required field containing the Vault Role to assume. A Role binds a
        Kubernetes ServiceAccount with a set of Vault policies.
        """
        secret_ref: NotRequired[
            pulumi.Input["ClusterIssuerSpecVaultAuthKubernetesSecretRefPatchArgsDict"]
        ]
        service_account_ref: NotRequired[
            pulumi.Input[
                "ClusterIssuerSpecVaultAuthKubernetesServiceAccountRefPatchArgsDict"
            ]
        ]

elif False:
    ClusterIssuerSpecVaultAuthKubernetesPatchArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class ClusterIssuerSpecVaultAuthKubernetesPatchArgs:
    def __init__(
        __self__,
        *,
        mount_path: Optional[pulumi.Input[str]] = None,
        role: Optional[pulumi.Input[str]] = None,
        secret_ref: Optional[
            pulumi.Input["ClusterIssuerSpecVaultAuthKubernetesSecretRefPatchArgs"]
        ] = None,
        service_account_ref: Optional[
            pulumi.Input[
                "ClusterIssuerSpecVaultAuthKubernetesServiceAccountRefPatchArgs"
            ]
        ] = None
    ):
        """
        Kubernetes authenticates with Vault by passing the ServiceAccount
        token stored in the named Secret resource to the Vault server.
        :param pulumi.Input[str] mount_path: The Vault mountPath here is the mount path to use when authenticating with
               Vault. For example, setting a value to `/v1/auth/foo`, will use the path
               `/v1/auth/foo/login` to authenticate with Vault. If unspecified, the
               default value "/v1/auth/kubernetes" will be used.
        :param pulumi.Input[str] role: A required field containing the Vault Role to assume. A Role binds a
               Kubernetes ServiceAccount with a set of Vault policies.
        """
        if mount_path is not None:
            pulumi.set(__self__, "mount_path", mount_path)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if secret_ref is not None:
            pulumi.set(__self__, "secret_ref", secret_ref)
        if service_account_ref is not None:
            pulumi.set(__self__, "service_account_ref", service_account_ref)

    @property
    @pulumi.getter(name="mountPath")
    def mount_path(self) -> Optional[pulumi.Input[str]]:
        """
        The Vault mountPath here is the mount path to use when authenticating with
        Vault. For example, setting a value to `/v1/auth/foo`, will use the path
        `/v1/auth/foo/login` to authenticate with Vault. If unspecified, the
        default value "/v1/auth/kubernetes" will be used.
        """
        return pulumi.get(self, "mount_path")

    @mount_path.setter
    def mount_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mount_path", value)

    @property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input[str]]:
        """
        A required field containing the Vault Role to assume. A Role binds a
        Kubernetes ServiceAccount with a set of Vault policies.
        """
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role", value)

    @property
    @pulumi.getter(name="secretRef")
    def secret_ref(
        self,
    ) -> Optional[
        pulumi.Input["ClusterIssuerSpecVaultAuthKubernetesSecretRefPatchArgs"]
    ]:
        return pulumi.get(self, "secret_ref")

    @secret_ref.setter
    def secret_ref(
        self,
        value: Optional[
            pulumi.Input["ClusterIssuerSpecVaultAuthKubernetesSecretRefPatchArgs"]
        ],
    ):
        pulumi.set(self, "secret_ref", value)

    @property
    @pulumi.getter(name="serviceAccountRef")
    def service_account_ref(
        self,
    ) -> Optional[
        pulumi.Input["ClusterIssuerSpecVaultAuthKubernetesServiceAccountRefPatchArgs"]
    ]:
        return pulumi.get(self, "service_account_ref")

    @service_account_ref.setter
    def service_account_ref(
        self,
        value: Optional[
            pulumi.Input[
                "ClusterIssuerSpecVaultAuthKubernetesServiceAccountRefPatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "service_account_ref", value)


if not MYPY:

    class ClusterIssuerSpecVaultAuthKubernetesSecretRefPatchArgsDict(TypedDict):
        """
        The required Secret field containing a Kubernetes ServiceAccount JWT used
        for authenticating with Vault. Use of 'ambient credentials' is not
        supported.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """

elif False:
    ClusterIssuerSpecVaultAuthKubernetesSecretRefPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecVaultAuthKubernetesSecretRefPatchArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        name: Optional[pulumi.Input[str]] = None
    ):
        """
        The required Secret field containing a Kubernetes ServiceAccount JWT used
        for authenticating with Vault. Use of 'ambient credentials' is not
        supported.
        :param pulumi.Input[str] key: The key of the entry in the Secret resource's `data` field to be used.
               Some instances of this field may be defaulted, in others it may be
               required.
        :param pulumi.Input[str] name: Name of the resource being referred to.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:

    class ClusterIssuerSpecVaultAuthKubernetesSecretRefArgsDict(TypedDict):
        """
        The required Secret field containing a Kubernetes ServiceAccount JWT used
        for authenticating with Vault. Use of 'ambient credentials' is not
        supported.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """

elif False:
    ClusterIssuerSpecVaultAuthKubernetesSecretRefArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class ClusterIssuerSpecVaultAuthKubernetesSecretRefArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        name: Optional[pulumi.Input[str]] = None
    ):
        """
        The required Secret field containing a Kubernetes ServiceAccount JWT used
        for authenticating with Vault. Use of 'ambient credentials' is not
        supported.
        :param pulumi.Input[str] key: The key of the entry in the Secret resource's `data` field to be used.
               Some instances of this field may be defaulted, in others it may be
               required.
        :param pulumi.Input[str] name: Name of the resource being referred to.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:

    class ClusterIssuerSpecVaultAuthKubernetesServiceAccountRefPatchArgsDict(TypedDict):
        """
        A reference to a service account that will be used to request a bound
        token (also known as "projected token"). Compared to using "secretRef",
        using this field means that you don't rely on statically bound tokens. To
        use this field, you must configure an RBAC rule to let cert-manager
        request a token.
        """

        audiences: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        TokenAudiences is an optional list of extra audiences to include in the token passed to Vault. The default token
        consisting of the issuer's namespace and name is always included.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the ServiceAccount used to request a token.
        """

elif False:
    ClusterIssuerSpecVaultAuthKubernetesServiceAccountRefPatchArgsDict: TypeAlias = (
        Mapping[str, Any]
    )


@pulumi.input_type
class ClusterIssuerSpecVaultAuthKubernetesServiceAccountRefPatchArgs:
    def __init__(
        __self__,
        *,
        audiences: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        name: Optional[pulumi.Input[str]] = None
    ):
        """
        A reference to a service account that will be used to request a bound
        token (also known as "projected token"). Compared to using "secretRef",
        using this field means that you don't rely on statically bound tokens. To
        use this field, you must configure an RBAC rule to let cert-manager
        request a token.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] audiences: TokenAudiences is an optional list of extra audiences to include in the token passed to Vault. The default token
               consisting of the issuer's namespace and name is always included.
        :param pulumi.Input[str] name: Name of the ServiceAccount used to request a token.
        """
        if audiences is not None:
            pulumi.set(__self__, "audiences", audiences)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def audiences(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        TokenAudiences is an optional list of extra audiences to include in the token passed to Vault. The default token
        consisting of the issuer's namespace and name is always included.
        """
        return pulumi.get(self, "audiences")

    @audiences.setter
    def audiences(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "audiences", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the ServiceAccount used to request a token.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:

    class ClusterIssuerSpecVaultAuthKubernetesServiceAccountRefArgsDict(TypedDict):
        """
        A reference to a service account that will be used to request a bound
        token (also known as "projected token"). Compared to using "secretRef",
        using this field means that you don't rely on statically bound tokens. To
        use this field, you must configure an RBAC rule to let cert-manager
        request a token.
        """

        audiences: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        TokenAudiences is an optional list of extra audiences to include in the token passed to Vault. The default token
        consisting of the issuer's namespace and name is always included.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the ServiceAccount used to request a token.
        """

elif False:
    ClusterIssuerSpecVaultAuthKubernetesServiceAccountRefArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecVaultAuthKubernetesServiceAccountRefArgs:
    def __init__(
        __self__,
        *,
        audiences: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        name: Optional[pulumi.Input[str]] = None
    ):
        """
        A reference to a service account that will be used to request a bound
        token (also known as "projected token"). Compared to using "secretRef",
        using this field means that you don't rely on statically bound tokens. To
        use this field, you must configure an RBAC rule to let cert-manager
        request a token.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] audiences: TokenAudiences is an optional list of extra audiences to include in the token passed to Vault. The default token
               consisting of the issuer's namespace and name is always included.
        :param pulumi.Input[str] name: Name of the ServiceAccount used to request a token.
        """
        if audiences is not None:
            pulumi.set(__self__, "audiences", audiences)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def audiences(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        TokenAudiences is an optional list of extra audiences to include in the token passed to Vault. The default token
        consisting of the issuer's namespace and name is always included.
        """
        return pulumi.get(self, "audiences")

    @audiences.setter
    def audiences(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "audiences", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the ServiceAccount used to request a token.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:

    class ClusterIssuerSpecVaultAuthKubernetesArgsDict(TypedDict):
        """
        Kubernetes authenticates with Vault by passing the ServiceAccount
        token stored in the named Secret resource to the Vault server.
        """

        mount_path: NotRequired[pulumi.Input[str]]
        """
        The Vault mountPath here is the mount path to use when authenticating with
        Vault. For example, setting a value to `/v1/auth/foo`, will use the path
        `/v1/auth/foo/login` to authenticate with Vault. If unspecified, the
        default value "/v1/auth/kubernetes" will be used.
        """
        role: NotRequired[pulumi.Input[str]]
        """
        A required field containing the Vault Role to assume. A Role binds a
        Kubernetes ServiceAccount with a set of Vault policies.
        """
        secret_ref: NotRequired[
            pulumi.Input["ClusterIssuerSpecVaultAuthKubernetesSecretRefArgsDict"]
        ]
        service_account_ref: NotRequired[
            pulumi.Input[
                "ClusterIssuerSpecVaultAuthKubernetesServiceAccountRefArgsDict"
            ]
        ]

elif False:
    ClusterIssuerSpecVaultAuthKubernetesArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class ClusterIssuerSpecVaultAuthKubernetesArgs:
    def __init__(
        __self__,
        *,
        mount_path: Optional[pulumi.Input[str]] = None,
        role: Optional[pulumi.Input[str]] = None,
        secret_ref: Optional[
            pulumi.Input["ClusterIssuerSpecVaultAuthKubernetesSecretRefArgs"]
        ] = None,
        service_account_ref: Optional[
            pulumi.Input["ClusterIssuerSpecVaultAuthKubernetesServiceAccountRefArgs"]
        ] = None
    ):
        """
        Kubernetes authenticates with Vault by passing the ServiceAccount
        token stored in the named Secret resource to the Vault server.
        :param pulumi.Input[str] mount_path: The Vault mountPath here is the mount path to use when authenticating with
               Vault. For example, setting a value to `/v1/auth/foo`, will use the path
               `/v1/auth/foo/login` to authenticate with Vault. If unspecified, the
               default value "/v1/auth/kubernetes" will be used.
        :param pulumi.Input[str] role: A required field containing the Vault Role to assume. A Role binds a
               Kubernetes ServiceAccount with a set of Vault policies.
        """
        if mount_path is not None:
            pulumi.set(__self__, "mount_path", mount_path)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if secret_ref is not None:
            pulumi.set(__self__, "secret_ref", secret_ref)
        if service_account_ref is not None:
            pulumi.set(__self__, "service_account_ref", service_account_ref)

    @property
    @pulumi.getter(name="mountPath")
    def mount_path(self) -> Optional[pulumi.Input[str]]:
        """
        The Vault mountPath here is the mount path to use when authenticating with
        Vault. For example, setting a value to `/v1/auth/foo`, will use the path
        `/v1/auth/foo/login` to authenticate with Vault. If unspecified, the
        default value "/v1/auth/kubernetes" will be used.
        """
        return pulumi.get(self, "mount_path")

    @mount_path.setter
    def mount_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mount_path", value)

    @property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input[str]]:
        """
        A required field containing the Vault Role to assume. A Role binds a
        Kubernetes ServiceAccount with a set of Vault policies.
        """
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role", value)

    @property
    @pulumi.getter(name="secretRef")
    def secret_ref(
        self,
    ) -> Optional[pulumi.Input["ClusterIssuerSpecVaultAuthKubernetesSecretRefArgs"]]:
        return pulumi.get(self, "secret_ref")

    @secret_ref.setter
    def secret_ref(
        self,
        value: Optional[
            pulumi.Input["ClusterIssuerSpecVaultAuthKubernetesSecretRefArgs"]
        ],
    ):
        pulumi.set(self, "secret_ref", value)

    @property
    @pulumi.getter(name="serviceAccountRef")
    def service_account_ref(
        self,
    ) -> Optional[
        pulumi.Input["ClusterIssuerSpecVaultAuthKubernetesServiceAccountRefArgs"]
    ]:
        return pulumi.get(self, "service_account_ref")

    @service_account_ref.setter
    def service_account_ref(
        self,
        value: Optional[
            pulumi.Input["ClusterIssuerSpecVaultAuthKubernetesServiceAccountRefArgs"]
        ],
    ):
        pulumi.set(self, "service_account_ref", value)


if not MYPY:

    class ClusterIssuerSpecVaultAuthPatchArgsDict(TypedDict):
        """
        Auth configures how cert-manager authenticates with the Vault server.
        """

        app_role: NotRequired[
            pulumi.Input["ClusterIssuerSpecVaultAuthAppRolePatchArgsDict"]
        ]
        client_certificate: NotRequired[
            pulumi.Input["ClusterIssuerSpecVaultAuthClientCertificatePatchArgsDict"]
        ]
        kubernetes: NotRequired[
            pulumi.Input["ClusterIssuerSpecVaultAuthKubernetesPatchArgsDict"]
        ]
        token_secret_ref: NotRequired[
            pulumi.Input["ClusterIssuerSpecVaultAuthTokenSecretRefPatchArgsDict"]
        ]

elif False:
    ClusterIssuerSpecVaultAuthPatchArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class ClusterIssuerSpecVaultAuthPatchArgs:
    def __init__(
        __self__,
        *,
        app_role: Optional[
            pulumi.Input["ClusterIssuerSpecVaultAuthAppRolePatchArgs"]
        ] = None,
        client_certificate: Optional[
            pulumi.Input["ClusterIssuerSpecVaultAuthClientCertificatePatchArgs"]
        ] = None,
        kubernetes: Optional[
            pulumi.Input["ClusterIssuerSpecVaultAuthKubernetesPatchArgs"]
        ] = None,
        token_secret_ref: Optional[
            pulumi.Input["ClusterIssuerSpecVaultAuthTokenSecretRefPatchArgs"]
        ] = None
    ):
        """
        Auth configures how cert-manager authenticates with the Vault server.
        """
        if app_role is not None:
            pulumi.set(__self__, "app_role", app_role)
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)
        if kubernetes is not None:
            pulumi.set(__self__, "kubernetes", kubernetes)
        if token_secret_ref is not None:
            pulumi.set(__self__, "token_secret_ref", token_secret_ref)

    @property
    @pulumi.getter(name="appRole")
    def app_role(
        self,
    ) -> Optional[pulumi.Input["ClusterIssuerSpecVaultAuthAppRolePatchArgs"]]:
        return pulumi.get(self, "app_role")

    @app_role.setter
    def app_role(
        self,
        value: Optional[pulumi.Input["ClusterIssuerSpecVaultAuthAppRolePatchArgs"]],
    ):
        pulumi.set(self, "app_role", value)

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(
        self,
    ) -> Optional[pulumi.Input["ClusterIssuerSpecVaultAuthClientCertificatePatchArgs"]]:
        return pulumi.get(self, "client_certificate")

    @client_certificate.setter
    def client_certificate(
        self,
        value: Optional[
            pulumi.Input["ClusterIssuerSpecVaultAuthClientCertificatePatchArgs"]
        ],
    ):
        pulumi.set(self, "client_certificate", value)

    @property
    @pulumi.getter
    def kubernetes(
        self,
    ) -> Optional[pulumi.Input["ClusterIssuerSpecVaultAuthKubernetesPatchArgs"]]:
        return pulumi.get(self, "kubernetes")

    @kubernetes.setter
    def kubernetes(
        self,
        value: Optional[pulumi.Input["ClusterIssuerSpecVaultAuthKubernetesPatchArgs"]],
    ):
        pulumi.set(self, "kubernetes", value)

    @property
    @pulumi.getter(name="tokenSecretRef")
    def token_secret_ref(
        self,
    ) -> Optional[pulumi.Input["ClusterIssuerSpecVaultAuthTokenSecretRefPatchArgs"]]:
        return pulumi.get(self, "token_secret_ref")

    @token_secret_ref.setter
    def token_secret_ref(
        self,
        value: Optional[
            pulumi.Input["ClusterIssuerSpecVaultAuthTokenSecretRefPatchArgs"]
        ],
    ):
        pulumi.set(self, "token_secret_ref", value)


if not MYPY:

    class ClusterIssuerSpecVaultAuthTokenSecretRefPatchArgsDict(TypedDict):
        """
        TokenSecretRef authenticates with Vault by presenting a token.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """

elif False:
    ClusterIssuerSpecVaultAuthTokenSecretRefPatchArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class ClusterIssuerSpecVaultAuthTokenSecretRefPatchArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        name: Optional[pulumi.Input[str]] = None
    ):
        """
        TokenSecretRef authenticates with Vault by presenting a token.
        :param pulumi.Input[str] key: The key of the entry in the Secret resource's `data` field to be used.
               Some instances of this field may be defaulted, in others it may be
               required.
        :param pulumi.Input[str] name: Name of the resource being referred to.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:

    class ClusterIssuerSpecVaultAuthTokenSecretRefArgsDict(TypedDict):
        """
        TokenSecretRef authenticates with Vault by presenting a token.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """

elif False:
    ClusterIssuerSpecVaultAuthTokenSecretRefArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class ClusterIssuerSpecVaultAuthTokenSecretRefArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        name: Optional[pulumi.Input[str]] = None
    ):
        """
        TokenSecretRef authenticates with Vault by presenting a token.
        :param pulumi.Input[str] key: The key of the entry in the Secret resource's `data` field to be used.
               Some instances of this field may be defaulted, in others it may be
               required.
        :param pulumi.Input[str] name: Name of the resource being referred to.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:

    class ClusterIssuerSpecVaultAuthArgsDict(TypedDict):
        """
        Auth configures how cert-manager authenticates with the Vault server.
        """

        app_role: NotRequired[pulumi.Input["ClusterIssuerSpecVaultAuthAppRoleArgsDict"]]
        client_certificate: NotRequired[
            pulumi.Input["ClusterIssuerSpecVaultAuthClientCertificateArgsDict"]
        ]
        kubernetes: NotRequired[
            pulumi.Input["ClusterIssuerSpecVaultAuthKubernetesArgsDict"]
        ]
        token_secret_ref: NotRequired[
            pulumi.Input["ClusterIssuerSpecVaultAuthTokenSecretRefArgsDict"]
        ]

elif False:
    ClusterIssuerSpecVaultAuthArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class ClusterIssuerSpecVaultAuthArgs:
    def __init__(
        __self__,
        *,
        app_role: Optional[
            pulumi.Input["ClusterIssuerSpecVaultAuthAppRoleArgs"]
        ] = None,
        client_certificate: Optional[
            pulumi.Input["ClusterIssuerSpecVaultAuthClientCertificateArgs"]
        ] = None,
        kubernetes: Optional[
            pulumi.Input["ClusterIssuerSpecVaultAuthKubernetesArgs"]
        ] = None,
        token_secret_ref: Optional[
            pulumi.Input["ClusterIssuerSpecVaultAuthTokenSecretRefArgs"]
        ] = None
    ):
        """
        Auth configures how cert-manager authenticates with the Vault server.
        """
        if app_role is not None:
            pulumi.set(__self__, "app_role", app_role)
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)
        if kubernetes is not None:
            pulumi.set(__self__, "kubernetes", kubernetes)
        if token_secret_ref is not None:
            pulumi.set(__self__, "token_secret_ref", token_secret_ref)

    @property
    @pulumi.getter(name="appRole")
    def app_role(
        self,
    ) -> Optional[pulumi.Input["ClusterIssuerSpecVaultAuthAppRoleArgs"]]:
        return pulumi.get(self, "app_role")

    @app_role.setter
    def app_role(
        self, value: Optional[pulumi.Input["ClusterIssuerSpecVaultAuthAppRoleArgs"]]
    ):
        pulumi.set(self, "app_role", value)

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(
        self,
    ) -> Optional[pulumi.Input["ClusterIssuerSpecVaultAuthClientCertificateArgs"]]:
        return pulumi.get(self, "client_certificate")

    @client_certificate.setter
    def client_certificate(
        self,
        value: Optional[
            pulumi.Input["ClusterIssuerSpecVaultAuthClientCertificateArgs"]
        ],
    ):
        pulumi.set(self, "client_certificate", value)

    @property
    @pulumi.getter
    def kubernetes(
        self,
    ) -> Optional[pulumi.Input["ClusterIssuerSpecVaultAuthKubernetesArgs"]]:
        return pulumi.get(self, "kubernetes")

    @kubernetes.setter
    def kubernetes(
        self, value: Optional[pulumi.Input["ClusterIssuerSpecVaultAuthKubernetesArgs"]]
    ):
        pulumi.set(self, "kubernetes", value)

    @property
    @pulumi.getter(name="tokenSecretRef")
    def token_secret_ref(
        self,
    ) -> Optional[pulumi.Input["ClusterIssuerSpecVaultAuthTokenSecretRefArgs"]]:
        return pulumi.get(self, "token_secret_ref")

    @token_secret_ref.setter
    def token_secret_ref(
        self,
        value: Optional[pulumi.Input["ClusterIssuerSpecVaultAuthTokenSecretRefArgs"]],
    ):
        pulumi.set(self, "token_secret_ref", value)


if not MYPY:

    class ClusterIssuerSpecVaultCaBundleSecretRefPatchArgsDict(TypedDict):
        """
        Reference to a Secret containing a bundle of PEM-encoded CAs to use when
        verifying the certificate chain presented by Vault when using HTTPS.
        Mutually exclusive with CABundle.
        If neither CABundle nor CABundleSecretRef are defined, the certificate bundle in
        the cert-manager controller container is used to validate the TLS connection.
        If no key for the Secret is specified, cert-manager will default to 'ca.crt'.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """

elif False:
    ClusterIssuerSpecVaultCaBundleSecretRefPatchArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class ClusterIssuerSpecVaultCaBundleSecretRefPatchArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        name: Optional[pulumi.Input[str]] = None
    ):
        """
        Reference to a Secret containing a bundle of PEM-encoded CAs to use when
        verifying the certificate chain presented by Vault when using HTTPS.
        Mutually exclusive with CABundle.
        If neither CABundle nor CABundleSecretRef are defined, the certificate bundle in
        the cert-manager controller container is used to validate the TLS connection.
        If no key for the Secret is specified, cert-manager will default to 'ca.crt'.
        :param pulumi.Input[str] key: The key of the entry in the Secret resource's `data` field to be used.
               Some instances of this field may be defaulted, in others it may be
               required.
        :param pulumi.Input[str] name: Name of the resource being referred to.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:

    class ClusterIssuerSpecVaultCaBundleSecretRefArgsDict(TypedDict):
        """
        Reference to a Secret containing a bundle of PEM-encoded CAs to use when
        verifying the certificate chain presented by Vault when using HTTPS.
        Mutually exclusive with CABundle.
        If neither CABundle nor CABundleSecretRef are defined, the certificate bundle in
        the cert-manager controller container is used to validate the TLS connection.
        If no key for the Secret is specified, cert-manager will default to 'ca.crt'.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """

elif False:
    ClusterIssuerSpecVaultCaBundleSecretRefArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class ClusterIssuerSpecVaultCaBundleSecretRefArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        name: Optional[pulumi.Input[str]] = None
    ):
        """
        Reference to a Secret containing a bundle of PEM-encoded CAs to use when
        verifying the certificate chain presented by Vault when using HTTPS.
        Mutually exclusive with CABundle.
        If neither CABundle nor CABundleSecretRef are defined, the certificate bundle in
        the cert-manager controller container is used to validate the TLS connection.
        If no key for the Secret is specified, cert-manager will default to 'ca.crt'.
        :param pulumi.Input[str] key: The key of the entry in the Secret resource's `data` field to be used.
               Some instances of this field may be defaulted, in others it may be
               required.
        :param pulumi.Input[str] name: Name of the resource being referred to.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:

    class ClusterIssuerSpecVaultClientCertSecretRefPatchArgsDict(TypedDict):
        """
        Reference to a Secret containing a PEM-encoded Client Certificate to use when the
        Vault server requires mTLS.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """

elif False:
    ClusterIssuerSpecVaultClientCertSecretRefPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecVaultClientCertSecretRefPatchArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        name: Optional[pulumi.Input[str]] = None
    ):
        """
        Reference to a Secret containing a PEM-encoded Client Certificate to use when the
        Vault server requires mTLS.
        :param pulumi.Input[str] key: The key of the entry in the Secret resource's `data` field to be used.
               Some instances of this field may be defaulted, in others it may be
               required.
        :param pulumi.Input[str] name: Name of the resource being referred to.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:

    class ClusterIssuerSpecVaultClientCertSecretRefArgsDict(TypedDict):
        """
        Reference to a Secret containing a PEM-encoded Client Certificate to use when the
        Vault server requires mTLS.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """

elif False:
    ClusterIssuerSpecVaultClientCertSecretRefArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class ClusterIssuerSpecVaultClientCertSecretRefArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        name: Optional[pulumi.Input[str]] = None
    ):
        """
        Reference to a Secret containing a PEM-encoded Client Certificate to use when the
        Vault server requires mTLS.
        :param pulumi.Input[str] key: The key of the entry in the Secret resource's `data` field to be used.
               Some instances of this field may be defaulted, in others it may be
               required.
        :param pulumi.Input[str] name: Name of the resource being referred to.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:

    class ClusterIssuerSpecVaultClientKeySecretRefPatchArgsDict(TypedDict):
        """
        Reference to a Secret containing a PEM-encoded Client Private Key to use when the
        Vault server requires mTLS.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """

elif False:
    ClusterIssuerSpecVaultClientKeySecretRefPatchArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class ClusterIssuerSpecVaultClientKeySecretRefPatchArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        name: Optional[pulumi.Input[str]] = None
    ):
        """
        Reference to a Secret containing a PEM-encoded Client Private Key to use when the
        Vault server requires mTLS.
        :param pulumi.Input[str] key: The key of the entry in the Secret resource's `data` field to be used.
               Some instances of this field may be defaulted, in others it may be
               required.
        :param pulumi.Input[str] name: Name of the resource being referred to.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:

    class ClusterIssuerSpecVaultClientKeySecretRefArgsDict(TypedDict):
        """
        Reference to a Secret containing a PEM-encoded Client Private Key to use when the
        Vault server requires mTLS.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """

elif False:
    ClusterIssuerSpecVaultClientKeySecretRefArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class ClusterIssuerSpecVaultClientKeySecretRefArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        name: Optional[pulumi.Input[str]] = None
    ):
        """
        Reference to a Secret containing a PEM-encoded Client Private Key to use when the
        Vault server requires mTLS.
        :param pulumi.Input[str] key: The key of the entry in the Secret resource's `data` field to be used.
               Some instances of this field may be defaulted, in others it may be
               required.
        :param pulumi.Input[str] name: Name of the resource being referred to.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:

    class ClusterIssuerSpecVaultPatchArgsDict(TypedDict):
        """
        Vault configures this issuer to sign certificates using a HashiCorp Vault
        PKI backend.
        """

        auth: NotRequired[pulumi.Input["ClusterIssuerSpecVaultAuthPatchArgsDict"]]
        ca_bundle: NotRequired[pulumi.Input[str]]
        """
        Base64-encoded bundle of PEM CAs which will be used to validate the certificate
        chain presented by Vault. Only used if using HTTPS to connect to Vault and
        ignored for HTTP connections.
        Mutually exclusive with CABundleSecretRef.
        If neither CABundle nor CABundleSecretRef are defined, the certificate bundle in
        the cert-manager controller container is used to validate the TLS connection.
        """
        ca_bundle_secret_ref: NotRequired[
            pulumi.Input["ClusterIssuerSpecVaultCaBundleSecretRefPatchArgsDict"]
        ]
        client_cert_secret_ref: NotRequired[
            pulumi.Input["ClusterIssuerSpecVaultClientCertSecretRefPatchArgsDict"]
        ]
        client_key_secret_ref: NotRequired[
            pulumi.Input["ClusterIssuerSpecVaultClientKeySecretRefPatchArgsDict"]
        ]
        namespace: NotRequired[pulumi.Input[str]]
        """
        Name of the vault namespace. Namespaces is a set of features within Vault Enterprise that allows Vault environments to support Secure Multi-tenancy. e.g: "ns1"
        More about namespaces can be found here https://www.vaultproject.io/docs/enterprise/namespaces
        """
        path: NotRequired[pulumi.Input[str]]
        """
        Path is the mount path of the Vault PKI backend's `sign` endpoint, e.g:
        "my_pki_mount/sign/my-role-name".
        """
        server: NotRequired[pulumi.Input[str]]
        """
        Server is the connection address for the Vault server, e.g: "https://vault.example.com:8200".
        """

elif False:
    ClusterIssuerSpecVaultPatchArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class ClusterIssuerSpecVaultPatchArgs:
    def __init__(
        __self__,
        *,
        auth: Optional[pulumi.Input["ClusterIssuerSpecVaultAuthPatchArgs"]] = None,
        ca_bundle: Optional[pulumi.Input[str]] = None,
        ca_bundle_secret_ref: Optional[
            pulumi.Input["ClusterIssuerSpecVaultCaBundleSecretRefPatchArgs"]
        ] = None,
        client_cert_secret_ref: Optional[
            pulumi.Input["ClusterIssuerSpecVaultClientCertSecretRefPatchArgs"]
        ] = None,
        client_key_secret_ref: Optional[
            pulumi.Input["ClusterIssuerSpecVaultClientKeySecretRefPatchArgs"]
        ] = None,
        namespace: Optional[pulumi.Input[str]] = None,
        path: Optional[pulumi.Input[str]] = None,
        server: Optional[pulumi.Input[str]] = None
    ):
        """
        Vault configures this issuer to sign certificates using a HashiCorp Vault
        PKI backend.
        :param pulumi.Input[str] ca_bundle: Base64-encoded bundle of PEM CAs which will be used to validate the certificate
               chain presented by Vault. Only used if using HTTPS to connect to Vault and
               ignored for HTTP connections.
               Mutually exclusive with CABundleSecretRef.
               If neither CABundle nor CABundleSecretRef are defined, the certificate bundle in
               the cert-manager controller container is used to validate the TLS connection.
        :param pulumi.Input[str] namespace: Name of the vault namespace. Namespaces is a set of features within Vault Enterprise that allows Vault environments to support Secure Multi-tenancy. e.g: "ns1"
               More about namespaces can be found here https://www.vaultproject.io/docs/enterprise/namespaces
        :param pulumi.Input[str] path: Path is the mount path of the Vault PKI backend's `sign` endpoint, e.g:
               "my_pki_mount/sign/my-role-name".
        :param pulumi.Input[str] server: Server is the connection address for the Vault server, e.g: "https://vault.example.com:8200".
        """
        if auth is not None:
            pulumi.set(__self__, "auth", auth)
        if ca_bundle is not None:
            pulumi.set(__self__, "ca_bundle", ca_bundle)
        if ca_bundle_secret_ref is not None:
            pulumi.set(__self__, "ca_bundle_secret_ref", ca_bundle_secret_ref)
        if client_cert_secret_ref is not None:
            pulumi.set(__self__, "client_cert_secret_ref", client_cert_secret_ref)
        if client_key_secret_ref is not None:
            pulumi.set(__self__, "client_key_secret_ref", client_key_secret_ref)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if server is not None:
            pulumi.set(__self__, "server", server)

    @property
    @pulumi.getter
    def auth(self) -> Optional[pulumi.Input["ClusterIssuerSpecVaultAuthPatchArgs"]]:
        return pulumi.get(self, "auth")

    @auth.setter
    def auth(
        self, value: Optional[pulumi.Input["ClusterIssuerSpecVaultAuthPatchArgs"]]
    ):
        pulumi.set(self, "auth", value)

    @property
    @pulumi.getter(name="caBundle")
    def ca_bundle(self) -> Optional[pulumi.Input[str]]:
        """
        Base64-encoded bundle of PEM CAs which will be used to validate the certificate
        chain presented by Vault. Only used if using HTTPS to connect to Vault and
        ignored for HTTP connections.
        Mutually exclusive with CABundleSecretRef.
        If neither CABundle nor CABundleSecretRef are defined, the certificate bundle in
        the cert-manager controller container is used to validate the TLS connection.
        """
        return pulumi.get(self, "ca_bundle")

    @ca_bundle.setter
    def ca_bundle(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ca_bundle", value)

    @property
    @pulumi.getter(name="caBundleSecretRef")
    def ca_bundle_secret_ref(
        self,
    ) -> Optional[pulumi.Input["ClusterIssuerSpecVaultCaBundleSecretRefPatchArgs"]]:
        return pulumi.get(self, "ca_bundle_secret_ref")

    @ca_bundle_secret_ref.setter
    def ca_bundle_secret_ref(
        self,
        value: Optional[
            pulumi.Input["ClusterIssuerSpecVaultCaBundleSecretRefPatchArgs"]
        ],
    ):
        pulumi.set(self, "ca_bundle_secret_ref", value)

    @property
    @pulumi.getter(name="clientCertSecretRef")
    def client_cert_secret_ref(
        self,
    ) -> Optional[pulumi.Input["ClusterIssuerSpecVaultClientCertSecretRefPatchArgs"]]:
        return pulumi.get(self, "client_cert_secret_ref")

    @client_cert_secret_ref.setter
    def client_cert_secret_ref(
        self,
        value: Optional[
            pulumi.Input["ClusterIssuerSpecVaultClientCertSecretRefPatchArgs"]
        ],
    ):
        pulumi.set(self, "client_cert_secret_ref", value)

    @property
    @pulumi.getter(name="clientKeySecretRef")
    def client_key_secret_ref(
        self,
    ) -> Optional[pulumi.Input["ClusterIssuerSpecVaultClientKeySecretRefPatchArgs"]]:
        return pulumi.get(self, "client_key_secret_ref")

    @client_key_secret_ref.setter
    def client_key_secret_ref(
        self,
        value: Optional[
            pulumi.Input["ClusterIssuerSpecVaultClientKeySecretRefPatchArgs"]
        ],
    ):
        pulumi.set(self, "client_key_secret_ref", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the vault namespace. Namespaces is a set of features within Vault Enterprise that allows Vault environments to support Secure Multi-tenancy. e.g: "ns1"
        More about namespaces can be found here https://www.vaultproject.io/docs/enterprise/namespaces
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
        Path is the mount path of the Vault PKI backend's `sign` endpoint, e.g:
        "my_pki_mount/sign/my-role-name".
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def server(self) -> Optional[pulumi.Input[str]]:
        """
        Server is the connection address for the Vault server, e.g: "https://vault.example.com:8200".
        """
        return pulumi.get(self, "server")

    @server.setter
    def server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server", value)


if not MYPY:

    class ClusterIssuerSpecVaultArgsDict(TypedDict):
        """
        Vault configures this issuer to sign certificates using a HashiCorp Vault
        PKI backend.
        """

        auth: NotRequired[pulumi.Input["ClusterIssuerSpecVaultAuthArgsDict"]]
        ca_bundle: NotRequired[pulumi.Input[str]]
        """
        Base64-encoded bundle of PEM CAs which will be used to validate the certificate
        chain presented by Vault. Only used if using HTTPS to connect to Vault and
        ignored for HTTP connections.
        Mutually exclusive with CABundleSecretRef.
        If neither CABundle nor CABundleSecretRef are defined, the certificate bundle in
        the cert-manager controller container is used to validate the TLS connection.
        """
        ca_bundle_secret_ref: NotRequired[
            pulumi.Input["ClusterIssuerSpecVaultCaBundleSecretRefArgsDict"]
        ]
        client_cert_secret_ref: NotRequired[
            pulumi.Input["ClusterIssuerSpecVaultClientCertSecretRefArgsDict"]
        ]
        client_key_secret_ref: NotRequired[
            pulumi.Input["ClusterIssuerSpecVaultClientKeySecretRefArgsDict"]
        ]
        namespace: NotRequired[pulumi.Input[str]]
        """
        Name of the vault namespace. Namespaces is a set of features within Vault Enterprise that allows Vault environments to support Secure Multi-tenancy. e.g: "ns1"
        More about namespaces can be found here https://www.vaultproject.io/docs/enterprise/namespaces
        """
        path: NotRequired[pulumi.Input[str]]
        """
        Path is the mount path of the Vault PKI backend's `sign` endpoint, e.g:
        "my_pki_mount/sign/my-role-name".
        """
        server: NotRequired[pulumi.Input[str]]
        """
        Server is the connection address for the Vault server, e.g: "https://vault.example.com:8200".
        """

elif False:
    ClusterIssuerSpecVaultArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class ClusterIssuerSpecVaultArgs:
    def __init__(
        __self__,
        *,
        auth: Optional[pulumi.Input["ClusterIssuerSpecVaultAuthArgs"]] = None,
        ca_bundle: Optional[pulumi.Input[str]] = None,
        ca_bundle_secret_ref: Optional[
            pulumi.Input["ClusterIssuerSpecVaultCaBundleSecretRefArgs"]
        ] = None,
        client_cert_secret_ref: Optional[
            pulumi.Input["ClusterIssuerSpecVaultClientCertSecretRefArgs"]
        ] = None,
        client_key_secret_ref: Optional[
            pulumi.Input["ClusterIssuerSpecVaultClientKeySecretRefArgs"]
        ] = None,
        namespace: Optional[pulumi.Input[str]] = None,
        path: Optional[pulumi.Input[str]] = None,
        server: Optional[pulumi.Input[str]] = None
    ):
        """
        Vault configures this issuer to sign certificates using a HashiCorp Vault
        PKI backend.
        :param pulumi.Input[str] ca_bundle: Base64-encoded bundle of PEM CAs which will be used to validate the certificate
               chain presented by Vault. Only used if using HTTPS to connect to Vault and
               ignored for HTTP connections.
               Mutually exclusive with CABundleSecretRef.
               If neither CABundle nor CABundleSecretRef are defined, the certificate bundle in
               the cert-manager controller container is used to validate the TLS connection.
        :param pulumi.Input[str] namespace: Name of the vault namespace. Namespaces is a set of features within Vault Enterprise that allows Vault environments to support Secure Multi-tenancy. e.g: "ns1"
               More about namespaces can be found here https://www.vaultproject.io/docs/enterprise/namespaces
        :param pulumi.Input[str] path: Path is the mount path of the Vault PKI backend's `sign` endpoint, e.g:
               "my_pki_mount/sign/my-role-name".
        :param pulumi.Input[str] server: Server is the connection address for the Vault server, e.g: "https://vault.example.com:8200".
        """
        if auth is not None:
            pulumi.set(__self__, "auth", auth)
        if ca_bundle is not None:
            pulumi.set(__self__, "ca_bundle", ca_bundle)
        if ca_bundle_secret_ref is not None:
            pulumi.set(__self__, "ca_bundle_secret_ref", ca_bundle_secret_ref)
        if client_cert_secret_ref is not None:
            pulumi.set(__self__, "client_cert_secret_ref", client_cert_secret_ref)
        if client_key_secret_ref is not None:
            pulumi.set(__self__, "client_key_secret_ref", client_key_secret_ref)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if server is not None:
            pulumi.set(__self__, "server", server)

    @property
    @pulumi.getter
    def auth(self) -> Optional[pulumi.Input["ClusterIssuerSpecVaultAuthArgs"]]:
        return pulumi.get(self, "auth")

    @auth.setter
    def auth(self, value: Optional[pulumi.Input["ClusterIssuerSpecVaultAuthArgs"]]):
        pulumi.set(self, "auth", value)

    @property
    @pulumi.getter(name="caBundle")
    def ca_bundle(self) -> Optional[pulumi.Input[str]]:
        """
        Base64-encoded bundle of PEM CAs which will be used to validate the certificate
        chain presented by Vault. Only used if using HTTPS to connect to Vault and
        ignored for HTTP connections.
        Mutually exclusive with CABundleSecretRef.
        If neither CABundle nor CABundleSecretRef are defined, the certificate bundle in
        the cert-manager controller container is used to validate the TLS connection.
        """
        return pulumi.get(self, "ca_bundle")

    @ca_bundle.setter
    def ca_bundle(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ca_bundle", value)

    @property
    @pulumi.getter(name="caBundleSecretRef")
    def ca_bundle_secret_ref(
        self,
    ) -> Optional[pulumi.Input["ClusterIssuerSpecVaultCaBundleSecretRefArgs"]]:
        return pulumi.get(self, "ca_bundle_secret_ref")

    @ca_bundle_secret_ref.setter
    def ca_bundle_secret_ref(
        self,
        value: Optional[pulumi.Input["ClusterIssuerSpecVaultCaBundleSecretRefArgs"]],
    ):
        pulumi.set(self, "ca_bundle_secret_ref", value)

    @property
    @pulumi.getter(name="clientCertSecretRef")
    def client_cert_secret_ref(
        self,
    ) -> Optional[pulumi.Input["ClusterIssuerSpecVaultClientCertSecretRefArgs"]]:
        return pulumi.get(self, "client_cert_secret_ref")

    @client_cert_secret_ref.setter
    def client_cert_secret_ref(
        self,
        value: Optional[pulumi.Input["ClusterIssuerSpecVaultClientCertSecretRefArgs"]],
    ):
        pulumi.set(self, "client_cert_secret_ref", value)

    @property
    @pulumi.getter(name="clientKeySecretRef")
    def client_key_secret_ref(
        self,
    ) -> Optional[pulumi.Input["ClusterIssuerSpecVaultClientKeySecretRefArgs"]]:
        return pulumi.get(self, "client_key_secret_ref")

    @client_key_secret_ref.setter
    def client_key_secret_ref(
        self,
        value: Optional[pulumi.Input["ClusterIssuerSpecVaultClientKeySecretRefArgs"]],
    ):
        pulumi.set(self, "client_key_secret_ref", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the vault namespace. Namespaces is a set of features within Vault Enterprise that allows Vault environments to support Secure Multi-tenancy. e.g: "ns1"
        More about namespaces can be found here https://www.vaultproject.io/docs/enterprise/namespaces
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
        Path is the mount path of the Vault PKI backend's `sign` endpoint, e.g:
        "my_pki_mount/sign/my-role-name".
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def server(self) -> Optional[pulumi.Input[str]]:
        """
        Server is the connection address for the Vault server, e.g: "https://vault.example.com:8200".
        """
        return pulumi.get(self, "server")

    @server.setter
    def server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server", value)


if not MYPY:

    class ClusterIssuerSpecVenafiCloudApiTokenSecretRefPatchArgsDict(TypedDict):
        """
        APITokenSecretRef is a secret key selector for the Venafi Cloud API token.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """

elif False:
    ClusterIssuerSpecVenafiCloudApiTokenSecretRefPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecVenafiCloudApiTokenSecretRefPatchArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        name: Optional[pulumi.Input[str]] = None
    ):
        """
        APITokenSecretRef is a secret key selector for the Venafi Cloud API token.
        :param pulumi.Input[str] key: The key of the entry in the Secret resource's `data` field to be used.
               Some instances of this field may be defaulted, in others it may be
               required.
        :param pulumi.Input[str] name: Name of the resource being referred to.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:

    class ClusterIssuerSpecVenafiCloudApiTokenSecretRefArgsDict(TypedDict):
        """
        APITokenSecretRef is a secret key selector for the Venafi Cloud API token.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """

elif False:
    ClusterIssuerSpecVenafiCloudApiTokenSecretRefArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class ClusterIssuerSpecVenafiCloudApiTokenSecretRefArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        name: Optional[pulumi.Input[str]] = None
    ):
        """
        APITokenSecretRef is a secret key selector for the Venafi Cloud API token.
        :param pulumi.Input[str] key: The key of the entry in the Secret resource's `data` field to be used.
               Some instances of this field may be defaulted, in others it may be
               required.
        :param pulumi.Input[str] name: Name of the resource being referred to.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:

    class ClusterIssuerSpecVenafiCloudPatchArgsDict(TypedDict):
        """
        Cloud specifies the Venafi cloud configuration settings.
        Only one of TPP or Cloud may be specified.
        """

        api_token_secret_ref: NotRequired[
            pulumi.Input["ClusterIssuerSpecVenafiCloudApiTokenSecretRefPatchArgsDict"]
        ]
        url: NotRequired[pulumi.Input[str]]
        """
        URL is the base URL for Venafi Cloud.
        Defaults to "https://api.venafi.cloud/v1".
        """

elif False:
    ClusterIssuerSpecVenafiCloudPatchArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class ClusterIssuerSpecVenafiCloudPatchArgs:
    def __init__(
        __self__,
        *,
        api_token_secret_ref: Optional[
            pulumi.Input["ClusterIssuerSpecVenafiCloudApiTokenSecretRefPatchArgs"]
        ] = None,
        url: Optional[pulumi.Input[str]] = None
    ):
        """
        Cloud specifies the Venafi cloud configuration settings.
        Only one of TPP or Cloud may be specified.
        :param pulumi.Input[str] url: URL is the base URL for Venafi Cloud.
               Defaults to "https://api.venafi.cloud/v1".
        """
        if api_token_secret_ref is not None:
            pulumi.set(__self__, "api_token_secret_ref", api_token_secret_ref)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="apiTokenSecretRef")
    def api_token_secret_ref(
        self,
    ) -> Optional[
        pulumi.Input["ClusterIssuerSpecVenafiCloudApiTokenSecretRefPatchArgs"]
    ]:
        return pulumi.get(self, "api_token_secret_ref")

    @api_token_secret_ref.setter
    def api_token_secret_ref(
        self,
        value: Optional[
            pulumi.Input["ClusterIssuerSpecVenafiCloudApiTokenSecretRefPatchArgs"]
        ],
    ):
        pulumi.set(self, "api_token_secret_ref", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        """
        URL is the base URL for Venafi Cloud.
        Defaults to "https://api.venafi.cloud/v1".
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)


if not MYPY:

    class ClusterIssuerSpecVenafiCloudArgsDict(TypedDict):
        """
        Cloud specifies the Venafi cloud configuration settings.
        Only one of TPP or Cloud may be specified.
        """

        api_token_secret_ref: NotRequired[
            pulumi.Input["ClusterIssuerSpecVenafiCloudApiTokenSecretRefArgsDict"]
        ]
        url: NotRequired[pulumi.Input[str]]
        """
        URL is the base URL for Venafi Cloud.
        Defaults to "https://api.venafi.cloud/v1".
        """

elif False:
    ClusterIssuerSpecVenafiCloudArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class ClusterIssuerSpecVenafiCloudArgs:
    def __init__(
        __self__,
        *,
        api_token_secret_ref: Optional[
            pulumi.Input["ClusterIssuerSpecVenafiCloudApiTokenSecretRefArgs"]
        ] = None,
        url: Optional[pulumi.Input[str]] = None
    ):
        """
        Cloud specifies the Venafi cloud configuration settings.
        Only one of TPP or Cloud may be specified.
        :param pulumi.Input[str] url: URL is the base URL for Venafi Cloud.
               Defaults to "https://api.venafi.cloud/v1".
        """
        if api_token_secret_ref is not None:
            pulumi.set(__self__, "api_token_secret_ref", api_token_secret_ref)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="apiTokenSecretRef")
    def api_token_secret_ref(
        self,
    ) -> Optional[pulumi.Input["ClusterIssuerSpecVenafiCloudApiTokenSecretRefArgs"]]:
        return pulumi.get(self, "api_token_secret_ref")

    @api_token_secret_ref.setter
    def api_token_secret_ref(
        self,
        value: Optional[
            pulumi.Input["ClusterIssuerSpecVenafiCloudApiTokenSecretRefArgs"]
        ],
    ):
        pulumi.set(self, "api_token_secret_ref", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        """
        URL is the base URL for Venafi Cloud.
        Defaults to "https://api.venafi.cloud/v1".
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)


if not MYPY:

    class ClusterIssuerSpecVenafiPatchArgsDict(TypedDict):
        """
        Venafi configures this issuer to sign certificates using a Venafi TPP
        or Venafi Cloud policy zone.
        """

        cloud: NotRequired[pulumi.Input["ClusterIssuerSpecVenafiCloudPatchArgsDict"]]
        tpp: NotRequired[pulumi.Input["ClusterIssuerSpecVenafiTppPatchArgsDict"]]
        zone: NotRequired[pulumi.Input[str]]
        """
        Zone is the Venafi Policy Zone to use for this issuer.
        All requests made to the Venafi platform will be restricted by the named
        zone policy.
        This field is required.
        """

elif False:
    ClusterIssuerSpecVenafiPatchArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class ClusterIssuerSpecVenafiPatchArgs:
    def __init__(
        __self__,
        *,
        cloud: Optional[pulumi.Input["ClusterIssuerSpecVenafiCloudPatchArgs"]] = None,
        tpp: Optional[pulumi.Input["ClusterIssuerSpecVenafiTppPatchArgs"]] = None,
        zone: Optional[pulumi.Input[str]] = None
    ):
        """
        Venafi configures this issuer to sign certificates using a Venafi TPP
        or Venafi Cloud policy zone.
        :param pulumi.Input[str] zone: Zone is the Venafi Policy Zone to use for this issuer.
               All requests made to the Venafi platform will be restricted by the named
               zone policy.
               This field is required.
        """
        if cloud is not None:
            pulumi.set(__self__, "cloud", cloud)
        if tpp is not None:
            pulumi.set(__self__, "tpp", tpp)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter
    def cloud(self) -> Optional[pulumi.Input["ClusterIssuerSpecVenafiCloudPatchArgs"]]:
        return pulumi.get(self, "cloud")

    @cloud.setter
    def cloud(
        self, value: Optional[pulumi.Input["ClusterIssuerSpecVenafiCloudPatchArgs"]]
    ):
        pulumi.set(self, "cloud", value)

    @property
    @pulumi.getter
    def tpp(self) -> Optional[pulumi.Input["ClusterIssuerSpecVenafiTppPatchArgs"]]:
        return pulumi.get(self, "tpp")

    @tpp.setter
    def tpp(self, value: Optional[pulumi.Input["ClusterIssuerSpecVenafiTppPatchArgs"]]):
        pulumi.set(self, "tpp", value)

    @property
    @pulumi.getter
    def zone(self) -> Optional[pulumi.Input[str]]:
        """
        Zone is the Venafi Policy Zone to use for this issuer.
        All requests made to the Venafi platform will be restricted by the named
        zone policy.
        This field is required.
        """
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "zone", value)


if not MYPY:

    class ClusterIssuerSpecVenafiTppCaBundleSecretRefPatchArgsDict(TypedDict):
        """
        Reference to a Secret containing a base64-encoded bundle of PEM CAs
        which will be used to validate the certificate chain presented by the TPP server.
        Only used if using HTTPS; ignored for HTTP. Mutually exclusive with CABundle.
        If neither CABundle nor CABundleSecretRef is defined, the certificate bundle in
        the cert-manager controller container is used to validate the TLS connection.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """

elif False:
    ClusterIssuerSpecVenafiTppCaBundleSecretRefPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class ClusterIssuerSpecVenafiTppCaBundleSecretRefPatchArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        name: Optional[pulumi.Input[str]] = None
    ):
        """
        Reference to a Secret containing a base64-encoded bundle of PEM CAs
        which will be used to validate the certificate chain presented by the TPP server.
        Only used if using HTTPS; ignored for HTTP. Mutually exclusive with CABundle.
        If neither CABundle nor CABundleSecretRef is defined, the certificate bundle in
        the cert-manager controller container is used to validate the TLS connection.
        :param pulumi.Input[str] key: The key of the entry in the Secret resource's `data` field to be used.
               Some instances of this field may be defaulted, in others it may be
               required.
        :param pulumi.Input[str] name: Name of the resource being referred to.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:

    class ClusterIssuerSpecVenafiTppCaBundleSecretRefArgsDict(TypedDict):
        """
        Reference to a Secret containing a base64-encoded bundle of PEM CAs
        which will be used to validate the certificate chain presented by the TPP server.
        Only used if using HTTPS; ignored for HTTP. Mutually exclusive with CABundle.
        If neither CABundle nor CABundleSecretRef is defined, the certificate bundle in
        the cert-manager controller container is used to validate the TLS connection.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """

elif False:
    ClusterIssuerSpecVenafiTppCaBundleSecretRefArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class ClusterIssuerSpecVenafiTppCaBundleSecretRefArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        name: Optional[pulumi.Input[str]] = None
    ):
        """
        Reference to a Secret containing a base64-encoded bundle of PEM CAs
        which will be used to validate the certificate chain presented by the TPP server.
        Only used if using HTTPS; ignored for HTTP. Mutually exclusive with CABundle.
        If neither CABundle nor CABundleSecretRef is defined, the certificate bundle in
        the cert-manager controller container is used to validate the TLS connection.
        :param pulumi.Input[str] key: The key of the entry in the Secret resource's `data` field to be used.
               Some instances of this field may be defaulted, in others it may be
               required.
        :param pulumi.Input[str] name: Name of the resource being referred to.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:

    class ClusterIssuerSpecVenafiTppCredentialsRefPatchArgsDict(TypedDict):
        """
        CredentialsRef is a reference to a Secret containing the Venafi TPP API credentials.
        The secret must contain the key 'access-token' for the Access Token Authentication,
        or two keys, 'username' and 'password' for the API Keys Authentication.
        """

        name: NotRequired[pulumi.Input[str]]
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """

elif False:
    ClusterIssuerSpecVenafiTppCredentialsRefPatchArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class ClusterIssuerSpecVenafiTppCredentialsRefPatchArgs:
    def __init__(__self__, *, name: Optional[pulumi.Input[str]] = None):
        """
        CredentialsRef is a reference to a Secret containing the Venafi TPP API credentials.
        The secret must contain the key 'access-token' for the Access Token Authentication,
        or two keys, 'username' and 'password' for the API Keys Authentication.
        :param pulumi.Input[str] name: Name of the resource being referred to.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:

    class ClusterIssuerSpecVenafiTppCredentialsRefArgsDict(TypedDict):
        """
        CredentialsRef is a reference to a Secret containing the Venafi TPP API credentials.
        The secret must contain the key 'access-token' for the Access Token Authentication,
        or two keys, 'username' and 'password' for the API Keys Authentication.
        """

        name: NotRequired[pulumi.Input[str]]
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """

elif False:
    ClusterIssuerSpecVenafiTppCredentialsRefArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class ClusterIssuerSpecVenafiTppCredentialsRefArgs:
    def __init__(__self__, *, name: Optional[pulumi.Input[str]] = None):
        """
        CredentialsRef is a reference to a Secret containing the Venafi TPP API credentials.
        The secret must contain the key 'access-token' for the Access Token Authentication,
        or two keys, 'username' and 'password' for the API Keys Authentication.
        :param pulumi.Input[str] name: Name of the resource being referred to.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:

    class ClusterIssuerSpecVenafiTppPatchArgsDict(TypedDict):
        """
        TPP specifies Trust Protection Platform configuration settings.
        Only one of TPP or Cloud may be specified.
        """

        ca_bundle: NotRequired[pulumi.Input[str]]
        """
        Base64-encoded bundle of PEM CAs which will be used to validate the certificate
        chain presented by the TPP server. Only used if using HTTPS; ignored for HTTP.
        If undefined, the certificate bundle in the cert-manager controller container
        is used to validate the chain.
        """
        ca_bundle_secret_ref: NotRequired[
            pulumi.Input["ClusterIssuerSpecVenafiTppCaBundleSecretRefPatchArgsDict"]
        ]
        credentials_ref: NotRequired[
            pulumi.Input["ClusterIssuerSpecVenafiTppCredentialsRefPatchArgsDict"]
        ]
        url: NotRequired[pulumi.Input[str]]
        """
        URL is the base URL for the vedsdk endpoint of the Venafi TPP instance,
        for example: "https://tpp.example.com/vedsdk".
        """

elif False:
    ClusterIssuerSpecVenafiTppPatchArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class ClusterIssuerSpecVenafiTppPatchArgs:
    def __init__(
        __self__,
        *,
        ca_bundle: Optional[pulumi.Input[str]] = None,
        ca_bundle_secret_ref: Optional[
            pulumi.Input["ClusterIssuerSpecVenafiTppCaBundleSecretRefPatchArgs"]
        ] = None,
        credentials_ref: Optional[
            pulumi.Input["ClusterIssuerSpecVenafiTppCredentialsRefPatchArgs"]
        ] = None,
        url: Optional[pulumi.Input[str]] = None
    ):
        """
        TPP specifies Trust Protection Platform configuration settings.
        Only one of TPP or Cloud may be specified.
        :param pulumi.Input[str] ca_bundle: Base64-encoded bundle of PEM CAs which will be used to validate the certificate
               chain presented by the TPP server. Only used if using HTTPS; ignored for HTTP.
               If undefined, the certificate bundle in the cert-manager controller container
               is used to validate the chain.
        :param pulumi.Input[str] url: URL is the base URL for the vedsdk endpoint of the Venafi TPP instance,
               for example: "https://tpp.example.com/vedsdk".
        """
        if ca_bundle is not None:
            pulumi.set(__self__, "ca_bundle", ca_bundle)
        if ca_bundle_secret_ref is not None:
            pulumi.set(__self__, "ca_bundle_secret_ref", ca_bundle_secret_ref)
        if credentials_ref is not None:
            pulumi.set(__self__, "credentials_ref", credentials_ref)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="caBundle")
    def ca_bundle(self) -> Optional[pulumi.Input[str]]:
        """
        Base64-encoded bundle of PEM CAs which will be used to validate the certificate
        chain presented by the TPP server. Only used if using HTTPS; ignored for HTTP.
        If undefined, the certificate bundle in the cert-manager controller container
        is used to validate the chain.
        """
        return pulumi.get(self, "ca_bundle")

    @ca_bundle.setter
    def ca_bundle(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ca_bundle", value)

    @property
    @pulumi.getter(name="caBundleSecretRef")
    def ca_bundle_secret_ref(
        self,
    ) -> Optional[pulumi.Input["ClusterIssuerSpecVenafiTppCaBundleSecretRefPatchArgs"]]:
        return pulumi.get(self, "ca_bundle_secret_ref")

    @ca_bundle_secret_ref.setter
    def ca_bundle_secret_ref(
        self,
        value: Optional[
            pulumi.Input["ClusterIssuerSpecVenafiTppCaBundleSecretRefPatchArgs"]
        ],
    ):
        pulumi.set(self, "ca_bundle_secret_ref", value)

    @property
    @pulumi.getter(name="credentialsRef")
    def credentials_ref(
        self,
    ) -> Optional[pulumi.Input["ClusterIssuerSpecVenafiTppCredentialsRefPatchArgs"]]:
        return pulumi.get(self, "credentials_ref")

    @credentials_ref.setter
    def credentials_ref(
        self,
        value: Optional[
            pulumi.Input["ClusterIssuerSpecVenafiTppCredentialsRefPatchArgs"]
        ],
    ):
        pulumi.set(self, "credentials_ref", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        """
        URL is the base URL for the vedsdk endpoint of the Venafi TPP instance,
        for example: "https://tpp.example.com/vedsdk".
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)


if not MYPY:

    class ClusterIssuerSpecVenafiTppArgsDict(TypedDict):
        """
        TPP specifies Trust Protection Platform configuration settings.
        Only one of TPP or Cloud may be specified.
        """

        ca_bundle: NotRequired[pulumi.Input[str]]
        """
        Base64-encoded bundle of PEM CAs which will be used to validate the certificate
        chain presented by the TPP server. Only used if using HTTPS; ignored for HTTP.
        If undefined, the certificate bundle in the cert-manager controller container
        is used to validate the chain.
        """
        ca_bundle_secret_ref: NotRequired[
            pulumi.Input["ClusterIssuerSpecVenafiTppCaBundleSecretRefArgsDict"]
        ]
        credentials_ref: NotRequired[
            pulumi.Input["ClusterIssuerSpecVenafiTppCredentialsRefArgsDict"]
        ]
        url: NotRequired[pulumi.Input[str]]
        """
        URL is the base URL for the vedsdk endpoint of the Venafi TPP instance,
        for example: "https://tpp.example.com/vedsdk".
        """

elif False:
    ClusterIssuerSpecVenafiTppArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class ClusterIssuerSpecVenafiTppArgs:
    def __init__(
        __self__,
        *,
        ca_bundle: Optional[pulumi.Input[str]] = None,
        ca_bundle_secret_ref: Optional[
            pulumi.Input["ClusterIssuerSpecVenafiTppCaBundleSecretRefArgs"]
        ] = None,
        credentials_ref: Optional[
            pulumi.Input["ClusterIssuerSpecVenafiTppCredentialsRefArgs"]
        ] = None,
        url: Optional[pulumi.Input[str]] = None
    ):
        """
        TPP specifies Trust Protection Platform configuration settings.
        Only one of TPP or Cloud may be specified.
        :param pulumi.Input[str] ca_bundle: Base64-encoded bundle of PEM CAs which will be used to validate the certificate
               chain presented by the TPP server. Only used if using HTTPS; ignored for HTTP.
               If undefined, the certificate bundle in the cert-manager controller container
               is used to validate the chain.
        :param pulumi.Input[str] url: URL is the base URL for the vedsdk endpoint of the Venafi TPP instance,
               for example: "https://tpp.example.com/vedsdk".
        """
        if ca_bundle is not None:
            pulumi.set(__self__, "ca_bundle", ca_bundle)
        if ca_bundle_secret_ref is not None:
            pulumi.set(__self__, "ca_bundle_secret_ref", ca_bundle_secret_ref)
        if credentials_ref is not None:
            pulumi.set(__self__, "credentials_ref", credentials_ref)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="caBundle")
    def ca_bundle(self) -> Optional[pulumi.Input[str]]:
        """
        Base64-encoded bundle of PEM CAs which will be used to validate the certificate
        chain presented by the TPP server. Only used if using HTTPS; ignored for HTTP.
        If undefined, the certificate bundle in the cert-manager controller container
        is used to validate the chain.
        """
        return pulumi.get(self, "ca_bundle")

    @ca_bundle.setter
    def ca_bundle(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ca_bundle", value)

    @property
    @pulumi.getter(name="caBundleSecretRef")
    def ca_bundle_secret_ref(
        self,
    ) -> Optional[pulumi.Input["ClusterIssuerSpecVenafiTppCaBundleSecretRefArgs"]]:
        return pulumi.get(self, "ca_bundle_secret_ref")

    @ca_bundle_secret_ref.setter
    def ca_bundle_secret_ref(
        self,
        value: Optional[
            pulumi.Input["ClusterIssuerSpecVenafiTppCaBundleSecretRefArgs"]
        ],
    ):
        pulumi.set(self, "ca_bundle_secret_ref", value)

    @property
    @pulumi.getter(name="credentialsRef")
    def credentials_ref(
        self,
    ) -> Optional[pulumi.Input["ClusterIssuerSpecVenafiTppCredentialsRefArgs"]]:
        return pulumi.get(self, "credentials_ref")

    @credentials_ref.setter
    def credentials_ref(
        self,
        value: Optional[pulumi.Input["ClusterIssuerSpecVenafiTppCredentialsRefArgs"]],
    ):
        pulumi.set(self, "credentials_ref", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        """
        URL is the base URL for the vedsdk endpoint of the Venafi TPP instance,
        for example: "https://tpp.example.com/vedsdk".
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)


if not MYPY:

    class ClusterIssuerSpecVenafiArgsDict(TypedDict):
        """
        Venafi configures this issuer to sign certificates using a Venafi TPP
        or Venafi Cloud policy zone.
        """

        cloud: NotRequired[pulumi.Input["ClusterIssuerSpecVenafiCloudArgsDict"]]
        tpp: NotRequired[pulumi.Input["ClusterIssuerSpecVenafiTppArgsDict"]]
        zone: NotRequired[pulumi.Input[str]]
        """
        Zone is the Venafi Policy Zone to use for this issuer.
        All requests made to the Venafi platform will be restricted by the named
        zone policy.
        This field is required.
        """

elif False:
    ClusterIssuerSpecVenafiArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class ClusterIssuerSpecVenafiArgs:
    def __init__(
        __self__,
        *,
        cloud: Optional[pulumi.Input["ClusterIssuerSpecVenafiCloudArgs"]] = None,
        tpp: Optional[pulumi.Input["ClusterIssuerSpecVenafiTppArgs"]] = None,
        zone: Optional[pulumi.Input[str]] = None
    ):
        """
        Venafi configures this issuer to sign certificates using a Venafi TPP
        or Venafi Cloud policy zone.
        :param pulumi.Input[str] zone: Zone is the Venafi Policy Zone to use for this issuer.
               All requests made to the Venafi platform will be restricted by the named
               zone policy.
               This field is required.
        """
        if cloud is not None:
            pulumi.set(__self__, "cloud", cloud)
        if tpp is not None:
            pulumi.set(__self__, "tpp", tpp)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter
    def cloud(self) -> Optional[pulumi.Input["ClusterIssuerSpecVenafiCloudArgs"]]:
        return pulumi.get(self, "cloud")

    @cloud.setter
    def cloud(self, value: Optional[pulumi.Input["ClusterIssuerSpecVenafiCloudArgs"]]):
        pulumi.set(self, "cloud", value)

    @property
    @pulumi.getter
    def tpp(self) -> Optional[pulumi.Input["ClusterIssuerSpecVenafiTppArgs"]]:
        return pulumi.get(self, "tpp")

    @tpp.setter
    def tpp(self, value: Optional[pulumi.Input["ClusterIssuerSpecVenafiTppArgs"]]):
        pulumi.set(self, "tpp", value)

    @property
    @pulumi.getter
    def zone(self) -> Optional[pulumi.Input[str]]:
        """
        Zone is the Venafi Policy Zone to use for this issuer.
        All requests made to the Venafi platform will be restricted by the named
        zone policy.
        This field is required.
        """
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "zone", value)


if not MYPY:

    class ClusterIssuerSpecArgsDict(TypedDict):
        """
        Desired state of the ClusterIssuer resource.
        """

        acme: NotRequired[pulumi.Input["ClusterIssuerSpecAcmeArgsDict"]]
        ca: NotRequired[pulumi.Input["ClusterIssuerSpecCaArgsDict"]]
        self_signed: NotRequired[pulumi.Input["ClusterIssuerSpecSelfSignedArgsDict"]]
        vault: NotRequired[pulumi.Input["ClusterIssuerSpecVaultArgsDict"]]
        venafi: NotRequired[pulumi.Input["ClusterIssuerSpecVenafiArgsDict"]]

elif False:
    ClusterIssuerSpecArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class ClusterIssuerSpecArgs:
    def __init__(
        __self__,
        *,
        acme: Optional[pulumi.Input["ClusterIssuerSpecAcmeArgs"]] = None,
        ca: Optional[pulumi.Input["ClusterIssuerSpecCaArgs"]] = None,
        self_signed: Optional[pulumi.Input["ClusterIssuerSpecSelfSignedArgs"]] = None,
        vault: Optional[pulumi.Input["ClusterIssuerSpecVaultArgs"]] = None,
        venafi: Optional[pulumi.Input["ClusterIssuerSpecVenafiArgs"]] = None
    ):
        """
        Desired state of the ClusterIssuer resource.
        """
        if acme is not None:
            pulumi.set(__self__, "acme", acme)
        if ca is not None:
            pulumi.set(__self__, "ca", ca)
        if self_signed is not None:
            pulumi.set(__self__, "self_signed", self_signed)
        if vault is not None:
            pulumi.set(__self__, "vault", vault)
        if venafi is not None:
            pulumi.set(__self__, "venafi", venafi)

    @property
    @pulumi.getter
    def acme(self) -> Optional[pulumi.Input["ClusterIssuerSpecAcmeArgs"]]:
        return pulumi.get(self, "acme")

    @acme.setter
    def acme(self, value: Optional[pulumi.Input["ClusterIssuerSpecAcmeArgs"]]):
        pulumi.set(self, "acme", value)

    @property
    @pulumi.getter
    def ca(self) -> Optional[pulumi.Input["ClusterIssuerSpecCaArgs"]]:
        return pulumi.get(self, "ca")

    @ca.setter
    def ca(self, value: Optional[pulumi.Input["ClusterIssuerSpecCaArgs"]]):
        pulumi.set(self, "ca", value)

    @property
    @pulumi.getter(name="selfSigned")
    def self_signed(self) -> Optional[pulumi.Input["ClusterIssuerSpecSelfSignedArgs"]]:
        return pulumi.get(self, "self_signed")

    @self_signed.setter
    def self_signed(
        self, value: Optional[pulumi.Input["ClusterIssuerSpecSelfSignedArgs"]]
    ):
        pulumi.set(self, "self_signed", value)

    @property
    @pulumi.getter
    def vault(self) -> Optional[pulumi.Input["ClusterIssuerSpecVaultArgs"]]:
        return pulumi.get(self, "vault")

    @vault.setter
    def vault(self, value: Optional[pulumi.Input["ClusterIssuerSpecVaultArgs"]]):
        pulumi.set(self, "vault", value)

    @property
    @pulumi.getter
    def venafi(self) -> Optional[pulumi.Input["ClusterIssuerSpecVenafiArgs"]]:
        return pulumi.get(self, "venafi")

    @venafi.setter
    def venafi(self, value: Optional[pulumi.Input["ClusterIssuerSpecVenafiArgs"]]):
        pulumi.set(self, "venafi", value)


if not MYPY:

    class ClusterIssuerStatusAcmeArgsDict(TypedDict):
        """
        ACME specific status options.
        This field should only be set if the Issuer is configured to use an ACME
        server to issue certificates.
        """

        last_private_key_hash: NotRequired[pulumi.Input[str]]
        """
        LastPrivateKeyHash is a hash of the private key associated with the latest
        registered ACME account, in order to track changes made to registered account
        associated with the Issuer
        """
        last_registered_email: NotRequired[pulumi.Input[str]]
        """
        LastRegisteredEmail is the email associated with the latest registered
        ACME account, in order to track changes made to registered account
        associated with the  Issuer
        """
        uri: NotRequired[pulumi.Input[str]]
        """
        URI is the unique account identifier, which can also be used to retrieve
        account details from the CA
        """

elif False:
    ClusterIssuerStatusAcmeArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class ClusterIssuerStatusAcmeArgs:
    def __init__(
        __self__,
        *,
        last_private_key_hash: Optional[pulumi.Input[str]] = None,
        last_registered_email: Optional[pulumi.Input[str]] = None,
        uri: Optional[pulumi.Input[str]] = None
    ):
        """
        ACME specific status options.
        This field should only be set if the Issuer is configured to use an ACME
        server to issue certificates.
        :param pulumi.Input[str] last_private_key_hash: LastPrivateKeyHash is a hash of the private key associated with the latest
               registered ACME account, in order to track changes made to registered account
               associated with the Issuer
        :param pulumi.Input[str] last_registered_email: LastRegisteredEmail is the email associated with the latest registered
               ACME account, in order to track changes made to registered account
               associated with the  Issuer
        :param pulumi.Input[str] uri: URI is the unique account identifier, which can also be used to retrieve
               account details from the CA
        """
        if last_private_key_hash is not None:
            pulumi.set(__self__, "last_private_key_hash", last_private_key_hash)
        if last_registered_email is not None:
            pulumi.set(__self__, "last_registered_email", last_registered_email)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)

    @property
    @pulumi.getter(name="lastPrivateKeyHash")
    def last_private_key_hash(self) -> Optional[pulumi.Input[str]]:
        """
        LastPrivateKeyHash is a hash of the private key associated with the latest
        registered ACME account, in order to track changes made to registered account
        associated with the Issuer
        """
        return pulumi.get(self, "last_private_key_hash")

    @last_private_key_hash.setter
    def last_private_key_hash(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_private_key_hash", value)

    @property
    @pulumi.getter(name="lastRegisteredEmail")
    def last_registered_email(self) -> Optional[pulumi.Input[str]]:
        """
        LastRegisteredEmail is the email associated with the latest registered
        ACME account, in order to track changes made to registered account
        associated with the  Issuer
        """
        return pulumi.get(self, "last_registered_email")

    @last_registered_email.setter
    def last_registered_email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_registered_email", value)

    @property
    @pulumi.getter
    def uri(self) -> Optional[pulumi.Input[str]]:
        """
        URI is the unique account identifier, which can also be used to retrieve
        account details from the CA
        """
        return pulumi.get(self, "uri")

    @uri.setter
    def uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uri", value)


if not MYPY:

    class ClusterIssuerStatusConditionsArgsDict(TypedDict):
        """
        IssuerCondition contains condition information for an Issuer.
        """

        last_transition_time: NotRequired[pulumi.Input[str]]
        """
        LastTransitionTime is the timestamp corresponding to the last status
        change of this condition.
        """
        message: NotRequired[pulumi.Input[str]]
        """
        Message is a human readable description of the details of the last
        transition, complementing reason.
        """
        observed_generation: NotRequired[pulumi.Input[int]]
        """
        If set, this represents the .metadata.generation that the condition was
        set based upon.
        For instance, if .metadata.generation is currently 12, but the
        .status.condition[x].observedGeneration is 9, the condition is out of date
        with respect to the current state of the Issuer.
        """
        reason: NotRequired[pulumi.Input[str]]
        """
        Reason is a brief machine readable explanation for the condition's last
        transition.
        """
        status: NotRequired[pulumi.Input[str]]
        """
        Status of the condition, one of (`True`, `False`, `Unknown`).
        """
        type: NotRequired[pulumi.Input[str]]
        """
        Type of the condition, known values are (`Ready`).
        """

elif False:
    ClusterIssuerStatusConditionsArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class ClusterIssuerStatusConditionsArgs:
    def __init__(
        __self__,
        *,
        last_transition_time: Optional[pulumi.Input[str]] = None,
        message: Optional[pulumi.Input[str]] = None,
        observed_generation: Optional[pulumi.Input[int]] = None,
        reason: Optional[pulumi.Input[str]] = None,
        status: Optional[pulumi.Input[str]] = None,
        type: Optional[pulumi.Input[str]] = None
    ):
        """
        IssuerCondition contains condition information for an Issuer.
        :param pulumi.Input[str] last_transition_time: LastTransitionTime is the timestamp corresponding to the last status
               change of this condition.
        :param pulumi.Input[str] message: Message is a human readable description of the details of the last
               transition, complementing reason.
        :param pulumi.Input[int] observed_generation: If set, this represents the .metadata.generation that the condition was
               set based upon.
               For instance, if .metadata.generation is currently 12, but the
               .status.condition[x].observedGeneration is 9, the condition is out of date
               with respect to the current state of the Issuer.
        :param pulumi.Input[str] reason: Reason is a brief machine readable explanation for the condition's last
               transition.
        :param pulumi.Input[str] status: Status of the condition, one of (`True`, `False`, `Unknown`).
        :param pulumi.Input[str] type: Type of the condition, known values are (`Ready`).
        """
        if last_transition_time is not None:
            pulumi.set(__self__, "last_transition_time", last_transition_time)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if observed_generation is not None:
            pulumi.set(__self__, "observed_generation", observed_generation)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> Optional[pulumi.Input[str]]:
        """
        LastTransitionTime is the timestamp corresponding to the last status
        change of this condition.
        """
        return pulumi.get(self, "last_transition_time")

    @last_transition_time.setter
    def last_transition_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_transition_time", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        """
        Message is a human readable description of the details of the last
        transition, complementing reason.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter(name="observedGeneration")
    def observed_generation(self) -> Optional[pulumi.Input[int]]:
        """
        If set, this represents the .metadata.generation that the condition was
        set based upon.
        For instance, if .metadata.generation is currently 12, but the
        .status.condition[x].observedGeneration is 9, the condition is out of date
        with respect to the current state of the Issuer.
        """
        return pulumi.get(self, "observed_generation")

    @observed_generation.setter
    def observed_generation(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "observed_generation", value)

    @property
    @pulumi.getter
    def reason(self) -> Optional[pulumi.Input[str]]:
        """
        Reason is a brief machine readable explanation for the condition's last
        transition.
        """
        return pulumi.get(self, "reason")

    @reason.setter
    def reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reason", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Status of the condition, one of (`True`, `False`, `Unknown`).
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of the condition, known values are (`Ready`).
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


if not MYPY:

    class ClusterIssuerStatusArgsDict(TypedDict):
        """
        Status of the ClusterIssuer. This is set and managed automatically.
        """

        acme: NotRequired[pulumi.Input["ClusterIssuerStatusAcmeArgsDict"]]
        conditions: NotRequired[
            pulumi.Input[
                Sequence[pulumi.Input["ClusterIssuerStatusConditionsArgsDict"]]
            ]
        ]
        """
        List of status conditions to indicate the status of a CertificateRequest.
        Known condition types are `Ready`.
        """

elif False:
    ClusterIssuerStatusArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class ClusterIssuerStatusArgs:
    def __init__(
        __self__,
        *,
        acme: Optional[pulumi.Input["ClusterIssuerStatusAcmeArgs"]] = None,
        conditions: Optional[
            pulumi.Input[Sequence[pulumi.Input["ClusterIssuerStatusConditionsArgs"]]]
        ] = None
    ):
        """
        Status of the ClusterIssuer. This is set and managed automatically.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterIssuerStatusConditionsArgs']]] conditions: List of status conditions to indicate the status of a CertificateRequest.
               Known condition types are `Ready`.
        """
        if acme is not None:
            pulumi.set(__self__, "acme", acme)
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)

    @property
    @pulumi.getter
    def acme(self) -> Optional[pulumi.Input["ClusterIssuerStatusAcmeArgs"]]:
        return pulumi.get(self, "acme")

    @acme.setter
    def acme(self, value: Optional[pulumi.Input["ClusterIssuerStatusAcmeArgs"]]):
        pulumi.set(self, "acme", value)

    @property
    @pulumi.getter
    def conditions(
        self,
    ) -> Optional[
        pulumi.Input[Sequence[pulumi.Input["ClusterIssuerStatusConditionsArgs"]]]
    ]:
        """
        List of status conditions to indicate the status of a CertificateRequest.
        Known condition types are `Ready`.
        """
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(
        self,
        value: Optional[
            pulumi.Input[Sequence[pulumi.Input["ClusterIssuerStatusConditionsArgs"]]]
        ],
    ):
        pulumi.set(self, "conditions", value)


if not MYPY:

    class ClusterIssuerArgsDict(TypedDict):
        """
        A ClusterIssuer represents a certificate issuing authority which can be
        referenced as part of `issuerRef` fields.
        It is similar to an Issuer, however it is cluster-scoped and therefore can
        be referenced by resources that exist in *any* namespace, not just the same
        namespace as the referent.
        """

        api_version: NotRequired[pulumi.Input[str]]
        """
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
        """
        kind: NotRequired[pulumi.Input[str]]
        """
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        """
        metadata: NotRequired[pulumi.Input["_meta.v1.ObjectMetaArgsDict"]]
        """
        Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
        """
        spec: NotRequired[pulumi.Input["ClusterIssuerSpecArgsDict"]]
        status: NotRequired[pulumi.Input["ClusterIssuerStatusArgsDict"]]

elif False:
    ClusterIssuerArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class ClusterIssuerArgs:
    def __init__(
        __self__,
        *,
        api_version: Optional[pulumi.Input[str]] = None,
        kind: Optional[pulumi.Input[str]] = None,
        metadata: Optional[pulumi.Input["_meta.v1.ObjectMetaArgs"]] = None,
        spec: Optional[pulumi.Input["ClusterIssuerSpecArgs"]] = None,
        status: Optional[pulumi.Input["ClusterIssuerStatusArgs"]] = None
    ):
        """
        A ClusterIssuer represents a certificate issuing authority which can be
        referenced as part of `issuerRef` fields.
        It is similar to an Issuer, however it is cluster-scoped and therefore can
        be referenced by resources that exist in *any* namespace, not just the same
        namespace as the referent.
        :param pulumi.Input[str] api_version: APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
        :param pulumi.Input[str] kind: Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        :param pulumi.Input['_meta.v1.ObjectMetaArgs'] metadata: Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
        """
        if api_version is not None:
            pulumi.set(__self__, "api_version", "cert-manager.io/v1")
        if kind is not None:
            pulumi.set(__self__, "kind", "ClusterIssuer")
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if spec is not None:
            pulumi.set(__self__, "spec", spec)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[pulumi.Input[str]]:
        """
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
        """
        return pulumi.get(self, "api_version")

    @api_version.setter
    def api_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_version", value)

    @property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[str]]:
        """
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input["_meta.v1.ObjectMetaArgs"]]:
        """
        Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
        """
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input["_meta.v1.ObjectMetaArgs"]]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter
    def spec(self) -> Optional[pulumi.Input["ClusterIssuerSpecArgs"]]:
        return pulumi.get(self, "spec")

    @spec.setter
    def spec(self, value: Optional[pulumi.Input["ClusterIssuerSpecArgs"]]):
        pulumi.set(self, "spec", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input["ClusterIssuerStatusArgs"]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input["ClusterIssuerStatusArgs"]]):
        pulumi.set(self, "status", value)


if not MYPY:

    class IssuerSpecAcmeExternalAccountBindingKeySecretRefPatchArgsDict(TypedDict):
        """
        keySecretRef is a Secret Key Selector referencing a data item in a Kubernetes
        Secret which holds the symmetric MAC key of the External Account Binding.
        The `key` is the index string that is paired with the key data in the
        Secret and should not be confused with the key data itself, or indeed with
        the External Account Binding keyID above.
        The secret key stored in the Secret **must** be un-padded, base64 URL
        encoded data.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """

elif False:
    IssuerSpecAcmeExternalAccountBindingKeySecretRefPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeExternalAccountBindingKeySecretRefPatchArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        name: Optional[pulumi.Input[str]] = None
    ):
        """
        keySecretRef is a Secret Key Selector referencing a data item in a Kubernetes
        Secret which holds the symmetric MAC key of the External Account Binding.
        The `key` is the index string that is paired with the key data in the
        Secret and should not be confused with the key data itself, or indeed with
        the External Account Binding keyID above.
        The secret key stored in the Secret **must** be un-padded, base64 URL
        encoded data.
        :param pulumi.Input[str] key: The key of the entry in the Secret resource's `data` field to be used.
               Some instances of this field may be defaulted, in others it may be
               required.
        :param pulumi.Input[str] name: Name of the resource being referred to.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:

    class IssuerSpecAcmeExternalAccountBindingKeySecretRefArgsDict(TypedDict):
        """
        keySecretRef is a Secret Key Selector referencing a data item in a Kubernetes
        Secret which holds the symmetric MAC key of the External Account Binding.
        The `key` is the index string that is paired with the key data in the
        Secret and should not be confused with the key data itself, or indeed with
        the External Account Binding keyID above.
        The secret key stored in the Secret **must** be un-padded, base64 URL
        encoded data.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """

elif False:
    IssuerSpecAcmeExternalAccountBindingKeySecretRefArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeExternalAccountBindingKeySecretRefArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        name: Optional[pulumi.Input[str]] = None
    ):
        """
        keySecretRef is a Secret Key Selector referencing a data item in a Kubernetes
        Secret which holds the symmetric MAC key of the External Account Binding.
        The `key` is the index string that is paired with the key data in the
        Secret and should not be confused with the key data itself, or indeed with
        the External Account Binding keyID above.
        The secret key stored in the Secret **must** be un-padded, base64 URL
        encoded data.
        :param pulumi.Input[str] key: The key of the entry in the Secret resource's `data` field to be used.
               Some instances of this field may be defaulted, in others it may be
               required.
        :param pulumi.Input[str] name: Name of the resource being referred to.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:

    class IssuerSpecAcmeExternalAccountBindingPatchArgsDict(TypedDict):
        """
        ExternalAccountBinding is a reference to a CA external account of the ACME
        server.
        If set, upon registration cert-manager will attempt to associate the given
        external account credentials with the registered ACME account.
        """

        key_algorithm: NotRequired[pulumi.Input[str]]
        """
        Deprecated: keyAlgorithm field exists for historical compatibility
        reasons and should not be used. The algorithm is now hardcoded to HS256
        in golang/x/crypto/acme.
        """
        key_id: NotRequired[pulumi.Input[str]]
        """
        keyID is the ID of the CA key that the External Account is bound to.
        """
        key_secret_ref: NotRequired[
            pulumi.Input[
                "IssuerSpecAcmeExternalAccountBindingKeySecretRefPatchArgsDict"
            ]
        ]

elif False:
    IssuerSpecAcmeExternalAccountBindingPatchArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class IssuerSpecAcmeExternalAccountBindingPatchArgs:
    def __init__(
        __self__,
        *,
        key_algorithm: Optional[pulumi.Input[str]] = None,
        key_id: Optional[pulumi.Input[str]] = None,
        key_secret_ref: Optional[
            pulumi.Input["IssuerSpecAcmeExternalAccountBindingKeySecretRefPatchArgs"]
        ] = None
    ):
        """
        ExternalAccountBinding is a reference to a CA external account of the ACME
        server.
        If set, upon registration cert-manager will attempt to associate the given
        external account credentials with the registered ACME account.
        :param pulumi.Input[str] key_algorithm: Deprecated: keyAlgorithm field exists for historical compatibility
               reasons and should not be used. The algorithm is now hardcoded to HS256
               in golang/x/crypto/acme.
        :param pulumi.Input[str] key_id: keyID is the ID of the CA key that the External Account is bound to.
        """
        if key_algorithm is not None:
            pulumi.set(__self__, "key_algorithm", key_algorithm)
        if key_id is not None:
            pulumi.set(__self__, "key_id", key_id)
        if key_secret_ref is not None:
            pulumi.set(__self__, "key_secret_ref", key_secret_ref)

    @property
    @pulumi.getter(name="keyAlgorithm")
    def key_algorithm(self) -> Optional[pulumi.Input[str]]:
        """
        Deprecated: keyAlgorithm field exists for historical compatibility
        reasons and should not be used. The algorithm is now hardcoded to HS256
        in golang/x/crypto/acme.
        """
        return pulumi.get(self, "key_algorithm")

    @key_algorithm.setter
    def key_algorithm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_algorithm", value)

    @property
    @pulumi.getter(name="keyID")
    def key_id(self) -> Optional[pulumi.Input[str]]:
        """
        keyID is the ID of the CA key that the External Account is bound to.
        """
        return pulumi.get(self, "key_id")

    @key_id.setter
    def key_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_id", value)

    @property
    @pulumi.getter(name="keySecretRef")
    def key_secret_ref(
        self,
    ) -> Optional[
        pulumi.Input["IssuerSpecAcmeExternalAccountBindingKeySecretRefPatchArgs"]
    ]:
        return pulumi.get(self, "key_secret_ref")

    @key_secret_ref.setter
    def key_secret_ref(
        self,
        value: Optional[
            pulumi.Input["IssuerSpecAcmeExternalAccountBindingKeySecretRefPatchArgs"]
        ],
    ):
        pulumi.set(self, "key_secret_ref", value)


if not MYPY:

    class IssuerSpecAcmeExternalAccountBindingArgsDict(TypedDict):
        """
        ExternalAccountBinding is a reference to a CA external account of the ACME
        server.
        If set, upon registration cert-manager will attempt to associate the given
        external account credentials with the registered ACME account.
        """

        key_algorithm: NotRequired[pulumi.Input[str]]
        """
        Deprecated: keyAlgorithm field exists for historical compatibility
        reasons and should not be used. The algorithm is now hardcoded to HS256
        in golang/x/crypto/acme.
        """
        key_id: NotRequired[pulumi.Input[str]]
        """
        keyID is the ID of the CA key that the External Account is bound to.
        """
        key_secret_ref: NotRequired[
            pulumi.Input["IssuerSpecAcmeExternalAccountBindingKeySecretRefArgsDict"]
        ]

elif False:
    IssuerSpecAcmeExternalAccountBindingArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class IssuerSpecAcmeExternalAccountBindingArgs:
    def __init__(
        __self__,
        *,
        key_algorithm: Optional[pulumi.Input[str]] = None,
        key_id: Optional[pulumi.Input[str]] = None,
        key_secret_ref: Optional[
            pulumi.Input["IssuerSpecAcmeExternalAccountBindingKeySecretRefArgs"]
        ] = None
    ):
        """
        ExternalAccountBinding is a reference to a CA external account of the ACME
        server.
        If set, upon registration cert-manager will attempt to associate the given
        external account credentials with the registered ACME account.
        :param pulumi.Input[str] key_algorithm: Deprecated: keyAlgorithm field exists for historical compatibility
               reasons and should not be used. The algorithm is now hardcoded to HS256
               in golang/x/crypto/acme.
        :param pulumi.Input[str] key_id: keyID is the ID of the CA key that the External Account is bound to.
        """
        if key_algorithm is not None:
            pulumi.set(__self__, "key_algorithm", key_algorithm)
        if key_id is not None:
            pulumi.set(__self__, "key_id", key_id)
        if key_secret_ref is not None:
            pulumi.set(__self__, "key_secret_ref", key_secret_ref)

    @property
    @pulumi.getter(name="keyAlgorithm")
    def key_algorithm(self) -> Optional[pulumi.Input[str]]:
        """
        Deprecated: keyAlgorithm field exists for historical compatibility
        reasons and should not be used. The algorithm is now hardcoded to HS256
        in golang/x/crypto/acme.
        """
        return pulumi.get(self, "key_algorithm")

    @key_algorithm.setter
    def key_algorithm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_algorithm", value)

    @property
    @pulumi.getter(name="keyID")
    def key_id(self) -> Optional[pulumi.Input[str]]:
        """
        keyID is the ID of the CA key that the External Account is bound to.
        """
        return pulumi.get(self, "key_id")

    @key_id.setter
    def key_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_id", value)

    @property
    @pulumi.getter(name="keySecretRef")
    def key_secret_ref(
        self,
    ) -> Optional[pulumi.Input["IssuerSpecAcmeExternalAccountBindingKeySecretRefArgs"]]:
        return pulumi.get(self, "key_secret_ref")

    @key_secret_ref.setter
    def key_secret_ref(
        self,
        value: Optional[
            pulumi.Input["IssuerSpecAcmeExternalAccountBindingKeySecretRefArgs"]
        ],
    ):
        pulumi.set(self, "key_secret_ref", value)


if not MYPY:

    class IssuerSpecAcmePatchArgsDict(TypedDict):
        """
        ACME configures this issuer to communicate with a RFC8555 (ACME) server
        to obtain signed x509 certificates.
        """

        ca_bundle: NotRequired[pulumi.Input[str]]
        """
        Base64-encoded bundle of PEM CAs which can be used to validate the certificate
        chain presented by the ACME server.
        Mutually exclusive with SkipTLSVerify; prefer using CABundle to prevent various
        kinds of security vulnerabilities.
        If CABundle and SkipTLSVerify are unset, the system certificate bundle inside
        the container is used to validate the TLS connection.
        """
        disable_account_key_generation: NotRequired[pulumi.Input[bool]]
        """
        Enables or disables generating a new ACME account key.
        If true, the Issuer resource will *not* request a new account but will expect
        the account key to be supplied via an existing secret.
        If false, the cert-manager system will generate a new ACME account key
        for the Issuer.
        Defaults to false.
        """
        email: NotRequired[pulumi.Input[str]]
        """
        Email is the email address to be associated with the ACME account.
        This field is optional, but it is strongly recommended to be set.
        It will be used to contact you in case of issues with your account or
        certificates, including expiry notification emails.
        This field may be updated after the account is initially registered.
        """
        enable_duration_feature: NotRequired[pulumi.Input[bool]]
        """
        Enables requesting a Not After date on certificates that matches the
        duration of the certificate. This is not supported by all ACME servers
        like Let's Encrypt. If set to true when the ACME server does not support
        it, it will create an error on the Order.
        Defaults to false.
        """
        external_account_binding: NotRequired[
            pulumi.Input["IssuerSpecAcmeExternalAccountBindingPatchArgsDict"]
        ]
        preferred_chain: NotRequired[pulumi.Input[str]]
        """
        PreferredChain is the chain to use if the ACME server outputs multiple.
        PreferredChain is no guarantee that this one gets delivered by the ACME
        endpoint.
        For example, for Let's Encrypt's DST crosssign you would use:
        "DST Root CA X3" or "ISRG Root X1" for the newer Let's Encrypt root CA.
        This value picks the first certificate bundle in the combined set of
        ACME default and alternative chains that has a root-most certificate with
        this value as its issuer's commonname.
        """
        private_key_secret_ref: NotRequired[
            pulumi.Input["IssuerSpecAcmePrivateKeySecretRefPatchArgsDict"]
        ]
        server: NotRequired[pulumi.Input[str]]
        """
        Server is the URL used to access the ACME server's 'directory' endpoint.
        For example, for Let's Encrypt's staging endpoint, you would use:
        "https://acme-staging-v02.api.letsencrypt.org/directory".
        Only ACME v2 endpoints (i.e. RFC 8555) are supported.
        """
        skip_tls_verify: NotRequired[pulumi.Input[bool]]
        """
        INSECURE: Enables or disables validation of the ACME server TLS certificate.
        If true, requests to the ACME server will not have the TLS certificate chain
        validated.
        Mutually exclusive with CABundle; prefer using CABundle to prevent various
        kinds of security vulnerabilities.
        Only enable this option in development environments.
        If CABundle and SkipTLSVerify are unset, the system certificate bundle inside
        the container is used to validate the TLS connection.
        Defaults to false.
        """
        solvers: NotRequired[
            pulumi.Input[Sequence[pulumi.Input["IssuerSpecAcmeSolversPatchArgsDict"]]]
        ]
        """
        Solvers is a list of challenge solvers that will be used to solve
        ACME challenges for the matching domains.
        Solver configurations must be provided in order to obtain certificates
        from an ACME server.
        For more information, see: https://cert-manager.io/docs/configuration/acme/
        """

elif False:
    IssuerSpecAcmePatchArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class IssuerSpecAcmePatchArgs:
    def __init__(
        __self__,
        *,
        ca_bundle: Optional[pulumi.Input[str]] = None,
        disable_account_key_generation: Optional[pulumi.Input[bool]] = None,
        email: Optional[pulumi.Input[str]] = None,
        enable_duration_feature: Optional[pulumi.Input[bool]] = None,
        external_account_binding: Optional[
            pulumi.Input["IssuerSpecAcmeExternalAccountBindingPatchArgs"]
        ] = None,
        preferred_chain: Optional[pulumi.Input[str]] = None,
        private_key_secret_ref: Optional[
            pulumi.Input["IssuerSpecAcmePrivateKeySecretRefPatchArgs"]
        ] = None,
        server: Optional[pulumi.Input[str]] = None,
        skip_tls_verify: Optional[pulumi.Input[bool]] = None,
        solvers: Optional[
            pulumi.Input[Sequence[pulumi.Input["IssuerSpecAcmeSolversPatchArgs"]]]
        ] = None
    ):
        """
        ACME configures this issuer to communicate with a RFC8555 (ACME) server
        to obtain signed x509 certificates.
        :param pulumi.Input[str] ca_bundle: Base64-encoded bundle of PEM CAs which can be used to validate the certificate
               chain presented by the ACME server.
               Mutually exclusive with SkipTLSVerify; prefer using CABundle to prevent various
               kinds of security vulnerabilities.
               If CABundle and SkipTLSVerify are unset, the system certificate bundle inside
               the container is used to validate the TLS connection.
        :param pulumi.Input[bool] disable_account_key_generation: Enables or disables generating a new ACME account key.
               If true, the Issuer resource will *not* request a new account but will expect
               the account key to be supplied via an existing secret.
               If false, the cert-manager system will generate a new ACME account key
               for the Issuer.
               Defaults to false.
        :param pulumi.Input[str] email: Email is the email address to be associated with the ACME account.
               This field is optional, but it is strongly recommended to be set.
               It will be used to contact you in case of issues with your account or
               certificates, including expiry notification emails.
               This field may be updated after the account is initially registered.
        :param pulumi.Input[bool] enable_duration_feature: Enables requesting a Not After date on certificates that matches the
               duration of the certificate. This is not supported by all ACME servers
               like Let's Encrypt. If set to true when the ACME server does not support
               it, it will create an error on the Order.
               Defaults to false.
        :param pulumi.Input[str] preferred_chain: PreferredChain is the chain to use if the ACME server outputs multiple.
               PreferredChain is no guarantee that this one gets delivered by the ACME
               endpoint.
               For example, for Let's Encrypt's DST crosssign you would use:
               "DST Root CA X3" or "ISRG Root X1" for the newer Let's Encrypt root CA.
               This value picks the first certificate bundle in the combined set of
               ACME default and alternative chains that has a root-most certificate with
               this value as its issuer's commonname.
        :param pulumi.Input[str] server: Server is the URL used to access the ACME server's 'directory' endpoint.
               For example, for Let's Encrypt's staging endpoint, you would use:
               "https://acme-staging-v02.api.letsencrypt.org/directory".
               Only ACME v2 endpoints (i.e. RFC 8555) are supported.
        :param pulumi.Input[bool] skip_tls_verify: INSECURE: Enables or disables validation of the ACME server TLS certificate.
               If true, requests to the ACME server will not have the TLS certificate chain
               validated.
               Mutually exclusive with CABundle; prefer using CABundle to prevent various
               kinds of security vulnerabilities.
               Only enable this option in development environments.
               If CABundle and SkipTLSVerify are unset, the system certificate bundle inside
               the container is used to validate the TLS connection.
               Defaults to false.
        :param pulumi.Input[Sequence[pulumi.Input['IssuerSpecAcmeSolversPatchArgs']]] solvers: Solvers is a list of challenge solvers that will be used to solve
               ACME challenges for the matching domains.
               Solver configurations must be provided in order to obtain certificates
               from an ACME server.
               For more information, see: https://cert-manager.io/docs/configuration/acme/
        """
        if ca_bundle is not None:
            pulumi.set(__self__, "ca_bundle", ca_bundle)
        if disable_account_key_generation is not None:
            pulumi.set(
                __self__,
                "disable_account_key_generation",
                disable_account_key_generation,
            )
        if email is not None:
            pulumi.set(__self__, "email", email)
        if enable_duration_feature is not None:
            pulumi.set(__self__, "enable_duration_feature", enable_duration_feature)
        if external_account_binding is not None:
            pulumi.set(__self__, "external_account_binding", external_account_binding)
        if preferred_chain is not None:
            pulumi.set(__self__, "preferred_chain", preferred_chain)
        if private_key_secret_ref is not None:
            pulumi.set(__self__, "private_key_secret_ref", private_key_secret_ref)
        if server is not None:
            pulumi.set(__self__, "server", server)
        if skip_tls_verify is not None:
            pulumi.set(__self__, "skip_tls_verify", skip_tls_verify)
        if solvers is not None:
            pulumi.set(__self__, "solvers", solvers)

    @property
    @pulumi.getter(name="caBundle")
    def ca_bundle(self) -> Optional[pulumi.Input[str]]:
        """
        Base64-encoded bundle of PEM CAs which can be used to validate the certificate
        chain presented by the ACME server.
        Mutually exclusive with SkipTLSVerify; prefer using CABundle to prevent various
        kinds of security vulnerabilities.
        If CABundle and SkipTLSVerify are unset, the system certificate bundle inside
        the container is used to validate the TLS connection.
        """
        return pulumi.get(self, "ca_bundle")

    @ca_bundle.setter
    def ca_bundle(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ca_bundle", value)

    @property
    @pulumi.getter(name="disableAccountKeyGeneration")
    def disable_account_key_generation(self) -> Optional[pulumi.Input[bool]]:
        """
        Enables or disables generating a new ACME account key.
        If true, the Issuer resource will *not* request a new account but will expect
        the account key to be supplied via an existing secret.
        If false, the cert-manager system will generate a new ACME account key
        for the Issuer.
        Defaults to false.
        """
        return pulumi.get(self, "disable_account_key_generation")

    @disable_account_key_generation.setter
    def disable_account_key_generation(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disable_account_key_generation", value)

    @property
    @pulumi.getter
    def email(self) -> Optional[pulumi.Input[str]]:
        """
        Email is the email address to be associated with the ACME account.
        This field is optional, but it is strongly recommended to be set.
        It will be used to contact you in case of issues with your account or
        certificates, including expiry notification emails.
        This field may be updated after the account is initially registered.
        """
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email", value)

    @property
    @pulumi.getter(name="enableDurationFeature")
    def enable_duration_feature(self) -> Optional[pulumi.Input[bool]]:
        """
        Enables requesting a Not After date on certificates that matches the
        duration of the certificate. This is not supported by all ACME servers
        like Let's Encrypt. If set to true when the ACME server does not support
        it, it will create an error on the Order.
        Defaults to false.
        """
        return pulumi.get(self, "enable_duration_feature")

    @enable_duration_feature.setter
    def enable_duration_feature(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_duration_feature", value)

    @property
    @pulumi.getter(name="externalAccountBinding")
    def external_account_binding(
        self,
    ) -> Optional[pulumi.Input["IssuerSpecAcmeExternalAccountBindingPatchArgs"]]:
        return pulumi.get(self, "external_account_binding")

    @external_account_binding.setter
    def external_account_binding(
        self,
        value: Optional[pulumi.Input["IssuerSpecAcmeExternalAccountBindingPatchArgs"]],
    ):
        pulumi.set(self, "external_account_binding", value)

    @property
    @pulumi.getter(name="preferredChain")
    def preferred_chain(self) -> Optional[pulumi.Input[str]]:
        """
        PreferredChain is the chain to use if the ACME server outputs multiple.
        PreferredChain is no guarantee that this one gets delivered by the ACME
        endpoint.
        For example, for Let's Encrypt's DST crosssign you would use:
        "DST Root CA X3" or "ISRG Root X1" for the newer Let's Encrypt root CA.
        This value picks the first certificate bundle in the combined set of
        ACME default and alternative chains that has a root-most certificate with
        this value as its issuer's commonname.
        """
        return pulumi.get(self, "preferred_chain")

    @preferred_chain.setter
    def preferred_chain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "preferred_chain", value)

    @property
    @pulumi.getter(name="privateKeySecretRef")
    def private_key_secret_ref(
        self,
    ) -> Optional[pulumi.Input["IssuerSpecAcmePrivateKeySecretRefPatchArgs"]]:
        return pulumi.get(self, "private_key_secret_ref")

    @private_key_secret_ref.setter
    def private_key_secret_ref(
        self,
        value: Optional[pulumi.Input["IssuerSpecAcmePrivateKeySecretRefPatchArgs"]],
    ):
        pulumi.set(self, "private_key_secret_ref", value)

    @property
    @pulumi.getter
    def server(self) -> Optional[pulumi.Input[str]]:
        """
        Server is the URL used to access the ACME server's 'directory' endpoint.
        For example, for Let's Encrypt's staging endpoint, you would use:
        "https://acme-staging-v02.api.letsencrypt.org/directory".
        Only ACME v2 endpoints (i.e. RFC 8555) are supported.
        """
        return pulumi.get(self, "server")

    @server.setter
    def server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server", value)

    @property
    @pulumi.getter(name="skipTLSVerify")
    def skip_tls_verify(self) -> Optional[pulumi.Input[bool]]:
        """
        INSECURE: Enables or disables validation of the ACME server TLS certificate.
        If true, requests to the ACME server will not have the TLS certificate chain
        validated.
        Mutually exclusive with CABundle; prefer using CABundle to prevent various
        kinds of security vulnerabilities.
        Only enable this option in development environments.
        If CABundle and SkipTLSVerify are unset, the system certificate bundle inside
        the container is used to validate the TLS connection.
        Defaults to false.
        """
        return pulumi.get(self, "skip_tls_verify")

    @skip_tls_verify.setter
    def skip_tls_verify(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "skip_tls_verify", value)

    @property
    @pulumi.getter
    def solvers(
        self,
    ) -> Optional[
        pulumi.Input[Sequence[pulumi.Input["IssuerSpecAcmeSolversPatchArgs"]]]
    ]:
        """
        Solvers is a list of challenge solvers that will be used to solve
        ACME challenges for the matching domains.
        Solver configurations must be provided in order to obtain certificates
        from an ACME server.
        For more information, see: https://cert-manager.io/docs/configuration/acme/
        """
        return pulumi.get(self, "solvers")

    @solvers.setter
    def solvers(
        self,
        value: Optional[
            pulumi.Input[Sequence[pulumi.Input["IssuerSpecAcmeSolversPatchArgs"]]]
        ],
    ):
        pulumi.set(self, "solvers", value)


if not MYPY:

    class IssuerSpecAcmePrivateKeySecretRefPatchArgsDict(TypedDict):
        """
        PrivateKey is the name of a Kubernetes Secret resource that will be used to
        store the automatically generated ACME account private key.
        Optionally, a `key` may be specified to select a specific entry within
        the named Secret resource.
        If `key` is not specified, a default of `tls.key` will be used.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """

elif False:
    IssuerSpecAcmePrivateKeySecretRefPatchArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class IssuerSpecAcmePrivateKeySecretRefPatchArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        name: Optional[pulumi.Input[str]] = None
    ):
        """
        PrivateKey is the name of a Kubernetes Secret resource that will be used to
        store the automatically generated ACME account private key.
        Optionally, a `key` may be specified to select a specific entry within
        the named Secret resource.
        If `key` is not specified, a default of `tls.key` will be used.
        :param pulumi.Input[str] key: The key of the entry in the Secret resource's `data` field to be used.
               Some instances of this field may be defaulted, in others it may be
               required.
        :param pulumi.Input[str] name: Name of the resource being referred to.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:

    class IssuerSpecAcmePrivateKeySecretRefArgsDict(TypedDict):
        """
        PrivateKey is the name of a Kubernetes Secret resource that will be used to
        store the automatically generated ACME account private key.
        Optionally, a `key` may be specified to select a specific entry within
        the named Secret resource.
        If `key` is not specified, a default of `tls.key` will be used.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """

elif False:
    IssuerSpecAcmePrivateKeySecretRefArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class IssuerSpecAcmePrivateKeySecretRefArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        name: Optional[pulumi.Input[str]] = None
    ):
        """
        PrivateKey is the name of a Kubernetes Secret resource that will be used to
        store the automatically generated ACME account private key.
        Optionally, a `key` may be specified to select a specific entry within
        the named Secret resource.
        If `key` is not specified, a default of `tls.key` will be used.
        :param pulumi.Input[str] key: The key of the entry in the Secret resource's `data` field to be used.
               Some instances of this field may be defaulted, in others it may be
               required.
        :param pulumi.Input[str] name: Name of the resource being referred to.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:

    class IssuerSpecAcmeSolversDns01AcmeDNSAccountSecretRefPatchArgsDict(TypedDict):
        """
        A reference to a specific 'key' within a Secret resource.
        In some instances, `key` is a required field.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """

elif False:
    IssuerSpecAcmeSolversDns01AcmeDNSAccountSecretRefPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversDns01AcmeDNSAccountSecretRefPatchArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        name: Optional[pulumi.Input[str]] = None
    ):
        """
        A reference to a specific 'key' within a Secret resource.
        In some instances, `key` is a required field.
        :param pulumi.Input[str] key: The key of the entry in the Secret resource's `data` field to be used.
               Some instances of this field may be defaulted, in others it may be
               required.
        :param pulumi.Input[str] name: Name of the resource being referred to.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:

    class IssuerSpecAcmeSolversDns01AcmeDNSAccountSecretRefArgsDict(TypedDict):
        """
        A reference to a specific 'key' within a Secret resource.
        In some instances, `key` is a required field.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """

elif False:
    IssuerSpecAcmeSolversDns01AcmeDNSAccountSecretRefArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversDns01AcmeDNSAccountSecretRefArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        name: Optional[pulumi.Input[str]] = None
    ):
        """
        A reference to a specific 'key' within a Secret resource.
        In some instances, `key` is a required field.
        :param pulumi.Input[str] key: The key of the entry in the Secret resource's `data` field to be used.
               Some instances of this field may be defaulted, in others it may be
               required.
        :param pulumi.Input[str] name: Name of the resource being referred to.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:

    class IssuerSpecAcmeSolversDns01AcmeDNSPatchArgsDict(TypedDict):
        """
        Use the 'ACME DNS' (https://github.com/joohoi/acme-dns) API to manage
        DNS01 challenge records.
        """

        account_secret_ref: NotRequired[
            pulumi.Input[
                "IssuerSpecAcmeSolversDns01AcmeDNSAccountSecretRefPatchArgsDict"
            ]
        ]
        host: NotRequired[pulumi.Input[str]]

elif False:
    IssuerSpecAcmeSolversDns01AcmeDNSPatchArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class IssuerSpecAcmeSolversDns01AcmeDNSPatchArgs:
    def __init__(
        __self__,
        *,
        account_secret_ref: Optional[
            pulumi.Input["IssuerSpecAcmeSolversDns01AcmeDNSAccountSecretRefPatchArgs"]
        ] = None,
        host: Optional[pulumi.Input[str]] = None
    ):
        """
        Use the 'ACME DNS' (https://github.com/joohoi/acme-dns) API to manage
        DNS01 challenge records.
        """
        if account_secret_ref is not None:
            pulumi.set(__self__, "account_secret_ref", account_secret_ref)
        if host is not None:
            pulumi.set(__self__, "host", host)

    @property
    @pulumi.getter(name="accountSecretRef")
    def account_secret_ref(
        self,
    ) -> Optional[
        pulumi.Input["IssuerSpecAcmeSolversDns01AcmeDNSAccountSecretRefPatchArgs"]
    ]:
        return pulumi.get(self, "account_secret_ref")

    @account_secret_ref.setter
    def account_secret_ref(
        self,
        value: Optional[
            pulumi.Input["IssuerSpecAcmeSolversDns01AcmeDNSAccountSecretRefPatchArgs"]
        ],
    ):
        pulumi.set(self, "account_secret_ref", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)


if not MYPY:

    class IssuerSpecAcmeSolversDns01AcmeDNSArgsDict(TypedDict):
        """
        Use the 'ACME DNS' (https://github.com/joohoi/acme-dns) API to manage
        DNS01 challenge records.
        """

        account_secret_ref: NotRequired[
            pulumi.Input["IssuerSpecAcmeSolversDns01AcmeDNSAccountSecretRefArgsDict"]
        ]
        host: NotRequired[pulumi.Input[str]]

elif False:
    IssuerSpecAcmeSolversDns01AcmeDNSArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class IssuerSpecAcmeSolversDns01AcmeDNSArgs:
    def __init__(
        __self__,
        *,
        account_secret_ref: Optional[
            pulumi.Input["IssuerSpecAcmeSolversDns01AcmeDNSAccountSecretRefArgs"]
        ] = None,
        host: Optional[pulumi.Input[str]] = None
    ):
        """
        Use the 'ACME DNS' (https://github.com/joohoi/acme-dns) API to manage
        DNS01 challenge records.
        """
        if account_secret_ref is not None:
            pulumi.set(__self__, "account_secret_ref", account_secret_ref)
        if host is not None:
            pulumi.set(__self__, "host", host)

    @property
    @pulumi.getter(name="accountSecretRef")
    def account_secret_ref(
        self,
    ) -> Optional[
        pulumi.Input["IssuerSpecAcmeSolversDns01AcmeDNSAccountSecretRefArgs"]
    ]:
        return pulumi.get(self, "account_secret_ref")

    @account_secret_ref.setter
    def account_secret_ref(
        self,
        value: Optional[
            pulumi.Input["IssuerSpecAcmeSolversDns01AcmeDNSAccountSecretRefArgs"]
        ],
    ):
        pulumi.set(self, "account_secret_ref", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)


if not MYPY:

    class IssuerSpecAcmeSolversDns01AkamaiAccessTokenSecretRefPatchArgsDict(TypedDict):
        """
        A reference to a specific 'key' within a Secret resource.
        In some instances, `key` is a required field.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """

elif False:
    IssuerSpecAcmeSolversDns01AkamaiAccessTokenSecretRefPatchArgsDict: TypeAlias = (
        Mapping[str, Any]
    )


@pulumi.input_type
class IssuerSpecAcmeSolversDns01AkamaiAccessTokenSecretRefPatchArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        name: Optional[pulumi.Input[str]] = None
    ):
        """
        A reference to a specific 'key' within a Secret resource.
        In some instances, `key` is a required field.
        :param pulumi.Input[str] key: The key of the entry in the Secret resource's `data` field to be used.
               Some instances of this field may be defaulted, in others it may be
               required.
        :param pulumi.Input[str] name: Name of the resource being referred to.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:

    class IssuerSpecAcmeSolversDns01AkamaiAccessTokenSecretRefArgsDict(TypedDict):
        """
        A reference to a specific 'key' within a Secret resource.
        In some instances, `key` is a required field.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """

elif False:
    IssuerSpecAcmeSolversDns01AkamaiAccessTokenSecretRefArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversDns01AkamaiAccessTokenSecretRefArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        name: Optional[pulumi.Input[str]] = None
    ):
        """
        A reference to a specific 'key' within a Secret resource.
        In some instances, `key` is a required field.
        :param pulumi.Input[str] key: The key of the entry in the Secret resource's `data` field to be used.
               Some instances of this field may be defaulted, in others it may be
               required.
        :param pulumi.Input[str] name: Name of the resource being referred to.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:

    class IssuerSpecAcmeSolversDns01AkamaiClientSecretSecretRefPatchArgsDict(TypedDict):
        """
        A reference to a specific 'key' within a Secret resource.
        In some instances, `key` is a required field.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """

elif False:
    IssuerSpecAcmeSolversDns01AkamaiClientSecretSecretRefPatchArgsDict: TypeAlias = (
        Mapping[str, Any]
    )


@pulumi.input_type
class IssuerSpecAcmeSolversDns01AkamaiClientSecretSecretRefPatchArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        name: Optional[pulumi.Input[str]] = None
    ):
        """
        A reference to a specific 'key' within a Secret resource.
        In some instances, `key` is a required field.
        :param pulumi.Input[str] key: The key of the entry in the Secret resource's `data` field to be used.
               Some instances of this field may be defaulted, in others it may be
               required.
        :param pulumi.Input[str] name: Name of the resource being referred to.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:

    class IssuerSpecAcmeSolversDns01AkamaiClientSecretSecretRefArgsDict(TypedDict):
        """
        A reference to a specific 'key' within a Secret resource.
        In some instances, `key` is a required field.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """

elif False:
    IssuerSpecAcmeSolversDns01AkamaiClientSecretSecretRefArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversDns01AkamaiClientSecretSecretRefArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        name: Optional[pulumi.Input[str]] = None
    ):
        """
        A reference to a specific 'key' within a Secret resource.
        In some instances, `key` is a required field.
        :param pulumi.Input[str] key: The key of the entry in the Secret resource's `data` field to be used.
               Some instances of this field may be defaulted, in others it may be
               required.
        :param pulumi.Input[str] name: Name of the resource being referred to.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:

    class IssuerSpecAcmeSolversDns01AkamaiClientTokenSecretRefPatchArgsDict(TypedDict):
        """
        A reference to a specific 'key' within a Secret resource.
        In some instances, `key` is a required field.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """

elif False:
    IssuerSpecAcmeSolversDns01AkamaiClientTokenSecretRefPatchArgsDict: TypeAlias = (
        Mapping[str, Any]
    )


@pulumi.input_type
class IssuerSpecAcmeSolversDns01AkamaiClientTokenSecretRefPatchArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        name: Optional[pulumi.Input[str]] = None
    ):
        """
        A reference to a specific 'key' within a Secret resource.
        In some instances, `key` is a required field.
        :param pulumi.Input[str] key: The key of the entry in the Secret resource's `data` field to be used.
               Some instances of this field may be defaulted, in others it may be
               required.
        :param pulumi.Input[str] name: Name of the resource being referred to.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:

    class IssuerSpecAcmeSolversDns01AkamaiClientTokenSecretRefArgsDict(TypedDict):
        """
        A reference to a specific 'key' within a Secret resource.
        In some instances, `key` is a required field.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """

elif False:
    IssuerSpecAcmeSolversDns01AkamaiClientTokenSecretRefArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversDns01AkamaiClientTokenSecretRefArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        name: Optional[pulumi.Input[str]] = None
    ):
        """
        A reference to a specific 'key' within a Secret resource.
        In some instances, `key` is a required field.
        :param pulumi.Input[str] key: The key of the entry in the Secret resource's `data` field to be used.
               Some instances of this field may be defaulted, in others it may be
               required.
        :param pulumi.Input[str] name: Name of the resource being referred to.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:

    class IssuerSpecAcmeSolversDns01AkamaiPatchArgsDict(TypedDict):
        """
        Use the Akamai DNS zone management API to manage DNS01 challenge records.
        """

        access_token_secret_ref: NotRequired[
            pulumi.Input[
                "IssuerSpecAcmeSolversDns01AkamaiAccessTokenSecretRefPatchArgsDict"
            ]
        ]
        client_secret_secret_ref: NotRequired[
            pulumi.Input[
                "IssuerSpecAcmeSolversDns01AkamaiClientSecretSecretRefPatchArgsDict"
            ]
        ]
        client_token_secret_ref: NotRequired[
            pulumi.Input[
                "IssuerSpecAcmeSolversDns01AkamaiClientTokenSecretRefPatchArgsDict"
            ]
        ]
        service_consumer_domain: NotRequired[pulumi.Input[str]]

elif False:
    IssuerSpecAcmeSolversDns01AkamaiPatchArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class IssuerSpecAcmeSolversDns01AkamaiPatchArgs:
    def __init__(
        __self__,
        *,
        access_token_secret_ref: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversDns01AkamaiAccessTokenSecretRefPatchArgs"
            ]
        ] = None,
        client_secret_secret_ref: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversDns01AkamaiClientSecretSecretRefPatchArgs"
            ]
        ] = None,
        client_token_secret_ref: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversDns01AkamaiClientTokenSecretRefPatchArgs"
            ]
        ] = None,
        service_consumer_domain: Optional[pulumi.Input[str]] = None
    ):
        """
        Use the Akamai DNS zone management API to manage DNS01 challenge records.
        """
        if access_token_secret_ref is not None:
            pulumi.set(__self__, "access_token_secret_ref", access_token_secret_ref)
        if client_secret_secret_ref is not None:
            pulumi.set(__self__, "client_secret_secret_ref", client_secret_secret_ref)
        if client_token_secret_ref is not None:
            pulumi.set(__self__, "client_token_secret_ref", client_token_secret_ref)
        if service_consumer_domain is not None:
            pulumi.set(__self__, "service_consumer_domain", service_consumer_domain)

    @property
    @pulumi.getter(name="accessTokenSecretRef")
    def access_token_secret_ref(
        self,
    ) -> Optional[
        pulumi.Input["IssuerSpecAcmeSolversDns01AkamaiAccessTokenSecretRefPatchArgs"]
    ]:
        return pulumi.get(self, "access_token_secret_ref")

    @access_token_secret_ref.setter
    def access_token_secret_ref(
        self,
        value: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversDns01AkamaiAccessTokenSecretRefPatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "access_token_secret_ref", value)

    @property
    @pulumi.getter(name="clientSecretSecretRef")
    def client_secret_secret_ref(
        self,
    ) -> Optional[
        pulumi.Input["IssuerSpecAcmeSolversDns01AkamaiClientSecretSecretRefPatchArgs"]
    ]:
        return pulumi.get(self, "client_secret_secret_ref")

    @client_secret_secret_ref.setter
    def client_secret_secret_ref(
        self,
        value: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversDns01AkamaiClientSecretSecretRefPatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "client_secret_secret_ref", value)

    @property
    @pulumi.getter(name="clientTokenSecretRef")
    def client_token_secret_ref(
        self,
    ) -> Optional[
        pulumi.Input["IssuerSpecAcmeSolversDns01AkamaiClientTokenSecretRefPatchArgs"]
    ]:
        return pulumi.get(self, "client_token_secret_ref")

    @client_token_secret_ref.setter
    def client_token_secret_ref(
        self,
        value: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversDns01AkamaiClientTokenSecretRefPatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "client_token_secret_ref", value)

    @property
    @pulumi.getter(name="serviceConsumerDomain")
    def service_consumer_domain(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "service_consumer_domain")

    @service_consumer_domain.setter
    def service_consumer_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_consumer_domain", value)


if not MYPY:

    class IssuerSpecAcmeSolversDns01AkamaiArgsDict(TypedDict):
        """
        Use the Akamai DNS zone management API to manage DNS01 challenge records.
        """

        access_token_secret_ref: NotRequired[
            pulumi.Input["IssuerSpecAcmeSolversDns01AkamaiAccessTokenSecretRefArgsDict"]
        ]
        client_secret_secret_ref: NotRequired[
            pulumi.Input[
                "IssuerSpecAcmeSolversDns01AkamaiClientSecretSecretRefArgsDict"
            ]
        ]
        client_token_secret_ref: NotRequired[
            pulumi.Input["IssuerSpecAcmeSolversDns01AkamaiClientTokenSecretRefArgsDict"]
        ]
        service_consumer_domain: NotRequired[pulumi.Input[str]]

elif False:
    IssuerSpecAcmeSolversDns01AkamaiArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class IssuerSpecAcmeSolversDns01AkamaiArgs:
    def __init__(
        __self__,
        *,
        access_token_secret_ref: Optional[
            pulumi.Input["IssuerSpecAcmeSolversDns01AkamaiAccessTokenSecretRefArgs"]
        ] = None,
        client_secret_secret_ref: Optional[
            pulumi.Input["IssuerSpecAcmeSolversDns01AkamaiClientSecretSecretRefArgs"]
        ] = None,
        client_token_secret_ref: Optional[
            pulumi.Input["IssuerSpecAcmeSolversDns01AkamaiClientTokenSecretRefArgs"]
        ] = None,
        service_consumer_domain: Optional[pulumi.Input[str]] = None
    ):
        """
        Use the Akamai DNS zone management API to manage DNS01 challenge records.
        """
        if access_token_secret_ref is not None:
            pulumi.set(__self__, "access_token_secret_ref", access_token_secret_ref)
        if client_secret_secret_ref is not None:
            pulumi.set(__self__, "client_secret_secret_ref", client_secret_secret_ref)
        if client_token_secret_ref is not None:
            pulumi.set(__self__, "client_token_secret_ref", client_token_secret_ref)
        if service_consumer_domain is not None:
            pulumi.set(__self__, "service_consumer_domain", service_consumer_domain)

    @property
    @pulumi.getter(name="accessTokenSecretRef")
    def access_token_secret_ref(
        self,
    ) -> Optional[
        pulumi.Input["IssuerSpecAcmeSolversDns01AkamaiAccessTokenSecretRefArgs"]
    ]:
        return pulumi.get(self, "access_token_secret_ref")

    @access_token_secret_ref.setter
    def access_token_secret_ref(
        self,
        value: Optional[
            pulumi.Input["IssuerSpecAcmeSolversDns01AkamaiAccessTokenSecretRefArgs"]
        ],
    ):
        pulumi.set(self, "access_token_secret_ref", value)

    @property
    @pulumi.getter(name="clientSecretSecretRef")
    def client_secret_secret_ref(
        self,
    ) -> Optional[
        pulumi.Input["IssuerSpecAcmeSolversDns01AkamaiClientSecretSecretRefArgs"]
    ]:
        return pulumi.get(self, "client_secret_secret_ref")

    @client_secret_secret_ref.setter
    def client_secret_secret_ref(
        self,
        value: Optional[
            pulumi.Input["IssuerSpecAcmeSolversDns01AkamaiClientSecretSecretRefArgs"]
        ],
    ):
        pulumi.set(self, "client_secret_secret_ref", value)

    @property
    @pulumi.getter(name="clientTokenSecretRef")
    def client_token_secret_ref(
        self,
    ) -> Optional[
        pulumi.Input["IssuerSpecAcmeSolversDns01AkamaiClientTokenSecretRefArgs"]
    ]:
        return pulumi.get(self, "client_token_secret_ref")

    @client_token_secret_ref.setter
    def client_token_secret_ref(
        self,
        value: Optional[
            pulumi.Input["IssuerSpecAcmeSolversDns01AkamaiClientTokenSecretRefArgs"]
        ],
    ):
        pulumi.set(self, "client_token_secret_ref", value)

    @property
    @pulumi.getter(name="serviceConsumerDomain")
    def service_consumer_domain(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "service_consumer_domain")

    @service_consumer_domain.setter
    def service_consumer_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_consumer_domain", value)


if not MYPY:

    class IssuerSpecAcmeSolversDns01AzureDNSClientSecretSecretRefPatchArgsDict(
        TypedDict
    ):
        """
        Auth: Azure Service Principal:
        A reference to a Secret containing the password associated with the Service Principal.
        If set, ClientID and TenantID must also be set.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """

elif False:
    IssuerSpecAcmeSolversDns01AzureDNSClientSecretSecretRefPatchArgsDict: TypeAlias = (
        Mapping[str, Any]
    )


@pulumi.input_type
class IssuerSpecAcmeSolversDns01AzureDNSClientSecretSecretRefPatchArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        name: Optional[pulumi.Input[str]] = None
    ):
        """
        Auth: Azure Service Principal:
        A reference to a Secret containing the password associated with the Service Principal.
        If set, ClientID and TenantID must also be set.
        :param pulumi.Input[str] key: The key of the entry in the Secret resource's `data` field to be used.
               Some instances of this field may be defaulted, in others it may be
               required.
        :param pulumi.Input[str] name: Name of the resource being referred to.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:

    class IssuerSpecAcmeSolversDns01AzureDNSClientSecretSecretRefArgsDict(TypedDict):
        """
        Auth: Azure Service Principal:
        A reference to a Secret containing the password associated with the Service Principal.
        If set, ClientID and TenantID must also be set.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """

elif False:
    IssuerSpecAcmeSolversDns01AzureDNSClientSecretSecretRefArgsDict: TypeAlias = (
        Mapping[str, Any]
    )


@pulumi.input_type
class IssuerSpecAcmeSolversDns01AzureDNSClientSecretSecretRefArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        name: Optional[pulumi.Input[str]] = None
    ):
        """
        Auth: Azure Service Principal:
        A reference to a Secret containing the password associated with the Service Principal.
        If set, ClientID and TenantID must also be set.
        :param pulumi.Input[str] key: The key of the entry in the Secret resource's `data` field to be used.
               Some instances of this field may be defaulted, in others it may be
               required.
        :param pulumi.Input[str] name: Name of the resource being referred to.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:

    class IssuerSpecAcmeSolversDns01AzureDNSManagedIdentityPatchArgsDict(TypedDict):
        """
        Auth: Azure Workload Identity or Azure Managed Service Identity:
        Settings to enable Azure Workload Identity or Azure Managed Service Identity
        If set, ClientID, ClientSecret and TenantID must not be set.
        """

        client_id: NotRequired[pulumi.Input[str]]
        """
        client ID of the managed identity, can not be used at the same time as resourceID
        """
        resource_id: NotRequired[pulumi.Input[str]]
        """
        resource ID of the managed identity, can not be used at the same time as clientID
        Cannot be used for Azure Managed Service Identity
        """
        tenant_id: NotRequired[pulumi.Input[str]]
        """
        tenant ID of the managed identity, can not be used at the same time as resourceID
        """

elif False:
    IssuerSpecAcmeSolversDns01AzureDNSManagedIdentityPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversDns01AzureDNSManagedIdentityPatchArgs:
    def __init__(
        __self__,
        *,
        client_id: Optional[pulumi.Input[str]] = None,
        resource_id: Optional[pulumi.Input[str]] = None,
        tenant_id: Optional[pulumi.Input[str]] = None
    ):
        """
        Auth: Azure Workload Identity or Azure Managed Service Identity:
        Settings to enable Azure Workload Identity or Azure Managed Service Identity
        If set, ClientID, ClientSecret and TenantID must not be set.
        :param pulumi.Input[str] client_id: client ID of the managed identity, can not be used at the same time as resourceID
        :param pulumi.Input[str] resource_id: resource ID of the managed identity, can not be used at the same time as clientID
               Cannot be used for Azure Managed Service Identity
        :param pulumi.Input[str] tenant_id: tenant ID of the managed identity, can not be used at the same time as resourceID
        """
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if tenant_id is not None:
            pulumi.set(__self__, "tenant_id", tenant_id)

    @property
    @pulumi.getter(name="clientID")
    def client_id(self) -> Optional[pulumi.Input[str]]:
        """
        client ID of the managed identity, can not be used at the same time as resourceID
        """
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="resourceID")
    def resource_id(self) -> Optional[pulumi.Input[str]]:
        """
        resource ID of the managed identity, can not be used at the same time as clientID
        Cannot be used for Azure Managed Service Identity
        """
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_id", value)

    @property
    @pulumi.getter(name="tenantID")
    def tenant_id(self) -> Optional[pulumi.Input[str]]:
        """
        tenant ID of the managed identity, can not be used at the same time as resourceID
        """
        return pulumi.get(self, "tenant_id")

    @tenant_id.setter
    def tenant_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tenant_id", value)


if not MYPY:

    class IssuerSpecAcmeSolversDns01AzureDNSManagedIdentityArgsDict(TypedDict):
        """
        Auth: Azure Workload Identity or Azure Managed Service Identity:
        Settings to enable Azure Workload Identity or Azure Managed Service Identity
        If set, ClientID, ClientSecret and TenantID must not be set.
        """

        client_id: NotRequired[pulumi.Input[str]]
        """
        client ID of the managed identity, can not be used at the same time as resourceID
        """
        resource_id: NotRequired[pulumi.Input[str]]
        """
        resource ID of the managed identity, can not be used at the same time as clientID
        Cannot be used for Azure Managed Service Identity
        """
        tenant_id: NotRequired[pulumi.Input[str]]
        """
        tenant ID of the managed identity, can not be used at the same time as resourceID
        """

elif False:
    IssuerSpecAcmeSolversDns01AzureDNSManagedIdentityArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversDns01AzureDNSManagedIdentityArgs:
    def __init__(
        __self__,
        *,
        client_id: Optional[pulumi.Input[str]] = None,
        resource_id: Optional[pulumi.Input[str]] = None,
        tenant_id: Optional[pulumi.Input[str]] = None
    ):
        """
        Auth: Azure Workload Identity or Azure Managed Service Identity:
        Settings to enable Azure Workload Identity or Azure Managed Service Identity
        If set, ClientID, ClientSecret and TenantID must not be set.
        :param pulumi.Input[str] client_id: client ID of the managed identity, can not be used at the same time as resourceID
        :param pulumi.Input[str] resource_id: resource ID of the managed identity, can not be used at the same time as clientID
               Cannot be used for Azure Managed Service Identity
        :param pulumi.Input[str] tenant_id: tenant ID of the managed identity, can not be used at the same time as resourceID
        """
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if tenant_id is not None:
            pulumi.set(__self__, "tenant_id", tenant_id)

    @property
    @pulumi.getter(name="clientID")
    def client_id(self) -> Optional[pulumi.Input[str]]:
        """
        client ID of the managed identity, can not be used at the same time as resourceID
        """
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="resourceID")
    def resource_id(self) -> Optional[pulumi.Input[str]]:
        """
        resource ID of the managed identity, can not be used at the same time as clientID
        Cannot be used for Azure Managed Service Identity
        """
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_id", value)

    @property
    @pulumi.getter(name="tenantID")
    def tenant_id(self) -> Optional[pulumi.Input[str]]:
        """
        tenant ID of the managed identity, can not be used at the same time as resourceID
        """
        return pulumi.get(self, "tenant_id")

    @tenant_id.setter
    def tenant_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tenant_id", value)


if not MYPY:

    class IssuerSpecAcmeSolversDns01AzureDNSPatchArgsDict(TypedDict):
        """
        Use the Microsoft Azure DNS API to manage DNS01 challenge records.
        """

        client_id: NotRequired[pulumi.Input[str]]
        """
        Auth: Azure Service Principal:
        The ClientID of the Azure Service Principal used to authenticate with Azure DNS.
        If set, ClientSecret and TenantID must also be set.
        """
        client_secret_secret_ref: NotRequired[
            pulumi.Input[
                "IssuerSpecAcmeSolversDns01AzureDNSClientSecretSecretRefPatchArgsDict"
            ]
        ]
        environment: NotRequired[pulumi.Input[str]]
        """
        name of the Azure environment (default AzurePublicCloud)
        """
        hosted_zone_name: NotRequired[pulumi.Input[str]]
        """
        name of the DNS zone that should be used
        """
        managed_identity: NotRequired[
            pulumi.Input[
                "IssuerSpecAcmeSolversDns01AzureDNSManagedIdentityPatchArgsDict"
            ]
        ]
        resource_group_name: NotRequired[pulumi.Input[str]]
        """
        resource group the DNS zone is located in
        """
        subscription_id: NotRequired[pulumi.Input[str]]
        """
        ID of the Azure subscription
        """
        tenant_id: NotRequired[pulumi.Input[str]]
        """
        Auth: Azure Service Principal:
        The TenantID of the Azure Service Principal used to authenticate with Azure DNS.
        If set, ClientID and ClientSecret must also be set.
        """

elif False:
    IssuerSpecAcmeSolversDns01AzureDNSPatchArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class IssuerSpecAcmeSolversDns01AzureDNSPatchArgs:
    def __init__(
        __self__,
        *,
        client_id: Optional[pulumi.Input[str]] = None,
        client_secret_secret_ref: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversDns01AzureDNSClientSecretSecretRefPatchArgs"
            ]
        ] = None,
        environment: Optional[pulumi.Input[str]] = None,
        hosted_zone_name: Optional[pulumi.Input[str]] = None,
        managed_identity: Optional[
            pulumi.Input["IssuerSpecAcmeSolversDns01AzureDNSManagedIdentityPatchArgs"]
        ] = None,
        resource_group_name: Optional[pulumi.Input[str]] = None,
        subscription_id: Optional[pulumi.Input[str]] = None,
        tenant_id: Optional[pulumi.Input[str]] = None
    ):
        """
        Use the Microsoft Azure DNS API to manage DNS01 challenge records.
        :param pulumi.Input[str] client_id: Auth: Azure Service Principal:
               The ClientID of the Azure Service Principal used to authenticate with Azure DNS.
               If set, ClientSecret and TenantID must also be set.
        :param pulumi.Input[str] environment: name of the Azure environment (default AzurePublicCloud)
        :param pulumi.Input[str] hosted_zone_name: name of the DNS zone that should be used
        :param pulumi.Input[str] resource_group_name: resource group the DNS zone is located in
        :param pulumi.Input[str] subscription_id: ID of the Azure subscription
        :param pulumi.Input[str] tenant_id: Auth: Azure Service Principal:
               The TenantID of the Azure Service Principal used to authenticate with Azure DNS.
               If set, ClientID and ClientSecret must also be set.
        """
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret_secret_ref is not None:
            pulumi.set(__self__, "client_secret_secret_ref", client_secret_secret_ref)
        if environment is not None:
            pulumi.set(__self__, "environment", environment)
        if hosted_zone_name is not None:
            pulumi.set(__self__, "hosted_zone_name", hosted_zone_name)
        if managed_identity is not None:
            pulumi.set(__self__, "managed_identity", managed_identity)
        if resource_group_name is not None:
            pulumi.set(__self__, "resource_group_name", resource_group_name)
        if subscription_id is not None:
            pulumi.set(__self__, "subscription_id", subscription_id)
        if tenant_id is not None:
            pulumi.set(__self__, "tenant_id", tenant_id)

    @property
    @pulumi.getter(name="clientID")
    def client_id(self) -> Optional[pulumi.Input[str]]:
        """
        Auth: Azure Service Principal:
        The ClientID of the Azure Service Principal used to authenticate with Azure DNS.
        If set, ClientSecret and TenantID must also be set.
        """
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecretSecretRef")
    def client_secret_secret_ref(
        self,
    ) -> Optional[
        pulumi.Input["IssuerSpecAcmeSolversDns01AzureDNSClientSecretSecretRefPatchArgs"]
    ]:
        return pulumi.get(self, "client_secret_secret_ref")

    @client_secret_secret_ref.setter
    def client_secret_secret_ref(
        self,
        value: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversDns01AzureDNSClientSecretSecretRefPatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "client_secret_secret_ref", value)

    @property
    @pulumi.getter
    def environment(self) -> Optional[pulumi.Input[str]]:
        """
        name of the Azure environment (default AzurePublicCloud)
        """
        return pulumi.get(self, "environment")

    @environment.setter
    def environment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "environment", value)

    @property
    @pulumi.getter(name="hostedZoneName")
    def hosted_zone_name(self) -> Optional[pulumi.Input[str]]:
        """
        name of the DNS zone that should be used
        """
        return pulumi.get(self, "hosted_zone_name")

    @hosted_zone_name.setter
    def hosted_zone_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hosted_zone_name", value)

    @property
    @pulumi.getter(name="managedIdentity")
    def managed_identity(
        self,
    ) -> Optional[
        pulumi.Input["IssuerSpecAcmeSolversDns01AzureDNSManagedIdentityPatchArgs"]
    ]:
        return pulumi.get(self, "managed_identity")

    @managed_identity.setter
    def managed_identity(
        self,
        value: Optional[
            pulumi.Input["IssuerSpecAcmeSolversDns01AzureDNSManagedIdentityPatchArgs"]
        ],
    ):
        pulumi.set(self, "managed_identity", value)

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> Optional[pulumi.Input[str]]:
        """
        resource group the DNS zone is located in
        """
        return pulumi.get(self, "resource_group_name")

    @resource_group_name.setter
    def resource_group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_group_name", value)

    @property
    @pulumi.getter(name="subscriptionID")
    def subscription_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the Azure subscription
        """
        return pulumi.get(self, "subscription_id")

    @subscription_id.setter
    def subscription_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subscription_id", value)

    @property
    @pulumi.getter(name="tenantID")
    def tenant_id(self) -> Optional[pulumi.Input[str]]:
        """
        Auth: Azure Service Principal:
        The TenantID of the Azure Service Principal used to authenticate with Azure DNS.
        If set, ClientID and ClientSecret must also be set.
        """
        return pulumi.get(self, "tenant_id")

    @tenant_id.setter
    def tenant_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tenant_id", value)


if not MYPY:

    class IssuerSpecAcmeSolversDns01AzureDNSArgsDict(TypedDict):
        """
        Use the Microsoft Azure DNS API to manage DNS01 challenge records.
        """

        client_id: NotRequired[pulumi.Input[str]]
        """
        Auth: Azure Service Principal:
        The ClientID of the Azure Service Principal used to authenticate with Azure DNS.
        If set, ClientSecret and TenantID must also be set.
        """
        client_secret_secret_ref: NotRequired[
            pulumi.Input[
                "IssuerSpecAcmeSolversDns01AzureDNSClientSecretSecretRefArgsDict"
            ]
        ]
        environment: NotRequired[pulumi.Input[str]]
        """
        name of the Azure environment (default AzurePublicCloud)
        """
        hosted_zone_name: NotRequired[pulumi.Input[str]]
        """
        name of the DNS zone that should be used
        """
        managed_identity: NotRequired[
            pulumi.Input["IssuerSpecAcmeSolversDns01AzureDNSManagedIdentityArgsDict"]
        ]
        resource_group_name: NotRequired[pulumi.Input[str]]
        """
        resource group the DNS zone is located in
        """
        subscription_id: NotRequired[pulumi.Input[str]]
        """
        ID of the Azure subscription
        """
        tenant_id: NotRequired[pulumi.Input[str]]
        """
        Auth: Azure Service Principal:
        The TenantID of the Azure Service Principal used to authenticate with Azure DNS.
        If set, ClientID and ClientSecret must also be set.
        """

elif False:
    IssuerSpecAcmeSolversDns01AzureDNSArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class IssuerSpecAcmeSolversDns01AzureDNSArgs:
    def __init__(
        __self__,
        *,
        client_id: Optional[pulumi.Input[str]] = None,
        client_secret_secret_ref: Optional[
            pulumi.Input["IssuerSpecAcmeSolversDns01AzureDNSClientSecretSecretRefArgs"]
        ] = None,
        environment: Optional[pulumi.Input[str]] = None,
        hosted_zone_name: Optional[pulumi.Input[str]] = None,
        managed_identity: Optional[
            pulumi.Input["IssuerSpecAcmeSolversDns01AzureDNSManagedIdentityArgs"]
        ] = None,
        resource_group_name: Optional[pulumi.Input[str]] = None,
        subscription_id: Optional[pulumi.Input[str]] = None,
        tenant_id: Optional[pulumi.Input[str]] = None
    ):
        """
        Use the Microsoft Azure DNS API to manage DNS01 challenge records.
        :param pulumi.Input[str] client_id: Auth: Azure Service Principal:
               The ClientID of the Azure Service Principal used to authenticate with Azure DNS.
               If set, ClientSecret and TenantID must also be set.
        :param pulumi.Input[str] environment: name of the Azure environment (default AzurePublicCloud)
        :param pulumi.Input[str] hosted_zone_name: name of the DNS zone that should be used
        :param pulumi.Input[str] resource_group_name: resource group the DNS zone is located in
        :param pulumi.Input[str] subscription_id: ID of the Azure subscription
        :param pulumi.Input[str] tenant_id: Auth: Azure Service Principal:
               The TenantID of the Azure Service Principal used to authenticate with Azure DNS.
               If set, ClientID and ClientSecret must also be set.
        """
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret_secret_ref is not None:
            pulumi.set(__self__, "client_secret_secret_ref", client_secret_secret_ref)
        if environment is not None:
            pulumi.set(__self__, "environment", environment)
        if hosted_zone_name is not None:
            pulumi.set(__self__, "hosted_zone_name", hosted_zone_name)
        if managed_identity is not None:
            pulumi.set(__self__, "managed_identity", managed_identity)
        if resource_group_name is not None:
            pulumi.set(__self__, "resource_group_name", resource_group_name)
        if subscription_id is not None:
            pulumi.set(__self__, "subscription_id", subscription_id)
        if tenant_id is not None:
            pulumi.set(__self__, "tenant_id", tenant_id)

    @property
    @pulumi.getter(name="clientID")
    def client_id(self) -> Optional[pulumi.Input[str]]:
        """
        Auth: Azure Service Principal:
        The ClientID of the Azure Service Principal used to authenticate with Azure DNS.
        If set, ClientSecret and TenantID must also be set.
        """
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecretSecretRef")
    def client_secret_secret_ref(
        self,
    ) -> Optional[
        pulumi.Input["IssuerSpecAcmeSolversDns01AzureDNSClientSecretSecretRefArgs"]
    ]:
        return pulumi.get(self, "client_secret_secret_ref")

    @client_secret_secret_ref.setter
    def client_secret_secret_ref(
        self,
        value: Optional[
            pulumi.Input["IssuerSpecAcmeSolversDns01AzureDNSClientSecretSecretRefArgs"]
        ],
    ):
        pulumi.set(self, "client_secret_secret_ref", value)

    @property
    @pulumi.getter
    def environment(self) -> Optional[pulumi.Input[str]]:
        """
        name of the Azure environment (default AzurePublicCloud)
        """
        return pulumi.get(self, "environment")

    @environment.setter
    def environment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "environment", value)

    @property
    @pulumi.getter(name="hostedZoneName")
    def hosted_zone_name(self) -> Optional[pulumi.Input[str]]:
        """
        name of the DNS zone that should be used
        """
        return pulumi.get(self, "hosted_zone_name")

    @hosted_zone_name.setter
    def hosted_zone_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hosted_zone_name", value)

    @property
    @pulumi.getter(name="managedIdentity")
    def managed_identity(
        self,
    ) -> Optional[
        pulumi.Input["IssuerSpecAcmeSolversDns01AzureDNSManagedIdentityArgs"]
    ]:
        return pulumi.get(self, "managed_identity")

    @managed_identity.setter
    def managed_identity(
        self,
        value: Optional[
            pulumi.Input["IssuerSpecAcmeSolversDns01AzureDNSManagedIdentityArgs"]
        ],
    ):
        pulumi.set(self, "managed_identity", value)

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> Optional[pulumi.Input[str]]:
        """
        resource group the DNS zone is located in
        """
        return pulumi.get(self, "resource_group_name")

    @resource_group_name.setter
    def resource_group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_group_name", value)

    @property
    @pulumi.getter(name="subscriptionID")
    def subscription_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the Azure subscription
        """
        return pulumi.get(self, "subscription_id")

    @subscription_id.setter
    def subscription_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subscription_id", value)

    @property
    @pulumi.getter(name="tenantID")
    def tenant_id(self) -> Optional[pulumi.Input[str]]:
        """
        Auth: Azure Service Principal:
        The TenantID of the Azure Service Principal used to authenticate with Azure DNS.
        If set, ClientID and ClientSecret must also be set.
        """
        return pulumi.get(self, "tenant_id")

    @tenant_id.setter
    def tenant_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tenant_id", value)


if not MYPY:

    class IssuerSpecAcmeSolversDns01CloudDNSPatchArgsDict(TypedDict):
        """
        Use the Google Cloud DNS API to manage DNS01 challenge records.
        """

        hosted_zone_name: NotRequired[pulumi.Input[str]]
        """
        HostedZoneName is an optional field that tells cert-manager in which
        Cloud DNS zone the challenge record has to be created.
        If left empty cert-manager will automatically choose a zone.
        """
        project: NotRequired[pulumi.Input[str]]
        service_account_secret_ref: NotRequired[
            pulumi.Input[
                "IssuerSpecAcmeSolversDns01CloudDNSServiceAccountSecretRefPatchArgsDict"
            ]
        ]

elif False:
    IssuerSpecAcmeSolversDns01CloudDNSPatchArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class IssuerSpecAcmeSolversDns01CloudDNSPatchArgs:
    def __init__(
        __self__,
        *,
        hosted_zone_name: Optional[pulumi.Input[str]] = None,
        project: Optional[pulumi.Input[str]] = None,
        service_account_secret_ref: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversDns01CloudDNSServiceAccountSecretRefPatchArgs"
            ]
        ] = None
    ):
        """
        Use the Google Cloud DNS API to manage DNS01 challenge records.
        :param pulumi.Input[str] hosted_zone_name: HostedZoneName is an optional field that tells cert-manager in which
               Cloud DNS zone the challenge record has to be created.
               If left empty cert-manager will automatically choose a zone.
        """
        if hosted_zone_name is not None:
            pulumi.set(__self__, "hosted_zone_name", hosted_zone_name)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if service_account_secret_ref is not None:
            pulumi.set(
                __self__, "service_account_secret_ref", service_account_secret_ref
            )

    @property
    @pulumi.getter(name="hostedZoneName")
    def hosted_zone_name(self) -> Optional[pulumi.Input[str]]:
        """
        HostedZoneName is an optional field that tells cert-manager in which
        Cloud DNS zone the challenge record has to be created.
        If left empty cert-manager will automatically choose a zone.
        """
        return pulumi.get(self, "hosted_zone_name")

    @hosted_zone_name.setter
    def hosted_zone_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hosted_zone_name", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter(name="serviceAccountSecretRef")
    def service_account_secret_ref(
        self,
    ) -> Optional[
        pulumi.Input[
            "IssuerSpecAcmeSolversDns01CloudDNSServiceAccountSecretRefPatchArgs"
        ]
    ]:
        return pulumi.get(self, "service_account_secret_ref")

    @service_account_secret_ref.setter
    def service_account_secret_ref(
        self,
        value: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversDns01CloudDNSServiceAccountSecretRefPatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "service_account_secret_ref", value)


if not MYPY:

    class IssuerSpecAcmeSolversDns01CloudDNSServiceAccountSecretRefPatchArgsDict(
        TypedDict
    ):
        """
        A reference to a specific 'key' within a Secret resource.
        In some instances, `key` is a required field.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """

elif False:
    IssuerSpecAcmeSolversDns01CloudDNSServiceAccountSecretRefPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversDns01CloudDNSServiceAccountSecretRefPatchArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        name: Optional[pulumi.Input[str]] = None
    ):
        """
        A reference to a specific 'key' within a Secret resource.
        In some instances, `key` is a required field.
        :param pulumi.Input[str] key: The key of the entry in the Secret resource's `data` field to be used.
               Some instances of this field may be defaulted, in others it may be
               required.
        :param pulumi.Input[str] name: Name of the resource being referred to.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:

    class IssuerSpecAcmeSolversDns01CloudDNSServiceAccountSecretRefArgsDict(TypedDict):
        """
        A reference to a specific 'key' within a Secret resource.
        In some instances, `key` is a required field.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """

elif False:
    IssuerSpecAcmeSolversDns01CloudDNSServiceAccountSecretRefArgsDict: TypeAlias = (
        Mapping[str, Any]
    )


@pulumi.input_type
class IssuerSpecAcmeSolversDns01CloudDNSServiceAccountSecretRefArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        name: Optional[pulumi.Input[str]] = None
    ):
        """
        A reference to a specific 'key' within a Secret resource.
        In some instances, `key` is a required field.
        :param pulumi.Input[str] key: The key of the entry in the Secret resource's `data` field to be used.
               Some instances of this field may be defaulted, in others it may be
               required.
        :param pulumi.Input[str] name: Name of the resource being referred to.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:

    class IssuerSpecAcmeSolversDns01CloudDNSArgsDict(TypedDict):
        """
        Use the Google Cloud DNS API to manage DNS01 challenge records.
        """

        hosted_zone_name: NotRequired[pulumi.Input[str]]
        """
        HostedZoneName is an optional field that tells cert-manager in which
        Cloud DNS zone the challenge record has to be created.
        If left empty cert-manager will automatically choose a zone.
        """
        project: NotRequired[pulumi.Input[str]]
        service_account_secret_ref: NotRequired[
            pulumi.Input[
                "IssuerSpecAcmeSolversDns01CloudDNSServiceAccountSecretRefArgsDict"
            ]
        ]

elif False:
    IssuerSpecAcmeSolversDns01CloudDNSArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class IssuerSpecAcmeSolversDns01CloudDNSArgs:
    def __init__(
        __self__,
        *,
        hosted_zone_name: Optional[pulumi.Input[str]] = None,
        project: Optional[pulumi.Input[str]] = None,
        service_account_secret_ref: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversDns01CloudDNSServiceAccountSecretRefArgs"
            ]
        ] = None
    ):
        """
        Use the Google Cloud DNS API to manage DNS01 challenge records.
        :param pulumi.Input[str] hosted_zone_name: HostedZoneName is an optional field that tells cert-manager in which
               Cloud DNS zone the challenge record has to be created.
               If left empty cert-manager will automatically choose a zone.
        """
        if hosted_zone_name is not None:
            pulumi.set(__self__, "hosted_zone_name", hosted_zone_name)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if service_account_secret_ref is not None:
            pulumi.set(
                __self__, "service_account_secret_ref", service_account_secret_ref
            )

    @property
    @pulumi.getter(name="hostedZoneName")
    def hosted_zone_name(self) -> Optional[pulumi.Input[str]]:
        """
        HostedZoneName is an optional field that tells cert-manager in which
        Cloud DNS zone the challenge record has to be created.
        If left empty cert-manager will automatically choose a zone.
        """
        return pulumi.get(self, "hosted_zone_name")

    @hosted_zone_name.setter
    def hosted_zone_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hosted_zone_name", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter(name="serviceAccountSecretRef")
    def service_account_secret_ref(
        self,
    ) -> Optional[
        pulumi.Input["IssuerSpecAcmeSolversDns01CloudDNSServiceAccountSecretRefArgs"]
    ]:
        return pulumi.get(self, "service_account_secret_ref")

    @service_account_secret_ref.setter
    def service_account_secret_ref(
        self,
        value: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversDns01CloudDNSServiceAccountSecretRefArgs"
            ]
        ],
    ):
        pulumi.set(self, "service_account_secret_ref", value)


if not MYPY:

    class IssuerSpecAcmeSolversDns01CloudflareApiKeySecretRefPatchArgsDict(TypedDict):
        """
        API key to use to authenticate with Cloudflare.
        Note: using an API token to authenticate is now the recommended method
        as it allows greater control of permissions.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """

elif False:
    IssuerSpecAcmeSolversDns01CloudflareApiKeySecretRefPatchArgsDict: TypeAlias = (
        Mapping[str, Any]
    )


@pulumi.input_type
class IssuerSpecAcmeSolversDns01CloudflareApiKeySecretRefPatchArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        name: Optional[pulumi.Input[str]] = None
    ):
        """
        API key to use to authenticate with Cloudflare.
        Note: using an API token to authenticate is now the recommended method
        as it allows greater control of permissions.
        :param pulumi.Input[str] key: The key of the entry in the Secret resource's `data` field to be used.
               Some instances of this field may be defaulted, in others it may be
               required.
        :param pulumi.Input[str] name: Name of the resource being referred to.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:

    class IssuerSpecAcmeSolversDns01CloudflareApiKeySecretRefArgsDict(TypedDict):
        """
        API key to use to authenticate with Cloudflare.
        Note: using an API token to authenticate is now the recommended method
        as it allows greater control of permissions.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """

elif False:
    IssuerSpecAcmeSolversDns01CloudflareApiKeySecretRefArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversDns01CloudflareApiKeySecretRefArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        name: Optional[pulumi.Input[str]] = None
    ):
        """
        API key to use to authenticate with Cloudflare.
        Note: using an API token to authenticate is now the recommended method
        as it allows greater control of permissions.
        :param pulumi.Input[str] key: The key of the entry in the Secret resource's `data` field to be used.
               Some instances of this field may be defaulted, in others it may be
               required.
        :param pulumi.Input[str] name: Name of the resource being referred to.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:

    class IssuerSpecAcmeSolversDns01CloudflareApiTokenSecretRefPatchArgsDict(TypedDict):
        """
        API token used to authenticate with Cloudflare.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """

elif False:
    IssuerSpecAcmeSolversDns01CloudflareApiTokenSecretRefPatchArgsDict: TypeAlias = (
        Mapping[str, Any]
    )


@pulumi.input_type
class IssuerSpecAcmeSolversDns01CloudflareApiTokenSecretRefPatchArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        name: Optional[pulumi.Input[str]] = None
    ):
        """
        API token used to authenticate with Cloudflare.
        :param pulumi.Input[str] key: The key of the entry in the Secret resource's `data` field to be used.
               Some instances of this field may be defaulted, in others it may be
               required.
        :param pulumi.Input[str] name: Name of the resource being referred to.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:

    class IssuerSpecAcmeSolversDns01CloudflareApiTokenSecretRefArgsDict(TypedDict):
        """
        API token used to authenticate with Cloudflare.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """

elif False:
    IssuerSpecAcmeSolversDns01CloudflareApiTokenSecretRefArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversDns01CloudflareApiTokenSecretRefArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        name: Optional[pulumi.Input[str]] = None
    ):
        """
        API token used to authenticate with Cloudflare.
        :param pulumi.Input[str] key: The key of the entry in the Secret resource's `data` field to be used.
               Some instances of this field may be defaulted, in others it may be
               required.
        :param pulumi.Input[str] name: Name of the resource being referred to.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:

    class IssuerSpecAcmeSolversDns01CloudflarePatchArgsDict(TypedDict):
        """
        Use the Cloudflare API to manage DNS01 challenge records.
        """

        api_key_secret_ref: NotRequired[
            pulumi.Input[
                "IssuerSpecAcmeSolversDns01CloudflareApiKeySecretRefPatchArgsDict"
            ]
        ]
        api_token_secret_ref: NotRequired[
            pulumi.Input[
                "IssuerSpecAcmeSolversDns01CloudflareApiTokenSecretRefPatchArgsDict"
            ]
        ]
        email: NotRequired[pulumi.Input[str]]
        """
        Email of the account, only required when using API key based authentication.
        """

elif False:
    IssuerSpecAcmeSolversDns01CloudflarePatchArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class IssuerSpecAcmeSolversDns01CloudflarePatchArgs:
    def __init__(
        __self__,
        *,
        api_key_secret_ref: Optional[
            pulumi.Input["IssuerSpecAcmeSolversDns01CloudflareApiKeySecretRefPatchArgs"]
        ] = None,
        api_token_secret_ref: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversDns01CloudflareApiTokenSecretRefPatchArgs"
            ]
        ] = None,
        email: Optional[pulumi.Input[str]] = None
    ):
        """
        Use the Cloudflare API to manage DNS01 challenge records.
        :param pulumi.Input[str] email: Email of the account, only required when using API key based authentication.
        """
        if api_key_secret_ref is not None:
            pulumi.set(__self__, "api_key_secret_ref", api_key_secret_ref)
        if api_token_secret_ref is not None:
            pulumi.set(__self__, "api_token_secret_ref", api_token_secret_ref)
        if email is not None:
            pulumi.set(__self__, "email", email)

    @property
    @pulumi.getter(name="apiKeySecretRef")
    def api_key_secret_ref(
        self,
    ) -> Optional[
        pulumi.Input["IssuerSpecAcmeSolversDns01CloudflareApiKeySecretRefPatchArgs"]
    ]:
        return pulumi.get(self, "api_key_secret_ref")

    @api_key_secret_ref.setter
    def api_key_secret_ref(
        self,
        value: Optional[
            pulumi.Input["IssuerSpecAcmeSolversDns01CloudflareApiKeySecretRefPatchArgs"]
        ],
    ):
        pulumi.set(self, "api_key_secret_ref", value)

    @property
    @pulumi.getter(name="apiTokenSecretRef")
    def api_token_secret_ref(
        self,
    ) -> Optional[
        pulumi.Input["IssuerSpecAcmeSolversDns01CloudflareApiTokenSecretRefPatchArgs"]
    ]:
        return pulumi.get(self, "api_token_secret_ref")

    @api_token_secret_ref.setter
    def api_token_secret_ref(
        self,
        value: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversDns01CloudflareApiTokenSecretRefPatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "api_token_secret_ref", value)

    @property
    @pulumi.getter
    def email(self) -> Optional[pulumi.Input[str]]:
        """
        Email of the account, only required when using API key based authentication.
        """
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email", value)


if not MYPY:

    class IssuerSpecAcmeSolversDns01CloudflareArgsDict(TypedDict):
        """
        Use the Cloudflare API to manage DNS01 challenge records.
        """

        api_key_secret_ref: NotRequired[
            pulumi.Input["IssuerSpecAcmeSolversDns01CloudflareApiKeySecretRefArgsDict"]
        ]
        api_token_secret_ref: NotRequired[
            pulumi.Input[
                "IssuerSpecAcmeSolversDns01CloudflareApiTokenSecretRefArgsDict"
            ]
        ]
        email: NotRequired[pulumi.Input[str]]
        """
        Email of the account, only required when using API key based authentication.
        """

elif False:
    IssuerSpecAcmeSolversDns01CloudflareArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class IssuerSpecAcmeSolversDns01CloudflareArgs:
    def __init__(
        __self__,
        *,
        api_key_secret_ref: Optional[
            pulumi.Input["IssuerSpecAcmeSolversDns01CloudflareApiKeySecretRefArgs"]
        ] = None,
        api_token_secret_ref: Optional[
            pulumi.Input["IssuerSpecAcmeSolversDns01CloudflareApiTokenSecretRefArgs"]
        ] = None,
        email: Optional[pulumi.Input[str]] = None
    ):
        """
        Use the Cloudflare API to manage DNS01 challenge records.
        :param pulumi.Input[str] email: Email of the account, only required when using API key based authentication.
        """
        if api_key_secret_ref is not None:
            pulumi.set(__self__, "api_key_secret_ref", api_key_secret_ref)
        if api_token_secret_ref is not None:
            pulumi.set(__self__, "api_token_secret_ref", api_token_secret_ref)
        if email is not None:
            pulumi.set(__self__, "email", email)

    @property
    @pulumi.getter(name="apiKeySecretRef")
    def api_key_secret_ref(
        self,
    ) -> Optional[
        pulumi.Input["IssuerSpecAcmeSolversDns01CloudflareApiKeySecretRefArgs"]
    ]:
        return pulumi.get(self, "api_key_secret_ref")

    @api_key_secret_ref.setter
    def api_key_secret_ref(
        self,
        value: Optional[
            pulumi.Input["IssuerSpecAcmeSolversDns01CloudflareApiKeySecretRefArgs"]
        ],
    ):
        pulumi.set(self, "api_key_secret_ref", value)

    @property
    @pulumi.getter(name="apiTokenSecretRef")
    def api_token_secret_ref(
        self,
    ) -> Optional[
        pulumi.Input["IssuerSpecAcmeSolversDns01CloudflareApiTokenSecretRefArgs"]
    ]:
        return pulumi.get(self, "api_token_secret_ref")

    @api_token_secret_ref.setter
    def api_token_secret_ref(
        self,
        value: Optional[
            pulumi.Input["IssuerSpecAcmeSolversDns01CloudflareApiTokenSecretRefArgs"]
        ],
    ):
        pulumi.set(self, "api_token_secret_ref", value)

    @property
    @pulumi.getter
    def email(self) -> Optional[pulumi.Input[str]]:
        """
        Email of the account, only required when using API key based authentication.
        """
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email", value)


if not MYPY:

    class IssuerSpecAcmeSolversDns01DigitaloceanPatchArgsDict(TypedDict):
        """
        Use the DigitalOcean DNS API to manage DNS01 challenge records.
        """

        token_secret_ref: NotRequired[
            pulumi.Input[
                "IssuerSpecAcmeSolversDns01DigitaloceanTokenSecretRefPatchArgsDict"
            ]
        ]

elif False:
    IssuerSpecAcmeSolversDns01DigitaloceanPatchArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class IssuerSpecAcmeSolversDns01DigitaloceanPatchArgs:
    def __init__(
        __self__,
        *,
        token_secret_ref: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversDns01DigitaloceanTokenSecretRefPatchArgs"
            ]
        ] = None
    ):
        """
        Use the DigitalOcean DNS API to manage DNS01 challenge records.
        """
        if token_secret_ref is not None:
            pulumi.set(__self__, "token_secret_ref", token_secret_ref)

    @property
    @pulumi.getter(name="tokenSecretRef")
    def token_secret_ref(
        self,
    ) -> Optional[
        pulumi.Input["IssuerSpecAcmeSolversDns01DigitaloceanTokenSecretRefPatchArgs"]
    ]:
        return pulumi.get(self, "token_secret_ref")

    @token_secret_ref.setter
    def token_secret_ref(
        self,
        value: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversDns01DigitaloceanTokenSecretRefPatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "token_secret_ref", value)


if not MYPY:

    class IssuerSpecAcmeSolversDns01DigitaloceanTokenSecretRefPatchArgsDict(TypedDict):
        """
        A reference to a specific 'key' within a Secret resource.
        In some instances, `key` is a required field.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """

elif False:
    IssuerSpecAcmeSolversDns01DigitaloceanTokenSecretRefPatchArgsDict: TypeAlias = (
        Mapping[str, Any]
    )


@pulumi.input_type
class IssuerSpecAcmeSolversDns01DigitaloceanTokenSecretRefPatchArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        name: Optional[pulumi.Input[str]] = None
    ):
        """
        A reference to a specific 'key' within a Secret resource.
        In some instances, `key` is a required field.
        :param pulumi.Input[str] key: The key of the entry in the Secret resource's `data` field to be used.
               Some instances of this field may be defaulted, in others it may be
               required.
        :param pulumi.Input[str] name: Name of the resource being referred to.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:

    class IssuerSpecAcmeSolversDns01DigitaloceanTokenSecretRefArgsDict(TypedDict):
        """
        A reference to a specific 'key' within a Secret resource.
        In some instances, `key` is a required field.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """

elif False:
    IssuerSpecAcmeSolversDns01DigitaloceanTokenSecretRefArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversDns01DigitaloceanTokenSecretRefArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        name: Optional[pulumi.Input[str]] = None
    ):
        """
        A reference to a specific 'key' within a Secret resource.
        In some instances, `key` is a required field.
        :param pulumi.Input[str] key: The key of the entry in the Secret resource's `data` field to be used.
               Some instances of this field may be defaulted, in others it may be
               required.
        :param pulumi.Input[str] name: Name of the resource being referred to.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:

    class IssuerSpecAcmeSolversDns01DigitaloceanArgsDict(TypedDict):
        """
        Use the DigitalOcean DNS API to manage DNS01 challenge records.
        """

        token_secret_ref: NotRequired[
            pulumi.Input["IssuerSpecAcmeSolversDns01DigitaloceanTokenSecretRefArgsDict"]
        ]

elif False:
    IssuerSpecAcmeSolversDns01DigitaloceanArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class IssuerSpecAcmeSolversDns01DigitaloceanArgs:
    def __init__(
        __self__,
        *,
        token_secret_ref: Optional[
            pulumi.Input["IssuerSpecAcmeSolversDns01DigitaloceanTokenSecretRefArgs"]
        ] = None
    ):
        """
        Use the DigitalOcean DNS API to manage DNS01 challenge records.
        """
        if token_secret_ref is not None:
            pulumi.set(__self__, "token_secret_ref", token_secret_ref)

    @property
    @pulumi.getter(name="tokenSecretRef")
    def token_secret_ref(
        self,
    ) -> Optional[
        pulumi.Input["IssuerSpecAcmeSolversDns01DigitaloceanTokenSecretRefArgs"]
    ]:
        return pulumi.get(self, "token_secret_ref")

    @token_secret_ref.setter
    def token_secret_ref(
        self,
        value: Optional[
            pulumi.Input["IssuerSpecAcmeSolversDns01DigitaloceanTokenSecretRefArgs"]
        ],
    ):
        pulumi.set(self, "token_secret_ref", value)


if not MYPY:

    class IssuerSpecAcmeSolversDns01PatchArgsDict(TypedDict):
        """
        Configures cert-manager to attempt to complete authorizations by
        performing the DNS01 challenge flow.
        """

        acme_dns: NotRequired[
            pulumi.Input["IssuerSpecAcmeSolversDns01AcmeDNSPatchArgsDict"]
        ]
        akamai: NotRequired[
            pulumi.Input["IssuerSpecAcmeSolversDns01AkamaiPatchArgsDict"]
        ]
        azure_dns: NotRequired[
            pulumi.Input["IssuerSpecAcmeSolversDns01AzureDNSPatchArgsDict"]
        ]
        cloud_dns: NotRequired[
            pulumi.Input["IssuerSpecAcmeSolversDns01CloudDNSPatchArgsDict"]
        ]
        cloudflare: NotRequired[
            pulumi.Input["IssuerSpecAcmeSolversDns01CloudflarePatchArgsDict"]
        ]
        cname_strategy: NotRequired[pulumi.Input[str]]
        """
        CNAMEStrategy configures how the DNS01 provider should handle CNAME
        records when found in DNS zones.
        """
        digitalocean: NotRequired[
            pulumi.Input["IssuerSpecAcmeSolversDns01DigitaloceanPatchArgsDict"]
        ]
        rfc2136: NotRequired[
            pulumi.Input["IssuerSpecAcmeSolversDns01Rfc2136PatchArgsDict"]
        ]
        route53: NotRequired[
            pulumi.Input["IssuerSpecAcmeSolversDns01Route53PatchArgsDict"]
        ]
        webhook: NotRequired[
            pulumi.Input["IssuerSpecAcmeSolversDns01WebhookPatchArgsDict"]
        ]

elif False:
    IssuerSpecAcmeSolversDns01PatchArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class IssuerSpecAcmeSolversDns01PatchArgs:
    def __init__(
        __self__,
        *,
        acme_dns: Optional[
            pulumi.Input["IssuerSpecAcmeSolversDns01AcmeDNSPatchArgs"]
        ] = None,
        akamai: Optional[
            pulumi.Input["IssuerSpecAcmeSolversDns01AkamaiPatchArgs"]
        ] = None,
        azure_dns: Optional[
            pulumi.Input["IssuerSpecAcmeSolversDns01AzureDNSPatchArgs"]
        ] = None,
        cloud_dns: Optional[
            pulumi.Input["IssuerSpecAcmeSolversDns01CloudDNSPatchArgs"]
        ] = None,
        cloudflare: Optional[
            pulumi.Input["IssuerSpecAcmeSolversDns01CloudflarePatchArgs"]
        ] = None,
        cname_strategy: Optional[pulumi.Input[str]] = None,
        digitalocean: Optional[
            pulumi.Input["IssuerSpecAcmeSolversDns01DigitaloceanPatchArgs"]
        ] = None,
        rfc2136: Optional[
            pulumi.Input["IssuerSpecAcmeSolversDns01Rfc2136PatchArgs"]
        ] = None,
        route53: Optional[
            pulumi.Input["IssuerSpecAcmeSolversDns01Route53PatchArgs"]
        ] = None,
        webhook: Optional[
            pulumi.Input["IssuerSpecAcmeSolversDns01WebhookPatchArgs"]
        ] = None
    ):
        """
        Configures cert-manager to attempt to complete authorizations by
        performing the DNS01 challenge flow.
        :param pulumi.Input[str] cname_strategy: CNAMEStrategy configures how the DNS01 provider should handle CNAME
               records when found in DNS zones.
        """
        if acme_dns is not None:
            pulumi.set(__self__, "acme_dns", acme_dns)
        if akamai is not None:
            pulumi.set(__self__, "akamai", akamai)
        if azure_dns is not None:
            pulumi.set(__self__, "azure_dns", azure_dns)
        if cloud_dns is not None:
            pulumi.set(__self__, "cloud_dns", cloud_dns)
        if cloudflare is not None:
            pulumi.set(__self__, "cloudflare", cloudflare)
        if cname_strategy is not None:
            pulumi.set(__self__, "cname_strategy", cname_strategy)
        if digitalocean is not None:
            pulumi.set(__self__, "digitalocean", digitalocean)
        if rfc2136 is not None:
            pulumi.set(__self__, "rfc2136", rfc2136)
        if route53 is not None:
            pulumi.set(__self__, "route53", route53)
        if webhook is not None:
            pulumi.set(__self__, "webhook", webhook)

    @property
    @pulumi.getter(name="acmeDNS")
    def acme_dns(
        self,
    ) -> Optional[pulumi.Input["IssuerSpecAcmeSolversDns01AcmeDNSPatchArgs"]]:
        return pulumi.get(self, "acme_dns")

    @acme_dns.setter
    def acme_dns(
        self,
        value: Optional[pulumi.Input["IssuerSpecAcmeSolversDns01AcmeDNSPatchArgs"]],
    ):
        pulumi.set(self, "acme_dns", value)

    @property
    @pulumi.getter
    def akamai(
        self,
    ) -> Optional[pulumi.Input["IssuerSpecAcmeSolversDns01AkamaiPatchArgs"]]:
        return pulumi.get(self, "akamai")

    @akamai.setter
    def akamai(
        self, value: Optional[pulumi.Input["IssuerSpecAcmeSolversDns01AkamaiPatchArgs"]]
    ):
        pulumi.set(self, "akamai", value)

    @property
    @pulumi.getter(name="azureDNS")
    def azure_dns(
        self,
    ) -> Optional[pulumi.Input["IssuerSpecAcmeSolversDns01AzureDNSPatchArgs"]]:
        return pulumi.get(self, "azure_dns")

    @azure_dns.setter
    def azure_dns(
        self,
        value: Optional[pulumi.Input["IssuerSpecAcmeSolversDns01AzureDNSPatchArgs"]],
    ):
        pulumi.set(self, "azure_dns", value)

    @property
    @pulumi.getter(name="cloudDNS")
    def cloud_dns(
        self,
    ) -> Optional[pulumi.Input["IssuerSpecAcmeSolversDns01CloudDNSPatchArgs"]]:
        return pulumi.get(self, "cloud_dns")

    @cloud_dns.setter
    def cloud_dns(
        self,
        value: Optional[pulumi.Input["IssuerSpecAcmeSolversDns01CloudDNSPatchArgs"]],
    ):
        pulumi.set(self, "cloud_dns", value)

    @property
    @pulumi.getter
    def cloudflare(
        self,
    ) -> Optional[pulumi.Input["IssuerSpecAcmeSolversDns01CloudflarePatchArgs"]]:
        return pulumi.get(self, "cloudflare")

    @cloudflare.setter
    def cloudflare(
        self,
        value: Optional[pulumi.Input["IssuerSpecAcmeSolversDns01CloudflarePatchArgs"]],
    ):
        pulumi.set(self, "cloudflare", value)

    @property
    @pulumi.getter(name="cnameStrategy")
    def cname_strategy(self) -> Optional[pulumi.Input[str]]:
        """
        CNAMEStrategy configures how the DNS01 provider should handle CNAME
        records when found in DNS zones.
        """
        return pulumi.get(self, "cname_strategy")

    @cname_strategy.setter
    def cname_strategy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cname_strategy", value)

    @property
    @pulumi.getter
    def digitalocean(
        self,
    ) -> Optional[pulumi.Input["IssuerSpecAcmeSolversDns01DigitaloceanPatchArgs"]]:
        return pulumi.get(self, "digitalocean")

    @digitalocean.setter
    def digitalocean(
        self,
        value: Optional[
            pulumi.Input["IssuerSpecAcmeSolversDns01DigitaloceanPatchArgs"]
        ],
    ):
        pulumi.set(self, "digitalocean", value)

    @property
    @pulumi.getter
    def rfc2136(
        self,
    ) -> Optional[pulumi.Input["IssuerSpecAcmeSolversDns01Rfc2136PatchArgs"]]:
        return pulumi.get(self, "rfc2136")

    @rfc2136.setter
    def rfc2136(
        self,
        value: Optional[pulumi.Input["IssuerSpecAcmeSolversDns01Rfc2136PatchArgs"]],
    ):
        pulumi.set(self, "rfc2136", value)

    @property
    @pulumi.getter
    def route53(
        self,
    ) -> Optional[pulumi.Input["IssuerSpecAcmeSolversDns01Route53PatchArgs"]]:
        return pulumi.get(self, "route53")

    @route53.setter
    def route53(
        self,
        value: Optional[pulumi.Input["IssuerSpecAcmeSolversDns01Route53PatchArgs"]],
    ):
        pulumi.set(self, "route53", value)

    @property
    @pulumi.getter
    def webhook(
        self,
    ) -> Optional[pulumi.Input["IssuerSpecAcmeSolversDns01WebhookPatchArgs"]]:
        return pulumi.get(self, "webhook")

    @webhook.setter
    def webhook(
        self,
        value: Optional[pulumi.Input["IssuerSpecAcmeSolversDns01WebhookPatchArgs"]],
    ):
        pulumi.set(self, "webhook", value)


if not MYPY:

    class IssuerSpecAcmeSolversDns01Rfc2136PatchArgsDict(TypedDict):
        """
        Use RFC2136 ("Dynamic Updates in the Domain Name System") (https://datatracker.ietf.org/doc/rfc2136/)
        to manage DNS01 challenge records.
        """

        nameserver: NotRequired[pulumi.Input[str]]
        """
        The IP address or hostname of an authoritative DNS server supporting
        RFC2136 in the form host:port. If the host is an IPv6 address it must be
        enclosed in square brackets (e.g [2001:db8::1]) ; port is optional.
        This field is required.
        """
        tsig_algorithm: NotRequired[pulumi.Input[str]]
        """
        The TSIG Algorithm configured in the DNS supporting RFC2136. Used only
        when ``tsigSecretSecretRef`` and ``tsigKeyName`` are defined.
        Supported values are (case-insensitive): ``HMACMD5`` (default),
        ``HMACSHA1``, ``HMACSHA256`` or ``HMACSHA512``.
        """
        tsig_key_name: NotRequired[pulumi.Input[str]]
        """
        The TSIG Key name configured in the DNS.
        If ``tsigSecretSecretRef`` is defined, this field is required.
        """
        tsig_secret_secret_ref: NotRequired[
            pulumi.Input[
                "IssuerSpecAcmeSolversDns01Rfc2136TsigSecretSecretRefPatchArgsDict"
            ]
        ]

elif False:
    IssuerSpecAcmeSolversDns01Rfc2136PatchArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class IssuerSpecAcmeSolversDns01Rfc2136PatchArgs:
    def __init__(
        __self__,
        *,
        nameserver: Optional[pulumi.Input[str]] = None,
        tsig_algorithm: Optional[pulumi.Input[str]] = None,
        tsig_key_name: Optional[pulumi.Input[str]] = None,
        tsig_secret_secret_ref: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversDns01Rfc2136TsigSecretSecretRefPatchArgs"
            ]
        ] = None
    ):
        """
        Use RFC2136 ("Dynamic Updates in the Domain Name System") (https://datatracker.ietf.org/doc/rfc2136/)
        to manage DNS01 challenge records.
        :param pulumi.Input[str] nameserver: The IP address or hostname of an authoritative DNS server supporting
               RFC2136 in the form host:port. If the host is an IPv6 address it must be
               enclosed in square brackets (e.g [2001:db8::1]) ; port is optional.
               This field is required.
        :param pulumi.Input[str] tsig_algorithm: The TSIG Algorithm configured in the DNS supporting RFC2136. Used only
               when ``tsigSecretSecretRef`` and ``tsigKeyName`` are defined.
               Supported values are (case-insensitive): ``HMACMD5`` (default),
               ``HMACSHA1``, ``HMACSHA256`` or ``HMACSHA512``.
        :param pulumi.Input[str] tsig_key_name: The TSIG Key name configured in the DNS.
               If ``tsigSecretSecretRef`` is defined, this field is required.
        """
        if nameserver is not None:
            pulumi.set(__self__, "nameserver", nameserver)
        if tsig_algorithm is not None:
            pulumi.set(__self__, "tsig_algorithm", tsig_algorithm)
        if tsig_key_name is not None:
            pulumi.set(__self__, "tsig_key_name", tsig_key_name)
        if tsig_secret_secret_ref is not None:
            pulumi.set(__self__, "tsig_secret_secret_ref", tsig_secret_secret_ref)

    @property
    @pulumi.getter
    def nameserver(self) -> Optional[pulumi.Input[str]]:
        """
        The IP address or hostname of an authoritative DNS server supporting
        RFC2136 in the form host:port. If the host is an IPv6 address it must be
        enclosed in square brackets (e.g [2001:db8::1]) ; port is optional.
        This field is required.
        """
        return pulumi.get(self, "nameserver")

    @nameserver.setter
    def nameserver(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nameserver", value)

    @property
    @pulumi.getter(name="tsigAlgorithm")
    def tsig_algorithm(self) -> Optional[pulumi.Input[str]]:
        """
        The TSIG Algorithm configured in the DNS supporting RFC2136. Used only
        when ``tsigSecretSecretRef`` and ``tsigKeyName`` are defined.
        Supported values are (case-insensitive): ``HMACMD5`` (default),
        ``HMACSHA1``, ``HMACSHA256`` or ``HMACSHA512``.
        """
        return pulumi.get(self, "tsig_algorithm")

    @tsig_algorithm.setter
    def tsig_algorithm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tsig_algorithm", value)

    @property
    @pulumi.getter(name="tsigKeyName")
    def tsig_key_name(self) -> Optional[pulumi.Input[str]]:
        """
        The TSIG Key name configured in the DNS.
        If ``tsigSecretSecretRef`` is defined, this field is required.
        """
        return pulumi.get(self, "tsig_key_name")

    @tsig_key_name.setter
    def tsig_key_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tsig_key_name", value)

    @property
    @pulumi.getter(name="tsigSecretSecretRef")
    def tsig_secret_secret_ref(
        self,
    ) -> Optional[
        pulumi.Input["IssuerSpecAcmeSolversDns01Rfc2136TsigSecretSecretRefPatchArgs"]
    ]:
        return pulumi.get(self, "tsig_secret_secret_ref")

    @tsig_secret_secret_ref.setter
    def tsig_secret_secret_ref(
        self,
        value: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversDns01Rfc2136TsigSecretSecretRefPatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "tsig_secret_secret_ref", value)


if not MYPY:

    class IssuerSpecAcmeSolversDns01Rfc2136TsigSecretSecretRefPatchArgsDict(TypedDict):
        """
        The name of the secret containing the TSIG value.
        If ``tsigKeyName`` is defined, this field is required.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """

elif False:
    IssuerSpecAcmeSolversDns01Rfc2136TsigSecretSecretRefPatchArgsDict: TypeAlias = (
        Mapping[str, Any]
    )


@pulumi.input_type
class IssuerSpecAcmeSolversDns01Rfc2136TsigSecretSecretRefPatchArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        name: Optional[pulumi.Input[str]] = None
    ):
        """
        The name of the secret containing the TSIG value.
        If ``tsigKeyName`` is defined, this field is required.
        :param pulumi.Input[str] key: The key of the entry in the Secret resource's `data` field to be used.
               Some instances of this field may be defaulted, in others it may be
               required.
        :param pulumi.Input[str] name: Name of the resource being referred to.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:

    class IssuerSpecAcmeSolversDns01Rfc2136TsigSecretSecretRefArgsDict(TypedDict):
        """
        The name of the secret containing the TSIG value.
        If ``tsigKeyName`` is defined, this field is required.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """

elif False:
    IssuerSpecAcmeSolversDns01Rfc2136TsigSecretSecretRefArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversDns01Rfc2136TsigSecretSecretRefArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        name: Optional[pulumi.Input[str]] = None
    ):
        """
        The name of the secret containing the TSIG value.
        If ``tsigKeyName`` is defined, this field is required.
        :param pulumi.Input[str] key: The key of the entry in the Secret resource's `data` field to be used.
               Some instances of this field may be defaulted, in others it may be
               required.
        :param pulumi.Input[str] name: Name of the resource being referred to.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:

    class IssuerSpecAcmeSolversDns01Rfc2136ArgsDict(TypedDict):
        """
        Use RFC2136 ("Dynamic Updates in the Domain Name System") (https://datatracker.ietf.org/doc/rfc2136/)
        to manage DNS01 challenge records.
        """

        nameserver: NotRequired[pulumi.Input[str]]
        """
        The IP address or hostname of an authoritative DNS server supporting
        RFC2136 in the form host:port. If the host is an IPv6 address it must be
        enclosed in square brackets (e.g [2001:db8::1]) ; port is optional.
        This field is required.
        """
        tsig_algorithm: NotRequired[pulumi.Input[str]]
        """
        The TSIG Algorithm configured in the DNS supporting RFC2136. Used only
        when ``tsigSecretSecretRef`` and ``tsigKeyName`` are defined.
        Supported values are (case-insensitive): ``HMACMD5`` (default),
        ``HMACSHA1``, ``HMACSHA256`` or ``HMACSHA512``.
        """
        tsig_key_name: NotRequired[pulumi.Input[str]]
        """
        The TSIG Key name configured in the DNS.
        If ``tsigSecretSecretRef`` is defined, this field is required.
        """
        tsig_secret_secret_ref: NotRequired[
            pulumi.Input["IssuerSpecAcmeSolversDns01Rfc2136TsigSecretSecretRefArgsDict"]
        ]

elif False:
    IssuerSpecAcmeSolversDns01Rfc2136ArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class IssuerSpecAcmeSolversDns01Rfc2136Args:
    def __init__(
        __self__,
        *,
        nameserver: Optional[pulumi.Input[str]] = None,
        tsig_algorithm: Optional[pulumi.Input[str]] = None,
        tsig_key_name: Optional[pulumi.Input[str]] = None,
        tsig_secret_secret_ref: Optional[
            pulumi.Input["IssuerSpecAcmeSolversDns01Rfc2136TsigSecretSecretRefArgs"]
        ] = None
    ):
        """
        Use RFC2136 ("Dynamic Updates in the Domain Name System") (https://datatracker.ietf.org/doc/rfc2136/)
        to manage DNS01 challenge records.
        :param pulumi.Input[str] nameserver: The IP address or hostname of an authoritative DNS server supporting
               RFC2136 in the form host:port. If the host is an IPv6 address it must be
               enclosed in square brackets (e.g [2001:db8::1]) ; port is optional.
               This field is required.
        :param pulumi.Input[str] tsig_algorithm: The TSIG Algorithm configured in the DNS supporting RFC2136. Used only
               when ``tsigSecretSecretRef`` and ``tsigKeyName`` are defined.
               Supported values are (case-insensitive): ``HMACMD5`` (default),
               ``HMACSHA1``, ``HMACSHA256`` or ``HMACSHA512``.
        :param pulumi.Input[str] tsig_key_name: The TSIG Key name configured in the DNS.
               If ``tsigSecretSecretRef`` is defined, this field is required.
        """
        if nameserver is not None:
            pulumi.set(__self__, "nameserver", nameserver)
        if tsig_algorithm is not None:
            pulumi.set(__self__, "tsig_algorithm", tsig_algorithm)
        if tsig_key_name is not None:
            pulumi.set(__self__, "tsig_key_name", tsig_key_name)
        if tsig_secret_secret_ref is not None:
            pulumi.set(__self__, "tsig_secret_secret_ref", tsig_secret_secret_ref)

    @property
    @pulumi.getter
    def nameserver(self) -> Optional[pulumi.Input[str]]:
        """
        The IP address or hostname of an authoritative DNS server supporting
        RFC2136 in the form host:port. If the host is an IPv6 address it must be
        enclosed in square brackets (e.g [2001:db8::1]) ; port is optional.
        This field is required.
        """
        return pulumi.get(self, "nameserver")

    @nameserver.setter
    def nameserver(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nameserver", value)

    @property
    @pulumi.getter(name="tsigAlgorithm")
    def tsig_algorithm(self) -> Optional[pulumi.Input[str]]:
        """
        The TSIG Algorithm configured in the DNS supporting RFC2136. Used only
        when ``tsigSecretSecretRef`` and ``tsigKeyName`` are defined.
        Supported values are (case-insensitive): ``HMACMD5`` (default),
        ``HMACSHA1``, ``HMACSHA256`` or ``HMACSHA512``.
        """
        return pulumi.get(self, "tsig_algorithm")

    @tsig_algorithm.setter
    def tsig_algorithm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tsig_algorithm", value)

    @property
    @pulumi.getter(name="tsigKeyName")
    def tsig_key_name(self) -> Optional[pulumi.Input[str]]:
        """
        The TSIG Key name configured in the DNS.
        If ``tsigSecretSecretRef`` is defined, this field is required.
        """
        return pulumi.get(self, "tsig_key_name")

    @tsig_key_name.setter
    def tsig_key_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tsig_key_name", value)

    @property
    @pulumi.getter(name="tsigSecretSecretRef")
    def tsig_secret_secret_ref(
        self,
    ) -> Optional[
        pulumi.Input["IssuerSpecAcmeSolversDns01Rfc2136TsigSecretSecretRefArgs"]
    ]:
        return pulumi.get(self, "tsig_secret_secret_ref")

    @tsig_secret_secret_ref.setter
    def tsig_secret_secret_ref(
        self,
        value: Optional[
            pulumi.Input["IssuerSpecAcmeSolversDns01Rfc2136TsigSecretSecretRefArgs"]
        ],
    ):
        pulumi.set(self, "tsig_secret_secret_ref", value)


if not MYPY:

    class IssuerSpecAcmeSolversDns01Route53AccessKeyIDSecretRefPatchArgsDict(TypedDict):
        """
        The SecretAccessKey is used for authentication. If set, pull the AWS
        access key ID from a key within a Kubernetes Secret.
        Cannot be set when AccessKeyID is set.
        If neither the Access Key nor Key ID are set, we fall-back to using env
        vars, shared credentials file or AWS Instance metadata,
        see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """

elif False:
    IssuerSpecAcmeSolversDns01Route53AccessKeyIDSecretRefPatchArgsDict: TypeAlias = (
        Mapping[str, Any]
    )


@pulumi.input_type
class IssuerSpecAcmeSolversDns01Route53AccessKeyIDSecretRefPatchArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        name: Optional[pulumi.Input[str]] = None
    ):
        """
        The SecretAccessKey is used for authentication. If set, pull the AWS
        access key ID from a key within a Kubernetes Secret.
        Cannot be set when AccessKeyID is set.
        If neither the Access Key nor Key ID are set, we fall-back to using env
        vars, shared credentials file or AWS Instance metadata,
        see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
        :param pulumi.Input[str] key: The key of the entry in the Secret resource's `data` field to be used.
               Some instances of this field may be defaulted, in others it may be
               required.
        :param pulumi.Input[str] name: Name of the resource being referred to.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:

    class IssuerSpecAcmeSolversDns01Route53AccessKeyIDSecretRefArgsDict(TypedDict):
        """
        The SecretAccessKey is used for authentication. If set, pull the AWS
        access key ID from a key within a Kubernetes Secret.
        Cannot be set when AccessKeyID is set.
        If neither the Access Key nor Key ID are set, we fall-back to using env
        vars, shared credentials file or AWS Instance metadata,
        see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """

elif False:
    IssuerSpecAcmeSolversDns01Route53AccessKeyIDSecretRefArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversDns01Route53AccessKeyIDSecretRefArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        name: Optional[pulumi.Input[str]] = None
    ):
        """
        The SecretAccessKey is used for authentication. If set, pull the AWS
        access key ID from a key within a Kubernetes Secret.
        Cannot be set when AccessKeyID is set.
        If neither the Access Key nor Key ID are set, we fall-back to using env
        vars, shared credentials file or AWS Instance metadata,
        see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
        :param pulumi.Input[str] key: The key of the entry in the Secret resource's `data` field to be used.
               Some instances of this field may be defaulted, in others it may be
               required.
        :param pulumi.Input[str] name: Name of the resource being referred to.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:

    class IssuerSpecAcmeSolversDns01Route53AuthKubernetesPatchArgsDict(TypedDict):
        """
        Kubernetes authenticates with Route53 using AssumeRoleWithWebIdentity
        by passing a bound ServiceAccount token.
        """

        service_account_ref: NotRequired[
            pulumi.Input[
                "IssuerSpecAcmeSolversDns01Route53AuthKubernetesServiceAccountRefPatchArgsDict"
            ]
        ]

elif False:
    IssuerSpecAcmeSolversDns01Route53AuthKubernetesPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversDns01Route53AuthKubernetesPatchArgs:
    def __init__(
        __self__,
        *,
        service_account_ref: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversDns01Route53AuthKubernetesServiceAccountRefPatchArgs"
            ]
        ] = None
    ):
        """
        Kubernetes authenticates with Route53 using AssumeRoleWithWebIdentity
        by passing a bound ServiceAccount token.
        """
        if service_account_ref is not None:
            pulumi.set(__self__, "service_account_ref", service_account_ref)

    @property
    @pulumi.getter(name="serviceAccountRef")
    def service_account_ref(
        self,
    ) -> Optional[
        pulumi.Input[
            "IssuerSpecAcmeSolversDns01Route53AuthKubernetesServiceAccountRefPatchArgs"
        ]
    ]:
        return pulumi.get(self, "service_account_ref")

    @service_account_ref.setter
    def service_account_ref(
        self,
        value: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversDns01Route53AuthKubernetesServiceAccountRefPatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "service_account_ref", value)


if not MYPY:

    class IssuerSpecAcmeSolversDns01Route53AuthKubernetesServiceAccountRefPatchArgsDict(
        TypedDict
    ):
        """
        A reference to a service account that will be used to request a bound
        token (also known as "projected token"). To use this field, you must
        configure an RBAC rule to let cert-manager request a token.
        """

        audiences: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        TokenAudiences is an optional list of audiences to include in the
        token passed to AWS. The default token consisting of the issuer's namespace
        and name is always included.
        If unset the audience defaults to `sts.amazonaws.com`.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the ServiceAccount used to request a token.
        """

elif False:
    IssuerSpecAcmeSolversDns01Route53AuthKubernetesServiceAccountRefPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversDns01Route53AuthKubernetesServiceAccountRefPatchArgs:
    def __init__(
        __self__,
        *,
        audiences: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        name: Optional[pulumi.Input[str]] = None
    ):
        """
        A reference to a service account that will be used to request a bound
        token (also known as "projected token"). To use this field, you must
        configure an RBAC rule to let cert-manager request a token.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] audiences: TokenAudiences is an optional list of audiences to include in the
               token passed to AWS. The default token consisting of the issuer's namespace
               and name is always included.
               If unset the audience defaults to `sts.amazonaws.com`.
        :param pulumi.Input[str] name: Name of the ServiceAccount used to request a token.
        """
        if audiences is not None:
            pulumi.set(__self__, "audiences", audiences)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def audiences(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        TokenAudiences is an optional list of audiences to include in the
        token passed to AWS. The default token consisting of the issuer's namespace
        and name is always included.
        If unset the audience defaults to `sts.amazonaws.com`.
        """
        return pulumi.get(self, "audiences")

    @audiences.setter
    def audiences(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "audiences", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the ServiceAccount used to request a token.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:

    class IssuerSpecAcmeSolversDns01Route53AuthKubernetesServiceAccountRefArgsDict(
        TypedDict
    ):
        """
        A reference to a service account that will be used to request a bound
        token (also known as "projected token"). To use this field, you must
        configure an RBAC rule to let cert-manager request a token.
        """

        audiences: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        TokenAudiences is an optional list of audiences to include in the
        token passed to AWS. The default token consisting of the issuer's namespace
        and name is always included.
        If unset the audience defaults to `sts.amazonaws.com`.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the ServiceAccount used to request a token.
        """

elif False:
    IssuerSpecAcmeSolversDns01Route53AuthKubernetesServiceAccountRefArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversDns01Route53AuthKubernetesServiceAccountRefArgs:
    def __init__(
        __self__,
        *,
        audiences: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        name: Optional[pulumi.Input[str]] = None
    ):
        """
        A reference to a service account that will be used to request a bound
        token (also known as "projected token"). To use this field, you must
        configure an RBAC rule to let cert-manager request a token.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] audiences: TokenAudiences is an optional list of audiences to include in the
               token passed to AWS. The default token consisting of the issuer's namespace
               and name is always included.
               If unset the audience defaults to `sts.amazonaws.com`.
        :param pulumi.Input[str] name: Name of the ServiceAccount used to request a token.
        """
        if audiences is not None:
            pulumi.set(__self__, "audiences", audiences)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def audiences(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        TokenAudiences is an optional list of audiences to include in the
        token passed to AWS. The default token consisting of the issuer's namespace
        and name is always included.
        If unset the audience defaults to `sts.amazonaws.com`.
        """
        return pulumi.get(self, "audiences")

    @audiences.setter
    def audiences(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "audiences", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the ServiceAccount used to request a token.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:

    class IssuerSpecAcmeSolversDns01Route53AuthKubernetesArgsDict(TypedDict):
        """
        Kubernetes authenticates with Route53 using AssumeRoleWithWebIdentity
        by passing a bound ServiceAccount token.
        """

        service_account_ref: NotRequired[
            pulumi.Input[
                "IssuerSpecAcmeSolversDns01Route53AuthKubernetesServiceAccountRefArgsDict"
            ]
        ]

elif False:
    IssuerSpecAcmeSolversDns01Route53AuthKubernetesArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversDns01Route53AuthKubernetesArgs:
    def __init__(
        __self__,
        *,
        service_account_ref: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversDns01Route53AuthKubernetesServiceAccountRefArgs"
            ]
        ] = None
    ):
        """
        Kubernetes authenticates with Route53 using AssumeRoleWithWebIdentity
        by passing a bound ServiceAccount token.
        """
        if service_account_ref is not None:
            pulumi.set(__self__, "service_account_ref", service_account_ref)

    @property
    @pulumi.getter(name="serviceAccountRef")
    def service_account_ref(
        self,
    ) -> Optional[
        pulumi.Input[
            "IssuerSpecAcmeSolversDns01Route53AuthKubernetesServiceAccountRefArgs"
        ]
    ]:
        return pulumi.get(self, "service_account_ref")

    @service_account_ref.setter
    def service_account_ref(
        self,
        value: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversDns01Route53AuthKubernetesServiceAccountRefArgs"
            ]
        ],
    ):
        pulumi.set(self, "service_account_ref", value)


if not MYPY:

    class IssuerSpecAcmeSolversDns01Route53AuthPatchArgsDict(TypedDict):
        """
        Auth configures how cert-manager authenticates.
        """

        kubernetes: NotRequired[
            pulumi.Input["IssuerSpecAcmeSolversDns01Route53AuthKubernetesPatchArgsDict"]
        ]

elif False:
    IssuerSpecAcmeSolversDns01Route53AuthPatchArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class IssuerSpecAcmeSolversDns01Route53AuthPatchArgs:
    def __init__(
        __self__,
        *,
        kubernetes: Optional[
            pulumi.Input["IssuerSpecAcmeSolversDns01Route53AuthKubernetesPatchArgs"]
        ] = None
    ):
        """
        Auth configures how cert-manager authenticates.
        """
        if kubernetes is not None:
            pulumi.set(__self__, "kubernetes", kubernetes)

    @property
    @pulumi.getter
    def kubernetes(
        self,
    ) -> Optional[
        pulumi.Input["IssuerSpecAcmeSolversDns01Route53AuthKubernetesPatchArgs"]
    ]:
        return pulumi.get(self, "kubernetes")

    @kubernetes.setter
    def kubernetes(
        self,
        value: Optional[
            pulumi.Input["IssuerSpecAcmeSolversDns01Route53AuthKubernetesPatchArgs"]
        ],
    ):
        pulumi.set(self, "kubernetes", value)


if not MYPY:

    class IssuerSpecAcmeSolversDns01Route53AuthArgsDict(TypedDict):
        """
        Auth configures how cert-manager authenticates.
        """

        kubernetes: NotRequired[
            pulumi.Input["IssuerSpecAcmeSolversDns01Route53AuthKubernetesArgsDict"]
        ]

elif False:
    IssuerSpecAcmeSolversDns01Route53AuthArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class IssuerSpecAcmeSolversDns01Route53AuthArgs:
    def __init__(
        __self__,
        *,
        kubernetes: Optional[
            pulumi.Input["IssuerSpecAcmeSolversDns01Route53AuthKubernetesArgs"]
        ] = None
    ):
        """
        Auth configures how cert-manager authenticates.
        """
        if kubernetes is not None:
            pulumi.set(__self__, "kubernetes", kubernetes)

    @property
    @pulumi.getter
    def kubernetes(
        self,
    ) -> Optional[pulumi.Input["IssuerSpecAcmeSolversDns01Route53AuthKubernetesArgs"]]:
        return pulumi.get(self, "kubernetes")

    @kubernetes.setter
    def kubernetes(
        self,
        value: Optional[
            pulumi.Input["IssuerSpecAcmeSolversDns01Route53AuthKubernetesArgs"]
        ],
    ):
        pulumi.set(self, "kubernetes", value)


if not MYPY:

    class IssuerSpecAcmeSolversDns01Route53PatchArgsDict(TypedDict):
        """
        Use the AWS Route53 API to manage DNS01 challenge records.
        """

        access_key_id: NotRequired[pulumi.Input[str]]
        """
        The AccessKeyID is used for authentication.
        Cannot be set when SecretAccessKeyID is set.
        If neither the Access Key nor Key ID are set, we fall-back to using env
        vars, shared credentials file or AWS Instance metadata,
        see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
        """
        access_key_id_secret_ref: NotRequired[
            pulumi.Input[
                "IssuerSpecAcmeSolversDns01Route53AccessKeyIDSecretRefPatchArgsDict"
            ]
        ]
        auth: NotRequired[
            pulumi.Input["IssuerSpecAcmeSolversDns01Route53AuthPatchArgsDict"]
        ]
        hosted_zone_id: NotRequired[pulumi.Input[str]]
        """
        If set, the provider will manage only this zone in Route53 and will not do a lookup using the route53:ListHostedZonesByName api call.
        """
        region: NotRequired[pulumi.Input[str]]
        """
        Override the AWS region.

        Route53 is a global service and does not have regional endpoints but the
        region specified here (or via environment variables) is used as a hint to
        help compute the correct AWS credential scope and partition when it
        connects to Route53. See:
        - [Amazon Route 53 endpoints and quotas](https://docs.aws.amazon.com/general/latest/gr/r53.html)
        - [Global services](https://docs.aws.amazon.com/whitepapers/latest/aws-fault-isolation-boundaries/global-services.html)

        If you omit this region field, cert-manager will use the region from
        AWS_REGION and AWS_DEFAULT_REGION environment variables, if they are set
        in the cert-manager controller Pod.

        The `region` field is not needed if you use [IAM Roles for Service Accounts (IRSA)](https://docs.aws.amazon.com/eks/latest/userguide/iam-roles-for-service-accounts.html).
        Instead an AWS_REGION environment variable is added to the cert-manager controller Pod by:
        [Amazon EKS Pod Identity Webhook](https://github.com/aws/amazon-eks-pod-identity-webhook).
        In this case this `region` field value is ignored.

        The `region` field is not needed if you use [EKS Pod Identities](https://docs.aws.amazon.com/eks/latest/userguide/pod-identities.html).
        Instead an AWS_REGION environment variable is added to the cert-manager controller Pod by:
        [Amazon EKS Pod Identity Agent](https://github.com/aws/eks-pod-identity-agent),
        In this case this `region` field value is ignored.
        """
        role: NotRequired[pulumi.Input[str]]
        """
        Role is a Role ARN which the Route53 provider will assume using either the explicit credentials AccessKeyID/SecretAccessKey
        or the inferred credentials from environment variables, shared credentials file or AWS Instance metadata
        """
        secret_access_key_secret_ref: NotRequired[
            pulumi.Input[
                "IssuerSpecAcmeSolversDns01Route53SecretAccessKeySecretRefPatchArgsDict"
            ]
        ]

elif False:
    IssuerSpecAcmeSolversDns01Route53PatchArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class IssuerSpecAcmeSolversDns01Route53PatchArgs:
    def __init__(
        __self__,
        *,
        access_key_id: Optional[pulumi.Input[str]] = None,
        access_key_id_secret_ref: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversDns01Route53AccessKeyIDSecretRefPatchArgs"
            ]
        ] = None,
        auth: Optional[
            pulumi.Input["IssuerSpecAcmeSolversDns01Route53AuthPatchArgs"]
        ] = None,
        hosted_zone_id: Optional[pulumi.Input[str]] = None,
        region: Optional[pulumi.Input[str]] = None,
        role: Optional[pulumi.Input[str]] = None,
        secret_access_key_secret_ref: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversDns01Route53SecretAccessKeySecretRefPatchArgs"
            ]
        ] = None
    ):
        """
        Use the AWS Route53 API to manage DNS01 challenge records.
        :param pulumi.Input[str] access_key_id: The AccessKeyID is used for authentication.
               Cannot be set when SecretAccessKeyID is set.
               If neither the Access Key nor Key ID are set, we fall-back to using env
               vars, shared credentials file or AWS Instance metadata,
               see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
        :param pulumi.Input[str] hosted_zone_id: If set, the provider will manage only this zone in Route53 and will not do a lookup using the route53:ListHostedZonesByName api call.
        :param pulumi.Input[str] region: Override the AWS region.

               Route53 is a global service and does not have regional endpoints but the
               region specified here (or via environment variables) is used as a hint to
               help compute the correct AWS credential scope and partition when it
               connects to Route53. See:
               - [Amazon Route 53 endpoints and quotas](https://docs.aws.amazon.com/general/latest/gr/r53.html)
               - [Global services](https://docs.aws.amazon.com/whitepapers/latest/aws-fault-isolation-boundaries/global-services.html)

               If you omit this region field, cert-manager will use the region from
               AWS_REGION and AWS_DEFAULT_REGION environment variables, if they are set
               in the cert-manager controller Pod.

               The `region` field is not needed if you use [IAM Roles for Service Accounts (IRSA)](https://docs.aws.amazon.com/eks/latest/userguide/iam-roles-for-service-accounts.html).
               Instead an AWS_REGION environment variable is added to the cert-manager controller Pod by:
               [Amazon EKS Pod Identity Webhook](https://github.com/aws/amazon-eks-pod-identity-webhook).
               In this case this `region` field value is ignored.

               The `region` field is not needed if you use [EKS Pod Identities](https://docs.aws.amazon.com/eks/latest/userguide/pod-identities.html).
               Instead an AWS_REGION environment variable is added to the cert-manager controller Pod by:
               [Amazon EKS Pod Identity Agent](https://github.com/aws/eks-pod-identity-agent),
               In this case this `region` field value is ignored.
        :param pulumi.Input[str] role: Role is a Role ARN which the Route53 provider will assume using either the explicit credentials AccessKeyID/SecretAccessKey
               or the inferred credentials from environment variables, shared credentials file or AWS Instance metadata
        """
        if access_key_id is not None:
            pulumi.set(__self__, "access_key_id", access_key_id)
        if access_key_id_secret_ref is not None:
            pulumi.set(__self__, "access_key_id_secret_ref", access_key_id_secret_ref)
        if auth is not None:
            pulumi.set(__self__, "auth", auth)
        if hosted_zone_id is not None:
            pulumi.set(__self__, "hosted_zone_id", hosted_zone_id)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if secret_access_key_secret_ref is not None:
            pulumi.set(
                __self__, "secret_access_key_secret_ref", secret_access_key_secret_ref
            )

    @property
    @pulumi.getter(name="accessKeyID")
    def access_key_id(self) -> Optional[pulumi.Input[str]]:
        """
        The AccessKeyID is used for authentication.
        Cannot be set when SecretAccessKeyID is set.
        If neither the Access Key nor Key ID are set, we fall-back to using env
        vars, shared credentials file or AWS Instance metadata,
        see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
        """
        return pulumi.get(self, "access_key_id")

    @access_key_id.setter
    def access_key_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_key_id", value)

    @property
    @pulumi.getter(name="accessKeyIDSecretRef")
    def access_key_id_secret_ref(
        self,
    ) -> Optional[
        pulumi.Input["IssuerSpecAcmeSolversDns01Route53AccessKeyIDSecretRefPatchArgs"]
    ]:
        return pulumi.get(self, "access_key_id_secret_ref")

    @access_key_id_secret_ref.setter
    def access_key_id_secret_ref(
        self,
        value: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversDns01Route53AccessKeyIDSecretRefPatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "access_key_id_secret_ref", value)

    @property
    @pulumi.getter
    def auth(
        self,
    ) -> Optional[pulumi.Input["IssuerSpecAcmeSolversDns01Route53AuthPatchArgs"]]:
        return pulumi.get(self, "auth")

    @auth.setter
    def auth(
        self,
        value: Optional[pulumi.Input["IssuerSpecAcmeSolversDns01Route53AuthPatchArgs"]],
    ):
        pulumi.set(self, "auth", value)

    @property
    @pulumi.getter(name="hostedZoneID")
    def hosted_zone_id(self) -> Optional[pulumi.Input[str]]:
        """
        If set, the provider will manage only this zone in Route53 and will not do a lookup using the route53:ListHostedZonesByName api call.
        """
        return pulumi.get(self, "hosted_zone_id")

    @hosted_zone_id.setter
    def hosted_zone_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hosted_zone_id", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        Override the AWS region.

        Route53 is a global service and does not have regional endpoints but the
        region specified here (or via environment variables) is used as a hint to
        help compute the correct AWS credential scope and partition when it
        connects to Route53. See:
        - [Amazon Route 53 endpoints and quotas](https://docs.aws.amazon.com/general/latest/gr/r53.html)
        - [Global services](https://docs.aws.amazon.com/whitepapers/latest/aws-fault-isolation-boundaries/global-services.html)

        If you omit this region field, cert-manager will use the region from
        AWS_REGION and AWS_DEFAULT_REGION environment variables, if they are set
        in the cert-manager controller Pod.

        The `region` field is not needed if you use [IAM Roles for Service Accounts (IRSA)](https://docs.aws.amazon.com/eks/latest/userguide/iam-roles-for-service-accounts.html).
        Instead an AWS_REGION environment variable is added to the cert-manager controller Pod by:
        [Amazon EKS Pod Identity Webhook](https://github.com/aws/amazon-eks-pod-identity-webhook).
        In this case this `region` field value is ignored.

        The `region` field is not needed if you use [EKS Pod Identities](https://docs.aws.amazon.com/eks/latest/userguide/pod-identities.html).
        Instead an AWS_REGION environment variable is added to the cert-manager controller Pod by:
        [Amazon EKS Pod Identity Agent](https://github.com/aws/eks-pod-identity-agent),
        In this case this `region` field value is ignored.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input[str]]:
        """
        Role is a Role ARN which the Route53 provider will assume using either the explicit credentials AccessKeyID/SecretAccessKey
        or the inferred credentials from environment variables, shared credentials file or AWS Instance metadata
        """
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role", value)

    @property
    @pulumi.getter(name="secretAccessKeySecretRef")
    def secret_access_key_secret_ref(
        self,
    ) -> Optional[
        pulumi.Input[
            "IssuerSpecAcmeSolversDns01Route53SecretAccessKeySecretRefPatchArgs"
        ]
    ]:
        return pulumi.get(self, "secret_access_key_secret_ref")

    @secret_access_key_secret_ref.setter
    def secret_access_key_secret_ref(
        self,
        value: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversDns01Route53SecretAccessKeySecretRefPatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "secret_access_key_secret_ref", value)


if not MYPY:

    class IssuerSpecAcmeSolversDns01Route53SecretAccessKeySecretRefPatchArgsDict(
        TypedDict
    ):
        """
        The SecretAccessKey is used for authentication.
        If neither the Access Key nor Key ID are set, we fall-back to using env
        vars, shared credentials file or AWS Instance metadata,
        see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """

elif False:
    IssuerSpecAcmeSolversDns01Route53SecretAccessKeySecretRefPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversDns01Route53SecretAccessKeySecretRefPatchArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        name: Optional[pulumi.Input[str]] = None
    ):
        """
        The SecretAccessKey is used for authentication.
        If neither the Access Key nor Key ID are set, we fall-back to using env
        vars, shared credentials file or AWS Instance metadata,
        see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
        :param pulumi.Input[str] key: The key of the entry in the Secret resource's `data` field to be used.
               Some instances of this field may be defaulted, in others it may be
               required.
        :param pulumi.Input[str] name: Name of the resource being referred to.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:

    class IssuerSpecAcmeSolversDns01Route53SecretAccessKeySecretRefArgsDict(TypedDict):
        """
        The SecretAccessKey is used for authentication.
        If neither the Access Key nor Key ID are set, we fall-back to using env
        vars, shared credentials file or AWS Instance metadata,
        see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """

elif False:
    IssuerSpecAcmeSolversDns01Route53SecretAccessKeySecretRefArgsDict: TypeAlias = (
        Mapping[str, Any]
    )


@pulumi.input_type
class IssuerSpecAcmeSolversDns01Route53SecretAccessKeySecretRefArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        name: Optional[pulumi.Input[str]] = None
    ):
        """
        The SecretAccessKey is used for authentication.
        If neither the Access Key nor Key ID are set, we fall-back to using env
        vars, shared credentials file or AWS Instance metadata,
        see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
        :param pulumi.Input[str] key: The key of the entry in the Secret resource's `data` field to be used.
               Some instances of this field may be defaulted, in others it may be
               required.
        :param pulumi.Input[str] name: Name of the resource being referred to.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:

    class IssuerSpecAcmeSolversDns01Route53ArgsDict(TypedDict):
        """
        Use the AWS Route53 API to manage DNS01 challenge records.
        """

        access_key_id: NotRequired[pulumi.Input[str]]
        """
        The AccessKeyID is used for authentication.
        Cannot be set when SecretAccessKeyID is set.
        If neither the Access Key nor Key ID are set, we fall-back to using env
        vars, shared credentials file or AWS Instance metadata,
        see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
        """
        access_key_id_secret_ref: NotRequired[
            pulumi.Input[
                "IssuerSpecAcmeSolversDns01Route53AccessKeyIDSecretRefArgsDict"
            ]
        ]
        auth: NotRequired[pulumi.Input["IssuerSpecAcmeSolversDns01Route53AuthArgsDict"]]
        hosted_zone_id: NotRequired[pulumi.Input[str]]
        """
        If set, the provider will manage only this zone in Route53 and will not do a lookup using the route53:ListHostedZonesByName api call.
        """
        region: NotRequired[pulumi.Input[str]]
        """
        Override the AWS region.

        Route53 is a global service and does not have regional endpoints but the
        region specified here (or via environment variables) is used as a hint to
        help compute the correct AWS credential scope and partition when it
        connects to Route53. See:
        - [Amazon Route 53 endpoints and quotas](https://docs.aws.amazon.com/general/latest/gr/r53.html)
        - [Global services](https://docs.aws.amazon.com/whitepapers/latest/aws-fault-isolation-boundaries/global-services.html)

        If you omit this region field, cert-manager will use the region from
        AWS_REGION and AWS_DEFAULT_REGION environment variables, if they are set
        in the cert-manager controller Pod.

        The `region` field is not needed if you use [IAM Roles for Service Accounts (IRSA)](https://docs.aws.amazon.com/eks/latest/userguide/iam-roles-for-service-accounts.html).
        Instead an AWS_REGION environment variable is added to the cert-manager controller Pod by:
        [Amazon EKS Pod Identity Webhook](https://github.com/aws/amazon-eks-pod-identity-webhook).
        In this case this `region` field value is ignored.

        The `region` field is not needed if you use [EKS Pod Identities](https://docs.aws.amazon.com/eks/latest/userguide/pod-identities.html).
        Instead an AWS_REGION environment variable is added to the cert-manager controller Pod by:
        [Amazon EKS Pod Identity Agent](https://github.com/aws/eks-pod-identity-agent),
        In this case this `region` field value is ignored.
        """
        role: NotRequired[pulumi.Input[str]]
        """
        Role is a Role ARN which the Route53 provider will assume using either the explicit credentials AccessKeyID/SecretAccessKey
        or the inferred credentials from environment variables, shared credentials file or AWS Instance metadata
        """
        secret_access_key_secret_ref: NotRequired[
            pulumi.Input[
                "IssuerSpecAcmeSolversDns01Route53SecretAccessKeySecretRefArgsDict"
            ]
        ]

elif False:
    IssuerSpecAcmeSolversDns01Route53ArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class IssuerSpecAcmeSolversDns01Route53Args:
    def __init__(
        __self__,
        *,
        access_key_id: Optional[pulumi.Input[str]] = None,
        access_key_id_secret_ref: Optional[
            pulumi.Input["IssuerSpecAcmeSolversDns01Route53AccessKeyIDSecretRefArgs"]
        ] = None,
        auth: Optional[
            pulumi.Input["IssuerSpecAcmeSolversDns01Route53AuthArgs"]
        ] = None,
        hosted_zone_id: Optional[pulumi.Input[str]] = None,
        region: Optional[pulumi.Input[str]] = None,
        role: Optional[pulumi.Input[str]] = None,
        secret_access_key_secret_ref: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversDns01Route53SecretAccessKeySecretRefArgs"
            ]
        ] = None
    ):
        """
        Use the AWS Route53 API to manage DNS01 challenge records.
        :param pulumi.Input[str] access_key_id: The AccessKeyID is used for authentication.
               Cannot be set when SecretAccessKeyID is set.
               If neither the Access Key nor Key ID are set, we fall-back to using env
               vars, shared credentials file or AWS Instance metadata,
               see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
        :param pulumi.Input[str] hosted_zone_id: If set, the provider will manage only this zone in Route53 and will not do a lookup using the route53:ListHostedZonesByName api call.
        :param pulumi.Input[str] region: Override the AWS region.

               Route53 is a global service and does not have regional endpoints but the
               region specified here (or via environment variables) is used as a hint to
               help compute the correct AWS credential scope and partition when it
               connects to Route53. See:
               - [Amazon Route 53 endpoints and quotas](https://docs.aws.amazon.com/general/latest/gr/r53.html)
               - [Global services](https://docs.aws.amazon.com/whitepapers/latest/aws-fault-isolation-boundaries/global-services.html)

               If you omit this region field, cert-manager will use the region from
               AWS_REGION and AWS_DEFAULT_REGION environment variables, if they are set
               in the cert-manager controller Pod.

               The `region` field is not needed if you use [IAM Roles for Service Accounts (IRSA)](https://docs.aws.amazon.com/eks/latest/userguide/iam-roles-for-service-accounts.html).
               Instead an AWS_REGION environment variable is added to the cert-manager controller Pod by:
               [Amazon EKS Pod Identity Webhook](https://github.com/aws/amazon-eks-pod-identity-webhook).
               In this case this `region` field value is ignored.

               The `region` field is not needed if you use [EKS Pod Identities](https://docs.aws.amazon.com/eks/latest/userguide/pod-identities.html).
               Instead an AWS_REGION environment variable is added to the cert-manager controller Pod by:
               [Amazon EKS Pod Identity Agent](https://github.com/aws/eks-pod-identity-agent),
               In this case this `region` field value is ignored.
        :param pulumi.Input[str] role: Role is a Role ARN which the Route53 provider will assume using either the explicit credentials AccessKeyID/SecretAccessKey
               or the inferred credentials from environment variables, shared credentials file or AWS Instance metadata
        """
        if access_key_id is not None:
            pulumi.set(__self__, "access_key_id", access_key_id)
        if access_key_id_secret_ref is not None:
            pulumi.set(__self__, "access_key_id_secret_ref", access_key_id_secret_ref)
        if auth is not None:
            pulumi.set(__self__, "auth", auth)
        if hosted_zone_id is not None:
            pulumi.set(__self__, "hosted_zone_id", hosted_zone_id)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if secret_access_key_secret_ref is not None:
            pulumi.set(
                __self__, "secret_access_key_secret_ref", secret_access_key_secret_ref
            )

    @property
    @pulumi.getter(name="accessKeyID")
    def access_key_id(self) -> Optional[pulumi.Input[str]]:
        """
        The AccessKeyID is used for authentication.
        Cannot be set when SecretAccessKeyID is set.
        If neither the Access Key nor Key ID are set, we fall-back to using env
        vars, shared credentials file or AWS Instance metadata,
        see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
        """
        return pulumi.get(self, "access_key_id")

    @access_key_id.setter
    def access_key_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_key_id", value)

    @property
    @pulumi.getter(name="accessKeyIDSecretRef")
    def access_key_id_secret_ref(
        self,
    ) -> Optional[
        pulumi.Input["IssuerSpecAcmeSolversDns01Route53AccessKeyIDSecretRefArgs"]
    ]:
        return pulumi.get(self, "access_key_id_secret_ref")

    @access_key_id_secret_ref.setter
    def access_key_id_secret_ref(
        self,
        value: Optional[
            pulumi.Input["IssuerSpecAcmeSolversDns01Route53AccessKeyIDSecretRefArgs"]
        ],
    ):
        pulumi.set(self, "access_key_id_secret_ref", value)

    @property
    @pulumi.getter
    def auth(
        self,
    ) -> Optional[pulumi.Input["IssuerSpecAcmeSolversDns01Route53AuthArgs"]]:
        return pulumi.get(self, "auth")

    @auth.setter
    def auth(
        self, value: Optional[pulumi.Input["IssuerSpecAcmeSolversDns01Route53AuthArgs"]]
    ):
        pulumi.set(self, "auth", value)

    @property
    @pulumi.getter(name="hostedZoneID")
    def hosted_zone_id(self) -> Optional[pulumi.Input[str]]:
        """
        If set, the provider will manage only this zone in Route53 and will not do a lookup using the route53:ListHostedZonesByName api call.
        """
        return pulumi.get(self, "hosted_zone_id")

    @hosted_zone_id.setter
    def hosted_zone_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hosted_zone_id", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        Override the AWS region.

        Route53 is a global service and does not have regional endpoints but the
        region specified here (or via environment variables) is used as a hint to
        help compute the correct AWS credential scope and partition when it
        connects to Route53. See:
        - [Amazon Route 53 endpoints and quotas](https://docs.aws.amazon.com/general/latest/gr/r53.html)
        - [Global services](https://docs.aws.amazon.com/whitepapers/latest/aws-fault-isolation-boundaries/global-services.html)

        If you omit this region field, cert-manager will use the region from
        AWS_REGION and AWS_DEFAULT_REGION environment variables, if they are set
        in the cert-manager controller Pod.

        The `region` field is not needed if you use [IAM Roles for Service Accounts (IRSA)](https://docs.aws.amazon.com/eks/latest/userguide/iam-roles-for-service-accounts.html).
        Instead an AWS_REGION environment variable is added to the cert-manager controller Pod by:
        [Amazon EKS Pod Identity Webhook](https://github.com/aws/amazon-eks-pod-identity-webhook).
        In this case this `region` field value is ignored.

        The `region` field is not needed if you use [EKS Pod Identities](https://docs.aws.amazon.com/eks/latest/userguide/pod-identities.html).
        Instead an AWS_REGION environment variable is added to the cert-manager controller Pod by:
        [Amazon EKS Pod Identity Agent](https://github.com/aws/eks-pod-identity-agent),
        In this case this `region` field value is ignored.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input[str]]:
        """
        Role is a Role ARN which the Route53 provider will assume using either the explicit credentials AccessKeyID/SecretAccessKey
        or the inferred credentials from environment variables, shared credentials file or AWS Instance metadata
        """
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role", value)

    @property
    @pulumi.getter(name="secretAccessKeySecretRef")
    def secret_access_key_secret_ref(
        self,
    ) -> Optional[
        pulumi.Input["IssuerSpecAcmeSolversDns01Route53SecretAccessKeySecretRefArgs"]
    ]:
        return pulumi.get(self, "secret_access_key_secret_ref")

    @secret_access_key_secret_ref.setter
    def secret_access_key_secret_ref(
        self,
        value: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversDns01Route53SecretAccessKeySecretRefArgs"
            ]
        ],
    ):
        pulumi.set(self, "secret_access_key_secret_ref", value)


if not MYPY:

    class IssuerSpecAcmeSolversDns01WebhookPatchArgsDict(TypedDict):
        """
        Configure an external webhook based DNS01 challenge solver to manage
        DNS01 challenge records.
        """

        config: NotRequired[pulumi.Input[Mapping[str, Any]]]
        """
        Additional configuration that should be passed to the webhook apiserver
        when challenges are processed.
        This can contain arbitrary JSON data.
        Secret values should not be specified in this stanza.
        If secret values are needed (e.g. credentials for a DNS service), you
        should use a SecretKeySelector to reference a Secret resource.
        For details on the schema of this field, consult the webhook provider
        implementation's documentation.
        """
        group_name: NotRequired[pulumi.Input[str]]
        """
        The API group name that should be used when POSTing ChallengePayload
        resources to the webhook apiserver.
        This should be the same as the GroupName specified in the webhook
        provider implementation.
        """
        solver_name: NotRequired[pulumi.Input[str]]
        """
        The name of the solver to use, as defined in the webhook provider
        implementation.
        This will typically be the name of the provider, e.g. 'cloudflare'.
        """

elif False:
    IssuerSpecAcmeSolversDns01WebhookPatchArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class IssuerSpecAcmeSolversDns01WebhookPatchArgs:
    def __init__(
        __self__,
        *,
        config: Optional[pulumi.Input[Mapping[str, Any]]] = None,
        group_name: Optional[pulumi.Input[str]] = None,
        solver_name: Optional[pulumi.Input[str]] = None
    ):
        """
        Configure an external webhook based DNS01 challenge solver to manage
        DNS01 challenge records.
        :param pulumi.Input[Mapping[str, Any]] config: Additional configuration that should be passed to the webhook apiserver
               when challenges are processed.
               This can contain arbitrary JSON data.
               Secret values should not be specified in this stanza.
               If secret values are needed (e.g. credentials for a DNS service), you
               should use a SecretKeySelector to reference a Secret resource.
               For details on the schema of this field, consult the webhook provider
               implementation's documentation.
        :param pulumi.Input[str] group_name: The API group name that should be used when POSTing ChallengePayload
               resources to the webhook apiserver.
               This should be the same as the GroupName specified in the webhook
               provider implementation.
        :param pulumi.Input[str] solver_name: The name of the solver to use, as defined in the webhook provider
               implementation.
               This will typically be the name of the provider, e.g. 'cloudflare'.
        """
        if config is not None:
            pulumi.set(__self__, "config", config)
        if group_name is not None:
            pulumi.set(__self__, "group_name", group_name)
        if solver_name is not None:
            pulumi.set(__self__, "solver_name", solver_name)

    @property
    @pulumi.getter
    def config(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Additional configuration that should be passed to the webhook apiserver
        when challenges are processed.
        This can contain arbitrary JSON data.
        Secret values should not be specified in this stanza.
        If secret values are needed (e.g. credentials for a DNS service), you
        should use a SecretKeySelector to reference a Secret resource.
        For details on the schema of this field, consult the webhook provider
        implementation's documentation.
        """
        return pulumi.get(self, "config")

    @config.setter
    def config(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "config", value)

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> Optional[pulumi.Input[str]]:
        """
        The API group name that should be used when POSTing ChallengePayload
        resources to the webhook apiserver.
        This should be the same as the GroupName specified in the webhook
        provider implementation.
        """
        return pulumi.get(self, "group_name")

    @group_name.setter
    def group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_name", value)

    @property
    @pulumi.getter(name="solverName")
    def solver_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the solver to use, as defined in the webhook provider
        implementation.
        This will typically be the name of the provider, e.g. 'cloudflare'.
        """
        return pulumi.get(self, "solver_name")

    @solver_name.setter
    def solver_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "solver_name", value)


if not MYPY:

    class IssuerSpecAcmeSolversDns01WebhookArgsDict(TypedDict):
        """
        Configure an external webhook based DNS01 challenge solver to manage
        DNS01 challenge records.
        """

        config: NotRequired[pulumi.Input[Mapping[str, Any]]]
        """
        Additional configuration that should be passed to the webhook apiserver
        when challenges are processed.
        This can contain arbitrary JSON data.
        Secret values should not be specified in this stanza.
        If secret values are needed (e.g. credentials for a DNS service), you
        should use a SecretKeySelector to reference a Secret resource.
        For details on the schema of this field, consult the webhook provider
        implementation's documentation.
        """
        group_name: NotRequired[pulumi.Input[str]]
        """
        The API group name that should be used when POSTing ChallengePayload
        resources to the webhook apiserver.
        This should be the same as the GroupName specified in the webhook
        provider implementation.
        """
        solver_name: NotRequired[pulumi.Input[str]]
        """
        The name of the solver to use, as defined in the webhook provider
        implementation.
        This will typically be the name of the provider, e.g. 'cloudflare'.
        """

elif False:
    IssuerSpecAcmeSolversDns01WebhookArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class IssuerSpecAcmeSolversDns01WebhookArgs:
    def __init__(
        __self__,
        *,
        config: Optional[pulumi.Input[Mapping[str, Any]]] = None,
        group_name: Optional[pulumi.Input[str]] = None,
        solver_name: Optional[pulumi.Input[str]] = None
    ):
        """
        Configure an external webhook based DNS01 challenge solver to manage
        DNS01 challenge records.
        :param pulumi.Input[Mapping[str, Any]] config: Additional configuration that should be passed to the webhook apiserver
               when challenges are processed.
               This can contain arbitrary JSON data.
               Secret values should not be specified in this stanza.
               If secret values are needed (e.g. credentials for a DNS service), you
               should use a SecretKeySelector to reference a Secret resource.
               For details on the schema of this field, consult the webhook provider
               implementation's documentation.
        :param pulumi.Input[str] group_name: The API group name that should be used when POSTing ChallengePayload
               resources to the webhook apiserver.
               This should be the same as the GroupName specified in the webhook
               provider implementation.
        :param pulumi.Input[str] solver_name: The name of the solver to use, as defined in the webhook provider
               implementation.
               This will typically be the name of the provider, e.g. 'cloudflare'.
        """
        if config is not None:
            pulumi.set(__self__, "config", config)
        if group_name is not None:
            pulumi.set(__self__, "group_name", group_name)
        if solver_name is not None:
            pulumi.set(__self__, "solver_name", solver_name)

    @property
    @pulumi.getter
    def config(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Additional configuration that should be passed to the webhook apiserver
        when challenges are processed.
        This can contain arbitrary JSON data.
        Secret values should not be specified in this stanza.
        If secret values are needed (e.g. credentials for a DNS service), you
        should use a SecretKeySelector to reference a Secret resource.
        For details on the schema of this field, consult the webhook provider
        implementation's documentation.
        """
        return pulumi.get(self, "config")

    @config.setter
    def config(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "config", value)

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> Optional[pulumi.Input[str]]:
        """
        The API group name that should be used when POSTing ChallengePayload
        resources to the webhook apiserver.
        This should be the same as the GroupName specified in the webhook
        provider implementation.
        """
        return pulumi.get(self, "group_name")

    @group_name.setter
    def group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_name", value)

    @property
    @pulumi.getter(name="solverName")
    def solver_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the solver to use, as defined in the webhook provider
        implementation.
        This will typically be the name of the provider, e.g. 'cloudflare'.
        """
        return pulumi.get(self, "solver_name")

    @solver_name.setter
    def solver_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "solver_name", value)


if not MYPY:

    class IssuerSpecAcmeSolversDns01ArgsDict(TypedDict):
        """
        Configures cert-manager to attempt to complete authorizations by
        performing the DNS01 challenge flow.
        """

        acme_dns: NotRequired[pulumi.Input["IssuerSpecAcmeSolversDns01AcmeDNSArgsDict"]]
        akamai: NotRequired[pulumi.Input["IssuerSpecAcmeSolversDns01AkamaiArgsDict"]]
        azure_dns: NotRequired[
            pulumi.Input["IssuerSpecAcmeSolversDns01AzureDNSArgsDict"]
        ]
        cloud_dns: NotRequired[
            pulumi.Input["IssuerSpecAcmeSolversDns01CloudDNSArgsDict"]
        ]
        cloudflare: NotRequired[
            pulumi.Input["IssuerSpecAcmeSolversDns01CloudflareArgsDict"]
        ]
        cname_strategy: NotRequired[pulumi.Input[str]]
        """
        CNAMEStrategy configures how the DNS01 provider should handle CNAME
        records when found in DNS zones.
        """
        digitalocean: NotRequired[
            pulumi.Input["IssuerSpecAcmeSolversDns01DigitaloceanArgsDict"]
        ]
        rfc2136: NotRequired[pulumi.Input["IssuerSpecAcmeSolversDns01Rfc2136ArgsDict"]]
        route53: NotRequired[pulumi.Input["IssuerSpecAcmeSolversDns01Route53ArgsDict"]]
        webhook: NotRequired[pulumi.Input["IssuerSpecAcmeSolversDns01WebhookArgsDict"]]

elif False:
    IssuerSpecAcmeSolversDns01ArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class IssuerSpecAcmeSolversDns01Args:
    def __init__(
        __self__,
        *,
        acme_dns: Optional[
            pulumi.Input["IssuerSpecAcmeSolversDns01AcmeDNSArgs"]
        ] = None,
        akamai: Optional[pulumi.Input["IssuerSpecAcmeSolversDns01AkamaiArgs"]] = None,
        azure_dns: Optional[
            pulumi.Input["IssuerSpecAcmeSolversDns01AzureDNSArgs"]
        ] = None,
        cloud_dns: Optional[
            pulumi.Input["IssuerSpecAcmeSolversDns01CloudDNSArgs"]
        ] = None,
        cloudflare: Optional[
            pulumi.Input["IssuerSpecAcmeSolversDns01CloudflareArgs"]
        ] = None,
        cname_strategy: Optional[pulumi.Input[str]] = None,
        digitalocean: Optional[
            pulumi.Input["IssuerSpecAcmeSolversDns01DigitaloceanArgs"]
        ] = None,
        rfc2136: Optional[pulumi.Input["IssuerSpecAcmeSolversDns01Rfc2136Args"]] = None,
        route53: Optional[pulumi.Input["IssuerSpecAcmeSolversDns01Route53Args"]] = None,
        webhook: Optional[pulumi.Input["IssuerSpecAcmeSolversDns01WebhookArgs"]] = None
    ):
        """
        Configures cert-manager to attempt to complete authorizations by
        performing the DNS01 challenge flow.
        :param pulumi.Input[str] cname_strategy: CNAMEStrategy configures how the DNS01 provider should handle CNAME
               records when found in DNS zones.
        """
        if acme_dns is not None:
            pulumi.set(__self__, "acme_dns", acme_dns)
        if akamai is not None:
            pulumi.set(__self__, "akamai", akamai)
        if azure_dns is not None:
            pulumi.set(__self__, "azure_dns", azure_dns)
        if cloud_dns is not None:
            pulumi.set(__self__, "cloud_dns", cloud_dns)
        if cloudflare is not None:
            pulumi.set(__self__, "cloudflare", cloudflare)
        if cname_strategy is not None:
            pulumi.set(__self__, "cname_strategy", cname_strategy)
        if digitalocean is not None:
            pulumi.set(__self__, "digitalocean", digitalocean)
        if rfc2136 is not None:
            pulumi.set(__self__, "rfc2136", rfc2136)
        if route53 is not None:
            pulumi.set(__self__, "route53", route53)
        if webhook is not None:
            pulumi.set(__self__, "webhook", webhook)

    @property
    @pulumi.getter(name="acmeDNS")
    def acme_dns(
        self,
    ) -> Optional[pulumi.Input["IssuerSpecAcmeSolversDns01AcmeDNSArgs"]]:
        return pulumi.get(self, "acme_dns")

    @acme_dns.setter
    def acme_dns(
        self, value: Optional[pulumi.Input["IssuerSpecAcmeSolversDns01AcmeDNSArgs"]]
    ):
        pulumi.set(self, "acme_dns", value)

    @property
    @pulumi.getter
    def akamai(self) -> Optional[pulumi.Input["IssuerSpecAcmeSolversDns01AkamaiArgs"]]:
        return pulumi.get(self, "akamai")

    @akamai.setter
    def akamai(
        self, value: Optional[pulumi.Input["IssuerSpecAcmeSolversDns01AkamaiArgs"]]
    ):
        pulumi.set(self, "akamai", value)

    @property
    @pulumi.getter(name="azureDNS")
    def azure_dns(
        self,
    ) -> Optional[pulumi.Input["IssuerSpecAcmeSolversDns01AzureDNSArgs"]]:
        return pulumi.get(self, "azure_dns")

    @azure_dns.setter
    def azure_dns(
        self, value: Optional[pulumi.Input["IssuerSpecAcmeSolversDns01AzureDNSArgs"]]
    ):
        pulumi.set(self, "azure_dns", value)

    @property
    @pulumi.getter(name="cloudDNS")
    def cloud_dns(
        self,
    ) -> Optional[pulumi.Input["IssuerSpecAcmeSolversDns01CloudDNSArgs"]]:
        return pulumi.get(self, "cloud_dns")

    @cloud_dns.setter
    def cloud_dns(
        self, value: Optional[pulumi.Input["IssuerSpecAcmeSolversDns01CloudDNSArgs"]]
    ):
        pulumi.set(self, "cloud_dns", value)

    @property
    @pulumi.getter
    def cloudflare(
        self,
    ) -> Optional[pulumi.Input["IssuerSpecAcmeSolversDns01CloudflareArgs"]]:
        return pulumi.get(self, "cloudflare")

    @cloudflare.setter
    def cloudflare(
        self, value: Optional[pulumi.Input["IssuerSpecAcmeSolversDns01CloudflareArgs"]]
    ):
        pulumi.set(self, "cloudflare", value)

    @property
    @pulumi.getter(name="cnameStrategy")
    def cname_strategy(self) -> Optional[pulumi.Input[str]]:
        """
        CNAMEStrategy configures how the DNS01 provider should handle CNAME
        records when found in DNS zones.
        """
        return pulumi.get(self, "cname_strategy")

    @cname_strategy.setter
    def cname_strategy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cname_strategy", value)

    @property
    @pulumi.getter
    def digitalocean(
        self,
    ) -> Optional[pulumi.Input["IssuerSpecAcmeSolversDns01DigitaloceanArgs"]]:
        return pulumi.get(self, "digitalocean")

    @digitalocean.setter
    def digitalocean(
        self,
        value: Optional[pulumi.Input["IssuerSpecAcmeSolversDns01DigitaloceanArgs"]],
    ):
        pulumi.set(self, "digitalocean", value)

    @property
    @pulumi.getter
    def rfc2136(
        self,
    ) -> Optional[pulumi.Input["IssuerSpecAcmeSolversDns01Rfc2136Args"]]:
        return pulumi.get(self, "rfc2136")

    @rfc2136.setter
    def rfc2136(
        self, value: Optional[pulumi.Input["IssuerSpecAcmeSolversDns01Rfc2136Args"]]
    ):
        pulumi.set(self, "rfc2136", value)

    @property
    @pulumi.getter
    def route53(
        self,
    ) -> Optional[pulumi.Input["IssuerSpecAcmeSolversDns01Route53Args"]]:
        return pulumi.get(self, "route53")

    @route53.setter
    def route53(
        self, value: Optional[pulumi.Input["IssuerSpecAcmeSolversDns01Route53Args"]]
    ):
        pulumi.set(self, "route53", value)

    @property
    @pulumi.getter
    def webhook(
        self,
    ) -> Optional[pulumi.Input["IssuerSpecAcmeSolversDns01WebhookArgs"]]:
        return pulumi.get(self, "webhook")

    @webhook.setter
    def webhook(
        self, value: Optional[pulumi.Input["IssuerSpecAcmeSolversDns01WebhookArgs"]]
    ):
        pulumi.set(self, "webhook", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01GatewayHTTPRouteParentRefsPatchArgsDict(TypedDict):
        """
        ParentReference identifies an API object (usually a Gateway) that can be considered
        a parent of this resource (usually a route). There are two kinds of parent resources
        with "Core" support:

        * Gateway (Gateway conformance profile)
        * Service (Mesh conformance profile, ClusterIP Services only)

        This API may be extended in the future to support additional kinds of parent
        resources.

        The API object must be valid in the cluster; the Group and Kind must
        be registered in the cluster for this reference to be valid.
        """

        group: NotRequired[pulumi.Input[str]]
        """
        Group is the group of the referent.
        When unspecified, "gateway.networking.k8s.io" is inferred.
        To set the core API group (such as for a "Service" kind referent),
        Group must be explicitly set to "" (empty string).

        Support: Core
        """
        kind: NotRequired[pulumi.Input[str]]
        """
        Kind is kind of the referent.

        There are two kinds of parent resources with "Core" support:

        * Gateway (Gateway conformance profile)
        * Service (Mesh conformance profile, ClusterIP Services only)

        Support for other resources is Implementation-Specific.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name is the name of the referent.

        Support: Core
        """
        namespace: NotRequired[pulumi.Input[str]]
        """
        Namespace is the namespace of the referent. When unspecified, this refers
        to the local namespace of the Route.

        Note that there are specific rules for ParentRefs which cross namespace
        boundaries. Cross-namespace references are only valid if they are explicitly
        allowed by something in the namespace they are referring to. For example:
        Gateway has the AllowedRoutes field, and ReferenceGrant provides a
        generic way to enable any other kind of cross-namespace reference.

        <gateway:experimental:description>
        ParentRefs from a Route to a Service in the same namespace are "producer"
        routes, which apply default routing rules to inbound connections from
        any namespace to the Service.

        ParentRefs from a Route to a Service in a different namespace are
        "consumer" routes, and these routing rules are only applied to outbound
        connections originating from the same namespace as the Route, for which
        the intended destination of the connections are a Service targeted as a
        ParentRef of the Route.
        </gateway:experimental:description>

        Support: Core
        """
        port: NotRequired[pulumi.Input[int]]
        """
        Port is the network port this Route targets. It can be interpreted
        differently based on the type of parent resource.

        When the parent resource is a Gateway, this targets all listeners
        listening on the specified port that also support this kind of Route(and
        select this Route). It's not recommended to set `Port` unless the
        networking behaviors specified in a Route must apply to a specific port
        as opposed to a listener(s) whose port(s) may be changed. When both Port
        and SectionName are specified, the name and port of the selected listener
        must match both specified values.

        <gateway:experimental:description>
        When the parent resource is a Service, this targets a specific port in the
        Service spec. When both Port (experimental) and SectionName are specified,
        the name and port of the selected port must match both specified values.
        </gateway:experimental:description>

        Implementations MAY choose to support other parent resources.
        Implementations supporting other types of parent resources MUST clearly
        document how/if Port is interpreted.

        For the purpose of status, an attachment is considered successful as
        long as the parent resource accepts it partially. For example, Gateway
        listeners can restrict which Routes can attach to them by Route kind,
        namespace, or hostname. If 1 of 2 Gateway listeners accept attachment
        from the referencing Route, the Route MUST be considered successfully
        attached. If no Gateway listeners accept attachment from this Route,
        the Route MUST be considered detached from the Gateway.

        Support: Extended
        """
        section_name: NotRequired[pulumi.Input[str]]
        """
        SectionName is the name of a section within the target resource. In the
        following resources, SectionName is interpreted as the following:

        * Gateway: Listener name. When both Port (experimental) and SectionName
        are specified, the name and port of the selected listener must match
        both specified values.
        * Service: Port name. When both Port (experimental) and SectionName
        are specified, the name and port of the selected listener must match
        both specified values.

        Implementations MAY choose to support attaching Routes to other resources.
        If that is the case, they MUST clearly document how SectionName is
        interpreted.

        When unspecified (empty string), this will reference the entire resource.
        For the purpose of status, an attachment is considered successful if at
        least one section in the parent resource accepts it. For example, Gateway
        listeners can restrict which Routes can attach to them by Route kind,
        namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from
        the referencing Route, the Route MUST be considered successfully
        attached. If no Gateway listeners accept attachment from this Route, the
        Route MUST be considered detached from the Gateway.

        Support: Core
        """

elif False:
    IssuerSpecAcmeSolversHttp01GatewayHTTPRouteParentRefsPatchArgsDict: TypeAlias = (
        Mapping[str, Any]
    )


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01GatewayHTTPRouteParentRefsPatchArgs:
    def __init__(
        __self__,
        *,
        group: Optional[pulumi.Input[str]] = None,
        kind: Optional[pulumi.Input[str]] = None,
        name: Optional[pulumi.Input[str]] = None,
        namespace: Optional[pulumi.Input[str]] = None,
        port: Optional[pulumi.Input[int]] = None,
        section_name: Optional[pulumi.Input[str]] = None
    ):
        """
        ParentReference identifies an API object (usually a Gateway) that can be considered
        a parent of this resource (usually a route). There are two kinds of parent resources
        with "Core" support:

        * Gateway (Gateway conformance profile)
        * Service (Mesh conformance profile, ClusterIP Services only)

        This API may be extended in the future to support additional kinds of parent
        resources.

        The API object must be valid in the cluster; the Group and Kind must
        be registered in the cluster for this reference to be valid.
        :param pulumi.Input[str] group: Group is the group of the referent.
               When unspecified, "gateway.networking.k8s.io" is inferred.
               To set the core API group (such as for a "Service" kind referent),
               Group must be explicitly set to "" (empty string).

               Support: Core
        :param pulumi.Input[str] kind: Kind is kind of the referent.

               There are two kinds of parent resources with "Core" support:

               * Gateway (Gateway conformance profile)
               * Service (Mesh conformance profile, ClusterIP Services only)

               Support for other resources is Implementation-Specific.
        :param pulumi.Input[str] name: Name is the name of the referent.

               Support: Core
        :param pulumi.Input[str] namespace: Namespace is the namespace of the referent. When unspecified, this refers
               to the local namespace of the Route.

               Note that there are specific rules for ParentRefs which cross namespace
               boundaries. Cross-namespace references are only valid if they are explicitly
               allowed by something in the namespace they are referring to. For example:
               Gateway has the AllowedRoutes field, and ReferenceGrant provides a
               generic way to enable any other kind of cross-namespace reference.

               <gateway:experimental:description>
               ParentRefs from a Route to a Service in the same namespace are "producer"
               routes, which apply default routing rules to inbound connections from
               any namespace to the Service.

               ParentRefs from a Route to a Service in a different namespace are
               "consumer" routes, and these routing rules are only applied to outbound
               connections originating from the same namespace as the Route, for which
               the intended destination of the connections are a Service targeted as a
               ParentRef of the Route.
               </gateway:experimental:description>

               Support: Core
        :param pulumi.Input[int] port: Port is the network port this Route targets. It can be interpreted
               differently based on the type of parent resource.

               When the parent resource is a Gateway, this targets all listeners
               listening on the specified port that also support this kind of Route(and
               select this Route). It's not recommended to set `Port` unless the
               networking behaviors specified in a Route must apply to a specific port
               as opposed to a listener(s) whose port(s) may be changed. When both Port
               and SectionName are specified, the name and port of the selected listener
               must match both specified values.

               <gateway:experimental:description>
               When the parent resource is a Service, this targets a specific port in the
               Service spec. When both Port (experimental) and SectionName are specified,
               the name and port of the selected port must match both specified values.
               </gateway:experimental:description>

               Implementations MAY choose to support other parent resources.
               Implementations supporting other types of parent resources MUST clearly
               document how/if Port is interpreted.

               For the purpose of status, an attachment is considered successful as
               long as the parent resource accepts it partially. For example, Gateway
               listeners can restrict which Routes can attach to them by Route kind,
               namespace, or hostname. If 1 of 2 Gateway listeners accept attachment
               from the referencing Route, the Route MUST be considered successfully
               attached. If no Gateway listeners accept attachment from this Route,
               the Route MUST be considered detached from the Gateway.

               Support: Extended
        :param pulumi.Input[str] section_name: SectionName is the name of a section within the target resource. In the
               following resources, SectionName is interpreted as the following:

               * Gateway: Listener name. When both Port (experimental) and SectionName
               are specified, the name and port of the selected listener must match
               both specified values.
               * Service: Port name. When both Port (experimental) and SectionName
               are specified, the name and port of the selected listener must match
               both specified values.

               Implementations MAY choose to support attaching Routes to other resources.
               If that is the case, they MUST clearly document how SectionName is
               interpreted.

               When unspecified (empty string), this will reference the entire resource.
               For the purpose of status, an attachment is considered successful if at
               least one section in the parent resource accepts it. For example, Gateway
               listeners can restrict which Routes can attach to them by Route kind,
               namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from
               the referencing Route, the Route MUST be considered successfully
               attached. If no Gateway listeners accept attachment from this Route, the
               Route MUST be considered detached from the Gateway.

               Support: Core
        """
        if group is not None:
            pulumi.set(__self__, "group", group)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if section_name is not None:
            pulumi.set(__self__, "section_name", section_name)

    @property
    @pulumi.getter
    def group(self) -> Optional[pulumi.Input[str]]:
        """
        Group is the group of the referent.
        When unspecified, "gateway.networking.k8s.io" is inferred.
        To set the core API group (such as for a "Service" kind referent),
        Group must be explicitly set to "" (empty string).

        Support: Core
        """
        return pulumi.get(self, "group")

    @group.setter
    def group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group", value)

    @property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[str]]:
        """
        Kind is kind of the referent.

        There are two kinds of parent resources with "Core" support:

        * Gateway (Gateway conformance profile)
        * Service (Mesh conformance profile, ClusterIP Services only)

        Support for other resources is Implementation-Specific.
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name is the name of the referent.

        Support: Core
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        """
        Namespace is the namespace of the referent. When unspecified, this refers
        to the local namespace of the Route.

        Note that there are specific rules for ParentRefs which cross namespace
        boundaries. Cross-namespace references are only valid if they are explicitly
        allowed by something in the namespace they are referring to. For example:
        Gateway has the AllowedRoutes field, and ReferenceGrant provides a
        generic way to enable any other kind of cross-namespace reference.

        <gateway:experimental:description>
        ParentRefs from a Route to a Service in the same namespace are "producer"
        routes, which apply default routing rules to inbound connections from
        any namespace to the Service.

        ParentRefs from a Route to a Service in a different namespace are
        "consumer" routes, and these routing rules are only applied to outbound
        connections originating from the same namespace as the Route, for which
        the intended destination of the connections are a Service targeted as a
        ParentRef of the Route.
        </gateway:experimental:description>

        Support: Core
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        Port is the network port this Route targets. It can be interpreted
        differently based on the type of parent resource.

        When the parent resource is a Gateway, this targets all listeners
        listening on the specified port that also support this kind of Route(and
        select this Route). It's not recommended to set `Port` unless the
        networking behaviors specified in a Route must apply to a specific port
        as opposed to a listener(s) whose port(s) may be changed. When both Port
        and SectionName are specified, the name and port of the selected listener
        must match both specified values.

        <gateway:experimental:description>
        When the parent resource is a Service, this targets a specific port in the
        Service spec. When both Port (experimental) and SectionName are specified,
        the name and port of the selected port must match both specified values.
        </gateway:experimental:description>

        Implementations MAY choose to support other parent resources.
        Implementations supporting other types of parent resources MUST clearly
        document how/if Port is interpreted.

        For the purpose of status, an attachment is considered successful as
        long as the parent resource accepts it partially. For example, Gateway
        listeners can restrict which Routes can attach to them by Route kind,
        namespace, or hostname. If 1 of 2 Gateway listeners accept attachment
        from the referencing Route, the Route MUST be considered successfully
        attached. If no Gateway listeners accept attachment from this Route,
        the Route MUST be considered detached from the Gateway.

        Support: Extended
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="sectionName")
    def section_name(self) -> Optional[pulumi.Input[str]]:
        """
        SectionName is the name of a section within the target resource. In the
        following resources, SectionName is interpreted as the following:

        * Gateway: Listener name. When both Port (experimental) and SectionName
        are specified, the name and port of the selected listener must match
        both specified values.
        * Service: Port name. When both Port (experimental) and SectionName
        are specified, the name and port of the selected listener must match
        both specified values.

        Implementations MAY choose to support attaching Routes to other resources.
        If that is the case, they MUST clearly document how SectionName is
        interpreted.

        When unspecified (empty string), this will reference the entire resource.
        For the purpose of status, an attachment is considered successful if at
        least one section in the parent resource accepts it. For example, Gateway
        listeners can restrict which Routes can attach to them by Route kind,
        namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from
        the referencing Route, the Route MUST be considered successfully
        attached. If no Gateway listeners accept attachment from this Route, the
        Route MUST be considered detached from the Gateway.

        Support: Core
        """
        return pulumi.get(self, "section_name")

    @section_name.setter
    def section_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "section_name", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01GatewayHTTPRouteParentRefsArgsDict(TypedDict):
        """
        ParentReference identifies an API object (usually a Gateway) that can be considered
        a parent of this resource (usually a route). There are two kinds of parent resources
        with "Core" support:

        * Gateway (Gateway conformance profile)
        * Service (Mesh conformance profile, ClusterIP Services only)

        This API may be extended in the future to support additional kinds of parent
        resources.

        The API object must be valid in the cluster; the Group and Kind must
        be registered in the cluster for this reference to be valid.
        """

        group: NotRequired[pulumi.Input[str]]
        """
        Group is the group of the referent.
        When unspecified, "gateway.networking.k8s.io" is inferred.
        To set the core API group (such as for a "Service" kind referent),
        Group must be explicitly set to "" (empty string).

        Support: Core
        """
        kind: NotRequired[pulumi.Input[str]]
        """
        Kind is kind of the referent.

        There are two kinds of parent resources with "Core" support:

        * Gateway (Gateway conformance profile)
        * Service (Mesh conformance profile, ClusterIP Services only)

        Support for other resources is Implementation-Specific.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name is the name of the referent.

        Support: Core
        """
        namespace: NotRequired[pulumi.Input[str]]
        """
        Namespace is the namespace of the referent. When unspecified, this refers
        to the local namespace of the Route.

        Note that there are specific rules for ParentRefs which cross namespace
        boundaries. Cross-namespace references are only valid if they are explicitly
        allowed by something in the namespace they are referring to. For example:
        Gateway has the AllowedRoutes field, and ReferenceGrant provides a
        generic way to enable any other kind of cross-namespace reference.

        <gateway:experimental:description>
        ParentRefs from a Route to a Service in the same namespace are "producer"
        routes, which apply default routing rules to inbound connections from
        any namespace to the Service.

        ParentRefs from a Route to a Service in a different namespace are
        "consumer" routes, and these routing rules are only applied to outbound
        connections originating from the same namespace as the Route, for which
        the intended destination of the connections are a Service targeted as a
        ParentRef of the Route.
        </gateway:experimental:description>

        Support: Core
        """
        port: NotRequired[pulumi.Input[int]]
        """
        Port is the network port this Route targets. It can be interpreted
        differently based on the type of parent resource.

        When the parent resource is a Gateway, this targets all listeners
        listening on the specified port that also support this kind of Route(and
        select this Route). It's not recommended to set `Port` unless the
        networking behaviors specified in a Route must apply to a specific port
        as opposed to a listener(s) whose port(s) may be changed. When both Port
        and SectionName are specified, the name and port of the selected listener
        must match both specified values.

        <gateway:experimental:description>
        When the parent resource is a Service, this targets a specific port in the
        Service spec. When both Port (experimental) and SectionName are specified,
        the name and port of the selected port must match both specified values.
        </gateway:experimental:description>

        Implementations MAY choose to support other parent resources.
        Implementations supporting other types of parent resources MUST clearly
        document how/if Port is interpreted.

        For the purpose of status, an attachment is considered successful as
        long as the parent resource accepts it partially. For example, Gateway
        listeners can restrict which Routes can attach to them by Route kind,
        namespace, or hostname. If 1 of 2 Gateway listeners accept attachment
        from the referencing Route, the Route MUST be considered successfully
        attached. If no Gateway listeners accept attachment from this Route,
        the Route MUST be considered detached from the Gateway.

        Support: Extended
        """
        section_name: NotRequired[pulumi.Input[str]]
        """
        SectionName is the name of a section within the target resource. In the
        following resources, SectionName is interpreted as the following:

        * Gateway: Listener name. When both Port (experimental) and SectionName
        are specified, the name and port of the selected listener must match
        both specified values.
        * Service: Port name. When both Port (experimental) and SectionName
        are specified, the name and port of the selected listener must match
        both specified values.

        Implementations MAY choose to support attaching Routes to other resources.
        If that is the case, they MUST clearly document how SectionName is
        interpreted.

        When unspecified (empty string), this will reference the entire resource.
        For the purpose of status, an attachment is considered successful if at
        least one section in the parent resource accepts it. For example, Gateway
        listeners can restrict which Routes can attach to them by Route kind,
        namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from
        the referencing Route, the Route MUST be considered successfully
        attached. If no Gateway listeners accept attachment from this Route, the
        Route MUST be considered detached from the Gateway.

        Support: Core
        """

elif False:
    IssuerSpecAcmeSolversHttp01GatewayHTTPRouteParentRefsArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01GatewayHTTPRouteParentRefsArgs:
    def __init__(
        __self__,
        *,
        group: Optional[pulumi.Input[str]] = None,
        kind: Optional[pulumi.Input[str]] = None,
        name: Optional[pulumi.Input[str]] = None,
        namespace: Optional[pulumi.Input[str]] = None,
        port: Optional[pulumi.Input[int]] = None,
        section_name: Optional[pulumi.Input[str]] = None
    ):
        """
        ParentReference identifies an API object (usually a Gateway) that can be considered
        a parent of this resource (usually a route). There are two kinds of parent resources
        with "Core" support:

        * Gateway (Gateway conformance profile)
        * Service (Mesh conformance profile, ClusterIP Services only)

        This API may be extended in the future to support additional kinds of parent
        resources.

        The API object must be valid in the cluster; the Group and Kind must
        be registered in the cluster for this reference to be valid.
        :param pulumi.Input[str] group: Group is the group of the referent.
               When unspecified, "gateway.networking.k8s.io" is inferred.
               To set the core API group (such as for a "Service" kind referent),
               Group must be explicitly set to "" (empty string).

               Support: Core
        :param pulumi.Input[str] kind: Kind is kind of the referent.

               There are two kinds of parent resources with "Core" support:

               * Gateway (Gateway conformance profile)
               * Service (Mesh conformance profile, ClusterIP Services only)

               Support for other resources is Implementation-Specific.
        :param pulumi.Input[str] name: Name is the name of the referent.

               Support: Core
        :param pulumi.Input[str] namespace: Namespace is the namespace of the referent. When unspecified, this refers
               to the local namespace of the Route.

               Note that there are specific rules for ParentRefs which cross namespace
               boundaries. Cross-namespace references are only valid if they are explicitly
               allowed by something in the namespace they are referring to. For example:
               Gateway has the AllowedRoutes field, and ReferenceGrant provides a
               generic way to enable any other kind of cross-namespace reference.

               <gateway:experimental:description>
               ParentRefs from a Route to a Service in the same namespace are "producer"
               routes, which apply default routing rules to inbound connections from
               any namespace to the Service.

               ParentRefs from a Route to a Service in a different namespace are
               "consumer" routes, and these routing rules are only applied to outbound
               connections originating from the same namespace as the Route, for which
               the intended destination of the connections are a Service targeted as a
               ParentRef of the Route.
               </gateway:experimental:description>

               Support: Core
        :param pulumi.Input[int] port: Port is the network port this Route targets. It can be interpreted
               differently based on the type of parent resource.

               When the parent resource is a Gateway, this targets all listeners
               listening on the specified port that also support this kind of Route(and
               select this Route). It's not recommended to set `Port` unless the
               networking behaviors specified in a Route must apply to a specific port
               as opposed to a listener(s) whose port(s) may be changed. When both Port
               and SectionName are specified, the name and port of the selected listener
               must match both specified values.

               <gateway:experimental:description>
               When the parent resource is a Service, this targets a specific port in the
               Service spec. When both Port (experimental) and SectionName are specified,
               the name and port of the selected port must match both specified values.
               </gateway:experimental:description>

               Implementations MAY choose to support other parent resources.
               Implementations supporting other types of parent resources MUST clearly
               document how/if Port is interpreted.

               For the purpose of status, an attachment is considered successful as
               long as the parent resource accepts it partially. For example, Gateway
               listeners can restrict which Routes can attach to them by Route kind,
               namespace, or hostname. If 1 of 2 Gateway listeners accept attachment
               from the referencing Route, the Route MUST be considered successfully
               attached. If no Gateway listeners accept attachment from this Route,
               the Route MUST be considered detached from the Gateway.

               Support: Extended
        :param pulumi.Input[str] section_name: SectionName is the name of a section within the target resource. In the
               following resources, SectionName is interpreted as the following:

               * Gateway: Listener name. When both Port (experimental) and SectionName
               are specified, the name and port of the selected listener must match
               both specified values.
               * Service: Port name. When both Port (experimental) and SectionName
               are specified, the name and port of the selected listener must match
               both specified values.

               Implementations MAY choose to support attaching Routes to other resources.
               If that is the case, they MUST clearly document how SectionName is
               interpreted.

               When unspecified (empty string), this will reference the entire resource.
               For the purpose of status, an attachment is considered successful if at
               least one section in the parent resource accepts it. For example, Gateway
               listeners can restrict which Routes can attach to them by Route kind,
               namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from
               the referencing Route, the Route MUST be considered successfully
               attached. If no Gateway listeners accept attachment from this Route, the
               Route MUST be considered detached from the Gateway.

               Support: Core
        """
        if group is not None:
            pulumi.set(__self__, "group", group)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if section_name is not None:
            pulumi.set(__self__, "section_name", section_name)

    @property
    @pulumi.getter
    def group(self) -> Optional[pulumi.Input[str]]:
        """
        Group is the group of the referent.
        When unspecified, "gateway.networking.k8s.io" is inferred.
        To set the core API group (such as for a "Service" kind referent),
        Group must be explicitly set to "" (empty string).

        Support: Core
        """
        return pulumi.get(self, "group")

    @group.setter
    def group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group", value)

    @property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[str]]:
        """
        Kind is kind of the referent.

        There are two kinds of parent resources with "Core" support:

        * Gateway (Gateway conformance profile)
        * Service (Mesh conformance profile, ClusterIP Services only)

        Support for other resources is Implementation-Specific.
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name is the name of the referent.

        Support: Core
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        """
        Namespace is the namespace of the referent. When unspecified, this refers
        to the local namespace of the Route.

        Note that there are specific rules for ParentRefs which cross namespace
        boundaries. Cross-namespace references are only valid if they are explicitly
        allowed by something in the namespace they are referring to. For example:
        Gateway has the AllowedRoutes field, and ReferenceGrant provides a
        generic way to enable any other kind of cross-namespace reference.

        <gateway:experimental:description>
        ParentRefs from a Route to a Service in the same namespace are "producer"
        routes, which apply default routing rules to inbound connections from
        any namespace to the Service.

        ParentRefs from a Route to a Service in a different namespace are
        "consumer" routes, and these routing rules are only applied to outbound
        connections originating from the same namespace as the Route, for which
        the intended destination of the connections are a Service targeted as a
        ParentRef of the Route.
        </gateway:experimental:description>

        Support: Core
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        Port is the network port this Route targets. It can be interpreted
        differently based on the type of parent resource.

        When the parent resource is a Gateway, this targets all listeners
        listening on the specified port that also support this kind of Route(and
        select this Route). It's not recommended to set `Port` unless the
        networking behaviors specified in a Route must apply to a specific port
        as opposed to a listener(s) whose port(s) may be changed. When both Port
        and SectionName are specified, the name and port of the selected listener
        must match both specified values.

        <gateway:experimental:description>
        When the parent resource is a Service, this targets a specific port in the
        Service spec. When both Port (experimental) and SectionName are specified,
        the name and port of the selected port must match both specified values.
        </gateway:experimental:description>

        Implementations MAY choose to support other parent resources.
        Implementations supporting other types of parent resources MUST clearly
        document how/if Port is interpreted.

        For the purpose of status, an attachment is considered successful as
        long as the parent resource accepts it partially. For example, Gateway
        listeners can restrict which Routes can attach to them by Route kind,
        namespace, or hostname. If 1 of 2 Gateway listeners accept attachment
        from the referencing Route, the Route MUST be considered successfully
        attached. If no Gateway listeners accept attachment from this Route,
        the Route MUST be considered detached from the Gateway.

        Support: Extended
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="sectionName")
    def section_name(self) -> Optional[pulumi.Input[str]]:
        """
        SectionName is the name of a section within the target resource. In the
        following resources, SectionName is interpreted as the following:

        * Gateway: Listener name. When both Port (experimental) and SectionName
        are specified, the name and port of the selected listener must match
        both specified values.
        * Service: Port name. When both Port (experimental) and SectionName
        are specified, the name and port of the selected listener must match
        both specified values.

        Implementations MAY choose to support attaching Routes to other resources.
        If that is the case, they MUST clearly document how SectionName is
        interpreted.

        When unspecified (empty string), this will reference the entire resource.
        For the purpose of status, an attachment is considered successful if at
        least one section in the parent resource accepts it. For example, Gateway
        listeners can restrict which Routes can attach to them by Route kind,
        namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from
        the referencing Route, the Route MUST be considered successfully
        attached. If no Gateway listeners accept attachment from this Route, the
        Route MUST be considered detached from the Gateway.

        Support: Core
        """
        return pulumi.get(self, "section_name")

    @section_name.setter
    def section_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "section_name", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePatchArgsDict(TypedDict):
        """
        The Gateway API is a sig-network community API that models service networking
        in Kubernetes (https://gateway-api.sigs.k8s.io/). The Gateway solver will
        create HTTPRoutes with the specified labels in the same namespace as the challenge.
        This solver is experimental, and fields / behaviour may change in the future.
        """

        labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Custom labels that will be applied to HTTPRoutes created by cert-manager
        while solving HTTP-01 challenges.
        """
        parent_refs: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01GatewayHTTPRouteParentRefsPatchArgsDict"
                    ]
                ]
            ]
        ]
        """
        When solving an HTTP-01 challenge, cert-manager creates an HTTPRoute.
        cert-manager needs to know which parentRefs should be used when creating
        the HTTPRoute. Usually, the parentRef references a Gateway. See:
        https://gateway-api.sigs.k8s.io/api-types/httproute/#attaching-to-gateways
        """
        pod_template: NotRequired[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplatePatchArgsDict"
            ]
        ]
        service_type: NotRequired[pulumi.Input[str]]
        """
        Optional service type for Kubernetes solver service. Supported values
        are NodePort or ClusterIP. If unset, defaults to NodePort.
        """

elif False:
    IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePatchArgs:
    def __init__(
        __self__,
        *,
        labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
        parent_refs: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01GatewayHTTPRouteParentRefsPatchArgs"
                    ]
                ]
            ]
        ] = None,
        pod_template: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplatePatchArgs"
            ]
        ] = None,
        service_type: Optional[pulumi.Input[str]] = None
    ):
        """
        The Gateway API is a sig-network community API that models service networking
        in Kubernetes (https://gateway-api.sigs.k8s.io/). The Gateway solver will
        create HTTPRoutes with the specified labels in the same namespace as the challenge.
        This solver is experimental, and fields / behaviour may change in the future.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: Custom labels that will be applied to HTTPRoutes created by cert-manager
               while solving HTTP-01 challenges.
        :param pulumi.Input[Sequence[pulumi.Input['IssuerSpecAcmeSolversHttp01GatewayHTTPRouteParentRefsPatchArgs']]] parent_refs: When solving an HTTP-01 challenge, cert-manager creates an HTTPRoute.
               cert-manager needs to know which parentRefs should be used when creating
               the HTTPRoute. Usually, the parentRef references a Gateway. See:
               https://gateway-api.sigs.k8s.io/api-types/httproute/#attaching-to-gateways
        :param pulumi.Input[str] service_type: Optional service type for Kubernetes solver service. Supported values
               are NodePort or ClusterIP. If unset, defaults to NodePort.
        """
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if parent_refs is not None:
            pulumi.set(__self__, "parent_refs", parent_refs)
        if pod_template is not None:
            pulumi.set(__self__, "pod_template", pod_template)
        if service_type is not None:
            pulumi.set(__self__, "service_type", service_type)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Custom labels that will be applied to HTTPRoutes created by cert-manager
        while solving HTTP-01 challenges.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter(name="parentRefs")
    def parent_refs(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "IssuerSpecAcmeSolversHttp01GatewayHTTPRouteParentRefsPatchArgs"
                ]
            ]
        ]
    ]:
        """
        When solving an HTTP-01 challenge, cert-manager creates an HTTPRoute.
        cert-manager needs to know which parentRefs should be used when creating
        the HTTPRoute. Usually, the parentRef references a Gateway. See:
        https://gateway-api.sigs.k8s.io/api-types/httproute/#attaching-to-gateways
        """
        return pulumi.get(self, "parent_refs")

    @parent_refs.setter
    def parent_refs(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01GatewayHTTPRouteParentRefsPatchArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "parent_refs", value)

    @property
    @pulumi.getter(name="podTemplate")
    def pod_template(
        self,
    ) -> Optional[
        pulumi.Input["IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplatePatchArgs"]
    ]:
        return pulumi.get(self, "pod_template")

    @pod_template.setter
    def pod_template(
        self,
        value: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplatePatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "pod_template", value)

    @property
    @pulumi.getter(name="serviceType")
    def service_type(self) -> Optional[pulumi.Input[str]]:
        """
        Optional service type for Kubernetes solver service. Supported values
        are NodePort or ClusterIP. If unset, defaults to NodePort.
        """
        return pulumi.get(self, "service_type")

    @service_type.setter
    def service_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_type", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateMetadataPatchArgsDict(
        TypedDict
    ):
        """
        ObjectMeta overrides for the pod used to solve HTTP01 challenges.
        Only the 'labels' and 'annotations' fields may be set.
        If labels or annotations overlap with in-built values, the values here
        will override the in-built values.
        """

        annotations: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Annotations that should be added to the created ACME HTTP01 solver pods.
        """
        labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Labels that should be added to the created ACME HTTP01 solver pods.
        """

elif False:
    IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateMetadataPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateMetadataPatchArgs:
    def __init__(
        __self__,
        *,
        annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
        labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None
    ):
        """
        ObjectMeta overrides for the pod used to solve HTTP01 challenges.
        Only the 'labels' and 'annotations' fields may be set.
        If labels or annotations overlap with in-built values, the values here
        will override the in-built values.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] annotations: Annotations that should be added to the created ACME HTTP01 solver pods.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: Labels that should be added to the created ACME HTTP01 solver pods.
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Annotations that should be added to the created ACME HTTP01 solver pods.
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(
        self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
    ):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Labels that should be added to the created ACME HTTP01 solver pods.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateMetadataArgsDict(
        TypedDict
    ):
        """
        ObjectMeta overrides for the pod used to solve HTTP01 challenges.
        Only the 'labels' and 'annotations' fields may be set.
        If labels or annotations overlap with in-built values, the values here
        will override the in-built values.
        """

        annotations: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Annotations that should be added to the created ACME HTTP01 solver pods.
        """
        labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Labels that should be added to the created ACME HTTP01 solver pods.
        """

elif False:
    IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateMetadataArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateMetadataArgs:
    def __init__(
        __self__,
        *,
        annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
        labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None
    ):
        """
        ObjectMeta overrides for the pod used to solve HTTP01 challenges.
        Only the 'labels' and 'annotations' fields may be set.
        If labels or annotations overlap with in-built values, the values here
        will override the in-built values.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] annotations: Annotations that should be added to the created ACME HTTP01 solver pods.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: Labels that should be added to the created ACME HTTP01 solver pods.
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Annotations that should be added to the created ACME HTTP01 solver pods.
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(
        self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
    ):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Labels that should be added to the created ACME HTTP01 solver pods.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplatePatchArgsDict(
        TypedDict
    ):
        """
        Optional pod template used to configure the ACME challenge solver pods
        used for HTTP01 challenges.
        """

        metadata: NotRequired[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateMetadataPatchArgsDict"
            ]
        ]
        spec: NotRequired[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecPatchArgsDict"
            ]
        ]

elif False:
    IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplatePatchArgsDict: TypeAlias = (
        Mapping[str, Any]
    )


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplatePatchArgs:
    def __init__(
        __self__,
        *,
        metadata: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateMetadataPatchArgs"
            ]
        ] = None,
        spec: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecPatchArgs"
            ]
        ] = None
    ):
        """
        Optional pod template used to configure the ACME challenge solver pods
        used for HTTP01 challenges.
        """
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if spec is not None:
            pulumi.set(__self__, "spec", spec)

    @property
    @pulumi.getter
    def metadata(
        self,
    ) -> Optional[
        pulumi.Input[
            "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateMetadataPatchArgs"
        ]
    ]:
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(
        self,
        value: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateMetadataPatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter
    def spec(
        self,
    ) -> Optional[
        pulumi.Input[
            "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecPatchArgs"
        ]
    ]:
        return pulumi.get(self, "spec")

    @spec.setter
    def spec(
        self,
        value: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecPatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "spec", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPatchArgsDict(
        TypedDict
    ):
        """
        Describes node affinity scheduling rules for the pod.
        """

        preferred_during_scheduling_ignored_during_execution: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgsDict"
                    ]
                ]
            ]
        ]
        """
        The scheduler will prefer to schedule pods to nodes that satisfy
        the affinity expressions specified by this field, but it may choose
        a node that violates one or more of the expressions. The node that is
        most preferred is the one with the greatest sum of weights, i.e.
        for each node that meets all of the scheduling requirements (resource
        request, requiredDuringScheduling affinity expressions, etc.),
        compute a sum by iterating through the elements of this field and adding
        "weight" to the sum if the node matches the corresponding matchExpressions; the
        node(s) with the highest sum are the most preferred.
        """
        required_during_scheduling_ignored_during_execution: NotRequired[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgsDict"
            ]
        ]

elif False:
    IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPatchArgs:
    def __init__(
        __self__,
        *,
        preferred_during_scheduling_ignored_during_execution: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgs"
                    ]
                ]
            ]
        ] = None,
        required_during_scheduling_ignored_during_execution: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgs"
            ]
        ] = None
    ):
        """
        Describes node affinity scheduling rules for the pod.
        :param pulumi.Input[Sequence[pulumi.Input['IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgs']]] preferred_during_scheduling_ignored_during_execution: The scheduler will prefer to schedule pods to nodes that satisfy
               the affinity expressions specified by this field, but it may choose
               a node that violates one or more of the expressions. The node that is
               most preferred is the one with the greatest sum of weights, i.e.
               for each node that meets all of the scheduling requirements (resource
               request, requiredDuringScheduling affinity expressions, etc.),
               compute a sum by iterating through the elements of this field and adding
               "weight" to the sum if the node matches the corresponding matchExpressions; the
               node(s) with the highest sum are the most preferred.
        """
        if preferred_during_scheduling_ignored_during_execution is not None:
            pulumi.set(
                __self__,
                "preferred_during_scheduling_ignored_during_execution",
                preferred_during_scheduling_ignored_during_execution,
            )
        if required_during_scheduling_ignored_during_execution is not None:
            pulumi.set(
                __self__,
                "required_during_scheduling_ignored_during_execution",
                required_during_scheduling_ignored_during_execution,
            )

    @property
    @pulumi.getter(name="preferredDuringSchedulingIgnoredDuringExecution")
    def preferred_during_scheduling_ignored_during_execution(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgs"
                ]
            ]
        ]
    ]:
        """
        The scheduler will prefer to schedule pods to nodes that satisfy
        the affinity expressions specified by this field, but it may choose
        a node that violates one or more of the expressions. The node that is
        most preferred is the one with the greatest sum of weights, i.e.
        for each node that meets all of the scheduling requirements (resource
        request, requiredDuringScheduling affinity expressions, etc.),
        compute a sum by iterating through the elements of this field and adding
        "weight" to the sum if the node matches the corresponding matchExpressions; the
        node(s) with the highest sum are the most preferred.
        """
        return pulumi.get(self, "preferred_during_scheduling_ignored_during_execution")

    @preferred_during_scheduling_ignored_during_execution.setter
    def preferred_during_scheduling_ignored_during_execution(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "preferred_during_scheduling_ignored_during_execution", value)

    @property
    @pulumi.getter(name="requiredDuringSchedulingIgnoredDuringExecution")
    def required_during_scheduling_ignored_during_execution(
        self,
    ) -> Optional[
        pulumi.Input[
            "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgs"
        ]
    ]:
        return pulumi.get(self, "required_during_scheduling_ignored_during_execution")

    @required_during_scheduling_ignored_during_execution.setter
    def required_during_scheduling_ignored_during_execution(
        self,
        value: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "required_during_scheduling_ignored_during_execution", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgsDict(
        TypedDict
    ):
        """
        An empty preferred scheduling term matches all objects with implicit weight 0
        (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
        """

        preference: NotRequired[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatchArgsDict"
            ]
        ]
        weight: NotRequired[pulumi.Input[int]]
        """
        Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
        """

elif False:
    IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgs:
    def __init__(
        __self__,
        *,
        preference: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatchArgs"
            ]
        ] = None,
        weight: Optional[pulumi.Input[int]] = None
    ):
        """
        An empty preferred scheduling term matches all objects with implicit weight 0
        (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
        :param pulumi.Input[int] weight: Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
        """
        if preference is not None:
            pulumi.set(__self__, "preference", preference)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def preference(
        self,
    ) -> Optional[
        pulumi.Input[
            "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatchArgs"
        ]
    ]:
        return pulumi.get(self, "preference")

    @preference.setter
    def preference(
        self,
        value: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "preference", value)

    @property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[int]]:
        """
        Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
        """
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "weight", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatchArgsDict(
        TypedDict
    ):
        """
        A node selector requirement is a selector that contains values, a key, and an operator
        that relates the key and values.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        Represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        An array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. If the operator is Gt or Lt, the values
        array must have a single element, which will be interpreted as an integer.
        This array is replaced during a strategic merge patch.
        """

elif False:
    IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatchArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        operator: Optional[pulumi.Input[str]] = None,
        values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None
    ):
        """
        A node selector requirement is a selector that contains values, a key, and an operator
        that relates the key and values.
        :param pulumi.Input[str] key: The label key that the selector applies to.
        :param pulumi.Input[str] operator: Represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: An array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. If the operator is Gt or Lt, the values
               array must have a single element, which will be interpreted as an integer.
               This array is replaced during a strategic merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        Represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        An array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. If the operator is Gt or Lt, the values
        array must have a single element, which will be interpreted as an integer.
        This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgsDict(
        TypedDict
    ):
        """
        A node selector requirement is a selector that contains values, a key, and an operator
        that relates the key and values.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        Represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        An array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. If the operator is Gt or Lt, the values
        array must have a single element, which will be interpreted as an integer.
        This array is replaced during a strategic merge patch.
        """

elif False:
    IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        operator: Optional[pulumi.Input[str]] = None,
        values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None
    ):
        """
        A node selector requirement is a selector that contains values, a key, and an operator
        that relates the key and values.
        :param pulumi.Input[str] key: The label key that the selector applies to.
        :param pulumi.Input[str] operator: Represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: An array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. If the operator is Gt or Lt, the values
               array must have a single element, which will be interpreted as an integer.
               This array is replaced during a strategic merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        Represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        An array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. If the operator is Gt or Lt, the values
        array must have a single element, which will be interpreted as an integer.
        This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatchArgsDict(
        TypedDict
    ):
        """
        A node selector requirement is a selector that contains values, a key, and an operator
        that relates the key and values.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        Represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        An array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. If the operator is Gt or Lt, the values
        array must have a single element, which will be interpreted as an integer.
        This array is replaced during a strategic merge patch.
        """

elif False:
    IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatchArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        operator: Optional[pulumi.Input[str]] = None,
        values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None
    ):
        """
        A node selector requirement is a selector that contains values, a key, and an operator
        that relates the key and values.
        :param pulumi.Input[str] key: The label key that the selector applies to.
        :param pulumi.Input[str] operator: Represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: An array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. If the operator is Gt or Lt, the values
               array must have a single element, which will be interpreted as an integer.
               This array is replaced during a strategic merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        Represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        An array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. If the operator is Gt or Lt, the values
        array must have a single element, which will be interpreted as an integer.
        This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgsDict(
        TypedDict
    ):
        """
        A node selector requirement is a selector that contains values, a key, and an operator
        that relates the key and values.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        Represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        An array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. If the operator is Gt or Lt, the values
        array must have a single element, which will be interpreted as an integer.
        This array is replaced during a strategic merge patch.
        """

elif False:
    IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        operator: Optional[pulumi.Input[str]] = None,
        values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None
    ):
        """
        A node selector requirement is a selector that contains values, a key, and an operator
        that relates the key and values.
        :param pulumi.Input[str] key: The label key that the selector applies to.
        :param pulumi.Input[str] operator: Represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: An array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. If the operator is Gt or Lt, the values
               array must have a single element, which will be interpreted as an integer.
               This array is replaced during a strategic merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        Represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        An array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. If the operator is Gt or Lt, the values
        array must have a single element, which will be interpreted as an integer.
        This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatchArgsDict(
        TypedDict
    ):
        """
        A node selector term, associated with the corresponding weight.
        """

        match_expressions: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatchArgsDict"
                    ]
                ]
            ]
        ]
        """
        A list of node selector requirements by node's labels.
        """
        match_fields: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatchArgsDict"
                    ]
                ]
            ]
        ]
        """
        A list of node selector requirements by node's fields.
        """

elif False:
    IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatchArgs:
    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatchArgs"
                    ]
                ]
            ]
        ] = None,
        match_fields: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatchArgs"
                    ]
                ]
            ]
        ] = None
    ):
        """
        A node selector term, associated with the corresponding weight.
        :param pulumi.Input[Sequence[pulumi.Input['IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatchArgs']]] match_expressions: A list of node selector requirements by node's labels.
        :param pulumi.Input[Sequence[pulumi.Input['IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatchArgs']]] match_fields: A list of node selector requirements by node's fields.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_fields is not None:
            pulumi.set(__self__, "match_fields", match_fields)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatchArgs"
                ]
            ]
        ]
    ]:
        """
        A list of node selector requirements by node's labels.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatchArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchFields")
    def match_fields(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatchArgs"
                ]
            ]
        ]
    ]:
        """
        A list of node selector requirements by node's fields.
        """
        return pulumi.get(self, "match_fields")

    @match_fields.setter
    def match_fields(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatchArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "match_fields", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgsDict(
        TypedDict
    ):
        """
        A node selector term, associated with the corresponding weight.
        """

        match_expressions: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgsDict"
                    ]
                ]
            ]
        ]
        """
        A list of node selector requirements by node's labels.
        """
        match_fields: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgsDict"
                    ]
                ]
            ]
        ]
        """
        A list of node selector requirements by node's fields.
        """

elif False:
    IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgs:
    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgs"
                    ]
                ]
            ]
        ] = None,
        match_fields: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgs"
                    ]
                ]
            ]
        ] = None
    ):
        """
        A node selector term, associated with the corresponding weight.
        :param pulumi.Input[Sequence[pulumi.Input['IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgs']]] match_expressions: A list of node selector requirements by node's labels.
        :param pulumi.Input[Sequence[pulumi.Input['IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgs']]] match_fields: A list of node selector requirements by node's fields.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_fields is not None:
            pulumi.set(__self__, "match_fields", match_fields)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgs"
                ]
            ]
        ]
    ]:
        """
        A list of node selector requirements by node's labels.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchFields")
    def match_fields(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgs"
                ]
            ]
        ]
    ]:
        """
        A list of node selector requirements by node's fields.
        """
        return pulumi.get(self, "match_fields")

    @match_fields.setter
    def match_fields(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "match_fields", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgsDict(
        TypedDict
    ):
        """
        An empty preferred scheduling term matches all objects with implicit weight 0
        (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
        """

        preference: NotRequired[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgsDict"
            ]
        ]
        weight: NotRequired[pulumi.Input[int]]
        """
        Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
        """

elif False:
    IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs:
    def __init__(
        __self__,
        *,
        preference: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgs"
            ]
        ] = None,
        weight: Optional[pulumi.Input[int]] = None
    ):
        """
        An empty preferred scheduling term matches all objects with implicit weight 0
        (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
        :param pulumi.Input[int] weight: Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
        """
        if preference is not None:
            pulumi.set(__self__, "preference", preference)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def preference(
        self,
    ) -> Optional[
        pulumi.Input[
            "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgs"
        ]
    ]:
        return pulumi.get(self, "preference")

    @preference.setter
    def preference(
        self,
        value: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgs"
            ]
        ],
    ):
        pulumi.set(self, "preference", value)

    @property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[int]]:
        """
        Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
        """
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "weight", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatchArgsDict(
        TypedDict
    ):
        """
        A node selector requirement is a selector that contains values, a key, and an operator
        that relates the key and values.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        Represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        An array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. If the operator is Gt or Lt, the values
        array must have a single element, which will be interpreted as an integer.
        This array is replaced during a strategic merge patch.
        """

elif False:
    IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatchArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        operator: Optional[pulumi.Input[str]] = None,
        values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None
    ):
        """
        A node selector requirement is a selector that contains values, a key, and an operator
        that relates the key and values.
        :param pulumi.Input[str] key: The label key that the selector applies to.
        :param pulumi.Input[str] operator: Represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: An array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. If the operator is Gt or Lt, the values
               array must have a single element, which will be interpreted as an integer.
               This array is replaced during a strategic merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        Represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        An array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. If the operator is Gt or Lt, the values
        array must have a single element, which will be interpreted as an integer.
        This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgsDict(
        TypedDict
    ):
        """
        A node selector requirement is a selector that contains values, a key, and an operator
        that relates the key and values.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        Represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        An array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. If the operator is Gt or Lt, the values
        array must have a single element, which will be interpreted as an integer.
        This array is replaced during a strategic merge patch.
        """

elif False:
    IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        operator: Optional[pulumi.Input[str]] = None,
        values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None
    ):
        """
        A node selector requirement is a selector that contains values, a key, and an operator
        that relates the key and values.
        :param pulumi.Input[str] key: The label key that the selector applies to.
        :param pulumi.Input[str] operator: Represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: An array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. If the operator is Gt or Lt, the values
               array must have a single element, which will be interpreted as an integer.
               This array is replaced during a strategic merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        Represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        An array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. If the operator is Gt or Lt, the values
        array must have a single element, which will be interpreted as an integer.
        This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatchArgsDict(
        TypedDict
    ):
        """
        A node selector requirement is a selector that contains values, a key, and an operator
        that relates the key and values.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        Represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        An array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. If the operator is Gt or Lt, the values
        array must have a single element, which will be interpreted as an integer.
        This array is replaced during a strategic merge patch.
        """

elif False:
    IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatchArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        operator: Optional[pulumi.Input[str]] = None,
        values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None
    ):
        """
        A node selector requirement is a selector that contains values, a key, and an operator
        that relates the key and values.
        :param pulumi.Input[str] key: The label key that the selector applies to.
        :param pulumi.Input[str] operator: Represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: An array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. If the operator is Gt or Lt, the values
               array must have a single element, which will be interpreted as an integer.
               This array is replaced during a strategic merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        Represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        An array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. If the operator is Gt or Lt, the values
        array must have a single element, which will be interpreted as an integer.
        This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgsDict(
        TypedDict
    ):
        """
        A node selector requirement is a selector that contains values, a key, and an operator
        that relates the key and values.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        Represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        An array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. If the operator is Gt or Lt, the values
        array must have a single element, which will be interpreted as an integer.
        This array is replaced during a strategic merge patch.
        """

elif False:
    IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        operator: Optional[pulumi.Input[str]] = None,
        values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None
    ):
        """
        A node selector requirement is a selector that contains values, a key, and an operator
        that relates the key and values.
        :param pulumi.Input[str] key: The label key that the selector applies to.
        :param pulumi.Input[str] operator: Represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: An array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. If the operator is Gt or Lt, the values
               array must have a single element, which will be interpreted as an integer.
               This array is replaced during a strategic merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        Represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        An array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. If the operator is Gt or Lt, the values
        array must have a single element, which will be interpreted as an integer.
        This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatchArgsDict(
        TypedDict
    ):
        """
        A null or empty node selector term matches no objects. The requirements of
        them are ANDed.
        The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
        """

        match_expressions: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatchArgsDict"
                    ]
                ]
            ]
        ]
        """
        A list of node selector requirements by node's labels.
        """
        match_fields: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatchArgsDict"
                    ]
                ]
            ]
        ]
        """
        A list of node selector requirements by node's fields.
        """

elif False:
    IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatchArgs:
    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatchArgs"
                    ]
                ]
            ]
        ] = None,
        match_fields: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatchArgs"
                    ]
                ]
            ]
        ] = None
    ):
        """
        A null or empty node selector term matches no objects. The requirements of
        them are ANDed.
        The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
        :param pulumi.Input[Sequence[pulumi.Input['IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatchArgs']]] match_expressions: A list of node selector requirements by node's labels.
        :param pulumi.Input[Sequence[pulumi.Input['IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatchArgs']]] match_fields: A list of node selector requirements by node's fields.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_fields is not None:
            pulumi.set(__self__, "match_fields", match_fields)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatchArgs"
                ]
            ]
        ]
    ]:
        """
        A list of node selector requirements by node's labels.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatchArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchFields")
    def match_fields(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatchArgs"
                ]
            ]
        ]
    ]:
        """
        A list of node selector requirements by node's fields.
        """
        return pulumi.get(self, "match_fields")

    @match_fields.setter
    def match_fields(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatchArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "match_fields", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgsDict(
        TypedDict
    ):
        """
        A null or empty node selector term matches no objects. The requirements of
        them are ANDed.
        The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
        """

        match_expressions: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgsDict"
                    ]
                ]
            ]
        ]
        """
        A list of node selector requirements by node's labels.
        """
        match_fields: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgsDict"
                    ]
                ]
            ]
        ]
        """
        A list of node selector requirements by node's fields.
        """

elif False:
    IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgs:
    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgs"
                    ]
                ]
            ]
        ] = None,
        match_fields: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgs"
                    ]
                ]
            ]
        ] = None
    ):
        """
        A null or empty node selector term matches no objects. The requirements of
        them are ANDed.
        The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
        :param pulumi.Input[Sequence[pulumi.Input['IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgs']]] match_expressions: A list of node selector requirements by node's labels.
        :param pulumi.Input[Sequence[pulumi.Input['IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgs']]] match_fields: A list of node selector requirements by node's fields.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_fields is not None:
            pulumi.set(__self__, "match_fields", match_fields)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgs"
                ]
            ]
        ]
    ]:
        """
        A list of node selector requirements by node's labels.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchFields")
    def match_fields(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgs"
                ]
            ]
        ]
    ]:
        """
        A list of node selector requirements by node's fields.
        """
        return pulumi.get(self, "match_fields")

    @match_fields.setter
    def match_fields(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "match_fields", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgsDict(
        TypedDict
    ):
        """
        If the affinity requirements specified by this field are not met at
        scheduling time, the pod will not be scheduled onto the node.
        If the affinity requirements specified by this field cease to be met
        at some point during pod execution (e.g. due to an update), the system
        may or may not try to eventually evict the pod from its node.
        """

        node_selector_terms: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatchArgsDict"
                    ]
                ]
            ]
        ]
        """
        Required. A list of node selector terms. The terms are ORed.
        """

elif False:
    IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgs:
    def __init__(
        __self__,
        *,
        node_selector_terms: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatchArgs"
                    ]
                ]
            ]
        ] = None
    ):
        """
        If the affinity requirements specified by this field are not met at
        scheduling time, the pod will not be scheduled onto the node.
        If the affinity requirements specified by this field cease to be met
        at some point during pod execution (e.g. due to an update), the system
        may or may not try to eventually evict the pod from its node.
        :param pulumi.Input[Sequence[pulumi.Input['IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatchArgs']]] node_selector_terms: Required. A list of node selector terms. The terms are ORed.
        """
        if node_selector_terms is not None:
            pulumi.set(__self__, "node_selector_terms", node_selector_terms)

    @property
    @pulumi.getter(name="nodeSelectorTerms")
    def node_selector_terms(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatchArgs"
                ]
            ]
        ]
    ]:
        """
        Required. A list of node selector terms. The terms are ORed.
        """
        return pulumi.get(self, "node_selector_terms")

    @node_selector_terms.setter
    def node_selector_terms(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatchArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "node_selector_terms", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgsDict(
        TypedDict
    ):
        """
        If the affinity requirements specified by this field are not met at
        scheduling time, the pod will not be scheduled onto the node.
        If the affinity requirements specified by this field cease to be met
        at some point during pod execution (e.g. due to an update), the system
        may or may not try to eventually evict the pod from its node.
        """

        node_selector_terms: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgsDict"
                    ]
                ]
            ]
        ]
        """
        Required. A list of node selector terms. The terms are ORed.
        """

elif False:
    IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs:
    def __init__(
        __self__,
        *,
        node_selector_terms: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgs"
                    ]
                ]
            ]
        ] = None
    ):
        """
        If the affinity requirements specified by this field are not met at
        scheduling time, the pod will not be scheduled onto the node.
        If the affinity requirements specified by this field cease to be met
        at some point during pod execution (e.g. due to an update), the system
        may or may not try to eventually evict the pod from its node.
        :param pulumi.Input[Sequence[pulumi.Input['IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgs']]] node_selector_terms: Required. A list of node selector terms. The terms are ORed.
        """
        if node_selector_terms is not None:
            pulumi.set(__self__, "node_selector_terms", node_selector_terms)

    @property
    @pulumi.getter(name="nodeSelectorTerms")
    def node_selector_terms(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgs"
                ]
            ]
        ]
    ]:
        """
        Required. A list of node selector terms. The terms are ORed.
        """
        return pulumi.get(self, "node_selector_terms")

    @node_selector_terms.setter
    def node_selector_terms(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "node_selector_terms", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityArgsDict(
        TypedDict
    ):
        """
        Describes node affinity scheduling rules for the pod.
        """

        preferred_during_scheduling_ignored_during_execution: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgsDict"
                    ]
                ]
            ]
        ]
        """
        The scheduler will prefer to schedule pods to nodes that satisfy
        the affinity expressions specified by this field, but it may choose
        a node that violates one or more of the expressions. The node that is
        most preferred is the one with the greatest sum of weights, i.e.
        for each node that meets all of the scheduling requirements (resource
        request, requiredDuringScheduling affinity expressions, etc.),
        compute a sum by iterating through the elements of this field and adding
        "weight" to the sum if the node matches the corresponding matchExpressions; the
        node(s) with the highest sum are the most preferred.
        """
        required_during_scheduling_ignored_during_execution: NotRequired[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgsDict"
            ]
        ]

elif False:
    IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityArgs:
    def __init__(
        __self__,
        *,
        preferred_during_scheduling_ignored_during_execution: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs"
                    ]
                ]
            ]
        ] = None,
        required_during_scheduling_ignored_during_execution: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs"
            ]
        ] = None
    ):
        """
        Describes node affinity scheduling rules for the pod.
        :param pulumi.Input[Sequence[pulumi.Input['IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs']]] preferred_during_scheduling_ignored_during_execution: The scheduler will prefer to schedule pods to nodes that satisfy
               the affinity expressions specified by this field, but it may choose
               a node that violates one or more of the expressions. The node that is
               most preferred is the one with the greatest sum of weights, i.e.
               for each node that meets all of the scheduling requirements (resource
               request, requiredDuringScheduling affinity expressions, etc.),
               compute a sum by iterating through the elements of this field and adding
               "weight" to the sum if the node matches the corresponding matchExpressions; the
               node(s) with the highest sum are the most preferred.
        """
        if preferred_during_scheduling_ignored_during_execution is not None:
            pulumi.set(
                __self__,
                "preferred_during_scheduling_ignored_during_execution",
                preferred_during_scheduling_ignored_during_execution,
            )
        if required_during_scheduling_ignored_during_execution is not None:
            pulumi.set(
                __self__,
                "required_during_scheduling_ignored_during_execution",
                required_during_scheduling_ignored_during_execution,
            )

    @property
    @pulumi.getter(name="preferredDuringSchedulingIgnoredDuringExecution")
    def preferred_during_scheduling_ignored_during_execution(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs"
                ]
            ]
        ]
    ]:
        """
        The scheduler will prefer to schedule pods to nodes that satisfy
        the affinity expressions specified by this field, but it may choose
        a node that violates one or more of the expressions. The node that is
        most preferred is the one with the greatest sum of weights, i.e.
        for each node that meets all of the scheduling requirements (resource
        request, requiredDuringScheduling affinity expressions, etc.),
        compute a sum by iterating through the elements of this field and adding
        "weight" to the sum if the node matches the corresponding matchExpressions; the
        node(s) with the highest sum are the most preferred.
        """
        return pulumi.get(self, "preferred_during_scheduling_ignored_during_execution")

    @preferred_during_scheduling_ignored_during_execution.setter
    def preferred_during_scheduling_ignored_during_execution(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "preferred_during_scheduling_ignored_during_execution", value)

    @property
    @pulumi.getter(name="requiredDuringSchedulingIgnoredDuringExecution")
    def required_during_scheduling_ignored_during_execution(
        self,
    ) -> Optional[
        pulumi.Input[
            "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs"
        ]
    ]:
        return pulumi.get(self, "required_during_scheduling_ignored_during_execution")

    @required_during_scheduling_ignored_during_execution.setter
    def required_during_scheduling_ignored_during_execution(
        self,
        value: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs"
            ]
        ],
    ):
        pulumi.set(self, "required_during_scheduling_ignored_during_execution", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPatchArgsDict(
        TypedDict
    ):
        """
        If specified, the pod's scheduling constraints
        """

        node_affinity: NotRequired[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPatchArgsDict"
            ]
        ]
        pod_affinity: NotRequired[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPatchArgsDict"
            ]
        ]
        pod_anti_affinity: NotRequired[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPatchArgsDict"
            ]
        ]

elif False:
    IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPatchArgs:
    def __init__(
        __self__,
        *,
        node_affinity: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPatchArgs"
            ]
        ] = None,
        pod_affinity: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPatchArgs"
            ]
        ] = None,
        pod_anti_affinity: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPatchArgs"
            ]
        ] = None
    ):
        """
        If specified, the pod's scheduling constraints
        """
        if node_affinity is not None:
            pulumi.set(__self__, "node_affinity", node_affinity)
        if pod_affinity is not None:
            pulumi.set(__self__, "pod_affinity", pod_affinity)
        if pod_anti_affinity is not None:
            pulumi.set(__self__, "pod_anti_affinity", pod_anti_affinity)

    @property
    @pulumi.getter(name="nodeAffinity")
    def node_affinity(
        self,
    ) -> Optional[
        pulumi.Input[
            "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPatchArgs"
        ]
    ]:
        return pulumi.get(self, "node_affinity")

    @node_affinity.setter
    def node_affinity(
        self,
        value: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "node_affinity", value)

    @property
    @pulumi.getter(name="podAffinity")
    def pod_affinity(
        self,
    ) -> Optional[
        pulumi.Input[
            "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPatchArgs"
        ]
    ]:
        return pulumi.get(self, "pod_affinity")

    @pod_affinity.setter
    def pod_affinity(
        self,
        value: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "pod_affinity", value)

    @property
    @pulumi.getter(name="podAntiAffinity")
    def pod_anti_affinity(
        self,
    ) -> Optional[
        pulumi.Input[
            "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPatchArgs"
        ]
    ]:
        return pulumi.get(self, "pod_anti_affinity")

    @pod_anti_affinity.setter
    def pod_anti_affinity(
        self,
        value: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "pod_anti_affinity", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPatchArgsDict(
        TypedDict
    ):
        """
        Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
        """

        preferred_during_scheduling_ignored_during_execution: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgsDict"
                    ]
                ]
            ]
        ]
        """
        The scheduler will prefer to schedule pods to nodes that satisfy
        the affinity expressions specified by this field, but it may choose
        a node that violates one or more of the expressions. The node that is
        most preferred is the one with the greatest sum of weights, i.e.
        for each node that meets all of the scheduling requirements (resource
        request, requiredDuringScheduling affinity expressions, etc.),
        compute a sum by iterating through the elements of this field and adding
        "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
        node(s) with the highest sum are the most preferred.
        """
        required_during_scheduling_ignored_during_execution: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgsDict"
                    ]
                ]
            ]
        ]
        """
        If the affinity requirements specified by this field are not met at
        scheduling time, the pod will not be scheduled onto the node.
        If the affinity requirements specified by this field cease to be met
        at some point during pod execution (e.g. due to a pod label update), the
        system may or may not try to eventually evict the pod from its node.
        When there are multiple elements, the lists of nodes corresponding to each
        podAffinityTerm are intersected, i.e. all terms must be satisfied.
        """

elif False:
    IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPatchArgs:
    def __init__(
        __self__,
        *,
        preferred_during_scheduling_ignored_during_execution: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgs"
                    ]
                ]
            ]
        ] = None,
        required_during_scheduling_ignored_during_execution: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgs"
                    ]
                ]
            ]
        ] = None
    ):
        """
        Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
        :param pulumi.Input[Sequence[pulumi.Input['IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgs']]] preferred_during_scheduling_ignored_during_execution: The scheduler will prefer to schedule pods to nodes that satisfy
               the affinity expressions specified by this field, but it may choose
               a node that violates one or more of the expressions. The node that is
               most preferred is the one with the greatest sum of weights, i.e.
               for each node that meets all of the scheduling requirements (resource
               request, requiredDuringScheduling affinity expressions, etc.),
               compute a sum by iterating through the elements of this field and adding
               "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
               node(s) with the highest sum are the most preferred.
        :param pulumi.Input[Sequence[pulumi.Input['IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgs']]] required_during_scheduling_ignored_during_execution: If the affinity requirements specified by this field are not met at
               scheduling time, the pod will not be scheduled onto the node.
               If the affinity requirements specified by this field cease to be met
               at some point during pod execution (e.g. due to a pod label update), the
               system may or may not try to eventually evict the pod from its node.
               When there are multiple elements, the lists of nodes corresponding to each
               podAffinityTerm are intersected, i.e. all terms must be satisfied.
        """
        if preferred_during_scheduling_ignored_during_execution is not None:
            pulumi.set(
                __self__,
                "preferred_during_scheduling_ignored_during_execution",
                preferred_during_scheduling_ignored_during_execution,
            )
        if required_during_scheduling_ignored_during_execution is not None:
            pulumi.set(
                __self__,
                "required_during_scheduling_ignored_during_execution",
                required_during_scheduling_ignored_during_execution,
            )

    @property
    @pulumi.getter(name="preferredDuringSchedulingIgnoredDuringExecution")
    def preferred_during_scheduling_ignored_during_execution(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgs"
                ]
            ]
        ]
    ]:
        """
        The scheduler will prefer to schedule pods to nodes that satisfy
        the affinity expressions specified by this field, but it may choose
        a node that violates one or more of the expressions. The node that is
        most preferred is the one with the greatest sum of weights, i.e.
        for each node that meets all of the scheduling requirements (resource
        request, requiredDuringScheduling affinity expressions, etc.),
        compute a sum by iterating through the elements of this field and adding
        "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
        node(s) with the highest sum are the most preferred.
        """
        return pulumi.get(self, "preferred_during_scheduling_ignored_during_execution")

    @preferred_during_scheduling_ignored_during_execution.setter
    def preferred_during_scheduling_ignored_during_execution(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "preferred_during_scheduling_ignored_during_execution", value)

    @property
    @pulumi.getter(name="requiredDuringSchedulingIgnoredDuringExecution")
    def required_during_scheduling_ignored_during_execution(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgs"
                ]
            ]
        ]
    ]:
        """
        If the affinity requirements specified by this field are not met at
        scheduling time, the pod will not be scheduled onto the node.
        If the affinity requirements specified by this field cease to be met
        at some point during pod execution (e.g. due to a pod label update), the
        system may or may not try to eventually evict the pod from its node.
        When there are multiple elements, the lists of nodes corresponding to each
        podAffinityTerm are intersected, i.e. all terms must be satisfied.
        """
        return pulumi.get(self, "required_during_scheduling_ignored_during_execution")

    @required_during_scheduling_ignored_during_execution.setter
    def required_during_scheduling_ignored_during_execution(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "required_during_scheduling_ignored_during_execution", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgsDict(
        TypedDict
    ):
        """
        The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
        """

        pod_affinity_term: NotRequired[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchArgsDict"
            ]
        ]
        weight: NotRequired[pulumi.Input[int]]
        """
        weight associated with matching the corresponding podAffinityTerm,
        in the range 1-100.
        """

elif False:
    IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgs:
    def __init__(
        __self__,
        *,
        pod_affinity_term: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchArgs"
            ]
        ] = None,
        weight: Optional[pulumi.Input[int]] = None
    ):
        """
        The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
        :param pulumi.Input[int] weight: weight associated with matching the corresponding podAffinityTerm,
               in the range 1-100.
        """
        if pod_affinity_term is not None:
            pulumi.set(__self__, "pod_affinity_term", pod_affinity_term)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter(name="podAffinityTerm")
    def pod_affinity_term(
        self,
    ) -> Optional[
        pulumi.Input[
            "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchArgs"
        ]
    ]:
        return pulumi.get(self, "pod_affinity_term")

    @pod_affinity_term.setter
    def pod_affinity_term(
        self,
        value: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "pod_affinity_term", value)

    @property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[int]]:
        """
        weight associated with matching the corresponding podAffinityTerm,
        in the range 1-100.
        """
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "weight", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArgsDict(
        TypedDict
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        key is the label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """

elif False:
    IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        operator: Optional[pulumi.Input[str]] = None,
        values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        :param pulumi.Input[str] key: key is the label key that the selector applies to.
        :param pulumi.Input[str] operator: operator represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists and DoesNotExist.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: values is an array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. This array is replaced during a strategic
               merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgsDict(
        TypedDict
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        key is the label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """

elif False:
    IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        operator: Optional[pulumi.Input[str]] = None,
        values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        :param pulumi.Input[str] key: key is the label key that the selector applies to.
        :param pulumi.Input[str] operator: operator represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists and DoesNotExist.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: values is an array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. This array is replaced during a strategic
               merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchArgsDict(
        TypedDict
    ):
        """
        A label query over a set of resources, in this case pods.
        If it's null, this PodAffinityTerm matches with no Pods.
        """

        match_expressions: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArgsDict"
                    ]
                ]
            ]
        ]
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        match_labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """

elif False:
    IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchArgs:
    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArgs"
                    ]
                ]
            ]
        ] = None,
        match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None
    ):
        """
        A label query over a set of resources, in this case pods.
        If it's null, this PodAffinityTerm matches with no Pods.
        :param pulumi.Input[Sequence[pulumi.Input['IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArgs']]] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
               map is equivalent to an element of matchExpressions, whose key field is "key", the
               operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArgs"
                ]
            ]
        ]
    ]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(
        self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
    ):
        pulumi.set(self, "match_labels", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgsDict(
        TypedDict
    ):
        """
        A label query over a set of resources, in this case pods.
        If it's null, this PodAffinityTerm matches with no Pods.
        """

        match_expressions: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgsDict"
                    ]
                ]
            ]
        ]
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        match_labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """

elif False:
    IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs:
    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs"
                    ]
                ]
            ]
        ] = None,
        match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None
    ):
        """
        A label query over a set of resources, in this case pods.
        If it's null, this PodAffinityTerm matches with no Pods.
        :param pulumi.Input[Sequence[pulumi.Input['IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs']]] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
               map is equivalent to an element of matchExpressions, whose key field is "key", the
               operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs"
                ]
            ]
        ]
    ]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(
        self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
    ):
        pulumi.set(self, "match_labels", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArgsDict(
        TypedDict
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        key is the label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """

elif False:
    IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        operator: Optional[pulumi.Input[str]] = None,
        values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        :param pulumi.Input[str] key: key is the label key that the selector applies to.
        :param pulumi.Input[str] operator: operator represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists and DoesNotExist.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: values is an array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. This array is replaced during a strategic
               merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgsDict(
        TypedDict
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        key is the label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """

elif False:
    IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        operator: Optional[pulumi.Input[str]] = None,
        values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        :param pulumi.Input[str] key: key is the label key that the selector applies to.
        :param pulumi.Input[str] operator: operator represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists and DoesNotExist.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: values is an array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. This array is replaced during a strategic
               merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchArgsDict(
        TypedDict
    ):
        """
        A label query over the set of namespaces that the term applies to.
        The term is applied to the union of the namespaces selected by this field
        and the ones listed in the namespaces field.
        null selector and null or empty namespaces list means "this pod's namespace".
        An empty selector ({}) matches all namespaces.
        """

        match_expressions: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArgsDict"
                    ]
                ]
            ]
        ]
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        match_labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """

elif False:
    IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchArgs:
    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArgs"
                    ]
                ]
            ]
        ] = None,
        match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None
    ):
        """
        A label query over the set of namespaces that the term applies to.
        The term is applied to the union of the namespaces selected by this field
        and the ones listed in the namespaces field.
        null selector and null or empty namespaces list means "this pod's namespace".
        An empty selector ({}) matches all namespaces.
        :param pulumi.Input[Sequence[pulumi.Input['IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArgs']]] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
               map is equivalent to an element of matchExpressions, whose key field is "key", the
               operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArgs"
                ]
            ]
        ]
    ]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(
        self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
    ):
        pulumi.set(self, "match_labels", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgsDict(
        TypedDict
    ):
        """
        A label query over the set of namespaces that the term applies to.
        The term is applied to the union of the namespaces selected by this field
        and the ones listed in the namespaces field.
        null selector and null or empty namespaces list means "this pod's namespace".
        An empty selector ({}) matches all namespaces.
        """

        match_expressions: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgsDict"
                    ]
                ]
            ]
        ]
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        match_labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """

elif False:
    IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs:
    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs"
                    ]
                ]
            ]
        ] = None,
        match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None
    ):
        """
        A label query over the set of namespaces that the term applies to.
        The term is applied to the union of the namespaces selected by this field
        and the ones listed in the namespaces field.
        null selector and null or empty namespaces list means "this pod's namespace".
        An empty selector ({}) matches all namespaces.
        :param pulumi.Input[Sequence[pulumi.Input['IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs']]] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
               map is equivalent to an element of matchExpressions, whose key field is "key", the
               operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs"
                ]
            ]
        ]
    ]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(
        self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
    ):
        pulumi.set(self, "match_labels", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchArgsDict(
        TypedDict
    ):
        """
        Required. A pod affinity term, associated with the corresponding weight.
        """

        label_selector: NotRequired[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchArgsDict"
            ]
        ]
        match_label_keys: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        MatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both matchLabelKeys and labelSelector.
        Also, matchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        mismatch_label_keys: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        MismatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
        Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        namespace_selector: NotRequired[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchArgsDict"
            ]
        ]
        namespaces: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        namespaces specifies a static list of namespace names that the term applies to.
        The term is applied to the union of the namespaces listed in this field
        and the ones selected by namespaceSelector.
        null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        """
        topology_key: NotRequired[pulumi.Input[str]]
        """
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
        the labelSelector in the specified namespaces, where co-located is defined as running on a node
        whose value of the label with key topologyKey matches that of any node on which any of the
        selected pods is running.
        Empty topologyKey is not allowed.
        """

elif False:
    IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchArgs:
    def __init__(
        __self__,
        *,
        label_selector: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchArgs"
            ]
        ] = None,
        match_label_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        mismatch_label_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        namespace_selector: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchArgs"
            ]
        ] = None,
        namespaces: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        topology_key: Optional[pulumi.Input[str]] = None
    ):
        """
        Required. A pod affinity term, associated with the corresponding weight.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] match_label_keys: MatchLabelKeys is a set of pod label keys to select which pods will
               be taken into consideration. The keys are used to lookup values from the
               incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
               to select the group of existing pods which pods will be taken into consideration
               for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
               pod labels will be ignored. The default value is empty.
               The same key is forbidden to exist in both matchLabelKeys and labelSelector.
               Also, matchLabelKeys cannot be set when labelSelector isn't set.
               This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] mismatch_label_keys: MismatchLabelKeys is a set of pod label keys to select which pods will
               be taken into consideration. The keys are used to lookup values from the
               incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
               to select the group of existing pods which pods will be taken into consideration
               for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
               pod labels will be ignored. The default value is empty.
               The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
               Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
               This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] namespaces: namespaces specifies a static list of namespace names that the term applies to.
               The term is applied to the union of the namespaces listed in this field
               and the ones selected by namespaceSelector.
               null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        :param pulumi.Input[str] topology_key: This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
               the labelSelector in the specified namespaces, where co-located is defined as running on a node
               whose value of the label with key topologyKey matches that of any node on which any of the
               selected pods is running.
               Empty topologyKey is not allowed.
        """
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if match_label_keys is not None:
            pulumi.set(__self__, "match_label_keys", match_label_keys)
        if mismatch_label_keys is not None:
            pulumi.set(__self__, "mismatch_label_keys", mismatch_label_keys)
        if namespace_selector is not None:
            pulumi.set(__self__, "namespace_selector", namespace_selector)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)
        if topology_key is not None:
            pulumi.set(__self__, "topology_key", topology_key)

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(
        self,
    ) -> Optional[
        pulumi.Input[
            "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchArgs"
        ]
    ]:
        return pulumi.get(self, "label_selector")

    @label_selector.setter
    def label_selector(
        self,
        value: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "label_selector", value)

    @property
    @pulumi.getter(name="matchLabelKeys")
    def match_label_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        MatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both matchLabelKeys and labelSelector.
        Also, matchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        return pulumi.get(self, "match_label_keys")

    @match_label_keys.setter
    def match_label_keys(
        self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]
    ):
        pulumi.set(self, "match_label_keys", value)

    @property
    @pulumi.getter(name="mismatchLabelKeys")
    def mismatch_label_keys(
        self,
    ) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        MismatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
        Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        return pulumi.get(self, "mismatch_label_keys")

    @mismatch_label_keys.setter
    def mismatch_label_keys(
        self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]
    ):
        pulumi.set(self, "mismatch_label_keys", value)

    @property
    @pulumi.getter(name="namespaceSelector")
    def namespace_selector(
        self,
    ) -> Optional[
        pulumi.Input[
            "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchArgs"
        ]
    ]:
        return pulumi.get(self, "namespace_selector")

    @namespace_selector.setter
    def namespace_selector(
        self,
        value: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "namespace_selector", value)

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        namespaces specifies a static list of namespace names that the term applies to.
        The term is applied to the union of the namespaces listed in this field
        and the ones selected by namespaceSelector.
        null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        """
        return pulumi.get(self, "namespaces")

    @namespaces.setter
    def namespaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "namespaces", value)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> Optional[pulumi.Input[str]]:
        """
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
        the labelSelector in the specified namespaces, where co-located is defined as running on a node
        whose value of the label with key topologyKey matches that of any node on which any of the
        selected pods is running.
        Empty topologyKey is not allowed.
        """
        return pulumi.get(self, "topology_key")

    @topology_key.setter
    def topology_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topology_key", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgsDict(
        TypedDict
    ):
        """
        Required. A pod affinity term, associated with the corresponding weight.
        """

        label_selector: NotRequired[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgsDict"
            ]
        ]
        match_label_keys: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        MatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both matchLabelKeys and labelSelector.
        Also, matchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        mismatch_label_keys: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        MismatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
        Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        namespace_selector: NotRequired[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgsDict"
            ]
        ]
        namespaces: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        namespaces specifies a static list of namespace names that the term applies to.
        The term is applied to the union of the namespaces listed in this field
        and the ones selected by namespaceSelector.
        null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        """
        topology_key: NotRequired[pulumi.Input[str]]
        """
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
        the labelSelector in the specified namespaces, where co-located is defined as running on a node
        whose value of the label with key topologyKey matches that of any node on which any of the
        selected pods is running.
        Empty topologyKey is not allowed.
        """

elif False:
    IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs:
    def __init__(
        __self__,
        *,
        label_selector: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs"
            ]
        ] = None,
        match_label_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        mismatch_label_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        namespace_selector: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs"
            ]
        ] = None,
        namespaces: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        topology_key: Optional[pulumi.Input[str]] = None
    ):
        """
        Required. A pod affinity term, associated with the corresponding weight.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] match_label_keys: MatchLabelKeys is a set of pod label keys to select which pods will
               be taken into consideration. The keys are used to lookup values from the
               incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
               to select the group of existing pods which pods will be taken into consideration
               for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
               pod labels will be ignored. The default value is empty.
               The same key is forbidden to exist in both matchLabelKeys and labelSelector.
               Also, matchLabelKeys cannot be set when labelSelector isn't set.
               This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] mismatch_label_keys: MismatchLabelKeys is a set of pod label keys to select which pods will
               be taken into consideration. The keys are used to lookup values from the
               incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
               to select the group of existing pods which pods will be taken into consideration
               for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
               pod labels will be ignored. The default value is empty.
               The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
               Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
               This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] namespaces: namespaces specifies a static list of namespace names that the term applies to.
               The term is applied to the union of the namespaces listed in this field
               and the ones selected by namespaceSelector.
               null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        :param pulumi.Input[str] topology_key: This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
               the labelSelector in the specified namespaces, where co-located is defined as running on a node
               whose value of the label with key topologyKey matches that of any node on which any of the
               selected pods is running.
               Empty topologyKey is not allowed.
        """
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if match_label_keys is not None:
            pulumi.set(__self__, "match_label_keys", match_label_keys)
        if mismatch_label_keys is not None:
            pulumi.set(__self__, "mismatch_label_keys", mismatch_label_keys)
        if namespace_selector is not None:
            pulumi.set(__self__, "namespace_selector", namespace_selector)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)
        if topology_key is not None:
            pulumi.set(__self__, "topology_key", topology_key)

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(
        self,
    ) -> Optional[
        pulumi.Input[
            "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs"
        ]
    ]:
        return pulumi.get(self, "label_selector")

    @label_selector.setter
    def label_selector(
        self,
        value: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs"
            ]
        ],
    ):
        pulumi.set(self, "label_selector", value)

    @property
    @pulumi.getter(name="matchLabelKeys")
    def match_label_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        MatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both matchLabelKeys and labelSelector.
        Also, matchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        return pulumi.get(self, "match_label_keys")

    @match_label_keys.setter
    def match_label_keys(
        self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]
    ):
        pulumi.set(self, "match_label_keys", value)

    @property
    @pulumi.getter(name="mismatchLabelKeys")
    def mismatch_label_keys(
        self,
    ) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        MismatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
        Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        return pulumi.get(self, "mismatch_label_keys")

    @mismatch_label_keys.setter
    def mismatch_label_keys(
        self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]
    ):
        pulumi.set(self, "mismatch_label_keys", value)

    @property
    @pulumi.getter(name="namespaceSelector")
    def namespace_selector(
        self,
    ) -> Optional[
        pulumi.Input[
            "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs"
        ]
    ]:
        return pulumi.get(self, "namespace_selector")

    @namespace_selector.setter
    def namespace_selector(
        self,
        value: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs"
            ]
        ],
    ):
        pulumi.set(self, "namespace_selector", value)

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        namespaces specifies a static list of namespace names that the term applies to.
        The term is applied to the union of the namespaces listed in this field
        and the ones selected by namespaceSelector.
        null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        """
        return pulumi.get(self, "namespaces")

    @namespaces.setter
    def namespaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "namespaces", value)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> Optional[pulumi.Input[str]]:
        """
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
        the labelSelector in the specified namespaces, where co-located is defined as running on a node
        whose value of the label with key topologyKey matches that of any node on which any of the
        selected pods is running.
        Empty topologyKey is not allowed.
        """
        return pulumi.get(self, "topology_key")

    @topology_key.setter
    def topology_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topology_key", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgsDict(
        TypedDict
    ):
        """
        The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
        """

        pod_affinity_term: NotRequired[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgsDict"
            ]
        ]
        weight: NotRequired[pulumi.Input[int]]
        """
        weight associated with matching the corresponding podAffinityTerm,
        in the range 1-100.
        """

elif False:
    IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs:
    def __init__(
        __self__,
        *,
        pod_affinity_term: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs"
            ]
        ] = None,
        weight: Optional[pulumi.Input[int]] = None
    ):
        """
        The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
        :param pulumi.Input[int] weight: weight associated with matching the corresponding podAffinityTerm,
               in the range 1-100.
        """
        if pod_affinity_term is not None:
            pulumi.set(__self__, "pod_affinity_term", pod_affinity_term)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter(name="podAffinityTerm")
    def pod_affinity_term(
        self,
    ) -> Optional[
        pulumi.Input[
            "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs"
        ]
    ]:
        return pulumi.get(self, "pod_affinity_term")

    @pod_affinity_term.setter
    def pod_affinity_term(
        self,
        value: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs"
            ]
        ],
    ):
        pulumi.set(self, "pod_affinity_term", value)

    @property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[int]]:
        """
        weight associated with matching the corresponding podAffinityTerm,
        in the range 1-100.
        """
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "weight", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArgsDict(
        TypedDict
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        key is the label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """

elif False:
    IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        operator: Optional[pulumi.Input[str]] = None,
        values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        :param pulumi.Input[str] key: key is the label key that the selector applies to.
        :param pulumi.Input[str] operator: operator represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists and DoesNotExist.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: values is an array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. This array is replaced during a strategic
               merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgsDict(
        TypedDict
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        key is the label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """

elif False:
    IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        operator: Optional[pulumi.Input[str]] = None,
        values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        :param pulumi.Input[str] key: key is the label key that the selector applies to.
        :param pulumi.Input[str] operator: operator represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists and DoesNotExist.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: values is an array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. This array is replaced during a strategic
               merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchArgsDict(
        TypedDict
    ):
        """
        A label query over a set of resources, in this case pods.
        If it's null, this PodAffinityTerm matches with no Pods.
        """

        match_expressions: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArgsDict"
                    ]
                ]
            ]
        ]
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        match_labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """

elif False:
    IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchArgs:
    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArgs"
                    ]
                ]
            ]
        ] = None,
        match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None
    ):
        """
        A label query over a set of resources, in this case pods.
        If it's null, this PodAffinityTerm matches with no Pods.
        :param pulumi.Input[Sequence[pulumi.Input['IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArgs']]] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
               map is equivalent to an element of matchExpressions, whose key field is "key", the
               operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArgs"
                ]
            ]
        ]
    ]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(
        self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
    ):
        pulumi.set(self, "match_labels", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgsDict(
        TypedDict
    ):
        """
        A label query over a set of resources, in this case pods.
        If it's null, this PodAffinityTerm matches with no Pods.
        """

        match_expressions: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgsDict"
                    ]
                ]
            ]
        ]
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        match_labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """

elif False:
    IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs:
    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs"
                    ]
                ]
            ]
        ] = None,
        match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None
    ):
        """
        A label query over a set of resources, in this case pods.
        If it's null, this PodAffinityTerm matches with no Pods.
        :param pulumi.Input[Sequence[pulumi.Input['IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs']]] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
               map is equivalent to an element of matchExpressions, whose key field is "key", the
               operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs"
                ]
            ]
        ]
    ]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(
        self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
    ):
        pulumi.set(self, "match_labels", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArgsDict(
        TypedDict
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        key is the label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """

elif False:
    IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        operator: Optional[pulumi.Input[str]] = None,
        values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        :param pulumi.Input[str] key: key is the label key that the selector applies to.
        :param pulumi.Input[str] operator: operator represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists and DoesNotExist.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: values is an array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. This array is replaced during a strategic
               merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgsDict(
        TypedDict
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        key is the label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """

elif False:
    IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        operator: Optional[pulumi.Input[str]] = None,
        values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        :param pulumi.Input[str] key: key is the label key that the selector applies to.
        :param pulumi.Input[str] operator: operator represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists and DoesNotExist.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: values is an array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. This array is replaced during a strategic
               merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchArgsDict(
        TypedDict
    ):
        """
        A label query over the set of namespaces that the term applies to.
        The term is applied to the union of the namespaces selected by this field
        and the ones listed in the namespaces field.
        null selector and null or empty namespaces list means "this pod's namespace".
        An empty selector ({}) matches all namespaces.
        """

        match_expressions: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArgsDict"
                    ]
                ]
            ]
        ]
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        match_labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """

elif False:
    IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchArgs:
    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArgs"
                    ]
                ]
            ]
        ] = None,
        match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None
    ):
        """
        A label query over the set of namespaces that the term applies to.
        The term is applied to the union of the namespaces selected by this field
        and the ones listed in the namespaces field.
        null selector and null or empty namespaces list means "this pod's namespace".
        An empty selector ({}) matches all namespaces.
        :param pulumi.Input[Sequence[pulumi.Input['IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArgs']]] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
               map is equivalent to an element of matchExpressions, whose key field is "key", the
               operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArgs"
                ]
            ]
        ]
    ]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(
        self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
    ):
        pulumi.set(self, "match_labels", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgsDict(
        TypedDict
    ):
        """
        A label query over the set of namespaces that the term applies to.
        The term is applied to the union of the namespaces selected by this field
        and the ones listed in the namespaces field.
        null selector and null or empty namespaces list means "this pod's namespace".
        An empty selector ({}) matches all namespaces.
        """

        match_expressions: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgsDict"
                    ]
                ]
            ]
        ]
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        match_labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """

elif False:
    IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs:
    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs"
                    ]
                ]
            ]
        ] = None,
        match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None
    ):
        """
        A label query over the set of namespaces that the term applies to.
        The term is applied to the union of the namespaces selected by this field
        and the ones listed in the namespaces field.
        null selector and null or empty namespaces list means "this pod's namespace".
        An empty selector ({}) matches all namespaces.
        :param pulumi.Input[Sequence[pulumi.Input['IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs']]] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
               map is equivalent to an element of matchExpressions, whose key field is "key", the
               operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs"
                ]
            ]
        ]
    ]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(
        self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
    ):
        pulumi.set(self, "match_labels", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgsDict(
        TypedDict
    ):
        """
        Defines a set of pods (namely those matching the labelSelector
        relative to the given namespace(s)) that this pod should be
        co-located (affinity) or not co-located (anti-affinity) with,
        where co-located is defined as running on a node whose value of
        the label with key <topologyKey> matches that of any node on which
        a pod of the set of pods is running
        """

        label_selector: NotRequired[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchArgsDict"
            ]
        ]
        match_label_keys: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        MatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both matchLabelKeys and labelSelector.
        Also, matchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        mismatch_label_keys: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        MismatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
        Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        namespace_selector: NotRequired[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchArgsDict"
            ]
        ]
        namespaces: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        namespaces specifies a static list of namespace names that the term applies to.
        The term is applied to the union of the namespaces listed in this field
        and the ones selected by namespaceSelector.
        null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        """
        topology_key: NotRequired[pulumi.Input[str]]
        """
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
        the labelSelector in the specified namespaces, where co-located is defined as running on a node
        whose value of the label with key topologyKey matches that of any node on which any of the
        selected pods is running.
        Empty topologyKey is not allowed.
        """

elif False:
    IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgs:
    def __init__(
        __self__,
        *,
        label_selector: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchArgs"
            ]
        ] = None,
        match_label_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        mismatch_label_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        namespace_selector: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchArgs"
            ]
        ] = None,
        namespaces: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        topology_key: Optional[pulumi.Input[str]] = None
    ):
        """
        Defines a set of pods (namely those matching the labelSelector
        relative to the given namespace(s)) that this pod should be
        co-located (affinity) or not co-located (anti-affinity) with,
        where co-located is defined as running on a node whose value of
        the label with key <topologyKey> matches that of any node on which
        a pod of the set of pods is running
        :param pulumi.Input[Sequence[pulumi.Input[str]]] match_label_keys: MatchLabelKeys is a set of pod label keys to select which pods will
               be taken into consideration. The keys are used to lookup values from the
               incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
               to select the group of existing pods which pods will be taken into consideration
               for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
               pod labels will be ignored. The default value is empty.
               The same key is forbidden to exist in both matchLabelKeys and labelSelector.
               Also, matchLabelKeys cannot be set when labelSelector isn't set.
               This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] mismatch_label_keys: MismatchLabelKeys is a set of pod label keys to select which pods will
               be taken into consideration. The keys are used to lookup values from the
               incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
               to select the group of existing pods which pods will be taken into consideration
               for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
               pod labels will be ignored. The default value is empty.
               The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
               Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
               This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] namespaces: namespaces specifies a static list of namespace names that the term applies to.
               The term is applied to the union of the namespaces listed in this field
               and the ones selected by namespaceSelector.
               null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        :param pulumi.Input[str] topology_key: This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
               the labelSelector in the specified namespaces, where co-located is defined as running on a node
               whose value of the label with key topologyKey matches that of any node on which any of the
               selected pods is running.
               Empty topologyKey is not allowed.
        """
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if match_label_keys is not None:
            pulumi.set(__self__, "match_label_keys", match_label_keys)
        if mismatch_label_keys is not None:
            pulumi.set(__self__, "mismatch_label_keys", mismatch_label_keys)
        if namespace_selector is not None:
            pulumi.set(__self__, "namespace_selector", namespace_selector)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)
        if topology_key is not None:
            pulumi.set(__self__, "topology_key", topology_key)

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(
        self,
    ) -> Optional[
        pulumi.Input[
            "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchArgs"
        ]
    ]:
        return pulumi.get(self, "label_selector")

    @label_selector.setter
    def label_selector(
        self,
        value: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "label_selector", value)

    @property
    @pulumi.getter(name="matchLabelKeys")
    def match_label_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        MatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both matchLabelKeys and labelSelector.
        Also, matchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        return pulumi.get(self, "match_label_keys")

    @match_label_keys.setter
    def match_label_keys(
        self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]
    ):
        pulumi.set(self, "match_label_keys", value)

    @property
    @pulumi.getter(name="mismatchLabelKeys")
    def mismatch_label_keys(
        self,
    ) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        MismatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
        Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        return pulumi.get(self, "mismatch_label_keys")

    @mismatch_label_keys.setter
    def mismatch_label_keys(
        self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]
    ):
        pulumi.set(self, "mismatch_label_keys", value)

    @property
    @pulumi.getter(name="namespaceSelector")
    def namespace_selector(
        self,
    ) -> Optional[
        pulumi.Input[
            "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchArgs"
        ]
    ]:
        return pulumi.get(self, "namespace_selector")

    @namespace_selector.setter
    def namespace_selector(
        self,
        value: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "namespace_selector", value)

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        namespaces specifies a static list of namespace names that the term applies to.
        The term is applied to the union of the namespaces listed in this field
        and the ones selected by namespaceSelector.
        null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        """
        return pulumi.get(self, "namespaces")

    @namespaces.setter
    def namespaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "namespaces", value)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> Optional[pulumi.Input[str]]:
        """
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
        the labelSelector in the specified namespaces, where co-located is defined as running on a node
        whose value of the label with key topologyKey matches that of any node on which any of the
        selected pods is running.
        Empty topologyKey is not allowed.
        """
        return pulumi.get(self, "topology_key")

    @topology_key.setter
    def topology_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topology_key", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgsDict(
        TypedDict
    ):
        """
        Defines a set of pods (namely those matching the labelSelector
        relative to the given namespace(s)) that this pod should be
        co-located (affinity) or not co-located (anti-affinity) with,
        where co-located is defined as running on a node whose value of
        the label with key <topologyKey> matches that of any node on which
        a pod of the set of pods is running
        """

        label_selector: NotRequired[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgsDict"
            ]
        ]
        match_label_keys: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        MatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both matchLabelKeys and labelSelector.
        Also, matchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        mismatch_label_keys: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        MismatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
        Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        namespace_selector: NotRequired[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgsDict"
            ]
        ]
        namespaces: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        namespaces specifies a static list of namespace names that the term applies to.
        The term is applied to the union of the namespaces listed in this field
        and the ones selected by namespaceSelector.
        null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        """
        topology_key: NotRequired[pulumi.Input[str]]
        """
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
        the labelSelector in the specified namespaces, where co-located is defined as running on a node
        whose value of the label with key topologyKey matches that of any node on which any of the
        selected pods is running.
        Empty topologyKey is not allowed.
        """

elif False:
    IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs:
    def __init__(
        __self__,
        *,
        label_selector: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs"
            ]
        ] = None,
        match_label_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        mismatch_label_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        namespace_selector: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs"
            ]
        ] = None,
        namespaces: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        topology_key: Optional[pulumi.Input[str]] = None
    ):
        """
        Defines a set of pods (namely those matching the labelSelector
        relative to the given namespace(s)) that this pod should be
        co-located (affinity) or not co-located (anti-affinity) with,
        where co-located is defined as running on a node whose value of
        the label with key <topologyKey> matches that of any node on which
        a pod of the set of pods is running
        :param pulumi.Input[Sequence[pulumi.Input[str]]] match_label_keys: MatchLabelKeys is a set of pod label keys to select which pods will
               be taken into consideration. The keys are used to lookup values from the
               incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
               to select the group of existing pods which pods will be taken into consideration
               for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
               pod labels will be ignored. The default value is empty.
               The same key is forbidden to exist in both matchLabelKeys and labelSelector.
               Also, matchLabelKeys cannot be set when labelSelector isn't set.
               This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] mismatch_label_keys: MismatchLabelKeys is a set of pod label keys to select which pods will
               be taken into consideration. The keys are used to lookup values from the
               incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
               to select the group of existing pods which pods will be taken into consideration
               for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
               pod labels will be ignored. The default value is empty.
               The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
               Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
               This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] namespaces: namespaces specifies a static list of namespace names that the term applies to.
               The term is applied to the union of the namespaces listed in this field
               and the ones selected by namespaceSelector.
               null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        :param pulumi.Input[str] topology_key: This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
               the labelSelector in the specified namespaces, where co-located is defined as running on a node
               whose value of the label with key topologyKey matches that of any node on which any of the
               selected pods is running.
               Empty topologyKey is not allowed.
        """
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if match_label_keys is not None:
            pulumi.set(__self__, "match_label_keys", match_label_keys)
        if mismatch_label_keys is not None:
            pulumi.set(__self__, "mismatch_label_keys", mismatch_label_keys)
        if namespace_selector is not None:
            pulumi.set(__self__, "namespace_selector", namespace_selector)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)
        if topology_key is not None:
            pulumi.set(__self__, "topology_key", topology_key)

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(
        self,
    ) -> Optional[
        pulumi.Input[
            "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs"
        ]
    ]:
        return pulumi.get(self, "label_selector")

    @label_selector.setter
    def label_selector(
        self,
        value: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs"
            ]
        ],
    ):
        pulumi.set(self, "label_selector", value)

    @property
    @pulumi.getter(name="matchLabelKeys")
    def match_label_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        MatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both matchLabelKeys and labelSelector.
        Also, matchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        return pulumi.get(self, "match_label_keys")

    @match_label_keys.setter
    def match_label_keys(
        self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]
    ):
        pulumi.set(self, "match_label_keys", value)

    @property
    @pulumi.getter(name="mismatchLabelKeys")
    def mismatch_label_keys(
        self,
    ) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        MismatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
        Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        return pulumi.get(self, "mismatch_label_keys")

    @mismatch_label_keys.setter
    def mismatch_label_keys(
        self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]
    ):
        pulumi.set(self, "mismatch_label_keys", value)

    @property
    @pulumi.getter(name="namespaceSelector")
    def namespace_selector(
        self,
    ) -> Optional[
        pulumi.Input[
            "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs"
        ]
    ]:
        return pulumi.get(self, "namespace_selector")

    @namespace_selector.setter
    def namespace_selector(
        self,
        value: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs"
            ]
        ],
    ):
        pulumi.set(self, "namespace_selector", value)

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        namespaces specifies a static list of namespace names that the term applies to.
        The term is applied to the union of the namespaces listed in this field
        and the ones selected by namespaceSelector.
        null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        """
        return pulumi.get(self, "namespaces")

    @namespaces.setter
    def namespaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "namespaces", value)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> Optional[pulumi.Input[str]]:
        """
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
        the labelSelector in the specified namespaces, where co-located is defined as running on a node
        whose value of the label with key topologyKey matches that of any node on which any of the
        selected pods is running.
        Empty topologyKey is not allowed.
        """
        return pulumi.get(self, "topology_key")

    @topology_key.setter
    def topology_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topology_key", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityArgsDict(
        TypedDict
    ):
        """
        Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
        """

        preferred_during_scheduling_ignored_during_execution: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgsDict"
                    ]
                ]
            ]
        ]
        """
        The scheduler will prefer to schedule pods to nodes that satisfy
        the affinity expressions specified by this field, but it may choose
        a node that violates one or more of the expressions. The node that is
        most preferred is the one with the greatest sum of weights, i.e.
        for each node that meets all of the scheduling requirements (resource
        request, requiredDuringScheduling affinity expressions, etc.),
        compute a sum by iterating through the elements of this field and adding
        "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
        node(s) with the highest sum are the most preferred.
        """
        required_during_scheduling_ignored_during_execution: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgsDict"
                    ]
                ]
            ]
        ]
        """
        If the affinity requirements specified by this field are not met at
        scheduling time, the pod will not be scheduled onto the node.
        If the affinity requirements specified by this field cease to be met
        at some point during pod execution (e.g. due to a pod label update), the
        system may or may not try to eventually evict the pod from its node.
        When there are multiple elements, the lists of nodes corresponding to each
        podAffinityTerm are intersected, i.e. all terms must be satisfied.
        """

elif False:
    IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityArgs:
    def __init__(
        __self__,
        *,
        preferred_during_scheduling_ignored_during_execution: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs"
                    ]
                ]
            ]
        ] = None,
        required_during_scheduling_ignored_during_execution: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs"
                    ]
                ]
            ]
        ] = None
    ):
        """
        Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
        :param pulumi.Input[Sequence[pulumi.Input['IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs']]] preferred_during_scheduling_ignored_during_execution: The scheduler will prefer to schedule pods to nodes that satisfy
               the affinity expressions specified by this field, but it may choose
               a node that violates one or more of the expressions. The node that is
               most preferred is the one with the greatest sum of weights, i.e.
               for each node that meets all of the scheduling requirements (resource
               request, requiredDuringScheduling affinity expressions, etc.),
               compute a sum by iterating through the elements of this field and adding
               "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
               node(s) with the highest sum are the most preferred.
        :param pulumi.Input[Sequence[pulumi.Input['IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs']]] required_during_scheduling_ignored_during_execution: If the affinity requirements specified by this field are not met at
               scheduling time, the pod will not be scheduled onto the node.
               If the affinity requirements specified by this field cease to be met
               at some point during pod execution (e.g. due to a pod label update), the
               system may or may not try to eventually evict the pod from its node.
               When there are multiple elements, the lists of nodes corresponding to each
               podAffinityTerm are intersected, i.e. all terms must be satisfied.
        """
        if preferred_during_scheduling_ignored_during_execution is not None:
            pulumi.set(
                __self__,
                "preferred_during_scheduling_ignored_during_execution",
                preferred_during_scheduling_ignored_during_execution,
            )
        if required_during_scheduling_ignored_during_execution is not None:
            pulumi.set(
                __self__,
                "required_during_scheduling_ignored_during_execution",
                required_during_scheduling_ignored_during_execution,
            )

    @property
    @pulumi.getter(name="preferredDuringSchedulingIgnoredDuringExecution")
    def preferred_during_scheduling_ignored_during_execution(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs"
                ]
            ]
        ]
    ]:
        """
        The scheduler will prefer to schedule pods to nodes that satisfy
        the affinity expressions specified by this field, but it may choose
        a node that violates one or more of the expressions. The node that is
        most preferred is the one with the greatest sum of weights, i.e.
        for each node that meets all of the scheduling requirements (resource
        request, requiredDuringScheduling affinity expressions, etc.),
        compute a sum by iterating through the elements of this field and adding
        "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
        node(s) with the highest sum are the most preferred.
        """
        return pulumi.get(self, "preferred_during_scheduling_ignored_during_execution")

    @preferred_during_scheduling_ignored_during_execution.setter
    def preferred_during_scheduling_ignored_during_execution(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "preferred_during_scheduling_ignored_during_execution", value)

    @property
    @pulumi.getter(name="requiredDuringSchedulingIgnoredDuringExecution")
    def required_during_scheduling_ignored_during_execution(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs"
                ]
            ]
        ]
    ]:
        """
        If the affinity requirements specified by this field are not met at
        scheduling time, the pod will not be scheduled onto the node.
        If the affinity requirements specified by this field cease to be met
        at some point during pod execution (e.g. due to a pod label update), the
        system may or may not try to eventually evict the pod from its node.
        When there are multiple elements, the lists of nodes corresponding to each
        podAffinityTerm are intersected, i.e. all terms must be satisfied.
        """
        return pulumi.get(self, "required_during_scheduling_ignored_during_execution")

    @required_during_scheduling_ignored_during_execution.setter
    def required_during_scheduling_ignored_during_execution(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "required_during_scheduling_ignored_during_execution", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPatchArgsDict(
        TypedDict
    ):
        """
        Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
        """

        preferred_during_scheduling_ignored_during_execution: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgsDict"
                    ]
                ]
            ]
        ]
        """
        The scheduler will prefer to schedule pods to nodes that satisfy
        the anti-affinity expressions specified by this field, but it may choose
        a node that violates one or more of the expressions. The node that is
        most preferred is the one with the greatest sum of weights, i.e.
        for each node that meets all of the scheduling requirements (resource
        request, requiredDuringScheduling anti-affinity expressions, etc.),
        compute a sum by iterating through the elements of this field and adding
        "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
        node(s) with the highest sum are the most preferred.
        """
        required_during_scheduling_ignored_during_execution: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgsDict"
                    ]
                ]
            ]
        ]
        """
        If the anti-affinity requirements specified by this field are not met at
        scheduling time, the pod will not be scheduled onto the node.
        If the anti-affinity requirements specified by this field cease to be met
        at some point during pod execution (e.g. due to a pod label update), the
        system may or may not try to eventually evict the pod from its node.
        When there are multiple elements, the lists of nodes corresponding to each
        podAffinityTerm are intersected, i.e. all terms must be satisfied.
        """

elif False:
    IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPatchArgs:
    def __init__(
        __self__,
        *,
        preferred_during_scheduling_ignored_during_execution: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgs"
                    ]
                ]
            ]
        ] = None,
        required_during_scheduling_ignored_during_execution: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgs"
                    ]
                ]
            ]
        ] = None
    ):
        """
        Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
        :param pulumi.Input[Sequence[pulumi.Input['IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgs']]] preferred_during_scheduling_ignored_during_execution: The scheduler will prefer to schedule pods to nodes that satisfy
               the anti-affinity expressions specified by this field, but it may choose
               a node that violates one or more of the expressions. The node that is
               most preferred is the one with the greatest sum of weights, i.e.
               for each node that meets all of the scheduling requirements (resource
               request, requiredDuringScheduling anti-affinity expressions, etc.),
               compute a sum by iterating through the elements of this field and adding
               "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
               node(s) with the highest sum are the most preferred.
        :param pulumi.Input[Sequence[pulumi.Input['IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgs']]] required_during_scheduling_ignored_during_execution: If the anti-affinity requirements specified by this field are not met at
               scheduling time, the pod will not be scheduled onto the node.
               If the anti-affinity requirements specified by this field cease to be met
               at some point during pod execution (e.g. due to a pod label update), the
               system may or may not try to eventually evict the pod from its node.
               When there are multiple elements, the lists of nodes corresponding to each
               podAffinityTerm are intersected, i.e. all terms must be satisfied.
        """
        if preferred_during_scheduling_ignored_during_execution is not None:
            pulumi.set(
                __self__,
                "preferred_during_scheduling_ignored_during_execution",
                preferred_during_scheduling_ignored_during_execution,
            )
        if required_during_scheduling_ignored_during_execution is not None:
            pulumi.set(
                __self__,
                "required_during_scheduling_ignored_during_execution",
                required_during_scheduling_ignored_during_execution,
            )

    @property
    @pulumi.getter(name="preferredDuringSchedulingIgnoredDuringExecution")
    def preferred_during_scheduling_ignored_during_execution(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgs"
                ]
            ]
        ]
    ]:
        """
        The scheduler will prefer to schedule pods to nodes that satisfy
        the anti-affinity expressions specified by this field, but it may choose
        a node that violates one or more of the expressions. The node that is
        most preferred is the one with the greatest sum of weights, i.e.
        for each node that meets all of the scheduling requirements (resource
        request, requiredDuringScheduling anti-affinity expressions, etc.),
        compute a sum by iterating through the elements of this field and adding
        "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
        node(s) with the highest sum are the most preferred.
        """
        return pulumi.get(self, "preferred_during_scheduling_ignored_during_execution")

    @preferred_during_scheduling_ignored_during_execution.setter
    def preferred_during_scheduling_ignored_during_execution(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "preferred_during_scheduling_ignored_during_execution", value)

    @property
    @pulumi.getter(name="requiredDuringSchedulingIgnoredDuringExecution")
    def required_during_scheduling_ignored_during_execution(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgs"
                ]
            ]
        ]
    ]:
        """
        If the anti-affinity requirements specified by this field are not met at
        scheduling time, the pod will not be scheduled onto the node.
        If the anti-affinity requirements specified by this field cease to be met
        at some point during pod execution (e.g. due to a pod label update), the
        system may or may not try to eventually evict the pod from its node.
        When there are multiple elements, the lists of nodes corresponding to each
        podAffinityTerm are intersected, i.e. all terms must be satisfied.
        """
        return pulumi.get(self, "required_during_scheduling_ignored_during_execution")

    @required_during_scheduling_ignored_during_execution.setter
    def required_during_scheduling_ignored_during_execution(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "required_during_scheduling_ignored_during_execution", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgsDict(
        TypedDict
    ):
        """
        The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
        """

        pod_affinity_term: NotRequired[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchArgsDict"
            ]
        ]
        weight: NotRequired[pulumi.Input[int]]
        """
        weight associated with matching the corresponding podAffinityTerm,
        in the range 1-100.
        """

elif False:
    IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgs:
    def __init__(
        __self__,
        *,
        pod_affinity_term: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchArgs"
            ]
        ] = None,
        weight: Optional[pulumi.Input[int]] = None
    ):
        """
        The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
        :param pulumi.Input[int] weight: weight associated with matching the corresponding podAffinityTerm,
               in the range 1-100.
        """
        if pod_affinity_term is not None:
            pulumi.set(__self__, "pod_affinity_term", pod_affinity_term)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter(name="podAffinityTerm")
    def pod_affinity_term(
        self,
    ) -> Optional[
        pulumi.Input[
            "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchArgs"
        ]
    ]:
        return pulumi.get(self, "pod_affinity_term")

    @pod_affinity_term.setter
    def pod_affinity_term(
        self,
        value: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "pod_affinity_term", value)

    @property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[int]]:
        """
        weight associated with matching the corresponding podAffinityTerm,
        in the range 1-100.
        """
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "weight", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArgsDict(
        TypedDict
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        key is the label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """

elif False:
    IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        operator: Optional[pulumi.Input[str]] = None,
        values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        :param pulumi.Input[str] key: key is the label key that the selector applies to.
        :param pulumi.Input[str] operator: operator represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists and DoesNotExist.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: values is an array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. This array is replaced during a strategic
               merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgsDict(
        TypedDict
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        key is the label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """

elif False:
    IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        operator: Optional[pulumi.Input[str]] = None,
        values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        :param pulumi.Input[str] key: key is the label key that the selector applies to.
        :param pulumi.Input[str] operator: operator represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists and DoesNotExist.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: values is an array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. This array is replaced during a strategic
               merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchArgsDict(
        TypedDict
    ):
        """
        A label query over a set of resources, in this case pods.
        If it's null, this PodAffinityTerm matches with no Pods.
        """

        match_expressions: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArgsDict"
                    ]
                ]
            ]
        ]
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        match_labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """

elif False:
    IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchArgs:
    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArgs"
                    ]
                ]
            ]
        ] = None,
        match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None
    ):
        """
        A label query over a set of resources, in this case pods.
        If it's null, this PodAffinityTerm matches with no Pods.
        :param pulumi.Input[Sequence[pulumi.Input['IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArgs']]] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
               map is equivalent to an element of matchExpressions, whose key field is "key", the
               operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArgs"
                ]
            ]
        ]
    ]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(
        self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
    ):
        pulumi.set(self, "match_labels", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgsDict(
        TypedDict
    ):
        """
        A label query over a set of resources, in this case pods.
        If it's null, this PodAffinityTerm matches with no Pods.
        """

        match_expressions: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgsDict"
                    ]
                ]
            ]
        ]
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        match_labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """

elif False:
    IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs:
    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs"
                    ]
                ]
            ]
        ] = None,
        match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None
    ):
        """
        A label query over a set of resources, in this case pods.
        If it's null, this PodAffinityTerm matches with no Pods.
        :param pulumi.Input[Sequence[pulumi.Input['IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs']]] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
               map is equivalent to an element of matchExpressions, whose key field is "key", the
               operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs"
                ]
            ]
        ]
    ]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(
        self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
    ):
        pulumi.set(self, "match_labels", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArgsDict(
        TypedDict
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        key is the label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """

elif False:
    IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        operator: Optional[pulumi.Input[str]] = None,
        values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        :param pulumi.Input[str] key: key is the label key that the selector applies to.
        :param pulumi.Input[str] operator: operator represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists and DoesNotExist.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: values is an array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. This array is replaced during a strategic
               merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgsDict(
        TypedDict
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        key is the label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """

elif False:
    IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        operator: Optional[pulumi.Input[str]] = None,
        values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        :param pulumi.Input[str] key: key is the label key that the selector applies to.
        :param pulumi.Input[str] operator: operator represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists and DoesNotExist.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: values is an array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. This array is replaced during a strategic
               merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchArgsDict(
        TypedDict
    ):
        """
        A label query over the set of namespaces that the term applies to.
        The term is applied to the union of the namespaces selected by this field
        and the ones listed in the namespaces field.
        null selector and null or empty namespaces list means "this pod's namespace".
        An empty selector ({}) matches all namespaces.
        """

        match_expressions: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArgsDict"
                    ]
                ]
            ]
        ]
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        match_labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """

elif False:
    IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchArgs:
    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArgs"
                    ]
                ]
            ]
        ] = None,
        match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None
    ):
        """
        A label query over the set of namespaces that the term applies to.
        The term is applied to the union of the namespaces selected by this field
        and the ones listed in the namespaces field.
        null selector and null or empty namespaces list means "this pod's namespace".
        An empty selector ({}) matches all namespaces.
        :param pulumi.Input[Sequence[pulumi.Input['IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArgs']]] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
               map is equivalent to an element of matchExpressions, whose key field is "key", the
               operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArgs"
                ]
            ]
        ]
    ]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(
        self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
    ):
        pulumi.set(self, "match_labels", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgsDict(
        TypedDict
    ):
        """
        A label query over the set of namespaces that the term applies to.
        The term is applied to the union of the namespaces selected by this field
        and the ones listed in the namespaces field.
        null selector and null or empty namespaces list means "this pod's namespace".
        An empty selector ({}) matches all namespaces.
        """

        match_expressions: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgsDict"
                    ]
                ]
            ]
        ]
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        match_labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """

elif False:
    IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs:
    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs"
                    ]
                ]
            ]
        ] = None,
        match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None
    ):
        """
        A label query over the set of namespaces that the term applies to.
        The term is applied to the union of the namespaces selected by this field
        and the ones listed in the namespaces field.
        null selector and null or empty namespaces list means "this pod's namespace".
        An empty selector ({}) matches all namespaces.
        :param pulumi.Input[Sequence[pulumi.Input['IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs']]] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
               map is equivalent to an element of matchExpressions, whose key field is "key", the
               operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs"
                ]
            ]
        ]
    ]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(
        self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
    ):
        pulumi.set(self, "match_labels", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchArgsDict(
        TypedDict
    ):
        """
        Required. A pod affinity term, associated with the corresponding weight.
        """

        label_selector: NotRequired[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchArgsDict"
            ]
        ]
        match_label_keys: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        MatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both matchLabelKeys and labelSelector.
        Also, matchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        mismatch_label_keys: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        MismatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
        Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        namespace_selector: NotRequired[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchArgsDict"
            ]
        ]
        namespaces: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        namespaces specifies a static list of namespace names that the term applies to.
        The term is applied to the union of the namespaces listed in this field
        and the ones selected by namespaceSelector.
        null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        """
        topology_key: NotRequired[pulumi.Input[str]]
        """
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
        the labelSelector in the specified namespaces, where co-located is defined as running on a node
        whose value of the label with key topologyKey matches that of any node on which any of the
        selected pods is running.
        Empty topologyKey is not allowed.
        """

elif False:
    IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchArgs:
    def __init__(
        __self__,
        *,
        label_selector: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchArgs"
            ]
        ] = None,
        match_label_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        mismatch_label_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        namespace_selector: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchArgs"
            ]
        ] = None,
        namespaces: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        topology_key: Optional[pulumi.Input[str]] = None
    ):
        """
        Required. A pod affinity term, associated with the corresponding weight.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] match_label_keys: MatchLabelKeys is a set of pod label keys to select which pods will
               be taken into consideration. The keys are used to lookup values from the
               incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
               to select the group of existing pods which pods will be taken into consideration
               for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
               pod labels will be ignored. The default value is empty.
               The same key is forbidden to exist in both matchLabelKeys and labelSelector.
               Also, matchLabelKeys cannot be set when labelSelector isn't set.
               This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] mismatch_label_keys: MismatchLabelKeys is a set of pod label keys to select which pods will
               be taken into consideration. The keys are used to lookup values from the
               incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
               to select the group of existing pods which pods will be taken into consideration
               for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
               pod labels will be ignored. The default value is empty.
               The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
               Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
               This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] namespaces: namespaces specifies a static list of namespace names that the term applies to.
               The term is applied to the union of the namespaces listed in this field
               and the ones selected by namespaceSelector.
               null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        :param pulumi.Input[str] topology_key: This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
               the labelSelector in the specified namespaces, where co-located is defined as running on a node
               whose value of the label with key topologyKey matches that of any node on which any of the
               selected pods is running.
               Empty topologyKey is not allowed.
        """
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if match_label_keys is not None:
            pulumi.set(__self__, "match_label_keys", match_label_keys)
        if mismatch_label_keys is not None:
            pulumi.set(__self__, "mismatch_label_keys", mismatch_label_keys)
        if namespace_selector is not None:
            pulumi.set(__self__, "namespace_selector", namespace_selector)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)
        if topology_key is not None:
            pulumi.set(__self__, "topology_key", topology_key)

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(
        self,
    ) -> Optional[
        pulumi.Input[
            "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchArgs"
        ]
    ]:
        return pulumi.get(self, "label_selector")

    @label_selector.setter
    def label_selector(
        self,
        value: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "label_selector", value)

    @property
    @pulumi.getter(name="matchLabelKeys")
    def match_label_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        MatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both matchLabelKeys and labelSelector.
        Also, matchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        return pulumi.get(self, "match_label_keys")

    @match_label_keys.setter
    def match_label_keys(
        self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]
    ):
        pulumi.set(self, "match_label_keys", value)

    @property
    @pulumi.getter(name="mismatchLabelKeys")
    def mismatch_label_keys(
        self,
    ) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        MismatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
        Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        return pulumi.get(self, "mismatch_label_keys")

    @mismatch_label_keys.setter
    def mismatch_label_keys(
        self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]
    ):
        pulumi.set(self, "mismatch_label_keys", value)

    @property
    @pulumi.getter(name="namespaceSelector")
    def namespace_selector(
        self,
    ) -> Optional[
        pulumi.Input[
            "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchArgs"
        ]
    ]:
        return pulumi.get(self, "namespace_selector")

    @namespace_selector.setter
    def namespace_selector(
        self,
        value: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "namespace_selector", value)

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        namespaces specifies a static list of namespace names that the term applies to.
        The term is applied to the union of the namespaces listed in this field
        and the ones selected by namespaceSelector.
        null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        """
        return pulumi.get(self, "namespaces")

    @namespaces.setter
    def namespaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "namespaces", value)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> Optional[pulumi.Input[str]]:
        """
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
        the labelSelector in the specified namespaces, where co-located is defined as running on a node
        whose value of the label with key topologyKey matches that of any node on which any of the
        selected pods is running.
        Empty topologyKey is not allowed.
        """
        return pulumi.get(self, "topology_key")

    @topology_key.setter
    def topology_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topology_key", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgsDict(
        TypedDict
    ):
        """
        Required. A pod affinity term, associated with the corresponding weight.
        """

        label_selector: NotRequired[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgsDict"
            ]
        ]
        match_label_keys: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        MatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both matchLabelKeys and labelSelector.
        Also, matchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        mismatch_label_keys: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        MismatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
        Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        namespace_selector: NotRequired[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgsDict"
            ]
        ]
        namespaces: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        namespaces specifies a static list of namespace names that the term applies to.
        The term is applied to the union of the namespaces listed in this field
        and the ones selected by namespaceSelector.
        null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        """
        topology_key: NotRequired[pulumi.Input[str]]
        """
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
        the labelSelector in the specified namespaces, where co-located is defined as running on a node
        whose value of the label with key topologyKey matches that of any node on which any of the
        selected pods is running.
        Empty topologyKey is not allowed.
        """

elif False:
    IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs:
    def __init__(
        __self__,
        *,
        label_selector: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs"
            ]
        ] = None,
        match_label_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        mismatch_label_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        namespace_selector: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs"
            ]
        ] = None,
        namespaces: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        topology_key: Optional[pulumi.Input[str]] = None
    ):
        """
        Required. A pod affinity term, associated with the corresponding weight.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] match_label_keys: MatchLabelKeys is a set of pod label keys to select which pods will
               be taken into consideration. The keys are used to lookup values from the
               incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
               to select the group of existing pods which pods will be taken into consideration
               for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
               pod labels will be ignored. The default value is empty.
               The same key is forbidden to exist in both matchLabelKeys and labelSelector.
               Also, matchLabelKeys cannot be set when labelSelector isn't set.
               This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] mismatch_label_keys: MismatchLabelKeys is a set of pod label keys to select which pods will
               be taken into consideration. The keys are used to lookup values from the
               incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
               to select the group of existing pods which pods will be taken into consideration
               for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
               pod labels will be ignored. The default value is empty.
               The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
               Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
               This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] namespaces: namespaces specifies a static list of namespace names that the term applies to.
               The term is applied to the union of the namespaces listed in this field
               and the ones selected by namespaceSelector.
               null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        :param pulumi.Input[str] topology_key: This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
               the labelSelector in the specified namespaces, where co-located is defined as running on a node
               whose value of the label with key topologyKey matches that of any node on which any of the
               selected pods is running.
               Empty topologyKey is not allowed.
        """
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if match_label_keys is not None:
            pulumi.set(__self__, "match_label_keys", match_label_keys)
        if mismatch_label_keys is not None:
            pulumi.set(__self__, "mismatch_label_keys", mismatch_label_keys)
        if namespace_selector is not None:
            pulumi.set(__self__, "namespace_selector", namespace_selector)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)
        if topology_key is not None:
            pulumi.set(__self__, "topology_key", topology_key)

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(
        self,
    ) -> Optional[
        pulumi.Input[
            "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs"
        ]
    ]:
        return pulumi.get(self, "label_selector")

    @label_selector.setter
    def label_selector(
        self,
        value: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs"
            ]
        ],
    ):
        pulumi.set(self, "label_selector", value)

    @property
    @pulumi.getter(name="matchLabelKeys")
    def match_label_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        MatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both matchLabelKeys and labelSelector.
        Also, matchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        return pulumi.get(self, "match_label_keys")

    @match_label_keys.setter
    def match_label_keys(
        self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]
    ):
        pulumi.set(self, "match_label_keys", value)

    @property
    @pulumi.getter(name="mismatchLabelKeys")
    def mismatch_label_keys(
        self,
    ) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        MismatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
        Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        return pulumi.get(self, "mismatch_label_keys")

    @mismatch_label_keys.setter
    def mismatch_label_keys(
        self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]
    ):
        pulumi.set(self, "mismatch_label_keys", value)

    @property
    @pulumi.getter(name="namespaceSelector")
    def namespace_selector(
        self,
    ) -> Optional[
        pulumi.Input[
            "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs"
        ]
    ]:
        return pulumi.get(self, "namespace_selector")

    @namespace_selector.setter
    def namespace_selector(
        self,
        value: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs"
            ]
        ],
    ):
        pulumi.set(self, "namespace_selector", value)

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        namespaces specifies a static list of namespace names that the term applies to.
        The term is applied to the union of the namespaces listed in this field
        and the ones selected by namespaceSelector.
        null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        """
        return pulumi.get(self, "namespaces")

    @namespaces.setter
    def namespaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "namespaces", value)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> Optional[pulumi.Input[str]]:
        """
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
        the labelSelector in the specified namespaces, where co-located is defined as running on a node
        whose value of the label with key topologyKey matches that of any node on which any of the
        selected pods is running.
        Empty topologyKey is not allowed.
        """
        return pulumi.get(self, "topology_key")

    @topology_key.setter
    def topology_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topology_key", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgsDict(
        TypedDict
    ):
        """
        The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
        """

        pod_affinity_term: NotRequired[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgsDict"
            ]
        ]
        weight: NotRequired[pulumi.Input[int]]
        """
        weight associated with matching the corresponding podAffinityTerm,
        in the range 1-100.
        """

elif False:
    IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs:
    def __init__(
        __self__,
        *,
        pod_affinity_term: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs"
            ]
        ] = None,
        weight: Optional[pulumi.Input[int]] = None
    ):
        """
        The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
        :param pulumi.Input[int] weight: weight associated with matching the corresponding podAffinityTerm,
               in the range 1-100.
        """
        if pod_affinity_term is not None:
            pulumi.set(__self__, "pod_affinity_term", pod_affinity_term)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter(name="podAffinityTerm")
    def pod_affinity_term(
        self,
    ) -> Optional[
        pulumi.Input[
            "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs"
        ]
    ]:
        return pulumi.get(self, "pod_affinity_term")

    @pod_affinity_term.setter
    def pod_affinity_term(
        self,
        value: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs"
            ]
        ],
    ):
        pulumi.set(self, "pod_affinity_term", value)

    @property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[int]]:
        """
        weight associated with matching the corresponding podAffinityTerm,
        in the range 1-100.
        """
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "weight", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArgsDict(
        TypedDict
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        key is the label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """

elif False:
    IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        operator: Optional[pulumi.Input[str]] = None,
        values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        :param pulumi.Input[str] key: key is the label key that the selector applies to.
        :param pulumi.Input[str] operator: operator represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists and DoesNotExist.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: values is an array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. This array is replaced during a strategic
               merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgsDict(
        TypedDict
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        key is the label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """

elif False:
    IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        operator: Optional[pulumi.Input[str]] = None,
        values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        :param pulumi.Input[str] key: key is the label key that the selector applies to.
        :param pulumi.Input[str] operator: operator represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists and DoesNotExist.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: values is an array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. This array is replaced during a strategic
               merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchArgsDict(
        TypedDict
    ):
        """
        A label query over a set of resources, in this case pods.
        If it's null, this PodAffinityTerm matches with no Pods.
        """

        match_expressions: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArgsDict"
                    ]
                ]
            ]
        ]
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        match_labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """

elif False:
    IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchArgs:
    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArgs"
                    ]
                ]
            ]
        ] = None,
        match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None
    ):
        """
        A label query over a set of resources, in this case pods.
        If it's null, this PodAffinityTerm matches with no Pods.
        :param pulumi.Input[Sequence[pulumi.Input['IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArgs']]] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
               map is equivalent to an element of matchExpressions, whose key field is "key", the
               operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArgs"
                ]
            ]
        ]
    ]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(
        self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
    ):
        pulumi.set(self, "match_labels", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgsDict(
        TypedDict
    ):
        """
        A label query over a set of resources, in this case pods.
        If it's null, this PodAffinityTerm matches with no Pods.
        """

        match_expressions: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgsDict"
                    ]
                ]
            ]
        ]
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        match_labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """

elif False:
    IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs:
    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs"
                    ]
                ]
            ]
        ] = None,
        match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None
    ):
        """
        A label query over a set of resources, in this case pods.
        If it's null, this PodAffinityTerm matches with no Pods.
        :param pulumi.Input[Sequence[pulumi.Input['IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs']]] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
               map is equivalent to an element of matchExpressions, whose key field is "key", the
               operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs"
                ]
            ]
        ]
    ]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(
        self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
    ):
        pulumi.set(self, "match_labels", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArgsDict(
        TypedDict
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        key is the label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """

elif False:
    IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        operator: Optional[pulumi.Input[str]] = None,
        values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        :param pulumi.Input[str] key: key is the label key that the selector applies to.
        :param pulumi.Input[str] operator: operator represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists and DoesNotExist.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: values is an array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. This array is replaced during a strategic
               merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgsDict(
        TypedDict
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        key is the label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """

elif False:
    IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        operator: Optional[pulumi.Input[str]] = None,
        values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        :param pulumi.Input[str] key: key is the label key that the selector applies to.
        :param pulumi.Input[str] operator: operator represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists and DoesNotExist.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: values is an array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. This array is replaced during a strategic
               merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchArgsDict(
        TypedDict
    ):
        """
        A label query over the set of namespaces that the term applies to.
        The term is applied to the union of the namespaces selected by this field
        and the ones listed in the namespaces field.
        null selector and null or empty namespaces list means "this pod's namespace".
        An empty selector ({}) matches all namespaces.
        """

        match_expressions: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArgsDict"
                    ]
                ]
            ]
        ]
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        match_labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """

elif False:
    IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchArgs:
    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArgs"
                    ]
                ]
            ]
        ] = None,
        match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None
    ):
        """
        A label query over the set of namespaces that the term applies to.
        The term is applied to the union of the namespaces selected by this field
        and the ones listed in the namespaces field.
        null selector and null or empty namespaces list means "this pod's namespace".
        An empty selector ({}) matches all namespaces.
        :param pulumi.Input[Sequence[pulumi.Input['IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArgs']]] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
               map is equivalent to an element of matchExpressions, whose key field is "key", the
               operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArgs"
                ]
            ]
        ]
    ]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(
        self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
    ):
        pulumi.set(self, "match_labels", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgsDict(
        TypedDict
    ):
        """
        A label query over the set of namespaces that the term applies to.
        The term is applied to the union of the namespaces selected by this field
        and the ones listed in the namespaces field.
        null selector and null or empty namespaces list means "this pod's namespace".
        An empty selector ({}) matches all namespaces.
        """

        match_expressions: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgsDict"
                    ]
                ]
            ]
        ]
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        match_labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """

elif False:
    IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs:
    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs"
                    ]
                ]
            ]
        ] = None,
        match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None
    ):
        """
        A label query over the set of namespaces that the term applies to.
        The term is applied to the union of the namespaces selected by this field
        and the ones listed in the namespaces field.
        null selector and null or empty namespaces list means "this pod's namespace".
        An empty selector ({}) matches all namespaces.
        :param pulumi.Input[Sequence[pulumi.Input['IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs']]] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
               map is equivalent to an element of matchExpressions, whose key field is "key", the
               operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs"
                ]
            ]
        ]
    ]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(
        self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
    ):
        pulumi.set(self, "match_labels", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgsDict(
        TypedDict
    ):
        """
        Defines a set of pods (namely those matching the labelSelector
        relative to the given namespace(s)) that this pod should be
        co-located (affinity) or not co-located (anti-affinity) with,
        where co-located is defined as running on a node whose value of
        the label with key <topologyKey> matches that of any node on which
        a pod of the set of pods is running
        """

        label_selector: NotRequired[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchArgsDict"
            ]
        ]
        match_label_keys: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        MatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both matchLabelKeys and labelSelector.
        Also, matchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        mismatch_label_keys: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        MismatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
        Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        namespace_selector: NotRequired[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchArgsDict"
            ]
        ]
        namespaces: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        namespaces specifies a static list of namespace names that the term applies to.
        The term is applied to the union of the namespaces listed in this field
        and the ones selected by namespaceSelector.
        null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        """
        topology_key: NotRequired[pulumi.Input[str]]
        """
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
        the labelSelector in the specified namespaces, where co-located is defined as running on a node
        whose value of the label with key topologyKey matches that of any node on which any of the
        selected pods is running.
        Empty topologyKey is not allowed.
        """

elif False:
    IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgs:
    def __init__(
        __self__,
        *,
        label_selector: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchArgs"
            ]
        ] = None,
        match_label_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        mismatch_label_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        namespace_selector: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchArgs"
            ]
        ] = None,
        namespaces: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        topology_key: Optional[pulumi.Input[str]] = None
    ):
        """
        Defines a set of pods (namely those matching the labelSelector
        relative to the given namespace(s)) that this pod should be
        co-located (affinity) or not co-located (anti-affinity) with,
        where co-located is defined as running on a node whose value of
        the label with key <topologyKey> matches that of any node on which
        a pod of the set of pods is running
        :param pulumi.Input[Sequence[pulumi.Input[str]]] match_label_keys: MatchLabelKeys is a set of pod label keys to select which pods will
               be taken into consideration. The keys are used to lookup values from the
               incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
               to select the group of existing pods which pods will be taken into consideration
               for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
               pod labels will be ignored. The default value is empty.
               The same key is forbidden to exist in both matchLabelKeys and labelSelector.
               Also, matchLabelKeys cannot be set when labelSelector isn't set.
               This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] mismatch_label_keys: MismatchLabelKeys is a set of pod label keys to select which pods will
               be taken into consideration. The keys are used to lookup values from the
               incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
               to select the group of existing pods which pods will be taken into consideration
               for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
               pod labels will be ignored. The default value is empty.
               The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
               Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
               This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] namespaces: namespaces specifies a static list of namespace names that the term applies to.
               The term is applied to the union of the namespaces listed in this field
               and the ones selected by namespaceSelector.
               null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        :param pulumi.Input[str] topology_key: This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
               the labelSelector in the specified namespaces, where co-located is defined as running on a node
               whose value of the label with key topologyKey matches that of any node on which any of the
               selected pods is running.
               Empty topologyKey is not allowed.
        """
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if match_label_keys is not None:
            pulumi.set(__self__, "match_label_keys", match_label_keys)
        if mismatch_label_keys is not None:
            pulumi.set(__self__, "mismatch_label_keys", mismatch_label_keys)
        if namespace_selector is not None:
            pulumi.set(__self__, "namespace_selector", namespace_selector)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)
        if topology_key is not None:
            pulumi.set(__self__, "topology_key", topology_key)

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(
        self,
    ) -> Optional[
        pulumi.Input[
            "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchArgs"
        ]
    ]:
        return pulumi.get(self, "label_selector")

    @label_selector.setter
    def label_selector(
        self,
        value: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "label_selector", value)

    @property
    @pulumi.getter(name="matchLabelKeys")
    def match_label_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        MatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both matchLabelKeys and labelSelector.
        Also, matchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        return pulumi.get(self, "match_label_keys")

    @match_label_keys.setter
    def match_label_keys(
        self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]
    ):
        pulumi.set(self, "match_label_keys", value)

    @property
    @pulumi.getter(name="mismatchLabelKeys")
    def mismatch_label_keys(
        self,
    ) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        MismatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
        Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        return pulumi.get(self, "mismatch_label_keys")

    @mismatch_label_keys.setter
    def mismatch_label_keys(
        self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]
    ):
        pulumi.set(self, "mismatch_label_keys", value)

    @property
    @pulumi.getter(name="namespaceSelector")
    def namespace_selector(
        self,
    ) -> Optional[
        pulumi.Input[
            "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchArgs"
        ]
    ]:
        return pulumi.get(self, "namespace_selector")

    @namespace_selector.setter
    def namespace_selector(
        self,
        value: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "namespace_selector", value)

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        namespaces specifies a static list of namespace names that the term applies to.
        The term is applied to the union of the namespaces listed in this field
        and the ones selected by namespaceSelector.
        null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        """
        return pulumi.get(self, "namespaces")

    @namespaces.setter
    def namespaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "namespaces", value)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> Optional[pulumi.Input[str]]:
        """
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
        the labelSelector in the specified namespaces, where co-located is defined as running on a node
        whose value of the label with key topologyKey matches that of any node on which any of the
        selected pods is running.
        Empty topologyKey is not allowed.
        """
        return pulumi.get(self, "topology_key")

    @topology_key.setter
    def topology_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topology_key", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgsDict(
        TypedDict
    ):
        """
        Defines a set of pods (namely those matching the labelSelector
        relative to the given namespace(s)) that this pod should be
        co-located (affinity) or not co-located (anti-affinity) with,
        where co-located is defined as running on a node whose value of
        the label with key <topologyKey> matches that of any node on which
        a pod of the set of pods is running
        """

        label_selector: NotRequired[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgsDict"
            ]
        ]
        match_label_keys: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        MatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both matchLabelKeys and labelSelector.
        Also, matchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        mismatch_label_keys: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        MismatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
        Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        namespace_selector: NotRequired[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgsDict"
            ]
        ]
        namespaces: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        namespaces specifies a static list of namespace names that the term applies to.
        The term is applied to the union of the namespaces listed in this field
        and the ones selected by namespaceSelector.
        null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        """
        topology_key: NotRequired[pulumi.Input[str]]
        """
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
        the labelSelector in the specified namespaces, where co-located is defined as running on a node
        whose value of the label with key topologyKey matches that of any node on which any of the
        selected pods is running.
        Empty topologyKey is not allowed.
        """

elif False:
    IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs:
    def __init__(
        __self__,
        *,
        label_selector: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs"
            ]
        ] = None,
        match_label_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        mismatch_label_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        namespace_selector: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs"
            ]
        ] = None,
        namespaces: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        topology_key: Optional[pulumi.Input[str]] = None
    ):
        """
        Defines a set of pods (namely those matching the labelSelector
        relative to the given namespace(s)) that this pod should be
        co-located (affinity) or not co-located (anti-affinity) with,
        where co-located is defined as running on a node whose value of
        the label with key <topologyKey> matches that of any node on which
        a pod of the set of pods is running
        :param pulumi.Input[Sequence[pulumi.Input[str]]] match_label_keys: MatchLabelKeys is a set of pod label keys to select which pods will
               be taken into consideration. The keys are used to lookup values from the
               incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
               to select the group of existing pods which pods will be taken into consideration
               for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
               pod labels will be ignored. The default value is empty.
               The same key is forbidden to exist in both matchLabelKeys and labelSelector.
               Also, matchLabelKeys cannot be set when labelSelector isn't set.
               This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] mismatch_label_keys: MismatchLabelKeys is a set of pod label keys to select which pods will
               be taken into consideration. The keys are used to lookup values from the
               incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
               to select the group of existing pods which pods will be taken into consideration
               for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
               pod labels will be ignored. The default value is empty.
               The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
               Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
               This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] namespaces: namespaces specifies a static list of namespace names that the term applies to.
               The term is applied to the union of the namespaces listed in this field
               and the ones selected by namespaceSelector.
               null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        :param pulumi.Input[str] topology_key: This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
               the labelSelector in the specified namespaces, where co-located is defined as running on a node
               whose value of the label with key topologyKey matches that of any node on which any of the
               selected pods is running.
               Empty topologyKey is not allowed.
        """
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if match_label_keys is not None:
            pulumi.set(__self__, "match_label_keys", match_label_keys)
        if mismatch_label_keys is not None:
            pulumi.set(__self__, "mismatch_label_keys", mismatch_label_keys)
        if namespace_selector is not None:
            pulumi.set(__self__, "namespace_selector", namespace_selector)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)
        if topology_key is not None:
            pulumi.set(__self__, "topology_key", topology_key)

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(
        self,
    ) -> Optional[
        pulumi.Input[
            "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs"
        ]
    ]:
        return pulumi.get(self, "label_selector")

    @label_selector.setter
    def label_selector(
        self,
        value: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs"
            ]
        ],
    ):
        pulumi.set(self, "label_selector", value)

    @property
    @pulumi.getter(name="matchLabelKeys")
    def match_label_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        MatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both matchLabelKeys and labelSelector.
        Also, matchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        return pulumi.get(self, "match_label_keys")

    @match_label_keys.setter
    def match_label_keys(
        self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]
    ):
        pulumi.set(self, "match_label_keys", value)

    @property
    @pulumi.getter(name="mismatchLabelKeys")
    def mismatch_label_keys(
        self,
    ) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        MismatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
        Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        return pulumi.get(self, "mismatch_label_keys")

    @mismatch_label_keys.setter
    def mismatch_label_keys(
        self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]
    ):
        pulumi.set(self, "mismatch_label_keys", value)

    @property
    @pulumi.getter(name="namespaceSelector")
    def namespace_selector(
        self,
    ) -> Optional[
        pulumi.Input[
            "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs"
        ]
    ]:
        return pulumi.get(self, "namespace_selector")

    @namespace_selector.setter
    def namespace_selector(
        self,
        value: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs"
            ]
        ],
    ):
        pulumi.set(self, "namespace_selector", value)

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        namespaces specifies a static list of namespace names that the term applies to.
        The term is applied to the union of the namespaces listed in this field
        and the ones selected by namespaceSelector.
        null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        """
        return pulumi.get(self, "namespaces")

    @namespaces.setter
    def namespaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "namespaces", value)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> Optional[pulumi.Input[str]]:
        """
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
        the labelSelector in the specified namespaces, where co-located is defined as running on a node
        whose value of the label with key topologyKey matches that of any node on which any of the
        selected pods is running.
        Empty topologyKey is not allowed.
        """
        return pulumi.get(self, "topology_key")

    @topology_key.setter
    def topology_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topology_key", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityArgsDict(
        TypedDict
    ):
        """
        Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
        """

        preferred_during_scheduling_ignored_during_execution: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgsDict"
                    ]
                ]
            ]
        ]
        """
        The scheduler will prefer to schedule pods to nodes that satisfy
        the anti-affinity expressions specified by this field, but it may choose
        a node that violates one or more of the expressions. The node that is
        most preferred is the one with the greatest sum of weights, i.e.
        for each node that meets all of the scheduling requirements (resource
        request, requiredDuringScheduling anti-affinity expressions, etc.),
        compute a sum by iterating through the elements of this field and adding
        "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
        node(s) with the highest sum are the most preferred.
        """
        required_during_scheduling_ignored_during_execution: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgsDict"
                    ]
                ]
            ]
        ]
        """
        If the anti-affinity requirements specified by this field are not met at
        scheduling time, the pod will not be scheduled onto the node.
        If the anti-affinity requirements specified by this field cease to be met
        at some point during pod execution (e.g. due to a pod label update), the
        system may or may not try to eventually evict the pod from its node.
        When there are multiple elements, the lists of nodes corresponding to each
        podAffinityTerm are intersected, i.e. all terms must be satisfied.
        """

elif False:
    IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityArgs:
    def __init__(
        __self__,
        *,
        preferred_during_scheduling_ignored_during_execution: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs"
                    ]
                ]
            ]
        ] = None,
        required_during_scheduling_ignored_during_execution: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs"
                    ]
                ]
            ]
        ] = None
    ):
        """
        Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
        :param pulumi.Input[Sequence[pulumi.Input['IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs']]] preferred_during_scheduling_ignored_during_execution: The scheduler will prefer to schedule pods to nodes that satisfy
               the anti-affinity expressions specified by this field, but it may choose
               a node that violates one or more of the expressions. The node that is
               most preferred is the one with the greatest sum of weights, i.e.
               for each node that meets all of the scheduling requirements (resource
               request, requiredDuringScheduling anti-affinity expressions, etc.),
               compute a sum by iterating through the elements of this field and adding
               "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
               node(s) with the highest sum are the most preferred.
        :param pulumi.Input[Sequence[pulumi.Input['IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs']]] required_during_scheduling_ignored_during_execution: If the anti-affinity requirements specified by this field are not met at
               scheduling time, the pod will not be scheduled onto the node.
               If the anti-affinity requirements specified by this field cease to be met
               at some point during pod execution (e.g. due to a pod label update), the
               system may or may not try to eventually evict the pod from its node.
               When there are multiple elements, the lists of nodes corresponding to each
               podAffinityTerm are intersected, i.e. all terms must be satisfied.
        """
        if preferred_during_scheduling_ignored_during_execution is not None:
            pulumi.set(
                __self__,
                "preferred_during_scheduling_ignored_during_execution",
                preferred_during_scheduling_ignored_during_execution,
            )
        if required_during_scheduling_ignored_during_execution is not None:
            pulumi.set(
                __self__,
                "required_during_scheduling_ignored_during_execution",
                required_during_scheduling_ignored_during_execution,
            )

    @property
    @pulumi.getter(name="preferredDuringSchedulingIgnoredDuringExecution")
    def preferred_during_scheduling_ignored_during_execution(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs"
                ]
            ]
        ]
    ]:
        """
        The scheduler will prefer to schedule pods to nodes that satisfy
        the anti-affinity expressions specified by this field, but it may choose
        a node that violates one or more of the expressions. The node that is
        most preferred is the one with the greatest sum of weights, i.e.
        for each node that meets all of the scheduling requirements (resource
        request, requiredDuringScheduling anti-affinity expressions, etc.),
        compute a sum by iterating through the elements of this field and adding
        "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
        node(s) with the highest sum are the most preferred.
        """
        return pulumi.get(self, "preferred_during_scheduling_ignored_during_execution")

    @preferred_during_scheduling_ignored_during_execution.setter
    def preferred_during_scheduling_ignored_during_execution(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "preferred_during_scheduling_ignored_during_execution", value)

    @property
    @pulumi.getter(name="requiredDuringSchedulingIgnoredDuringExecution")
    def required_during_scheduling_ignored_during_execution(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs"
                ]
            ]
        ]
    ]:
        """
        If the anti-affinity requirements specified by this field are not met at
        scheduling time, the pod will not be scheduled onto the node.
        If the anti-affinity requirements specified by this field cease to be met
        at some point during pod execution (e.g. due to a pod label update), the
        system may or may not try to eventually evict the pod from its node.
        When there are multiple elements, the lists of nodes corresponding to each
        podAffinityTerm are intersected, i.e. all terms must be satisfied.
        """
        return pulumi.get(self, "required_during_scheduling_ignored_during_execution")

    @required_during_scheduling_ignored_during_execution.setter
    def required_during_scheduling_ignored_during_execution(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "required_during_scheduling_ignored_during_execution", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityArgsDict(
        TypedDict
    ):
        """
        If specified, the pod's scheduling constraints
        """

        node_affinity: NotRequired[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityArgsDict"
            ]
        ]
        pod_affinity: NotRequired[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityArgsDict"
            ]
        ]
        pod_anti_affinity: NotRequired[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityArgsDict"
            ]
        ]

elif False:
    IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityArgs:
    def __init__(
        __self__,
        *,
        node_affinity: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityArgs"
            ]
        ] = None,
        pod_affinity: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityArgs"
            ]
        ] = None,
        pod_anti_affinity: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityArgs"
            ]
        ] = None
    ):
        """
        If specified, the pod's scheduling constraints
        """
        if node_affinity is not None:
            pulumi.set(__self__, "node_affinity", node_affinity)
        if pod_affinity is not None:
            pulumi.set(__self__, "pod_affinity", pod_affinity)
        if pod_anti_affinity is not None:
            pulumi.set(__self__, "pod_anti_affinity", pod_anti_affinity)

    @property
    @pulumi.getter(name="nodeAffinity")
    def node_affinity(
        self,
    ) -> Optional[
        pulumi.Input[
            "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityArgs"
        ]
    ]:
        return pulumi.get(self, "node_affinity")

    @node_affinity.setter
    def node_affinity(
        self,
        value: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityArgs"
            ]
        ],
    ):
        pulumi.set(self, "node_affinity", value)

    @property
    @pulumi.getter(name="podAffinity")
    def pod_affinity(
        self,
    ) -> Optional[
        pulumi.Input[
            "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityArgs"
        ]
    ]:
        return pulumi.get(self, "pod_affinity")

    @pod_affinity.setter
    def pod_affinity(
        self,
        value: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityArgs"
            ]
        ],
    ):
        pulumi.set(self, "pod_affinity", value)

    @property
    @pulumi.getter(name="podAntiAffinity")
    def pod_anti_affinity(
        self,
    ) -> Optional[
        pulumi.Input[
            "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityArgs"
        ]
    ]:
        return pulumi.get(self, "pod_anti_affinity")

    @pod_anti_affinity.setter
    def pod_anti_affinity(
        self,
        value: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityArgs"
            ]
        ],
    ):
        pulumi.set(self, "pod_anti_affinity", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecImagePullSecretsPatchArgsDict(
        TypedDict
    ):
        """
        LocalObjectReference contains enough information to let you locate the
        referenced object inside the same namespace.
        """

        name: NotRequired[pulumi.Input[str]]
        """
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """

elif False:
    IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecImagePullSecretsPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecImagePullSecretsPatchArgs:
    def __init__(__self__, *, name: Optional[pulumi.Input[str]] = None):
        """
        LocalObjectReference contains enough information to let you locate the
        referenced object inside the same namespace.
        :param pulumi.Input[str] name: Name of the referent.
               This field is effectively required, but due to backwards compatibility is
               allowed to be empty. Instances of this type with an empty value here are
               almost certainly wrong.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecImagePullSecretsArgsDict(
        TypedDict
    ):
        """
        LocalObjectReference contains enough information to let you locate the
        referenced object inside the same namespace.
        """

        name: NotRequired[pulumi.Input[str]]
        """
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """

elif False:
    IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecImagePullSecretsArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecImagePullSecretsArgs:
    def __init__(__self__, *, name: Optional[pulumi.Input[str]] = None):
        """
        LocalObjectReference contains enough information to let you locate the
        referenced object inside the same namespace.
        :param pulumi.Input[str] name: Name of the referent.
               This field is effectively required, but due to backwards compatibility is
               allowed to be empty. Instances of this type with an empty value here are
               almost certainly wrong.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecPatchArgsDict(
        TypedDict
    ):
        """
        PodSpec defines overrides for the HTTP01 challenge solver pod.
        Check ACMEChallengeSolverHTTP01IngressPodSpec to find out currently supported fields.
        All other fields will be ignored.
        """

        affinity: NotRequired[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPatchArgsDict"
            ]
        ]
        image_pull_secrets: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecImagePullSecretsPatchArgsDict"
                    ]
                ]
            ]
        ]
        """
        If specified, the pod's imagePullSecrets
        """
        node_selector: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        NodeSelector is a selector which must be true for the pod to fit on a node.
        Selector which must match a node's labels for the pod to be scheduled on that node.
        More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
        """
        priority_class_name: NotRequired[pulumi.Input[str]]
        """
        If specified, the pod's priorityClassName.
        """
        security_context: NotRequired[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextPatchArgsDict"
            ]
        ]
        service_account_name: NotRequired[pulumi.Input[str]]
        """
        If specified, the pod's service account
        """
        tolerations: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecTolerationsPatchArgsDict"
                    ]
                ]
            ]
        ]
        """
        If specified, the pod's tolerations.
        """

elif False:
    IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecPatchArgs:
    def __init__(
        __self__,
        *,
        affinity: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPatchArgs"
            ]
        ] = None,
        image_pull_secrets: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecImagePullSecretsPatchArgs"
                    ]
                ]
            ]
        ] = None,
        node_selector: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
        priority_class_name: Optional[pulumi.Input[str]] = None,
        security_context: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextPatchArgs"
            ]
        ] = None,
        service_account_name: Optional[pulumi.Input[str]] = None,
        tolerations: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecTolerationsPatchArgs"
                    ]
                ]
            ]
        ] = None
    ):
        """
        PodSpec defines overrides for the HTTP01 challenge solver pod.
        Check ACMEChallengeSolverHTTP01IngressPodSpec to find out currently supported fields.
        All other fields will be ignored.
        :param pulumi.Input[Sequence[pulumi.Input['IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecImagePullSecretsPatchArgs']]] image_pull_secrets: If specified, the pod's imagePullSecrets
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] node_selector: NodeSelector is a selector which must be true for the pod to fit on a node.
               Selector which must match a node's labels for the pod to be scheduled on that node.
               More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
        :param pulumi.Input[str] priority_class_name: If specified, the pod's priorityClassName.
        :param pulumi.Input[str] service_account_name: If specified, the pod's service account
        :param pulumi.Input[Sequence[pulumi.Input['IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecTolerationsPatchArgs']]] tolerations: If specified, the pod's tolerations.
        """
        if affinity is not None:
            pulumi.set(__self__, "affinity", affinity)
        if image_pull_secrets is not None:
            pulumi.set(__self__, "image_pull_secrets", image_pull_secrets)
        if node_selector is not None:
            pulumi.set(__self__, "node_selector", node_selector)
        if priority_class_name is not None:
            pulumi.set(__self__, "priority_class_name", priority_class_name)
        if security_context is not None:
            pulumi.set(__self__, "security_context", security_context)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tolerations is not None:
            pulumi.set(__self__, "tolerations", tolerations)

    @property
    @pulumi.getter
    def affinity(
        self,
    ) -> Optional[
        pulumi.Input[
            "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPatchArgs"
        ]
    ]:
        return pulumi.get(self, "affinity")

    @affinity.setter
    def affinity(
        self,
        value: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "affinity", value)

    @property
    @pulumi.getter(name="imagePullSecrets")
    def image_pull_secrets(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecImagePullSecretsPatchArgs"
                ]
            ]
        ]
    ]:
        """
        If specified, the pod's imagePullSecrets
        """
        return pulumi.get(self, "image_pull_secrets")

    @image_pull_secrets.setter
    def image_pull_secrets(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecImagePullSecretsPatchArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "image_pull_secrets", value)

    @property
    @pulumi.getter(name="nodeSelector")
    def node_selector(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        NodeSelector is a selector which must be true for the pod to fit on a node.
        Selector which must match a node's labels for the pod to be scheduled on that node.
        More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
        """
        return pulumi.get(self, "node_selector")

    @node_selector.setter
    def node_selector(
        self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
    ):
        pulumi.set(self, "node_selector", value)

    @property
    @pulumi.getter(name="priorityClassName")
    def priority_class_name(self) -> Optional[pulumi.Input[str]]:
        """
        If specified, the pod's priorityClassName.
        """
        return pulumi.get(self, "priority_class_name")

    @priority_class_name.setter
    def priority_class_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "priority_class_name", value)

    @property
    @pulumi.getter(name="securityContext")
    def security_context(
        self,
    ) -> Optional[
        pulumi.Input[
            "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextPatchArgs"
        ]
    ]:
        return pulumi.get(self, "security_context")

    @security_context.setter
    def security_context(
        self,
        value: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextPatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "security_context", value)

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[pulumi.Input[str]]:
        """
        If specified, the pod's service account
        """
        return pulumi.get(self, "service_account_name")

    @service_account_name.setter
    def service_account_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account_name", value)

    @property
    @pulumi.getter
    def tolerations(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecTolerationsPatchArgs"
                ]
            ]
        ]
    ]:
        """
        If specified, the pod's tolerations.
        """
        return pulumi.get(self, "tolerations")

    @tolerations.setter
    def tolerations(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecTolerationsPatchArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "tolerations", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextPatchArgsDict(
        TypedDict
    ):
        """
        If specified, the pod's security context
        """

        fs_group: NotRequired[pulumi.Input[int]]
        """
        A special supplemental group that applies to all containers in a pod.
        Some volume types allow the Kubelet to change the ownership of that volume
        to be owned by the pod:

        1. The owning GID will be the FSGroup
        2. The setgid bit is set (new files created in the volume will be owned by FSGroup)
        3. The permission bits are OR'd with rw-rw----

        If unset, the Kubelet will not modify the ownership and permissions of any volume.
        Note that this field cannot be set when spec.os.name is windows.
        """
        fs_group_change_policy: NotRequired[pulumi.Input[str]]
        """
        fsGroupChangePolicy defines behavior of changing ownership and permission of the volume
        before being exposed inside Pod. This field will only apply to
        volume types which support fsGroup based ownership(and permissions).
        It will have no effect on ephemeral volume types such as: secret, configmaps
        and emptydir.
        Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used.
        Note that this field cannot be set when spec.os.name is windows.
        """
        run_as_group: NotRequired[pulumi.Input[int]]
        """
        The GID to run the entrypoint of the container process.
        Uses runtime default if unset.
        May also be set in SecurityContext.  If set in both SecurityContext and
        PodSecurityContext, the value specified in SecurityContext takes precedence
        for that container.
        Note that this field cannot be set when spec.os.name is windows.
        """
        run_as_non_root: NotRequired[pulumi.Input[bool]]
        """
        Indicates that the container must run as a non-root user.
        If true, the Kubelet will validate the image at runtime to ensure that it
        does not run as UID 0 (root) and fail to start the container if it does.
        If unset or false, no such validation will be performed.
        May also be set in SecurityContext.  If set in both SecurityContext and
        PodSecurityContext, the value specified in SecurityContext takes precedence.
        """
        run_as_user: NotRequired[pulumi.Input[int]]
        """
        The UID to run the entrypoint of the container process.
        Defaults to user specified in image metadata if unspecified.
        May also be set in SecurityContext.  If set in both SecurityContext and
        PodSecurityContext, the value specified in SecurityContext takes precedence
        for that container.
        Note that this field cannot be set when spec.os.name is windows.
        """
        se_linux_options: NotRequired[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSeLinuxOptionsPatchArgsDict"
            ]
        ]
        seccomp_profile: NotRequired[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSeccompProfilePatchArgsDict"
            ]
        ]
        supplemental_groups: NotRequired[pulumi.Input[Sequence[pulumi.Input[int]]]]
        """
        A list of groups applied to the first process run in each container, in addition
        to the container's primary GID, the fsGroup (if specified), and group memberships
        defined in the container image for the uid of the container process. If unspecified,
        no additional groups are added to any container. Note that group memberships
        defined in the container image for the uid of the container process are still effective,
        even if they are not included in this list.
        Note that this field cannot be set when spec.os.name is windows.
        """
        sysctls: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSysctlsPatchArgsDict"
                    ]
                ]
            ]
        ]
        """
        Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported
        sysctls (by the container runtime) might fail to launch.
        Note that this field cannot be set when spec.os.name is windows.
        """

elif False:
    IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextPatchArgs:
    def __init__(
        __self__,
        *,
        fs_group: Optional[pulumi.Input[int]] = None,
        fs_group_change_policy: Optional[pulumi.Input[str]] = None,
        run_as_group: Optional[pulumi.Input[int]] = None,
        run_as_non_root: Optional[pulumi.Input[bool]] = None,
        run_as_user: Optional[pulumi.Input[int]] = None,
        se_linux_options: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSeLinuxOptionsPatchArgs"
            ]
        ] = None,
        seccomp_profile: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSeccompProfilePatchArgs"
            ]
        ] = None,
        supplemental_groups: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
        sysctls: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSysctlsPatchArgs"
                    ]
                ]
            ]
        ] = None
    ):
        """
        If specified, the pod's security context
        :param pulumi.Input[int] fs_group: A special supplemental group that applies to all containers in a pod.
               Some volume types allow the Kubelet to change the ownership of that volume
               to be owned by the pod:

               1. The owning GID will be the FSGroup
               2. The setgid bit is set (new files created in the volume will be owned by FSGroup)
               3. The permission bits are OR'd with rw-rw----

               If unset, the Kubelet will not modify the ownership and permissions of any volume.
               Note that this field cannot be set when spec.os.name is windows.
        :param pulumi.Input[str] fs_group_change_policy: fsGroupChangePolicy defines behavior of changing ownership and permission of the volume
               before being exposed inside Pod. This field will only apply to
               volume types which support fsGroup based ownership(and permissions).
               It will have no effect on ephemeral volume types such as: secret, configmaps
               and emptydir.
               Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used.
               Note that this field cannot be set when spec.os.name is windows.
        :param pulumi.Input[int] run_as_group: The GID to run the entrypoint of the container process.
               Uses runtime default if unset.
               May also be set in SecurityContext.  If set in both SecurityContext and
               PodSecurityContext, the value specified in SecurityContext takes precedence
               for that container.
               Note that this field cannot be set when spec.os.name is windows.
        :param pulumi.Input[bool] run_as_non_root: Indicates that the container must run as a non-root user.
               If true, the Kubelet will validate the image at runtime to ensure that it
               does not run as UID 0 (root) and fail to start the container if it does.
               If unset or false, no such validation will be performed.
               May also be set in SecurityContext.  If set in both SecurityContext and
               PodSecurityContext, the value specified in SecurityContext takes precedence.
        :param pulumi.Input[int] run_as_user: The UID to run the entrypoint of the container process.
               Defaults to user specified in image metadata if unspecified.
               May also be set in SecurityContext.  If set in both SecurityContext and
               PodSecurityContext, the value specified in SecurityContext takes precedence
               for that container.
               Note that this field cannot be set when spec.os.name is windows.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] supplemental_groups: A list of groups applied to the first process run in each container, in addition
               to the container's primary GID, the fsGroup (if specified), and group memberships
               defined in the container image for the uid of the container process. If unspecified,
               no additional groups are added to any container. Note that group memberships
               defined in the container image for the uid of the container process are still effective,
               even if they are not included in this list.
               Note that this field cannot be set when spec.os.name is windows.
        :param pulumi.Input[Sequence[pulumi.Input['IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSysctlsPatchArgs']]] sysctls: Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported
               sysctls (by the container runtime) might fail to launch.
               Note that this field cannot be set when spec.os.name is windows.
        """
        if fs_group is not None:
            pulumi.set(__self__, "fs_group", fs_group)
        if fs_group_change_policy is not None:
            pulumi.set(__self__, "fs_group_change_policy", fs_group_change_policy)
        if run_as_group is not None:
            pulumi.set(__self__, "run_as_group", run_as_group)
        if run_as_non_root is not None:
            pulumi.set(__self__, "run_as_non_root", run_as_non_root)
        if run_as_user is not None:
            pulumi.set(__self__, "run_as_user", run_as_user)
        if se_linux_options is not None:
            pulumi.set(__self__, "se_linux_options", se_linux_options)
        if seccomp_profile is not None:
            pulumi.set(__self__, "seccomp_profile", seccomp_profile)
        if supplemental_groups is not None:
            pulumi.set(__self__, "supplemental_groups", supplemental_groups)
        if sysctls is not None:
            pulumi.set(__self__, "sysctls", sysctls)

    @property
    @pulumi.getter(name="fsGroup")
    def fs_group(self) -> Optional[pulumi.Input[int]]:
        """
        A special supplemental group that applies to all containers in a pod.
        Some volume types allow the Kubelet to change the ownership of that volume
        to be owned by the pod:

        1. The owning GID will be the FSGroup
        2. The setgid bit is set (new files created in the volume will be owned by FSGroup)
        3. The permission bits are OR'd with rw-rw----

        If unset, the Kubelet will not modify the ownership and permissions of any volume.
        Note that this field cannot be set when spec.os.name is windows.
        """
        return pulumi.get(self, "fs_group")

    @fs_group.setter
    def fs_group(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fs_group", value)

    @property
    @pulumi.getter(name="fsGroupChangePolicy")
    def fs_group_change_policy(self) -> Optional[pulumi.Input[str]]:
        """
        fsGroupChangePolicy defines behavior of changing ownership and permission of the volume
        before being exposed inside Pod. This field will only apply to
        volume types which support fsGroup based ownership(and permissions).
        It will have no effect on ephemeral volume types such as: secret, configmaps
        and emptydir.
        Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used.
        Note that this field cannot be set when spec.os.name is windows.
        """
        return pulumi.get(self, "fs_group_change_policy")

    @fs_group_change_policy.setter
    def fs_group_change_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fs_group_change_policy", value)

    @property
    @pulumi.getter(name="runAsGroup")
    def run_as_group(self) -> Optional[pulumi.Input[int]]:
        """
        The GID to run the entrypoint of the container process.
        Uses runtime default if unset.
        May also be set in SecurityContext.  If set in both SecurityContext and
        PodSecurityContext, the value specified in SecurityContext takes precedence
        for that container.
        Note that this field cannot be set when spec.os.name is windows.
        """
        return pulumi.get(self, "run_as_group")

    @run_as_group.setter
    def run_as_group(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "run_as_group", value)

    @property
    @pulumi.getter(name="runAsNonRoot")
    def run_as_non_root(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates that the container must run as a non-root user.
        If true, the Kubelet will validate the image at runtime to ensure that it
        does not run as UID 0 (root) and fail to start the container if it does.
        If unset or false, no such validation will be performed.
        May also be set in SecurityContext.  If set in both SecurityContext and
        PodSecurityContext, the value specified in SecurityContext takes precedence.
        """
        return pulumi.get(self, "run_as_non_root")

    @run_as_non_root.setter
    def run_as_non_root(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "run_as_non_root", value)

    @property
    @pulumi.getter(name="runAsUser")
    def run_as_user(self) -> Optional[pulumi.Input[int]]:
        """
        The UID to run the entrypoint of the container process.
        Defaults to user specified in image metadata if unspecified.
        May also be set in SecurityContext.  If set in both SecurityContext and
        PodSecurityContext, the value specified in SecurityContext takes precedence
        for that container.
        Note that this field cannot be set when spec.os.name is windows.
        """
        return pulumi.get(self, "run_as_user")

    @run_as_user.setter
    def run_as_user(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "run_as_user", value)

    @property
    @pulumi.getter(name="seLinuxOptions")
    def se_linux_options(
        self,
    ) -> Optional[
        pulumi.Input[
            "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSeLinuxOptionsPatchArgs"
        ]
    ]:
        return pulumi.get(self, "se_linux_options")

    @se_linux_options.setter
    def se_linux_options(
        self,
        value: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSeLinuxOptionsPatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "se_linux_options", value)

    @property
    @pulumi.getter(name="seccompProfile")
    def seccomp_profile(
        self,
    ) -> Optional[
        pulumi.Input[
            "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSeccompProfilePatchArgs"
        ]
    ]:
        return pulumi.get(self, "seccomp_profile")

    @seccomp_profile.setter
    def seccomp_profile(
        self,
        value: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSeccompProfilePatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "seccomp_profile", value)

    @property
    @pulumi.getter(name="supplementalGroups")
    def supplemental_groups(
        self,
    ) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        A list of groups applied to the first process run in each container, in addition
        to the container's primary GID, the fsGroup (if specified), and group memberships
        defined in the container image for the uid of the container process. If unspecified,
        no additional groups are added to any container. Note that group memberships
        defined in the container image for the uid of the container process are still effective,
        even if they are not included in this list.
        Note that this field cannot be set when spec.os.name is windows.
        """
        return pulumi.get(self, "supplemental_groups")

    @supplemental_groups.setter
    def supplemental_groups(
        self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]
    ):
        pulumi.set(self, "supplemental_groups", value)

    @property
    @pulumi.getter
    def sysctls(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSysctlsPatchArgs"
                ]
            ]
        ]
    ]:
        """
        Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported
        sysctls (by the container runtime) might fail to launch.
        Note that this field cannot be set when spec.os.name is windows.
        """
        return pulumi.get(self, "sysctls")

    @sysctls.setter
    def sysctls(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSysctlsPatchArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "sysctls", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSeLinuxOptionsPatchArgsDict(
        TypedDict
    ):
        """
        The SELinux context to be applied to all containers.
        If unspecified, the container runtime will allocate a random SELinux context for each
        container.  May also be set in SecurityContext.  If set in
        both SecurityContext and PodSecurityContext, the value specified in SecurityContext
        takes precedence for that container.
        Note that this field cannot be set when spec.os.name is windows.
        """

        level: NotRequired[pulumi.Input[str]]
        """
        Level is SELinux level label that applies to the container.
        """
        role: NotRequired[pulumi.Input[str]]
        """
        Role is a SELinux role label that applies to the container.
        """
        type: NotRequired[pulumi.Input[str]]
        """
        Type is a SELinux type label that applies to the container.
        """
        user: NotRequired[pulumi.Input[str]]
        """
        User is a SELinux user label that applies to the container.
        """

elif False:
    IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSeLinuxOptionsPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSeLinuxOptionsPatchArgs:
    def __init__(
        __self__,
        *,
        level: Optional[pulumi.Input[str]] = None,
        role: Optional[pulumi.Input[str]] = None,
        type: Optional[pulumi.Input[str]] = None,
        user: Optional[pulumi.Input[str]] = None
    ):
        """
        The SELinux context to be applied to all containers.
        If unspecified, the container runtime will allocate a random SELinux context for each
        container.  May also be set in SecurityContext.  If set in
        both SecurityContext and PodSecurityContext, the value specified in SecurityContext
        takes precedence for that container.
        Note that this field cannot be set when spec.os.name is windows.
        :param pulumi.Input[str] level: Level is SELinux level label that applies to the container.
        :param pulumi.Input[str] role: Role is a SELinux role label that applies to the container.
        :param pulumi.Input[str] type: Type is a SELinux type label that applies to the container.
        :param pulumi.Input[str] user: User is a SELinux user label that applies to the container.
        """
        if level is not None:
            pulumi.set(__self__, "level", level)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        """
        Level is SELinux level label that applies to the container.
        """
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input[str]]:
        """
        Role is a SELinux role label that applies to the container.
        """
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Type is a SELinux type label that applies to the container.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def user(self) -> Optional[pulumi.Input[str]]:
        """
        User is a SELinux user label that applies to the container.
        """
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSeLinuxOptionsArgsDict(
        TypedDict
    ):
        """
        The SELinux context to be applied to all containers.
        If unspecified, the container runtime will allocate a random SELinux context for each
        container.  May also be set in SecurityContext.  If set in
        both SecurityContext and PodSecurityContext, the value specified in SecurityContext
        takes precedence for that container.
        Note that this field cannot be set when spec.os.name is windows.
        """

        level: NotRequired[pulumi.Input[str]]
        """
        Level is SELinux level label that applies to the container.
        """
        role: NotRequired[pulumi.Input[str]]
        """
        Role is a SELinux role label that applies to the container.
        """
        type: NotRequired[pulumi.Input[str]]
        """
        Type is a SELinux type label that applies to the container.
        """
        user: NotRequired[pulumi.Input[str]]
        """
        User is a SELinux user label that applies to the container.
        """

elif False:
    IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSeLinuxOptionsArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSeLinuxOptionsArgs:
    def __init__(
        __self__,
        *,
        level: Optional[pulumi.Input[str]] = None,
        role: Optional[pulumi.Input[str]] = None,
        type: Optional[pulumi.Input[str]] = None,
        user: Optional[pulumi.Input[str]] = None
    ):
        """
        The SELinux context to be applied to all containers.
        If unspecified, the container runtime will allocate a random SELinux context for each
        container.  May also be set in SecurityContext.  If set in
        both SecurityContext and PodSecurityContext, the value specified in SecurityContext
        takes precedence for that container.
        Note that this field cannot be set when spec.os.name is windows.
        :param pulumi.Input[str] level: Level is SELinux level label that applies to the container.
        :param pulumi.Input[str] role: Role is a SELinux role label that applies to the container.
        :param pulumi.Input[str] type: Type is a SELinux type label that applies to the container.
        :param pulumi.Input[str] user: User is a SELinux user label that applies to the container.
        """
        if level is not None:
            pulumi.set(__self__, "level", level)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        """
        Level is SELinux level label that applies to the container.
        """
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input[str]]:
        """
        Role is a SELinux role label that applies to the container.
        """
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Type is a SELinux type label that applies to the container.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def user(self) -> Optional[pulumi.Input[str]]:
        """
        User is a SELinux user label that applies to the container.
        """
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSeccompProfilePatchArgsDict(
        TypedDict
    ):
        """
        The seccomp options to use by the containers in this pod.
        Note that this field cannot be set when spec.os.name is windows.
        """

        localhost_profile: NotRequired[pulumi.Input[str]]
        """
        localhostProfile indicates a profile defined in a file on the node should be used.
        The profile must be preconfigured on the node to work.
        Must be a descending path, relative to the kubelet's configured seccomp profile location.
        Must be set if type is "Localhost". Must NOT be set for any other type.
        """
        type: NotRequired[pulumi.Input[str]]
        """
        type indicates which kind of seccomp profile will be applied.
        Valid options are:

        Localhost - a profile defined in a file on the node should be used.
        RuntimeDefault - the container runtime default profile should be used.
        Unconfined - no profile should be applied.
        """

elif False:
    IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSeccompProfilePatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSeccompProfilePatchArgs:
    def __init__(
        __self__,
        *,
        localhost_profile: Optional[pulumi.Input[str]] = None,
        type: Optional[pulumi.Input[str]] = None
    ):
        """
        The seccomp options to use by the containers in this pod.
        Note that this field cannot be set when spec.os.name is windows.
        :param pulumi.Input[str] localhost_profile: localhostProfile indicates a profile defined in a file on the node should be used.
               The profile must be preconfigured on the node to work.
               Must be a descending path, relative to the kubelet's configured seccomp profile location.
               Must be set if type is "Localhost". Must NOT be set for any other type.
        :param pulumi.Input[str] type: type indicates which kind of seccomp profile will be applied.
               Valid options are:

               Localhost - a profile defined in a file on the node should be used.
               RuntimeDefault - the container runtime default profile should be used.
               Unconfined - no profile should be applied.
        """
        if localhost_profile is not None:
            pulumi.set(__self__, "localhost_profile", localhost_profile)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="localhostProfile")
    def localhost_profile(self) -> Optional[pulumi.Input[str]]:
        """
        localhostProfile indicates a profile defined in a file on the node should be used.
        The profile must be preconfigured on the node to work.
        Must be a descending path, relative to the kubelet's configured seccomp profile location.
        Must be set if type is "Localhost". Must NOT be set for any other type.
        """
        return pulumi.get(self, "localhost_profile")

    @localhost_profile.setter
    def localhost_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "localhost_profile", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        type indicates which kind of seccomp profile will be applied.
        Valid options are:

        Localhost - a profile defined in a file on the node should be used.
        RuntimeDefault - the container runtime default profile should be used.
        Unconfined - no profile should be applied.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSeccompProfileArgsDict(
        TypedDict
    ):
        """
        The seccomp options to use by the containers in this pod.
        Note that this field cannot be set when spec.os.name is windows.
        """

        localhost_profile: NotRequired[pulumi.Input[str]]
        """
        localhostProfile indicates a profile defined in a file on the node should be used.
        The profile must be preconfigured on the node to work.
        Must be a descending path, relative to the kubelet's configured seccomp profile location.
        Must be set if type is "Localhost". Must NOT be set for any other type.
        """
        type: NotRequired[pulumi.Input[str]]
        """
        type indicates which kind of seccomp profile will be applied.
        Valid options are:

        Localhost - a profile defined in a file on the node should be used.
        RuntimeDefault - the container runtime default profile should be used.
        Unconfined - no profile should be applied.
        """

elif False:
    IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSeccompProfileArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSeccompProfileArgs:
    def __init__(
        __self__,
        *,
        localhost_profile: Optional[pulumi.Input[str]] = None,
        type: Optional[pulumi.Input[str]] = None
    ):
        """
        The seccomp options to use by the containers in this pod.
        Note that this field cannot be set when spec.os.name is windows.
        :param pulumi.Input[str] localhost_profile: localhostProfile indicates a profile defined in a file on the node should be used.
               The profile must be preconfigured on the node to work.
               Must be a descending path, relative to the kubelet's configured seccomp profile location.
               Must be set if type is "Localhost". Must NOT be set for any other type.
        :param pulumi.Input[str] type: type indicates which kind of seccomp profile will be applied.
               Valid options are:

               Localhost - a profile defined in a file on the node should be used.
               RuntimeDefault - the container runtime default profile should be used.
               Unconfined - no profile should be applied.
        """
        if localhost_profile is not None:
            pulumi.set(__self__, "localhost_profile", localhost_profile)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="localhostProfile")
    def localhost_profile(self) -> Optional[pulumi.Input[str]]:
        """
        localhostProfile indicates a profile defined in a file on the node should be used.
        The profile must be preconfigured on the node to work.
        Must be a descending path, relative to the kubelet's configured seccomp profile location.
        Must be set if type is "Localhost". Must NOT be set for any other type.
        """
        return pulumi.get(self, "localhost_profile")

    @localhost_profile.setter
    def localhost_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "localhost_profile", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        type indicates which kind of seccomp profile will be applied.
        Valid options are:

        Localhost - a profile defined in a file on the node should be used.
        RuntimeDefault - the container runtime default profile should be used.
        Unconfined - no profile should be applied.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSysctlsPatchArgsDict(
        TypedDict
    ):
        """
        Sysctl defines a kernel parameter to be set
        """

        name: NotRequired[pulumi.Input[str]]
        """
        Name of a property to set
        """
        value: NotRequired[pulumi.Input[str]]
        """
        Value of a property to set
        """

elif False:
    IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSysctlsPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSysctlsPatchArgs:
    def __init__(
        __self__,
        *,
        name: Optional[pulumi.Input[str]] = None,
        value: Optional[pulumi.Input[str]] = None
    ):
        """
        Sysctl defines a kernel parameter to be set
        :param pulumi.Input[str] name: Name of a property to set
        :param pulumi.Input[str] value: Value of a property to set
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of a property to set
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Value of a property to set
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSysctlsArgsDict(
        TypedDict
    ):
        """
        Sysctl defines a kernel parameter to be set
        """

        name: NotRequired[pulumi.Input[str]]
        """
        Name of a property to set
        """
        value: NotRequired[pulumi.Input[str]]
        """
        Value of a property to set
        """

elif False:
    IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSysctlsArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSysctlsArgs:
    def __init__(
        __self__,
        *,
        name: Optional[pulumi.Input[str]] = None,
        value: Optional[pulumi.Input[str]] = None
    ):
        """
        Sysctl defines a kernel parameter to be set
        :param pulumi.Input[str] name: Name of a property to set
        :param pulumi.Input[str] value: Value of a property to set
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of a property to set
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Value of a property to set
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextArgsDict(
        TypedDict
    ):
        """
        If specified, the pod's security context
        """

        fs_group: NotRequired[pulumi.Input[int]]
        """
        A special supplemental group that applies to all containers in a pod.
        Some volume types allow the Kubelet to change the ownership of that volume
        to be owned by the pod:

        1. The owning GID will be the FSGroup
        2. The setgid bit is set (new files created in the volume will be owned by FSGroup)
        3. The permission bits are OR'd with rw-rw----

        If unset, the Kubelet will not modify the ownership and permissions of any volume.
        Note that this field cannot be set when spec.os.name is windows.
        """
        fs_group_change_policy: NotRequired[pulumi.Input[str]]
        """
        fsGroupChangePolicy defines behavior of changing ownership and permission of the volume
        before being exposed inside Pod. This field will only apply to
        volume types which support fsGroup based ownership(and permissions).
        It will have no effect on ephemeral volume types such as: secret, configmaps
        and emptydir.
        Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used.
        Note that this field cannot be set when spec.os.name is windows.
        """
        run_as_group: NotRequired[pulumi.Input[int]]
        """
        The GID to run the entrypoint of the container process.
        Uses runtime default if unset.
        May also be set in SecurityContext.  If set in both SecurityContext and
        PodSecurityContext, the value specified in SecurityContext takes precedence
        for that container.
        Note that this field cannot be set when spec.os.name is windows.
        """
        run_as_non_root: NotRequired[pulumi.Input[bool]]
        """
        Indicates that the container must run as a non-root user.
        If true, the Kubelet will validate the image at runtime to ensure that it
        does not run as UID 0 (root) and fail to start the container if it does.
        If unset or false, no such validation will be performed.
        May also be set in SecurityContext.  If set in both SecurityContext and
        PodSecurityContext, the value specified in SecurityContext takes precedence.
        """
        run_as_user: NotRequired[pulumi.Input[int]]
        """
        The UID to run the entrypoint of the container process.
        Defaults to user specified in image metadata if unspecified.
        May also be set in SecurityContext.  If set in both SecurityContext and
        PodSecurityContext, the value specified in SecurityContext takes precedence
        for that container.
        Note that this field cannot be set when spec.os.name is windows.
        """
        se_linux_options: NotRequired[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSeLinuxOptionsArgsDict"
            ]
        ]
        seccomp_profile: NotRequired[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSeccompProfileArgsDict"
            ]
        ]
        supplemental_groups: NotRequired[pulumi.Input[Sequence[pulumi.Input[int]]]]
        """
        A list of groups applied to the first process run in each container, in addition
        to the container's primary GID, the fsGroup (if specified), and group memberships
        defined in the container image for the uid of the container process. If unspecified,
        no additional groups are added to any container. Note that group memberships
        defined in the container image for the uid of the container process are still effective,
        even if they are not included in this list.
        Note that this field cannot be set when spec.os.name is windows.
        """
        sysctls: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSysctlsArgsDict"
                    ]
                ]
            ]
        ]
        """
        Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported
        sysctls (by the container runtime) might fail to launch.
        Note that this field cannot be set when spec.os.name is windows.
        """

elif False:
    IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextArgs:
    def __init__(
        __self__,
        *,
        fs_group: Optional[pulumi.Input[int]] = None,
        fs_group_change_policy: Optional[pulumi.Input[str]] = None,
        run_as_group: Optional[pulumi.Input[int]] = None,
        run_as_non_root: Optional[pulumi.Input[bool]] = None,
        run_as_user: Optional[pulumi.Input[int]] = None,
        se_linux_options: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSeLinuxOptionsArgs"
            ]
        ] = None,
        seccomp_profile: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSeccompProfileArgs"
            ]
        ] = None,
        supplemental_groups: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
        sysctls: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSysctlsArgs"
                    ]
                ]
            ]
        ] = None
    ):
        """
        If specified, the pod's security context
        :param pulumi.Input[int] fs_group: A special supplemental group that applies to all containers in a pod.
               Some volume types allow the Kubelet to change the ownership of that volume
               to be owned by the pod:

               1. The owning GID will be the FSGroup
               2. The setgid bit is set (new files created in the volume will be owned by FSGroup)
               3. The permission bits are OR'd with rw-rw----

               If unset, the Kubelet will not modify the ownership and permissions of any volume.
               Note that this field cannot be set when spec.os.name is windows.
        :param pulumi.Input[str] fs_group_change_policy: fsGroupChangePolicy defines behavior of changing ownership and permission of the volume
               before being exposed inside Pod. This field will only apply to
               volume types which support fsGroup based ownership(and permissions).
               It will have no effect on ephemeral volume types such as: secret, configmaps
               and emptydir.
               Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used.
               Note that this field cannot be set when spec.os.name is windows.
        :param pulumi.Input[int] run_as_group: The GID to run the entrypoint of the container process.
               Uses runtime default if unset.
               May also be set in SecurityContext.  If set in both SecurityContext and
               PodSecurityContext, the value specified in SecurityContext takes precedence
               for that container.
               Note that this field cannot be set when spec.os.name is windows.
        :param pulumi.Input[bool] run_as_non_root: Indicates that the container must run as a non-root user.
               If true, the Kubelet will validate the image at runtime to ensure that it
               does not run as UID 0 (root) and fail to start the container if it does.
               If unset or false, no such validation will be performed.
               May also be set in SecurityContext.  If set in both SecurityContext and
               PodSecurityContext, the value specified in SecurityContext takes precedence.
        :param pulumi.Input[int] run_as_user: The UID to run the entrypoint of the container process.
               Defaults to user specified in image metadata if unspecified.
               May also be set in SecurityContext.  If set in both SecurityContext and
               PodSecurityContext, the value specified in SecurityContext takes precedence
               for that container.
               Note that this field cannot be set when spec.os.name is windows.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] supplemental_groups: A list of groups applied to the first process run in each container, in addition
               to the container's primary GID, the fsGroup (if specified), and group memberships
               defined in the container image for the uid of the container process. If unspecified,
               no additional groups are added to any container. Note that group memberships
               defined in the container image for the uid of the container process are still effective,
               even if they are not included in this list.
               Note that this field cannot be set when spec.os.name is windows.
        :param pulumi.Input[Sequence[pulumi.Input['IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSysctlsArgs']]] sysctls: Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported
               sysctls (by the container runtime) might fail to launch.
               Note that this field cannot be set when spec.os.name is windows.
        """
        if fs_group is not None:
            pulumi.set(__self__, "fs_group", fs_group)
        if fs_group_change_policy is not None:
            pulumi.set(__self__, "fs_group_change_policy", fs_group_change_policy)
        if run_as_group is not None:
            pulumi.set(__self__, "run_as_group", run_as_group)
        if run_as_non_root is not None:
            pulumi.set(__self__, "run_as_non_root", run_as_non_root)
        if run_as_user is not None:
            pulumi.set(__self__, "run_as_user", run_as_user)
        if se_linux_options is not None:
            pulumi.set(__self__, "se_linux_options", se_linux_options)
        if seccomp_profile is not None:
            pulumi.set(__self__, "seccomp_profile", seccomp_profile)
        if supplemental_groups is not None:
            pulumi.set(__self__, "supplemental_groups", supplemental_groups)
        if sysctls is not None:
            pulumi.set(__self__, "sysctls", sysctls)

    @property
    @pulumi.getter(name="fsGroup")
    def fs_group(self) -> Optional[pulumi.Input[int]]:
        """
        A special supplemental group that applies to all containers in a pod.
        Some volume types allow the Kubelet to change the ownership of that volume
        to be owned by the pod:

        1. The owning GID will be the FSGroup
        2. The setgid bit is set (new files created in the volume will be owned by FSGroup)
        3. The permission bits are OR'd with rw-rw----

        If unset, the Kubelet will not modify the ownership and permissions of any volume.
        Note that this field cannot be set when spec.os.name is windows.
        """
        return pulumi.get(self, "fs_group")

    @fs_group.setter
    def fs_group(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fs_group", value)

    @property
    @pulumi.getter(name="fsGroupChangePolicy")
    def fs_group_change_policy(self) -> Optional[pulumi.Input[str]]:
        """
        fsGroupChangePolicy defines behavior of changing ownership and permission of the volume
        before being exposed inside Pod. This field will only apply to
        volume types which support fsGroup based ownership(and permissions).
        It will have no effect on ephemeral volume types such as: secret, configmaps
        and emptydir.
        Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used.
        Note that this field cannot be set when spec.os.name is windows.
        """
        return pulumi.get(self, "fs_group_change_policy")

    @fs_group_change_policy.setter
    def fs_group_change_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fs_group_change_policy", value)

    @property
    @pulumi.getter(name="runAsGroup")
    def run_as_group(self) -> Optional[pulumi.Input[int]]:
        """
        The GID to run the entrypoint of the container process.
        Uses runtime default if unset.
        May also be set in SecurityContext.  If set in both SecurityContext and
        PodSecurityContext, the value specified in SecurityContext takes precedence
        for that container.
        Note that this field cannot be set when spec.os.name is windows.
        """
        return pulumi.get(self, "run_as_group")

    @run_as_group.setter
    def run_as_group(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "run_as_group", value)

    @property
    @pulumi.getter(name="runAsNonRoot")
    def run_as_non_root(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates that the container must run as a non-root user.
        If true, the Kubelet will validate the image at runtime to ensure that it
        does not run as UID 0 (root) and fail to start the container if it does.
        If unset or false, no such validation will be performed.
        May also be set in SecurityContext.  If set in both SecurityContext and
        PodSecurityContext, the value specified in SecurityContext takes precedence.
        """
        return pulumi.get(self, "run_as_non_root")

    @run_as_non_root.setter
    def run_as_non_root(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "run_as_non_root", value)

    @property
    @pulumi.getter(name="runAsUser")
    def run_as_user(self) -> Optional[pulumi.Input[int]]:
        """
        The UID to run the entrypoint of the container process.
        Defaults to user specified in image metadata if unspecified.
        May also be set in SecurityContext.  If set in both SecurityContext and
        PodSecurityContext, the value specified in SecurityContext takes precedence
        for that container.
        Note that this field cannot be set when spec.os.name is windows.
        """
        return pulumi.get(self, "run_as_user")

    @run_as_user.setter
    def run_as_user(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "run_as_user", value)

    @property
    @pulumi.getter(name="seLinuxOptions")
    def se_linux_options(
        self,
    ) -> Optional[
        pulumi.Input[
            "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSeLinuxOptionsArgs"
        ]
    ]:
        return pulumi.get(self, "se_linux_options")

    @se_linux_options.setter
    def se_linux_options(
        self,
        value: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSeLinuxOptionsArgs"
            ]
        ],
    ):
        pulumi.set(self, "se_linux_options", value)

    @property
    @pulumi.getter(name="seccompProfile")
    def seccomp_profile(
        self,
    ) -> Optional[
        pulumi.Input[
            "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSeccompProfileArgs"
        ]
    ]:
        return pulumi.get(self, "seccomp_profile")

    @seccomp_profile.setter
    def seccomp_profile(
        self,
        value: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSeccompProfileArgs"
            ]
        ],
    ):
        pulumi.set(self, "seccomp_profile", value)

    @property
    @pulumi.getter(name="supplementalGroups")
    def supplemental_groups(
        self,
    ) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        A list of groups applied to the first process run in each container, in addition
        to the container's primary GID, the fsGroup (if specified), and group memberships
        defined in the container image for the uid of the container process. If unspecified,
        no additional groups are added to any container. Note that group memberships
        defined in the container image for the uid of the container process are still effective,
        even if they are not included in this list.
        Note that this field cannot be set when spec.os.name is windows.
        """
        return pulumi.get(self, "supplemental_groups")

    @supplemental_groups.setter
    def supplemental_groups(
        self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]
    ):
        pulumi.set(self, "supplemental_groups", value)

    @property
    @pulumi.getter
    def sysctls(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSysctlsArgs"
                ]
            ]
        ]
    ]:
        """
        Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported
        sysctls (by the container runtime) might fail to launch.
        Note that this field cannot be set when spec.os.name is windows.
        """
        return pulumi.get(self, "sysctls")

    @sysctls.setter
    def sysctls(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSysctlsArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "sysctls", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecTolerationsPatchArgsDict(
        TypedDict
    ):
        """
        The pod this Toleration is attached to tolerates any taint that matches
        the triple <key,value,effect> using the matching operator <operator>.
        """

        effect: NotRequired[pulumi.Input[str]]
        """
        Effect indicates the taint effect to match. Empty means match all taint effects.
        When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
        """
        key: NotRequired[pulumi.Input[str]]
        """
        Key is the taint key that the toleration applies to. Empty means match all taint keys.
        If the key is empty, operator must be Exists; this combination means to match all values and all keys.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        Operator represents a key's relationship to the value.
        Valid operators are Exists and Equal. Defaults to Equal.
        Exists is equivalent to wildcard for value, so that a pod can
        tolerate all taints of a particular category.
        """
        toleration_seconds: NotRequired[pulumi.Input[int]]
        """
        TolerationSeconds represents the period of time the toleration (which must be
        of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,
        it is not set, which means tolerate the taint forever (do not evict). Zero and
        negative values will be treated as 0 (evict immediately) by the system.
        """
        value: NotRequired[pulumi.Input[str]]
        """
        Value is the taint value the toleration matches to.
        If the operator is Exists, the value should be empty, otherwise just a regular string.
        """

elif False:
    IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecTolerationsPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecTolerationsPatchArgs:
    def __init__(
        __self__,
        *,
        effect: Optional[pulumi.Input[str]] = None,
        key: Optional[pulumi.Input[str]] = None,
        operator: Optional[pulumi.Input[str]] = None,
        toleration_seconds: Optional[pulumi.Input[int]] = None,
        value: Optional[pulumi.Input[str]] = None
    ):
        """
        The pod this Toleration is attached to tolerates any taint that matches
        the triple <key,value,effect> using the matching operator <operator>.
        :param pulumi.Input[str] effect: Effect indicates the taint effect to match. Empty means match all taint effects.
               When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
        :param pulumi.Input[str] key: Key is the taint key that the toleration applies to. Empty means match all taint keys.
               If the key is empty, operator must be Exists; this combination means to match all values and all keys.
        :param pulumi.Input[str] operator: Operator represents a key's relationship to the value.
               Valid operators are Exists and Equal. Defaults to Equal.
               Exists is equivalent to wildcard for value, so that a pod can
               tolerate all taints of a particular category.
        :param pulumi.Input[int] toleration_seconds: TolerationSeconds represents the period of time the toleration (which must be
               of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,
               it is not set, which means tolerate the taint forever (do not evict). Zero and
               negative values will be treated as 0 (evict immediately) by the system.
        :param pulumi.Input[str] value: Value is the taint value the toleration matches to.
               If the operator is Exists, the value should be empty, otherwise just a regular string.
        """
        if effect is not None:
            pulumi.set(__self__, "effect", effect)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if toleration_seconds is not None:
            pulumi.set(__self__, "toleration_seconds", toleration_seconds)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def effect(self) -> Optional[pulumi.Input[str]]:
        """
        Effect indicates the taint effect to match. Empty means match all taint effects.
        When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
        """
        return pulumi.get(self, "effect")

    @effect.setter
    def effect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "effect", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        Key is the taint key that the toleration applies to. Empty means match all taint keys.
        If the key is empty, operator must be Exists; this combination means to match all values and all keys.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        Operator represents a key's relationship to the value.
        Valid operators are Exists and Equal. Defaults to Equal.
        Exists is equivalent to wildcard for value, so that a pod can
        tolerate all taints of a particular category.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter(name="tolerationSeconds")
    def toleration_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        TolerationSeconds represents the period of time the toleration (which must be
        of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,
        it is not set, which means tolerate the taint forever (do not evict). Zero and
        negative values will be treated as 0 (evict immediately) by the system.
        """
        return pulumi.get(self, "toleration_seconds")

    @toleration_seconds.setter
    def toleration_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "toleration_seconds", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Value is the taint value the toleration matches to.
        If the operator is Exists, the value should be empty, otherwise just a regular string.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecTolerationsArgsDict(
        TypedDict
    ):
        """
        The pod this Toleration is attached to tolerates any taint that matches
        the triple <key,value,effect> using the matching operator <operator>.
        """

        effect: NotRequired[pulumi.Input[str]]
        """
        Effect indicates the taint effect to match. Empty means match all taint effects.
        When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
        """
        key: NotRequired[pulumi.Input[str]]
        """
        Key is the taint key that the toleration applies to. Empty means match all taint keys.
        If the key is empty, operator must be Exists; this combination means to match all values and all keys.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        Operator represents a key's relationship to the value.
        Valid operators are Exists and Equal. Defaults to Equal.
        Exists is equivalent to wildcard for value, so that a pod can
        tolerate all taints of a particular category.
        """
        toleration_seconds: NotRequired[pulumi.Input[int]]
        """
        TolerationSeconds represents the period of time the toleration (which must be
        of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,
        it is not set, which means tolerate the taint forever (do not evict). Zero and
        negative values will be treated as 0 (evict immediately) by the system.
        """
        value: NotRequired[pulumi.Input[str]]
        """
        Value is the taint value the toleration matches to.
        If the operator is Exists, the value should be empty, otherwise just a regular string.
        """

elif False:
    IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecTolerationsArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecTolerationsArgs:
    def __init__(
        __self__,
        *,
        effect: Optional[pulumi.Input[str]] = None,
        key: Optional[pulumi.Input[str]] = None,
        operator: Optional[pulumi.Input[str]] = None,
        toleration_seconds: Optional[pulumi.Input[int]] = None,
        value: Optional[pulumi.Input[str]] = None
    ):
        """
        The pod this Toleration is attached to tolerates any taint that matches
        the triple <key,value,effect> using the matching operator <operator>.
        :param pulumi.Input[str] effect: Effect indicates the taint effect to match. Empty means match all taint effects.
               When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
        :param pulumi.Input[str] key: Key is the taint key that the toleration applies to. Empty means match all taint keys.
               If the key is empty, operator must be Exists; this combination means to match all values and all keys.
        :param pulumi.Input[str] operator: Operator represents a key's relationship to the value.
               Valid operators are Exists and Equal. Defaults to Equal.
               Exists is equivalent to wildcard for value, so that a pod can
               tolerate all taints of a particular category.
        :param pulumi.Input[int] toleration_seconds: TolerationSeconds represents the period of time the toleration (which must be
               of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,
               it is not set, which means tolerate the taint forever (do not evict). Zero and
               negative values will be treated as 0 (evict immediately) by the system.
        :param pulumi.Input[str] value: Value is the taint value the toleration matches to.
               If the operator is Exists, the value should be empty, otherwise just a regular string.
        """
        if effect is not None:
            pulumi.set(__self__, "effect", effect)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if toleration_seconds is not None:
            pulumi.set(__self__, "toleration_seconds", toleration_seconds)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def effect(self) -> Optional[pulumi.Input[str]]:
        """
        Effect indicates the taint effect to match. Empty means match all taint effects.
        When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
        """
        return pulumi.get(self, "effect")

    @effect.setter
    def effect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "effect", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        Key is the taint key that the toleration applies to. Empty means match all taint keys.
        If the key is empty, operator must be Exists; this combination means to match all values and all keys.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        Operator represents a key's relationship to the value.
        Valid operators are Exists and Equal. Defaults to Equal.
        Exists is equivalent to wildcard for value, so that a pod can
        tolerate all taints of a particular category.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter(name="tolerationSeconds")
    def toleration_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        TolerationSeconds represents the period of time the toleration (which must be
        of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,
        it is not set, which means tolerate the taint forever (do not evict). Zero and
        negative values will be treated as 0 (evict immediately) by the system.
        """
        return pulumi.get(self, "toleration_seconds")

    @toleration_seconds.setter
    def toleration_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "toleration_seconds", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Value is the taint value the toleration matches to.
        If the operator is Exists, the value should be empty, otherwise just a regular string.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecArgsDict(TypedDict):
        """
        PodSpec defines overrides for the HTTP01 challenge solver pod.
        Check ACMEChallengeSolverHTTP01IngressPodSpec to find out currently supported fields.
        All other fields will be ignored.
        """

        affinity: NotRequired[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityArgsDict"
            ]
        ]
        image_pull_secrets: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecImagePullSecretsArgsDict"
                    ]
                ]
            ]
        ]
        """
        If specified, the pod's imagePullSecrets
        """
        node_selector: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        NodeSelector is a selector which must be true for the pod to fit on a node.
        Selector which must match a node's labels for the pod to be scheduled on that node.
        More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
        """
        priority_class_name: NotRequired[pulumi.Input[str]]
        """
        If specified, the pod's priorityClassName.
        """
        security_context: NotRequired[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextArgsDict"
            ]
        ]
        service_account_name: NotRequired[pulumi.Input[str]]
        """
        If specified, the pod's service account
        """
        tolerations: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecTolerationsArgsDict"
                    ]
                ]
            ]
        ]
        """
        If specified, the pod's tolerations.
        """

elif False:
    IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecArgsDict: TypeAlias = (
        Mapping[str, Any]
    )


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecArgs:
    def __init__(
        __self__,
        *,
        affinity: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityArgs"
            ]
        ] = None,
        image_pull_secrets: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecImagePullSecretsArgs"
                    ]
                ]
            ]
        ] = None,
        node_selector: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
        priority_class_name: Optional[pulumi.Input[str]] = None,
        security_context: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextArgs"
            ]
        ] = None,
        service_account_name: Optional[pulumi.Input[str]] = None,
        tolerations: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecTolerationsArgs"
                    ]
                ]
            ]
        ] = None
    ):
        """
        PodSpec defines overrides for the HTTP01 challenge solver pod.
        Check ACMEChallengeSolverHTTP01IngressPodSpec to find out currently supported fields.
        All other fields will be ignored.
        :param pulumi.Input[Sequence[pulumi.Input['IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecImagePullSecretsArgs']]] image_pull_secrets: If specified, the pod's imagePullSecrets
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] node_selector: NodeSelector is a selector which must be true for the pod to fit on a node.
               Selector which must match a node's labels for the pod to be scheduled on that node.
               More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
        :param pulumi.Input[str] priority_class_name: If specified, the pod's priorityClassName.
        :param pulumi.Input[str] service_account_name: If specified, the pod's service account
        :param pulumi.Input[Sequence[pulumi.Input['IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecTolerationsArgs']]] tolerations: If specified, the pod's tolerations.
        """
        if affinity is not None:
            pulumi.set(__self__, "affinity", affinity)
        if image_pull_secrets is not None:
            pulumi.set(__self__, "image_pull_secrets", image_pull_secrets)
        if node_selector is not None:
            pulumi.set(__self__, "node_selector", node_selector)
        if priority_class_name is not None:
            pulumi.set(__self__, "priority_class_name", priority_class_name)
        if security_context is not None:
            pulumi.set(__self__, "security_context", security_context)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tolerations is not None:
            pulumi.set(__self__, "tolerations", tolerations)

    @property
    @pulumi.getter
    def affinity(
        self,
    ) -> Optional[
        pulumi.Input[
            "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityArgs"
        ]
    ]:
        return pulumi.get(self, "affinity")

    @affinity.setter
    def affinity(
        self,
        value: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityArgs"
            ]
        ],
    ):
        pulumi.set(self, "affinity", value)

    @property
    @pulumi.getter(name="imagePullSecrets")
    def image_pull_secrets(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecImagePullSecretsArgs"
                ]
            ]
        ]
    ]:
        """
        If specified, the pod's imagePullSecrets
        """
        return pulumi.get(self, "image_pull_secrets")

    @image_pull_secrets.setter
    def image_pull_secrets(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecImagePullSecretsArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "image_pull_secrets", value)

    @property
    @pulumi.getter(name="nodeSelector")
    def node_selector(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        NodeSelector is a selector which must be true for the pod to fit on a node.
        Selector which must match a node's labels for the pod to be scheduled on that node.
        More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
        """
        return pulumi.get(self, "node_selector")

    @node_selector.setter
    def node_selector(
        self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
    ):
        pulumi.set(self, "node_selector", value)

    @property
    @pulumi.getter(name="priorityClassName")
    def priority_class_name(self) -> Optional[pulumi.Input[str]]:
        """
        If specified, the pod's priorityClassName.
        """
        return pulumi.get(self, "priority_class_name")

    @priority_class_name.setter
    def priority_class_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "priority_class_name", value)

    @property
    @pulumi.getter(name="securityContext")
    def security_context(
        self,
    ) -> Optional[
        pulumi.Input[
            "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextArgs"
        ]
    ]:
        return pulumi.get(self, "security_context")

    @security_context.setter
    def security_context(
        self,
        value: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextArgs"
            ]
        ],
    ):
        pulumi.set(self, "security_context", value)

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[pulumi.Input[str]]:
        """
        If specified, the pod's service account
        """
        return pulumi.get(self, "service_account_name")

    @service_account_name.setter
    def service_account_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account_name", value)

    @property
    @pulumi.getter
    def tolerations(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecTolerationsArgs"
                ]
            ]
        ]
    ]:
        """
        If specified, the pod's tolerations.
        """
        return pulumi.get(self, "tolerations")

    @tolerations.setter
    def tolerations(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecTolerationsArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "tolerations", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateArgsDict(TypedDict):
        """
        Optional pod template used to configure the ACME challenge solver pods
        used for HTTP01 challenges.
        """

        metadata: NotRequired[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateMetadataArgsDict"
            ]
        ]
        spec: NotRequired[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecArgsDict"
            ]
        ]

elif False:
    IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateArgs:
    def __init__(
        __self__,
        *,
        metadata: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateMetadataArgs"
            ]
        ] = None,
        spec: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecArgs"
            ]
        ] = None
    ):
        """
        Optional pod template used to configure the ACME challenge solver pods
        used for HTTP01 challenges.
        """
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if spec is not None:
            pulumi.set(__self__, "spec", spec)

    @property
    @pulumi.getter
    def metadata(
        self,
    ) -> Optional[
        pulumi.Input[
            "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateMetadataArgs"
        ]
    ]:
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(
        self,
        value: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateMetadataArgs"
            ]
        ],
    ):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter
    def spec(
        self,
    ) -> Optional[
        pulumi.Input["IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecArgs"]
    ]:
        return pulumi.get(self, "spec")

    @spec.setter
    def spec(
        self,
        value: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecArgs"
            ]
        ],
    ):
        pulumi.set(self, "spec", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01GatewayHTTPRouteArgsDict(TypedDict):
        """
        The Gateway API is a sig-network community API that models service networking
        in Kubernetes (https://gateway-api.sigs.k8s.io/). The Gateway solver will
        create HTTPRoutes with the specified labels in the same namespace as the challenge.
        This solver is experimental, and fields / behaviour may change in the future.
        """

        labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Custom labels that will be applied to HTTPRoutes created by cert-manager
        while solving HTTP-01 challenges.
        """
        parent_refs: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01GatewayHTTPRouteParentRefsArgsDict"
                    ]
                ]
            ]
        ]
        """
        When solving an HTTP-01 challenge, cert-manager creates an HTTPRoute.
        cert-manager needs to know which parentRefs should be used when creating
        the HTTPRoute. Usually, the parentRef references a Gateway. See:
        https://gateway-api.sigs.k8s.io/api-types/httproute/#attaching-to-gateways
        """
        pod_template: NotRequired[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateArgsDict"
            ]
        ]
        service_type: NotRequired[pulumi.Input[str]]
        """
        Optional service type for Kubernetes solver service. Supported values
        are NodePort or ClusterIP. If unset, defaults to NodePort.
        """

elif False:
    IssuerSpecAcmeSolversHttp01GatewayHTTPRouteArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01GatewayHTTPRouteArgs:
    def __init__(
        __self__,
        *,
        labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
        parent_refs: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01GatewayHTTPRouteParentRefsArgs"
                    ]
                ]
            ]
        ] = None,
        pod_template: Optional[
            pulumi.Input["IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateArgs"]
        ] = None,
        service_type: Optional[pulumi.Input[str]] = None
    ):
        """
        The Gateway API is a sig-network community API that models service networking
        in Kubernetes (https://gateway-api.sigs.k8s.io/). The Gateway solver will
        create HTTPRoutes with the specified labels in the same namespace as the challenge.
        This solver is experimental, and fields / behaviour may change in the future.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: Custom labels that will be applied to HTTPRoutes created by cert-manager
               while solving HTTP-01 challenges.
        :param pulumi.Input[Sequence[pulumi.Input['IssuerSpecAcmeSolversHttp01GatewayHTTPRouteParentRefsArgs']]] parent_refs: When solving an HTTP-01 challenge, cert-manager creates an HTTPRoute.
               cert-manager needs to know which parentRefs should be used when creating
               the HTTPRoute. Usually, the parentRef references a Gateway. See:
               https://gateway-api.sigs.k8s.io/api-types/httproute/#attaching-to-gateways
        :param pulumi.Input[str] service_type: Optional service type for Kubernetes solver service. Supported values
               are NodePort or ClusterIP. If unset, defaults to NodePort.
        """
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if parent_refs is not None:
            pulumi.set(__self__, "parent_refs", parent_refs)
        if pod_template is not None:
            pulumi.set(__self__, "pod_template", pod_template)
        if service_type is not None:
            pulumi.set(__self__, "service_type", service_type)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Custom labels that will be applied to HTTPRoutes created by cert-manager
        while solving HTTP-01 challenges.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter(name="parentRefs")
    def parent_refs(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "IssuerSpecAcmeSolversHttp01GatewayHTTPRouteParentRefsArgs"
                ]
            ]
        ]
    ]:
        """
        When solving an HTTP-01 challenge, cert-manager creates an HTTPRoute.
        cert-manager needs to know which parentRefs should be used when creating
        the HTTPRoute. Usually, the parentRef references a Gateway. See:
        https://gateway-api.sigs.k8s.io/api-types/httproute/#attaching-to-gateways
        """
        return pulumi.get(self, "parent_refs")

    @parent_refs.setter
    def parent_refs(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01GatewayHTTPRouteParentRefsArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "parent_refs", value)

    @property
    @pulumi.getter(name="podTemplate")
    def pod_template(
        self,
    ) -> Optional[
        pulumi.Input["IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateArgs"]
    ]:
        return pulumi.get(self, "pod_template")

    @pod_template.setter
    def pod_template(
        self,
        value: Optional[
            pulumi.Input["IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateArgs"]
        ],
    ):
        pulumi.set(self, "pod_template", value)

    @property
    @pulumi.getter(name="serviceType")
    def service_type(self) -> Optional[pulumi.Input[str]]:
        """
        Optional service type for Kubernetes solver service. Supported values
        are NodePort or ClusterIP. If unset, defaults to NodePort.
        """
        return pulumi.get(self, "service_type")

    @service_type.setter
    def service_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_type", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01IngressIngressTemplateMetadataPatchArgsDict(
        TypedDict
    ):
        """
        ObjectMeta overrides for the ingress used to solve HTTP01 challenges.
        Only the 'labels' and 'annotations' fields may be set.
        If labels or annotations overlap with in-built values, the values here
        will override the in-built values.
        """

        annotations: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Annotations that should be added to the created ACME HTTP01 solver ingress.
        """
        labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Labels that should be added to the created ACME HTTP01 solver ingress.
        """

elif False:
    IssuerSpecAcmeSolversHttp01IngressIngressTemplateMetadataPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01IngressIngressTemplateMetadataPatchArgs:
    def __init__(
        __self__,
        *,
        annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
        labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None
    ):
        """
        ObjectMeta overrides for the ingress used to solve HTTP01 challenges.
        Only the 'labels' and 'annotations' fields may be set.
        If labels or annotations overlap with in-built values, the values here
        will override the in-built values.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] annotations: Annotations that should be added to the created ACME HTTP01 solver ingress.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: Labels that should be added to the created ACME HTTP01 solver ingress.
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Annotations that should be added to the created ACME HTTP01 solver ingress.
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(
        self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
    ):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Labels that should be added to the created ACME HTTP01 solver ingress.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01IngressIngressTemplateMetadataArgsDict(TypedDict):
        """
        ObjectMeta overrides for the ingress used to solve HTTP01 challenges.
        Only the 'labels' and 'annotations' fields may be set.
        If labels or annotations overlap with in-built values, the values here
        will override the in-built values.
        """

        annotations: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Annotations that should be added to the created ACME HTTP01 solver ingress.
        """
        labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Labels that should be added to the created ACME HTTP01 solver ingress.
        """

elif False:
    IssuerSpecAcmeSolversHttp01IngressIngressTemplateMetadataArgsDict: TypeAlias = (
        Mapping[str, Any]
    )


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01IngressIngressTemplateMetadataArgs:
    def __init__(
        __self__,
        *,
        annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
        labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None
    ):
        """
        ObjectMeta overrides for the ingress used to solve HTTP01 challenges.
        Only the 'labels' and 'annotations' fields may be set.
        If labels or annotations overlap with in-built values, the values here
        will override the in-built values.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] annotations: Annotations that should be added to the created ACME HTTP01 solver ingress.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: Labels that should be added to the created ACME HTTP01 solver ingress.
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Annotations that should be added to the created ACME HTTP01 solver ingress.
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(
        self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
    ):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Labels that should be added to the created ACME HTTP01 solver ingress.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01IngressIngressTemplatePatchArgsDict(TypedDict):
        """
        Optional ingress template used to configure the ACME challenge solver
        ingress used for HTTP01 challenges.
        """

        metadata: NotRequired[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01IngressIngressTemplateMetadataPatchArgsDict"
            ]
        ]

elif False:
    IssuerSpecAcmeSolversHttp01IngressIngressTemplatePatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01IngressIngressTemplatePatchArgs:
    def __init__(
        __self__,
        *,
        metadata: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01IngressIngressTemplateMetadataPatchArgs"
            ]
        ] = None
    ):
        """
        Optional ingress template used to configure the ACME challenge solver
        ingress used for HTTP01 challenges.
        """
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)

    @property
    @pulumi.getter
    def metadata(
        self,
    ) -> Optional[
        pulumi.Input[
            "IssuerSpecAcmeSolversHttp01IngressIngressTemplateMetadataPatchArgs"
        ]
    ]:
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(
        self,
        value: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01IngressIngressTemplateMetadataPatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "metadata", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01IngressIngressTemplateArgsDict(TypedDict):
        """
        Optional ingress template used to configure the ACME challenge solver
        ingress used for HTTP01 challenges.
        """

        metadata: NotRequired[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01IngressIngressTemplateMetadataArgsDict"
            ]
        ]

elif False:
    IssuerSpecAcmeSolversHttp01IngressIngressTemplateArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01IngressIngressTemplateArgs:
    def __init__(
        __self__,
        *,
        metadata: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01IngressIngressTemplateMetadataArgs"
            ]
        ] = None
    ):
        """
        Optional ingress template used to configure the ACME challenge solver
        ingress used for HTTP01 challenges.
        """
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)

    @property
    @pulumi.getter
    def metadata(
        self,
    ) -> Optional[
        pulumi.Input["IssuerSpecAcmeSolversHttp01IngressIngressTemplateMetadataArgs"]
    ]:
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(
        self,
        value: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01IngressIngressTemplateMetadataArgs"
            ]
        ],
    ):
        pulumi.set(self, "metadata", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01IngressPatchArgsDict(TypedDict):
        """
        The ingress based HTTP01 challenge solver will solve challenges by
        creating or modifying Ingress resources in order to route requests for
        '/.well-known/acme-challenge/XYZ' to 'challenge solver' pods that are
        provisioned by cert-manager for each Challenge to be completed.
        """

        class_: NotRequired[pulumi.Input[str]]
        """
        This field configures the annotation `kubernetes.io/ingress.class` when
        creating Ingress resources to solve ACME challenges that use this
        challenge solver. Only one of `class`, `name` or `ingressClassName` may
        be specified.
        """
        ingress_class_name: NotRequired[pulumi.Input[str]]
        """
        This field configures the field `ingressClassName` on the created Ingress
        resources used to solve ACME challenges that use this challenge solver.
        This is the recommended way of configuring the ingress class. Only one of
        `class`, `name` or `ingressClassName` may be specified.
        """
        ingress_template: NotRequired[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01IngressIngressTemplatePatchArgsDict"
            ]
        ]
        name: NotRequired[pulumi.Input[str]]
        """
        The name of the ingress resource that should have ACME challenge solving
        routes inserted into it in order to solve HTTP01 challenges.
        This is typically used in conjunction with ingress controllers like
        ingress-gce, which maintains a 1:1 mapping between external IPs and
        ingress resources. Only one of `class`, `name` or `ingressClassName` may
        be specified.
        """
        pod_template: NotRequired[
            pulumi.Input["IssuerSpecAcmeSolversHttp01IngressPodTemplatePatchArgsDict"]
        ]
        service_type: NotRequired[pulumi.Input[str]]
        """
        Optional service type for Kubernetes solver service. Supported values
        are NodePort or ClusterIP. If unset, defaults to NodePort.
        """

elif False:
    IssuerSpecAcmeSolversHttp01IngressPatchArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01IngressPatchArgs:
    def __init__(
        __self__,
        *,
        class_: Optional[pulumi.Input[str]] = None,
        ingress_class_name: Optional[pulumi.Input[str]] = None,
        ingress_template: Optional[
            pulumi.Input["IssuerSpecAcmeSolversHttp01IngressIngressTemplatePatchArgs"]
        ] = None,
        name: Optional[pulumi.Input[str]] = None,
        pod_template: Optional[
            pulumi.Input["IssuerSpecAcmeSolversHttp01IngressPodTemplatePatchArgs"]
        ] = None,
        service_type: Optional[pulumi.Input[str]] = None
    ):
        """
        The ingress based HTTP01 challenge solver will solve challenges by
        creating or modifying Ingress resources in order to route requests for
        '/.well-known/acme-challenge/XYZ' to 'challenge solver' pods that are
        provisioned by cert-manager for each Challenge to be completed.
        :param pulumi.Input[str] class_: This field configures the annotation `kubernetes.io/ingress.class` when
               creating Ingress resources to solve ACME challenges that use this
               challenge solver. Only one of `class`, `name` or `ingressClassName` may
               be specified.
        :param pulumi.Input[str] ingress_class_name: This field configures the field `ingressClassName` on the created Ingress
               resources used to solve ACME challenges that use this challenge solver.
               This is the recommended way of configuring the ingress class. Only one of
               `class`, `name` or `ingressClassName` may be specified.
        :param pulumi.Input[str] name: The name of the ingress resource that should have ACME challenge solving
               routes inserted into it in order to solve HTTP01 challenges.
               This is typically used in conjunction with ingress controllers like
               ingress-gce, which maintains a 1:1 mapping between external IPs and
               ingress resources. Only one of `class`, `name` or `ingressClassName` may
               be specified.
        :param pulumi.Input[str] service_type: Optional service type for Kubernetes solver service. Supported values
               are NodePort or ClusterIP. If unset, defaults to NodePort.
        """
        if class_ is not None:
            pulumi.set(__self__, "class_", class_)
        if ingress_class_name is not None:
            pulumi.set(__self__, "ingress_class_name", ingress_class_name)
        if ingress_template is not None:
            pulumi.set(__self__, "ingress_template", ingress_template)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if pod_template is not None:
            pulumi.set(__self__, "pod_template", pod_template)
        if service_type is not None:
            pulumi.set(__self__, "service_type", service_type)

    @property
    @pulumi.getter(name="class")
    def class_(self) -> Optional[pulumi.Input[str]]:
        """
        This field configures the annotation `kubernetes.io/ingress.class` when
        creating Ingress resources to solve ACME challenges that use this
        challenge solver. Only one of `class`, `name` or `ingressClassName` may
        be specified.
        """
        return pulumi.get(self, "class_")

    @class_.setter
    def class_(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "class_", value)

    @property
    @pulumi.getter(name="ingressClassName")
    def ingress_class_name(self) -> Optional[pulumi.Input[str]]:
        """
        This field configures the field `ingressClassName` on the created Ingress
        resources used to solve ACME challenges that use this challenge solver.
        This is the recommended way of configuring the ingress class. Only one of
        `class`, `name` or `ingressClassName` may be specified.
        """
        return pulumi.get(self, "ingress_class_name")

    @ingress_class_name.setter
    def ingress_class_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ingress_class_name", value)

    @property
    @pulumi.getter(name="ingressTemplate")
    def ingress_template(
        self,
    ) -> Optional[
        pulumi.Input["IssuerSpecAcmeSolversHttp01IngressIngressTemplatePatchArgs"]
    ]:
        return pulumi.get(self, "ingress_template")

    @ingress_template.setter
    def ingress_template(
        self,
        value: Optional[
            pulumi.Input["IssuerSpecAcmeSolversHttp01IngressIngressTemplatePatchArgs"]
        ],
    ):
        pulumi.set(self, "ingress_template", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the ingress resource that should have ACME challenge solving
        routes inserted into it in order to solve HTTP01 challenges.
        This is typically used in conjunction with ingress controllers like
        ingress-gce, which maintains a 1:1 mapping between external IPs and
        ingress resources. Only one of `class`, `name` or `ingressClassName` may
        be specified.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="podTemplate")
    def pod_template(
        self,
    ) -> Optional[
        pulumi.Input["IssuerSpecAcmeSolversHttp01IngressPodTemplatePatchArgs"]
    ]:
        return pulumi.get(self, "pod_template")

    @pod_template.setter
    def pod_template(
        self,
        value: Optional[
            pulumi.Input["IssuerSpecAcmeSolversHttp01IngressPodTemplatePatchArgs"]
        ],
    ):
        pulumi.set(self, "pod_template", value)

    @property
    @pulumi.getter(name="serviceType")
    def service_type(self) -> Optional[pulumi.Input[str]]:
        """
        Optional service type for Kubernetes solver service. Supported values
        are NodePort or ClusterIP. If unset, defaults to NodePort.
        """
        return pulumi.get(self, "service_type")

    @service_type.setter
    def service_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_type", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01IngressPodTemplateMetadataPatchArgsDict(TypedDict):
        """
        ObjectMeta overrides for the pod used to solve HTTP01 challenges.
        Only the 'labels' and 'annotations' fields may be set.
        If labels or annotations overlap with in-built values, the values here
        will override the in-built values.
        """

        annotations: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Annotations that should be added to the created ACME HTTP01 solver pods.
        """
        labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Labels that should be added to the created ACME HTTP01 solver pods.
        """

elif False:
    IssuerSpecAcmeSolversHttp01IngressPodTemplateMetadataPatchArgsDict: TypeAlias = (
        Mapping[str, Any]
    )


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01IngressPodTemplateMetadataPatchArgs:
    def __init__(
        __self__,
        *,
        annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
        labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None
    ):
        """
        ObjectMeta overrides for the pod used to solve HTTP01 challenges.
        Only the 'labels' and 'annotations' fields may be set.
        If labels or annotations overlap with in-built values, the values here
        will override the in-built values.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] annotations: Annotations that should be added to the created ACME HTTP01 solver pods.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: Labels that should be added to the created ACME HTTP01 solver pods.
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Annotations that should be added to the created ACME HTTP01 solver pods.
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(
        self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
    ):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Labels that should be added to the created ACME HTTP01 solver pods.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01IngressPodTemplateMetadataArgsDict(TypedDict):
        """
        ObjectMeta overrides for the pod used to solve HTTP01 challenges.
        Only the 'labels' and 'annotations' fields may be set.
        If labels or annotations overlap with in-built values, the values here
        will override the in-built values.
        """

        annotations: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Annotations that should be added to the created ACME HTTP01 solver pods.
        """
        labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Labels that should be added to the created ACME HTTP01 solver pods.
        """

elif False:
    IssuerSpecAcmeSolversHttp01IngressPodTemplateMetadataArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01IngressPodTemplateMetadataArgs:
    def __init__(
        __self__,
        *,
        annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
        labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None
    ):
        """
        ObjectMeta overrides for the pod used to solve HTTP01 challenges.
        Only the 'labels' and 'annotations' fields may be set.
        If labels or annotations overlap with in-built values, the values here
        will override the in-built values.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] annotations: Annotations that should be added to the created ACME HTTP01 solver pods.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: Labels that should be added to the created ACME HTTP01 solver pods.
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Annotations that should be added to the created ACME HTTP01 solver pods.
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(
        self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
    ):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Labels that should be added to the created ACME HTTP01 solver pods.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01IngressPodTemplatePatchArgsDict(TypedDict):
        """
        Optional pod template used to configure the ACME challenge solver pods
        used for HTTP01 challenges.
        """

        metadata: NotRequired[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01IngressPodTemplateMetadataPatchArgsDict"
            ]
        ]
        spec: NotRequired[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecPatchArgsDict"
            ]
        ]

elif False:
    IssuerSpecAcmeSolversHttp01IngressPodTemplatePatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01IngressPodTemplatePatchArgs:
    def __init__(
        __self__,
        *,
        metadata: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01IngressPodTemplateMetadataPatchArgs"
            ]
        ] = None,
        spec: Optional[
            pulumi.Input["IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecPatchArgs"]
        ] = None
    ):
        """
        Optional pod template used to configure the ACME challenge solver pods
        used for HTTP01 challenges.
        """
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if spec is not None:
            pulumi.set(__self__, "spec", spec)

    @property
    @pulumi.getter
    def metadata(
        self,
    ) -> Optional[
        pulumi.Input["IssuerSpecAcmeSolversHttp01IngressPodTemplateMetadataPatchArgs"]
    ]:
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(
        self,
        value: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01IngressPodTemplateMetadataPatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter
    def spec(
        self,
    ) -> Optional[
        pulumi.Input["IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecPatchArgs"]
    ]:
        return pulumi.get(self, "spec")

    @spec.setter
    def spec(
        self,
        value: Optional[
            pulumi.Input["IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecPatchArgs"]
        ],
    ):
        pulumi.set(self, "spec", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPatchArgsDict(
        TypedDict
    ):
        """
        Describes node affinity scheduling rules for the pod.
        """

        preferred_during_scheduling_ignored_during_execution: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgsDict"
                    ]
                ]
            ]
        ]
        """
        The scheduler will prefer to schedule pods to nodes that satisfy
        the affinity expressions specified by this field, but it may choose
        a node that violates one or more of the expressions. The node that is
        most preferred is the one with the greatest sum of weights, i.e.
        for each node that meets all of the scheduling requirements (resource
        request, requiredDuringScheduling affinity expressions, etc.),
        compute a sum by iterating through the elements of this field and adding
        "weight" to the sum if the node matches the corresponding matchExpressions; the
        node(s) with the highest sum are the most preferred.
        """
        required_during_scheduling_ignored_during_execution: NotRequired[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgsDict"
            ]
        ]

elif False:
    IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPatchArgs:
    def __init__(
        __self__,
        *,
        preferred_during_scheduling_ignored_during_execution: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgs"
                    ]
                ]
            ]
        ] = None,
        required_during_scheduling_ignored_during_execution: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgs"
            ]
        ] = None
    ):
        """
        Describes node affinity scheduling rules for the pod.
        :param pulumi.Input[Sequence[pulumi.Input['IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgs']]] preferred_during_scheduling_ignored_during_execution: The scheduler will prefer to schedule pods to nodes that satisfy
               the affinity expressions specified by this field, but it may choose
               a node that violates one or more of the expressions. The node that is
               most preferred is the one with the greatest sum of weights, i.e.
               for each node that meets all of the scheduling requirements (resource
               request, requiredDuringScheduling affinity expressions, etc.),
               compute a sum by iterating through the elements of this field and adding
               "weight" to the sum if the node matches the corresponding matchExpressions; the
               node(s) with the highest sum are the most preferred.
        """
        if preferred_during_scheduling_ignored_during_execution is not None:
            pulumi.set(
                __self__,
                "preferred_during_scheduling_ignored_during_execution",
                preferred_during_scheduling_ignored_during_execution,
            )
        if required_during_scheduling_ignored_during_execution is not None:
            pulumi.set(
                __self__,
                "required_during_scheduling_ignored_during_execution",
                required_during_scheduling_ignored_during_execution,
            )

    @property
    @pulumi.getter(name="preferredDuringSchedulingIgnoredDuringExecution")
    def preferred_during_scheduling_ignored_during_execution(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgs"
                ]
            ]
        ]
    ]:
        """
        The scheduler will prefer to schedule pods to nodes that satisfy
        the affinity expressions specified by this field, but it may choose
        a node that violates one or more of the expressions. The node that is
        most preferred is the one with the greatest sum of weights, i.e.
        for each node that meets all of the scheduling requirements (resource
        request, requiredDuringScheduling affinity expressions, etc.),
        compute a sum by iterating through the elements of this field and adding
        "weight" to the sum if the node matches the corresponding matchExpressions; the
        node(s) with the highest sum are the most preferred.
        """
        return pulumi.get(self, "preferred_during_scheduling_ignored_during_execution")

    @preferred_during_scheduling_ignored_during_execution.setter
    def preferred_during_scheduling_ignored_during_execution(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "preferred_during_scheduling_ignored_during_execution", value)

    @property
    @pulumi.getter(name="requiredDuringSchedulingIgnoredDuringExecution")
    def required_during_scheduling_ignored_during_execution(
        self,
    ) -> Optional[
        pulumi.Input[
            "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgs"
        ]
    ]:
        return pulumi.get(self, "required_during_scheduling_ignored_during_execution")

    @required_during_scheduling_ignored_during_execution.setter
    def required_during_scheduling_ignored_during_execution(
        self,
        value: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "required_during_scheduling_ignored_during_execution", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgsDict(
        TypedDict
    ):
        """
        An empty preferred scheduling term matches all objects with implicit weight 0
        (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
        """

        preference: NotRequired[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatchArgsDict"
            ]
        ]
        weight: NotRequired[pulumi.Input[int]]
        """
        Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
        """

elif False:
    IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgs:
    def __init__(
        __self__,
        *,
        preference: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatchArgs"
            ]
        ] = None,
        weight: Optional[pulumi.Input[int]] = None
    ):
        """
        An empty preferred scheduling term matches all objects with implicit weight 0
        (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
        :param pulumi.Input[int] weight: Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
        """
        if preference is not None:
            pulumi.set(__self__, "preference", preference)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def preference(
        self,
    ) -> Optional[
        pulumi.Input[
            "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatchArgs"
        ]
    ]:
        return pulumi.get(self, "preference")

    @preference.setter
    def preference(
        self,
        value: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "preference", value)

    @property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[int]]:
        """
        Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
        """
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "weight", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatchArgsDict(
        TypedDict
    ):
        """
        A node selector requirement is a selector that contains values, a key, and an operator
        that relates the key and values.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        Represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        An array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. If the operator is Gt or Lt, the values
        array must have a single element, which will be interpreted as an integer.
        This array is replaced during a strategic merge patch.
        """

elif False:
    IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatchArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        operator: Optional[pulumi.Input[str]] = None,
        values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None
    ):
        """
        A node selector requirement is a selector that contains values, a key, and an operator
        that relates the key and values.
        :param pulumi.Input[str] key: The label key that the selector applies to.
        :param pulumi.Input[str] operator: Represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: An array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. If the operator is Gt or Lt, the values
               array must have a single element, which will be interpreted as an integer.
               This array is replaced during a strategic merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        Represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        An array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. If the operator is Gt or Lt, the values
        array must have a single element, which will be interpreted as an integer.
        This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgsDict(
        TypedDict
    ):
        """
        A node selector requirement is a selector that contains values, a key, and an operator
        that relates the key and values.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        Represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        An array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. If the operator is Gt or Lt, the values
        array must have a single element, which will be interpreted as an integer.
        This array is replaced during a strategic merge patch.
        """

elif False:
    IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        operator: Optional[pulumi.Input[str]] = None,
        values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None
    ):
        """
        A node selector requirement is a selector that contains values, a key, and an operator
        that relates the key and values.
        :param pulumi.Input[str] key: The label key that the selector applies to.
        :param pulumi.Input[str] operator: Represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: An array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. If the operator is Gt or Lt, the values
               array must have a single element, which will be interpreted as an integer.
               This array is replaced during a strategic merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        Represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        An array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. If the operator is Gt or Lt, the values
        array must have a single element, which will be interpreted as an integer.
        This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatchArgsDict(
        TypedDict
    ):
        """
        A node selector requirement is a selector that contains values, a key, and an operator
        that relates the key and values.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        Represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        An array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. If the operator is Gt or Lt, the values
        array must have a single element, which will be interpreted as an integer.
        This array is replaced during a strategic merge patch.
        """

elif False:
    IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatchArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        operator: Optional[pulumi.Input[str]] = None,
        values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None
    ):
        """
        A node selector requirement is a selector that contains values, a key, and an operator
        that relates the key and values.
        :param pulumi.Input[str] key: The label key that the selector applies to.
        :param pulumi.Input[str] operator: Represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: An array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. If the operator is Gt or Lt, the values
               array must have a single element, which will be interpreted as an integer.
               This array is replaced during a strategic merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        Represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        An array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. If the operator is Gt or Lt, the values
        array must have a single element, which will be interpreted as an integer.
        This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgsDict(
        TypedDict
    ):
        """
        A node selector requirement is a selector that contains values, a key, and an operator
        that relates the key and values.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        Represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        An array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. If the operator is Gt or Lt, the values
        array must have a single element, which will be interpreted as an integer.
        This array is replaced during a strategic merge patch.
        """

elif False:
    IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        operator: Optional[pulumi.Input[str]] = None,
        values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None
    ):
        """
        A node selector requirement is a selector that contains values, a key, and an operator
        that relates the key and values.
        :param pulumi.Input[str] key: The label key that the selector applies to.
        :param pulumi.Input[str] operator: Represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: An array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. If the operator is Gt or Lt, the values
               array must have a single element, which will be interpreted as an integer.
               This array is replaced during a strategic merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        Represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        An array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. If the operator is Gt or Lt, the values
        array must have a single element, which will be interpreted as an integer.
        This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatchArgsDict(
        TypedDict
    ):
        """
        A node selector term, associated with the corresponding weight.
        """

        match_expressions: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatchArgsDict"
                    ]
                ]
            ]
        ]
        """
        A list of node selector requirements by node's labels.
        """
        match_fields: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatchArgsDict"
                    ]
                ]
            ]
        ]
        """
        A list of node selector requirements by node's fields.
        """

elif False:
    IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatchArgs:
    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatchArgs"
                    ]
                ]
            ]
        ] = None,
        match_fields: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatchArgs"
                    ]
                ]
            ]
        ] = None
    ):
        """
        A node selector term, associated with the corresponding weight.
        :param pulumi.Input[Sequence[pulumi.Input['IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatchArgs']]] match_expressions: A list of node selector requirements by node's labels.
        :param pulumi.Input[Sequence[pulumi.Input['IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatchArgs']]] match_fields: A list of node selector requirements by node's fields.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_fields is not None:
            pulumi.set(__self__, "match_fields", match_fields)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatchArgs"
                ]
            ]
        ]
    ]:
        """
        A list of node selector requirements by node's labels.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatchArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchFields")
    def match_fields(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatchArgs"
                ]
            ]
        ]
    ]:
        """
        A list of node selector requirements by node's fields.
        """
        return pulumi.get(self, "match_fields")

    @match_fields.setter
    def match_fields(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatchArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "match_fields", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgsDict(
        TypedDict
    ):
        """
        A node selector term, associated with the corresponding weight.
        """

        match_expressions: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgsDict"
                    ]
                ]
            ]
        ]
        """
        A list of node selector requirements by node's labels.
        """
        match_fields: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgsDict"
                    ]
                ]
            ]
        ]
        """
        A list of node selector requirements by node's fields.
        """

elif False:
    IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgs:
    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgs"
                    ]
                ]
            ]
        ] = None,
        match_fields: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgs"
                    ]
                ]
            ]
        ] = None
    ):
        """
        A node selector term, associated with the corresponding weight.
        :param pulumi.Input[Sequence[pulumi.Input['IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgs']]] match_expressions: A list of node selector requirements by node's labels.
        :param pulumi.Input[Sequence[pulumi.Input['IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgs']]] match_fields: A list of node selector requirements by node's fields.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_fields is not None:
            pulumi.set(__self__, "match_fields", match_fields)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgs"
                ]
            ]
        ]
    ]:
        """
        A list of node selector requirements by node's labels.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchFields")
    def match_fields(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgs"
                ]
            ]
        ]
    ]:
        """
        A list of node selector requirements by node's fields.
        """
        return pulumi.get(self, "match_fields")

    @match_fields.setter
    def match_fields(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "match_fields", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgsDict(
        TypedDict
    ):
        """
        An empty preferred scheduling term matches all objects with implicit weight 0
        (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
        """

        preference: NotRequired[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgsDict"
            ]
        ]
        weight: NotRequired[pulumi.Input[int]]
        """
        Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
        """

elif False:
    IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs:
    def __init__(
        __self__,
        *,
        preference: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgs"
            ]
        ] = None,
        weight: Optional[pulumi.Input[int]] = None
    ):
        """
        An empty preferred scheduling term matches all objects with implicit weight 0
        (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
        :param pulumi.Input[int] weight: Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
        """
        if preference is not None:
            pulumi.set(__self__, "preference", preference)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def preference(
        self,
    ) -> Optional[
        pulumi.Input[
            "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgs"
        ]
    ]:
        return pulumi.get(self, "preference")

    @preference.setter
    def preference(
        self,
        value: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgs"
            ]
        ],
    ):
        pulumi.set(self, "preference", value)

    @property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[int]]:
        """
        Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
        """
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "weight", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatchArgsDict(
        TypedDict
    ):
        """
        A node selector requirement is a selector that contains values, a key, and an operator
        that relates the key and values.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        Represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        An array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. If the operator is Gt or Lt, the values
        array must have a single element, which will be interpreted as an integer.
        This array is replaced during a strategic merge patch.
        """

elif False:
    IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatchArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        operator: Optional[pulumi.Input[str]] = None,
        values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None
    ):
        """
        A node selector requirement is a selector that contains values, a key, and an operator
        that relates the key and values.
        :param pulumi.Input[str] key: The label key that the selector applies to.
        :param pulumi.Input[str] operator: Represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: An array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. If the operator is Gt or Lt, the values
               array must have a single element, which will be interpreted as an integer.
               This array is replaced during a strategic merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        Represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        An array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. If the operator is Gt or Lt, the values
        array must have a single element, which will be interpreted as an integer.
        This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgsDict(
        TypedDict
    ):
        """
        A node selector requirement is a selector that contains values, a key, and an operator
        that relates the key and values.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        Represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        An array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. If the operator is Gt or Lt, the values
        array must have a single element, which will be interpreted as an integer.
        This array is replaced during a strategic merge patch.
        """

elif False:
    IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        operator: Optional[pulumi.Input[str]] = None,
        values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None
    ):
        """
        A node selector requirement is a selector that contains values, a key, and an operator
        that relates the key and values.
        :param pulumi.Input[str] key: The label key that the selector applies to.
        :param pulumi.Input[str] operator: Represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: An array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. If the operator is Gt or Lt, the values
               array must have a single element, which will be interpreted as an integer.
               This array is replaced during a strategic merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        Represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        An array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. If the operator is Gt or Lt, the values
        array must have a single element, which will be interpreted as an integer.
        This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatchArgsDict(
        TypedDict
    ):
        """
        A node selector requirement is a selector that contains values, a key, and an operator
        that relates the key and values.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        Represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        An array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. If the operator is Gt or Lt, the values
        array must have a single element, which will be interpreted as an integer.
        This array is replaced during a strategic merge patch.
        """

elif False:
    IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatchArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        operator: Optional[pulumi.Input[str]] = None,
        values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None
    ):
        """
        A node selector requirement is a selector that contains values, a key, and an operator
        that relates the key and values.
        :param pulumi.Input[str] key: The label key that the selector applies to.
        :param pulumi.Input[str] operator: Represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: An array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. If the operator is Gt or Lt, the values
               array must have a single element, which will be interpreted as an integer.
               This array is replaced during a strategic merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        Represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        An array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. If the operator is Gt or Lt, the values
        array must have a single element, which will be interpreted as an integer.
        This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgsDict(
        TypedDict
    ):
        """
        A node selector requirement is a selector that contains values, a key, and an operator
        that relates the key and values.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        Represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        An array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. If the operator is Gt or Lt, the values
        array must have a single element, which will be interpreted as an integer.
        This array is replaced during a strategic merge patch.
        """

elif False:
    IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        operator: Optional[pulumi.Input[str]] = None,
        values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None
    ):
        """
        A node selector requirement is a selector that contains values, a key, and an operator
        that relates the key and values.
        :param pulumi.Input[str] key: The label key that the selector applies to.
        :param pulumi.Input[str] operator: Represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: An array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. If the operator is Gt or Lt, the values
               array must have a single element, which will be interpreted as an integer.
               This array is replaced during a strategic merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        Represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        An array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. If the operator is Gt or Lt, the values
        array must have a single element, which will be interpreted as an integer.
        This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatchArgsDict(
        TypedDict
    ):
        """
        A null or empty node selector term matches no objects. The requirements of
        them are ANDed.
        The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
        """

        match_expressions: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatchArgsDict"
                    ]
                ]
            ]
        ]
        """
        A list of node selector requirements by node's labels.
        """
        match_fields: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatchArgsDict"
                    ]
                ]
            ]
        ]
        """
        A list of node selector requirements by node's fields.
        """

elif False:
    IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatchArgs:
    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatchArgs"
                    ]
                ]
            ]
        ] = None,
        match_fields: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatchArgs"
                    ]
                ]
            ]
        ] = None
    ):
        """
        A null or empty node selector term matches no objects. The requirements of
        them are ANDed.
        The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
        :param pulumi.Input[Sequence[pulumi.Input['IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatchArgs']]] match_expressions: A list of node selector requirements by node's labels.
        :param pulumi.Input[Sequence[pulumi.Input['IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatchArgs']]] match_fields: A list of node selector requirements by node's fields.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_fields is not None:
            pulumi.set(__self__, "match_fields", match_fields)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatchArgs"
                ]
            ]
        ]
    ]:
        """
        A list of node selector requirements by node's labels.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatchArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchFields")
    def match_fields(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatchArgs"
                ]
            ]
        ]
    ]:
        """
        A list of node selector requirements by node's fields.
        """
        return pulumi.get(self, "match_fields")

    @match_fields.setter
    def match_fields(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatchArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "match_fields", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgsDict(
        TypedDict
    ):
        """
        A null or empty node selector term matches no objects. The requirements of
        them are ANDed.
        The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
        """

        match_expressions: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgsDict"
                    ]
                ]
            ]
        ]
        """
        A list of node selector requirements by node's labels.
        """
        match_fields: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgsDict"
                    ]
                ]
            ]
        ]
        """
        A list of node selector requirements by node's fields.
        """

elif False:
    IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgs:
    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgs"
                    ]
                ]
            ]
        ] = None,
        match_fields: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgs"
                    ]
                ]
            ]
        ] = None
    ):
        """
        A null or empty node selector term matches no objects. The requirements of
        them are ANDed.
        The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
        :param pulumi.Input[Sequence[pulumi.Input['IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgs']]] match_expressions: A list of node selector requirements by node's labels.
        :param pulumi.Input[Sequence[pulumi.Input['IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgs']]] match_fields: A list of node selector requirements by node's fields.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_fields is not None:
            pulumi.set(__self__, "match_fields", match_fields)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgs"
                ]
            ]
        ]
    ]:
        """
        A list of node selector requirements by node's labels.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchFields")
    def match_fields(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgs"
                ]
            ]
        ]
    ]:
        """
        A list of node selector requirements by node's fields.
        """
        return pulumi.get(self, "match_fields")

    @match_fields.setter
    def match_fields(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "match_fields", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgsDict(
        TypedDict
    ):
        """
        If the affinity requirements specified by this field are not met at
        scheduling time, the pod will not be scheduled onto the node.
        If the affinity requirements specified by this field cease to be met
        at some point during pod execution (e.g. due to an update), the system
        may or may not try to eventually evict the pod from its node.
        """

        node_selector_terms: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatchArgsDict"
                    ]
                ]
            ]
        ]
        """
        Required. A list of node selector terms. The terms are ORed.
        """

elif False:
    IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgs:
    def __init__(
        __self__,
        *,
        node_selector_terms: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatchArgs"
                    ]
                ]
            ]
        ] = None
    ):
        """
        If the affinity requirements specified by this field are not met at
        scheduling time, the pod will not be scheduled onto the node.
        If the affinity requirements specified by this field cease to be met
        at some point during pod execution (e.g. due to an update), the system
        may or may not try to eventually evict the pod from its node.
        :param pulumi.Input[Sequence[pulumi.Input['IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatchArgs']]] node_selector_terms: Required. A list of node selector terms. The terms are ORed.
        """
        if node_selector_terms is not None:
            pulumi.set(__self__, "node_selector_terms", node_selector_terms)

    @property
    @pulumi.getter(name="nodeSelectorTerms")
    def node_selector_terms(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatchArgs"
                ]
            ]
        ]
    ]:
        """
        Required. A list of node selector terms. The terms are ORed.
        """
        return pulumi.get(self, "node_selector_terms")

    @node_selector_terms.setter
    def node_selector_terms(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatchArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "node_selector_terms", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgsDict(
        TypedDict
    ):
        """
        If the affinity requirements specified by this field are not met at
        scheduling time, the pod will not be scheduled onto the node.
        If the affinity requirements specified by this field cease to be met
        at some point during pod execution (e.g. due to an update), the system
        may or may not try to eventually evict the pod from its node.
        """

        node_selector_terms: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgsDict"
                    ]
                ]
            ]
        ]
        """
        Required. A list of node selector terms. The terms are ORed.
        """

elif False:
    IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs:
    def __init__(
        __self__,
        *,
        node_selector_terms: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgs"
                    ]
                ]
            ]
        ] = None
    ):
        """
        If the affinity requirements specified by this field are not met at
        scheduling time, the pod will not be scheduled onto the node.
        If the affinity requirements specified by this field cease to be met
        at some point during pod execution (e.g. due to an update), the system
        may or may not try to eventually evict the pod from its node.
        :param pulumi.Input[Sequence[pulumi.Input['IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgs']]] node_selector_terms: Required. A list of node selector terms. The terms are ORed.
        """
        if node_selector_terms is not None:
            pulumi.set(__self__, "node_selector_terms", node_selector_terms)

    @property
    @pulumi.getter(name="nodeSelectorTerms")
    def node_selector_terms(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgs"
                ]
            ]
        ]
    ]:
        """
        Required. A list of node selector terms. The terms are ORed.
        """
        return pulumi.get(self, "node_selector_terms")

    @node_selector_terms.setter
    def node_selector_terms(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "node_selector_terms", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityArgsDict(
        TypedDict
    ):
        """
        Describes node affinity scheduling rules for the pod.
        """

        preferred_during_scheduling_ignored_during_execution: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgsDict"
                    ]
                ]
            ]
        ]
        """
        The scheduler will prefer to schedule pods to nodes that satisfy
        the affinity expressions specified by this field, but it may choose
        a node that violates one or more of the expressions. The node that is
        most preferred is the one with the greatest sum of weights, i.e.
        for each node that meets all of the scheduling requirements (resource
        request, requiredDuringScheduling affinity expressions, etc.),
        compute a sum by iterating through the elements of this field and adding
        "weight" to the sum if the node matches the corresponding matchExpressions; the
        node(s) with the highest sum are the most preferred.
        """
        required_during_scheduling_ignored_during_execution: NotRequired[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgsDict"
            ]
        ]

elif False:
    IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityArgs:
    def __init__(
        __self__,
        *,
        preferred_during_scheduling_ignored_during_execution: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs"
                    ]
                ]
            ]
        ] = None,
        required_during_scheduling_ignored_during_execution: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs"
            ]
        ] = None
    ):
        """
        Describes node affinity scheduling rules for the pod.
        :param pulumi.Input[Sequence[pulumi.Input['IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs']]] preferred_during_scheduling_ignored_during_execution: The scheduler will prefer to schedule pods to nodes that satisfy
               the affinity expressions specified by this field, but it may choose
               a node that violates one or more of the expressions. The node that is
               most preferred is the one with the greatest sum of weights, i.e.
               for each node that meets all of the scheduling requirements (resource
               request, requiredDuringScheduling affinity expressions, etc.),
               compute a sum by iterating through the elements of this field and adding
               "weight" to the sum if the node matches the corresponding matchExpressions; the
               node(s) with the highest sum are the most preferred.
        """
        if preferred_during_scheduling_ignored_during_execution is not None:
            pulumi.set(
                __self__,
                "preferred_during_scheduling_ignored_during_execution",
                preferred_during_scheduling_ignored_during_execution,
            )
        if required_during_scheduling_ignored_during_execution is not None:
            pulumi.set(
                __self__,
                "required_during_scheduling_ignored_during_execution",
                required_during_scheduling_ignored_during_execution,
            )

    @property
    @pulumi.getter(name="preferredDuringSchedulingIgnoredDuringExecution")
    def preferred_during_scheduling_ignored_during_execution(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs"
                ]
            ]
        ]
    ]:
        """
        The scheduler will prefer to schedule pods to nodes that satisfy
        the affinity expressions specified by this field, but it may choose
        a node that violates one or more of the expressions. The node that is
        most preferred is the one with the greatest sum of weights, i.e.
        for each node that meets all of the scheduling requirements (resource
        request, requiredDuringScheduling affinity expressions, etc.),
        compute a sum by iterating through the elements of this field and adding
        "weight" to the sum if the node matches the corresponding matchExpressions; the
        node(s) with the highest sum are the most preferred.
        """
        return pulumi.get(self, "preferred_during_scheduling_ignored_during_execution")

    @preferred_during_scheduling_ignored_during_execution.setter
    def preferred_during_scheduling_ignored_during_execution(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "preferred_during_scheduling_ignored_during_execution", value)

    @property
    @pulumi.getter(name="requiredDuringSchedulingIgnoredDuringExecution")
    def required_during_scheduling_ignored_during_execution(
        self,
    ) -> Optional[
        pulumi.Input[
            "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs"
        ]
    ]:
        return pulumi.get(self, "required_during_scheduling_ignored_during_execution")

    @required_during_scheduling_ignored_during_execution.setter
    def required_during_scheduling_ignored_during_execution(
        self,
        value: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs"
            ]
        ],
    ):
        pulumi.set(self, "required_during_scheduling_ignored_during_execution", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPatchArgsDict(
        TypedDict
    ):
        """
        If specified, the pod's scheduling constraints
        """

        node_affinity: NotRequired[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPatchArgsDict"
            ]
        ]
        pod_affinity: NotRequired[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPatchArgsDict"
            ]
        ]
        pod_anti_affinity: NotRequired[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPatchArgsDict"
            ]
        ]

elif False:
    IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPatchArgs:
    def __init__(
        __self__,
        *,
        node_affinity: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPatchArgs"
            ]
        ] = None,
        pod_affinity: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPatchArgs"
            ]
        ] = None,
        pod_anti_affinity: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPatchArgs"
            ]
        ] = None
    ):
        """
        If specified, the pod's scheduling constraints
        """
        if node_affinity is not None:
            pulumi.set(__self__, "node_affinity", node_affinity)
        if pod_affinity is not None:
            pulumi.set(__self__, "pod_affinity", pod_affinity)
        if pod_anti_affinity is not None:
            pulumi.set(__self__, "pod_anti_affinity", pod_anti_affinity)

    @property
    @pulumi.getter(name="nodeAffinity")
    def node_affinity(
        self,
    ) -> Optional[
        pulumi.Input[
            "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPatchArgs"
        ]
    ]:
        return pulumi.get(self, "node_affinity")

    @node_affinity.setter
    def node_affinity(
        self,
        value: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "node_affinity", value)

    @property
    @pulumi.getter(name="podAffinity")
    def pod_affinity(
        self,
    ) -> Optional[
        pulumi.Input[
            "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPatchArgs"
        ]
    ]:
        return pulumi.get(self, "pod_affinity")

    @pod_affinity.setter
    def pod_affinity(
        self,
        value: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "pod_affinity", value)

    @property
    @pulumi.getter(name="podAntiAffinity")
    def pod_anti_affinity(
        self,
    ) -> Optional[
        pulumi.Input[
            "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPatchArgs"
        ]
    ]:
        return pulumi.get(self, "pod_anti_affinity")

    @pod_anti_affinity.setter
    def pod_anti_affinity(
        self,
        value: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "pod_anti_affinity", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPatchArgsDict(
        TypedDict
    ):
        """
        Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
        """

        preferred_during_scheduling_ignored_during_execution: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgsDict"
                    ]
                ]
            ]
        ]
        """
        The scheduler will prefer to schedule pods to nodes that satisfy
        the affinity expressions specified by this field, but it may choose
        a node that violates one or more of the expressions. The node that is
        most preferred is the one with the greatest sum of weights, i.e.
        for each node that meets all of the scheduling requirements (resource
        request, requiredDuringScheduling affinity expressions, etc.),
        compute a sum by iterating through the elements of this field and adding
        "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
        node(s) with the highest sum are the most preferred.
        """
        required_during_scheduling_ignored_during_execution: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgsDict"
                    ]
                ]
            ]
        ]
        """
        If the affinity requirements specified by this field are not met at
        scheduling time, the pod will not be scheduled onto the node.
        If the affinity requirements specified by this field cease to be met
        at some point during pod execution (e.g. due to a pod label update), the
        system may or may not try to eventually evict the pod from its node.
        When there are multiple elements, the lists of nodes corresponding to each
        podAffinityTerm are intersected, i.e. all terms must be satisfied.
        """

elif False:
    IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPatchArgs:
    def __init__(
        __self__,
        *,
        preferred_during_scheduling_ignored_during_execution: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgs"
                    ]
                ]
            ]
        ] = None,
        required_during_scheduling_ignored_during_execution: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgs"
                    ]
                ]
            ]
        ] = None
    ):
        """
        Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
        :param pulumi.Input[Sequence[pulumi.Input['IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgs']]] preferred_during_scheduling_ignored_during_execution: The scheduler will prefer to schedule pods to nodes that satisfy
               the affinity expressions specified by this field, but it may choose
               a node that violates one or more of the expressions. The node that is
               most preferred is the one with the greatest sum of weights, i.e.
               for each node that meets all of the scheduling requirements (resource
               request, requiredDuringScheduling affinity expressions, etc.),
               compute a sum by iterating through the elements of this field and adding
               "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
               node(s) with the highest sum are the most preferred.
        :param pulumi.Input[Sequence[pulumi.Input['IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgs']]] required_during_scheduling_ignored_during_execution: If the affinity requirements specified by this field are not met at
               scheduling time, the pod will not be scheduled onto the node.
               If the affinity requirements specified by this field cease to be met
               at some point during pod execution (e.g. due to a pod label update), the
               system may or may not try to eventually evict the pod from its node.
               When there are multiple elements, the lists of nodes corresponding to each
               podAffinityTerm are intersected, i.e. all terms must be satisfied.
        """
        if preferred_during_scheduling_ignored_during_execution is not None:
            pulumi.set(
                __self__,
                "preferred_during_scheduling_ignored_during_execution",
                preferred_during_scheduling_ignored_during_execution,
            )
        if required_during_scheduling_ignored_during_execution is not None:
            pulumi.set(
                __self__,
                "required_during_scheduling_ignored_during_execution",
                required_during_scheduling_ignored_during_execution,
            )

    @property
    @pulumi.getter(name="preferredDuringSchedulingIgnoredDuringExecution")
    def preferred_during_scheduling_ignored_during_execution(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgs"
                ]
            ]
        ]
    ]:
        """
        The scheduler will prefer to schedule pods to nodes that satisfy
        the affinity expressions specified by this field, but it may choose
        a node that violates one or more of the expressions. The node that is
        most preferred is the one with the greatest sum of weights, i.e.
        for each node that meets all of the scheduling requirements (resource
        request, requiredDuringScheduling affinity expressions, etc.),
        compute a sum by iterating through the elements of this field and adding
        "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
        node(s) with the highest sum are the most preferred.
        """
        return pulumi.get(self, "preferred_during_scheduling_ignored_during_execution")

    @preferred_during_scheduling_ignored_during_execution.setter
    def preferred_during_scheduling_ignored_during_execution(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "preferred_during_scheduling_ignored_during_execution", value)

    @property
    @pulumi.getter(name="requiredDuringSchedulingIgnoredDuringExecution")
    def required_during_scheduling_ignored_during_execution(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgs"
                ]
            ]
        ]
    ]:
        """
        If the affinity requirements specified by this field are not met at
        scheduling time, the pod will not be scheduled onto the node.
        If the affinity requirements specified by this field cease to be met
        at some point during pod execution (e.g. due to a pod label update), the
        system may or may not try to eventually evict the pod from its node.
        When there are multiple elements, the lists of nodes corresponding to each
        podAffinityTerm are intersected, i.e. all terms must be satisfied.
        """
        return pulumi.get(self, "required_during_scheduling_ignored_during_execution")

    @required_during_scheduling_ignored_during_execution.setter
    def required_during_scheduling_ignored_during_execution(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "required_during_scheduling_ignored_during_execution", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgsDict(
        TypedDict
    ):
        """
        The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
        """

        pod_affinity_term: NotRequired[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchArgsDict"
            ]
        ]
        weight: NotRequired[pulumi.Input[int]]
        """
        weight associated with matching the corresponding podAffinityTerm,
        in the range 1-100.
        """

elif False:
    IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgs:
    def __init__(
        __self__,
        *,
        pod_affinity_term: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchArgs"
            ]
        ] = None,
        weight: Optional[pulumi.Input[int]] = None
    ):
        """
        The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
        :param pulumi.Input[int] weight: weight associated with matching the corresponding podAffinityTerm,
               in the range 1-100.
        """
        if pod_affinity_term is not None:
            pulumi.set(__self__, "pod_affinity_term", pod_affinity_term)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter(name="podAffinityTerm")
    def pod_affinity_term(
        self,
    ) -> Optional[
        pulumi.Input[
            "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchArgs"
        ]
    ]:
        return pulumi.get(self, "pod_affinity_term")

    @pod_affinity_term.setter
    def pod_affinity_term(
        self,
        value: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "pod_affinity_term", value)

    @property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[int]]:
        """
        weight associated with matching the corresponding podAffinityTerm,
        in the range 1-100.
        """
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "weight", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArgsDict(
        TypedDict
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        key is the label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """

elif False:
    IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        operator: Optional[pulumi.Input[str]] = None,
        values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        :param pulumi.Input[str] key: key is the label key that the selector applies to.
        :param pulumi.Input[str] operator: operator represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists and DoesNotExist.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: values is an array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. This array is replaced during a strategic
               merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgsDict(
        TypedDict
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        key is the label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """

elif False:
    IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        operator: Optional[pulumi.Input[str]] = None,
        values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        :param pulumi.Input[str] key: key is the label key that the selector applies to.
        :param pulumi.Input[str] operator: operator represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists and DoesNotExist.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: values is an array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. This array is replaced during a strategic
               merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchArgsDict(
        TypedDict
    ):
        """
        A label query over a set of resources, in this case pods.
        If it's null, this PodAffinityTerm matches with no Pods.
        """

        match_expressions: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArgsDict"
                    ]
                ]
            ]
        ]
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        match_labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """

elif False:
    IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchArgs:
    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArgs"
                    ]
                ]
            ]
        ] = None,
        match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None
    ):
        """
        A label query over a set of resources, in this case pods.
        If it's null, this PodAffinityTerm matches with no Pods.
        :param pulumi.Input[Sequence[pulumi.Input['IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArgs']]] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
               map is equivalent to an element of matchExpressions, whose key field is "key", the
               operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArgs"
                ]
            ]
        ]
    ]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(
        self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
    ):
        pulumi.set(self, "match_labels", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgsDict(
        TypedDict
    ):
        """
        A label query over a set of resources, in this case pods.
        If it's null, this PodAffinityTerm matches with no Pods.
        """

        match_expressions: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgsDict"
                    ]
                ]
            ]
        ]
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        match_labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """

elif False:
    IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs:
    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs"
                    ]
                ]
            ]
        ] = None,
        match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None
    ):
        """
        A label query over a set of resources, in this case pods.
        If it's null, this PodAffinityTerm matches with no Pods.
        :param pulumi.Input[Sequence[pulumi.Input['IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs']]] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
               map is equivalent to an element of matchExpressions, whose key field is "key", the
               operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs"
                ]
            ]
        ]
    ]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(
        self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
    ):
        pulumi.set(self, "match_labels", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArgsDict(
        TypedDict
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        key is the label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """

elif False:
    IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        operator: Optional[pulumi.Input[str]] = None,
        values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        :param pulumi.Input[str] key: key is the label key that the selector applies to.
        :param pulumi.Input[str] operator: operator represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists and DoesNotExist.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: values is an array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. This array is replaced during a strategic
               merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgsDict(
        TypedDict
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        key is the label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """

elif False:
    IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        operator: Optional[pulumi.Input[str]] = None,
        values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        :param pulumi.Input[str] key: key is the label key that the selector applies to.
        :param pulumi.Input[str] operator: operator represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists and DoesNotExist.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: values is an array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. This array is replaced during a strategic
               merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchArgsDict(
        TypedDict
    ):
        """
        A label query over the set of namespaces that the term applies to.
        The term is applied to the union of the namespaces selected by this field
        and the ones listed in the namespaces field.
        null selector and null or empty namespaces list means "this pod's namespace".
        An empty selector ({}) matches all namespaces.
        """

        match_expressions: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArgsDict"
                    ]
                ]
            ]
        ]
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        match_labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """

elif False:
    IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchArgs:
    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArgs"
                    ]
                ]
            ]
        ] = None,
        match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None
    ):
        """
        A label query over the set of namespaces that the term applies to.
        The term is applied to the union of the namespaces selected by this field
        and the ones listed in the namespaces field.
        null selector and null or empty namespaces list means "this pod's namespace".
        An empty selector ({}) matches all namespaces.
        :param pulumi.Input[Sequence[pulumi.Input['IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArgs']]] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
               map is equivalent to an element of matchExpressions, whose key field is "key", the
               operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArgs"
                ]
            ]
        ]
    ]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(
        self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
    ):
        pulumi.set(self, "match_labels", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgsDict(
        TypedDict
    ):
        """
        A label query over the set of namespaces that the term applies to.
        The term is applied to the union of the namespaces selected by this field
        and the ones listed in the namespaces field.
        null selector and null or empty namespaces list means "this pod's namespace".
        An empty selector ({}) matches all namespaces.
        """

        match_expressions: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgsDict"
                    ]
                ]
            ]
        ]
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        match_labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """

elif False:
    IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs:
    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs"
                    ]
                ]
            ]
        ] = None,
        match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None
    ):
        """
        A label query over the set of namespaces that the term applies to.
        The term is applied to the union of the namespaces selected by this field
        and the ones listed in the namespaces field.
        null selector and null or empty namespaces list means "this pod's namespace".
        An empty selector ({}) matches all namespaces.
        :param pulumi.Input[Sequence[pulumi.Input['IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs']]] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
               map is equivalent to an element of matchExpressions, whose key field is "key", the
               operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs"
                ]
            ]
        ]
    ]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(
        self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
    ):
        pulumi.set(self, "match_labels", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchArgsDict(
        TypedDict
    ):
        """
        Required. A pod affinity term, associated with the corresponding weight.
        """

        label_selector: NotRequired[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchArgsDict"
            ]
        ]
        match_label_keys: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        MatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both matchLabelKeys and labelSelector.
        Also, matchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        mismatch_label_keys: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        MismatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
        Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        namespace_selector: NotRequired[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchArgsDict"
            ]
        ]
        namespaces: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        namespaces specifies a static list of namespace names that the term applies to.
        The term is applied to the union of the namespaces listed in this field
        and the ones selected by namespaceSelector.
        null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        """
        topology_key: NotRequired[pulumi.Input[str]]
        """
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
        the labelSelector in the specified namespaces, where co-located is defined as running on a node
        whose value of the label with key topologyKey matches that of any node on which any of the
        selected pods is running.
        Empty topologyKey is not allowed.
        """

elif False:
    IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchArgs:
    def __init__(
        __self__,
        *,
        label_selector: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchArgs"
            ]
        ] = None,
        match_label_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        mismatch_label_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        namespace_selector: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchArgs"
            ]
        ] = None,
        namespaces: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        topology_key: Optional[pulumi.Input[str]] = None
    ):
        """
        Required. A pod affinity term, associated with the corresponding weight.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] match_label_keys: MatchLabelKeys is a set of pod label keys to select which pods will
               be taken into consideration. The keys are used to lookup values from the
               incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
               to select the group of existing pods which pods will be taken into consideration
               for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
               pod labels will be ignored. The default value is empty.
               The same key is forbidden to exist in both matchLabelKeys and labelSelector.
               Also, matchLabelKeys cannot be set when labelSelector isn't set.
               This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] mismatch_label_keys: MismatchLabelKeys is a set of pod label keys to select which pods will
               be taken into consideration. The keys are used to lookup values from the
               incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
               to select the group of existing pods which pods will be taken into consideration
               for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
               pod labels will be ignored. The default value is empty.
               The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
               Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
               This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] namespaces: namespaces specifies a static list of namespace names that the term applies to.
               The term is applied to the union of the namespaces listed in this field
               and the ones selected by namespaceSelector.
               null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        :param pulumi.Input[str] topology_key: This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
               the labelSelector in the specified namespaces, where co-located is defined as running on a node
               whose value of the label with key topologyKey matches that of any node on which any of the
               selected pods is running.
               Empty topologyKey is not allowed.
        """
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if match_label_keys is not None:
            pulumi.set(__self__, "match_label_keys", match_label_keys)
        if mismatch_label_keys is not None:
            pulumi.set(__self__, "mismatch_label_keys", mismatch_label_keys)
        if namespace_selector is not None:
            pulumi.set(__self__, "namespace_selector", namespace_selector)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)
        if topology_key is not None:
            pulumi.set(__self__, "topology_key", topology_key)

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(
        self,
    ) -> Optional[
        pulumi.Input[
            "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchArgs"
        ]
    ]:
        return pulumi.get(self, "label_selector")

    @label_selector.setter
    def label_selector(
        self,
        value: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "label_selector", value)

    @property
    @pulumi.getter(name="matchLabelKeys")
    def match_label_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        MatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both matchLabelKeys and labelSelector.
        Also, matchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        return pulumi.get(self, "match_label_keys")

    @match_label_keys.setter
    def match_label_keys(
        self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]
    ):
        pulumi.set(self, "match_label_keys", value)

    @property
    @pulumi.getter(name="mismatchLabelKeys")
    def mismatch_label_keys(
        self,
    ) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        MismatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
        Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        return pulumi.get(self, "mismatch_label_keys")

    @mismatch_label_keys.setter
    def mismatch_label_keys(
        self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]
    ):
        pulumi.set(self, "mismatch_label_keys", value)

    @property
    @pulumi.getter(name="namespaceSelector")
    def namespace_selector(
        self,
    ) -> Optional[
        pulumi.Input[
            "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchArgs"
        ]
    ]:
        return pulumi.get(self, "namespace_selector")

    @namespace_selector.setter
    def namespace_selector(
        self,
        value: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "namespace_selector", value)

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        namespaces specifies a static list of namespace names that the term applies to.
        The term is applied to the union of the namespaces listed in this field
        and the ones selected by namespaceSelector.
        null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        """
        return pulumi.get(self, "namespaces")

    @namespaces.setter
    def namespaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "namespaces", value)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> Optional[pulumi.Input[str]]:
        """
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
        the labelSelector in the specified namespaces, where co-located is defined as running on a node
        whose value of the label with key topologyKey matches that of any node on which any of the
        selected pods is running.
        Empty topologyKey is not allowed.
        """
        return pulumi.get(self, "topology_key")

    @topology_key.setter
    def topology_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topology_key", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgsDict(
        TypedDict
    ):
        """
        Required. A pod affinity term, associated with the corresponding weight.
        """

        label_selector: NotRequired[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgsDict"
            ]
        ]
        match_label_keys: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        MatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both matchLabelKeys and labelSelector.
        Also, matchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        mismatch_label_keys: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        MismatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
        Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        namespace_selector: NotRequired[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgsDict"
            ]
        ]
        namespaces: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        namespaces specifies a static list of namespace names that the term applies to.
        The term is applied to the union of the namespaces listed in this field
        and the ones selected by namespaceSelector.
        null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        """
        topology_key: NotRequired[pulumi.Input[str]]
        """
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
        the labelSelector in the specified namespaces, where co-located is defined as running on a node
        whose value of the label with key topologyKey matches that of any node on which any of the
        selected pods is running.
        Empty topologyKey is not allowed.
        """

elif False:
    IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs:
    def __init__(
        __self__,
        *,
        label_selector: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs"
            ]
        ] = None,
        match_label_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        mismatch_label_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        namespace_selector: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs"
            ]
        ] = None,
        namespaces: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        topology_key: Optional[pulumi.Input[str]] = None
    ):
        """
        Required. A pod affinity term, associated with the corresponding weight.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] match_label_keys: MatchLabelKeys is a set of pod label keys to select which pods will
               be taken into consideration. The keys are used to lookup values from the
               incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
               to select the group of existing pods which pods will be taken into consideration
               for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
               pod labels will be ignored. The default value is empty.
               The same key is forbidden to exist in both matchLabelKeys and labelSelector.
               Also, matchLabelKeys cannot be set when labelSelector isn't set.
               This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] mismatch_label_keys: MismatchLabelKeys is a set of pod label keys to select which pods will
               be taken into consideration. The keys are used to lookup values from the
               incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
               to select the group of existing pods which pods will be taken into consideration
               for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
               pod labels will be ignored. The default value is empty.
               The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
               Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
               This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] namespaces: namespaces specifies a static list of namespace names that the term applies to.
               The term is applied to the union of the namespaces listed in this field
               and the ones selected by namespaceSelector.
               null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        :param pulumi.Input[str] topology_key: This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
               the labelSelector in the specified namespaces, where co-located is defined as running on a node
               whose value of the label with key topologyKey matches that of any node on which any of the
               selected pods is running.
               Empty topologyKey is not allowed.
        """
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if match_label_keys is not None:
            pulumi.set(__self__, "match_label_keys", match_label_keys)
        if mismatch_label_keys is not None:
            pulumi.set(__self__, "mismatch_label_keys", mismatch_label_keys)
        if namespace_selector is not None:
            pulumi.set(__self__, "namespace_selector", namespace_selector)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)
        if topology_key is not None:
            pulumi.set(__self__, "topology_key", topology_key)

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(
        self,
    ) -> Optional[
        pulumi.Input[
            "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs"
        ]
    ]:
        return pulumi.get(self, "label_selector")

    @label_selector.setter
    def label_selector(
        self,
        value: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs"
            ]
        ],
    ):
        pulumi.set(self, "label_selector", value)

    @property
    @pulumi.getter(name="matchLabelKeys")
    def match_label_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        MatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both matchLabelKeys and labelSelector.
        Also, matchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        return pulumi.get(self, "match_label_keys")

    @match_label_keys.setter
    def match_label_keys(
        self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]
    ):
        pulumi.set(self, "match_label_keys", value)

    @property
    @pulumi.getter(name="mismatchLabelKeys")
    def mismatch_label_keys(
        self,
    ) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        MismatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
        Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        return pulumi.get(self, "mismatch_label_keys")

    @mismatch_label_keys.setter
    def mismatch_label_keys(
        self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]
    ):
        pulumi.set(self, "mismatch_label_keys", value)

    @property
    @pulumi.getter(name="namespaceSelector")
    def namespace_selector(
        self,
    ) -> Optional[
        pulumi.Input[
            "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs"
        ]
    ]:
        return pulumi.get(self, "namespace_selector")

    @namespace_selector.setter
    def namespace_selector(
        self,
        value: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs"
            ]
        ],
    ):
        pulumi.set(self, "namespace_selector", value)

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        namespaces specifies a static list of namespace names that the term applies to.
        The term is applied to the union of the namespaces listed in this field
        and the ones selected by namespaceSelector.
        null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        """
        return pulumi.get(self, "namespaces")

    @namespaces.setter
    def namespaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "namespaces", value)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> Optional[pulumi.Input[str]]:
        """
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
        the labelSelector in the specified namespaces, where co-located is defined as running on a node
        whose value of the label with key topologyKey matches that of any node on which any of the
        selected pods is running.
        Empty topologyKey is not allowed.
        """
        return pulumi.get(self, "topology_key")

    @topology_key.setter
    def topology_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topology_key", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgsDict(
        TypedDict
    ):
        """
        The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
        """

        pod_affinity_term: NotRequired[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgsDict"
            ]
        ]
        weight: NotRequired[pulumi.Input[int]]
        """
        weight associated with matching the corresponding podAffinityTerm,
        in the range 1-100.
        """

elif False:
    IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs:
    def __init__(
        __self__,
        *,
        pod_affinity_term: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs"
            ]
        ] = None,
        weight: Optional[pulumi.Input[int]] = None
    ):
        """
        The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
        :param pulumi.Input[int] weight: weight associated with matching the corresponding podAffinityTerm,
               in the range 1-100.
        """
        if pod_affinity_term is not None:
            pulumi.set(__self__, "pod_affinity_term", pod_affinity_term)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter(name="podAffinityTerm")
    def pod_affinity_term(
        self,
    ) -> Optional[
        pulumi.Input[
            "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs"
        ]
    ]:
        return pulumi.get(self, "pod_affinity_term")

    @pod_affinity_term.setter
    def pod_affinity_term(
        self,
        value: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs"
            ]
        ],
    ):
        pulumi.set(self, "pod_affinity_term", value)

    @property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[int]]:
        """
        weight associated with matching the corresponding podAffinityTerm,
        in the range 1-100.
        """
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "weight", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArgsDict(
        TypedDict
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        key is the label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """

elif False:
    IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        operator: Optional[pulumi.Input[str]] = None,
        values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        :param pulumi.Input[str] key: key is the label key that the selector applies to.
        :param pulumi.Input[str] operator: operator represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists and DoesNotExist.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: values is an array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. This array is replaced during a strategic
               merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgsDict(
        TypedDict
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        key is the label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """

elif False:
    IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        operator: Optional[pulumi.Input[str]] = None,
        values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        :param pulumi.Input[str] key: key is the label key that the selector applies to.
        :param pulumi.Input[str] operator: operator represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists and DoesNotExist.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: values is an array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. This array is replaced during a strategic
               merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchArgsDict(
        TypedDict
    ):
        """
        A label query over a set of resources, in this case pods.
        If it's null, this PodAffinityTerm matches with no Pods.
        """

        match_expressions: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArgsDict"
                    ]
                ]
            ]
        ]
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        match_labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """

elif False:
    IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchArgs:
    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArgs"
                    ]
                ]
            ]
        ] = None,
        match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None
    ):
        """
        A label query over a set of resources, in this case pods.
        If it's null, this PodAffinityTerm matches with no Pods.
        :param pulumi.Input[Sequence[pulumi.Input['IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArgs']]] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
               map is equivalent to an element of matchExpressions, whose key field is "key", the
               operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArgs"
                ]
            ]
        ]
    ]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(
        self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
    ):
        pulumi.set(self, "match_labels", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgsDict(
        TypedDict
    ):
        """
        A label query over a set of resources, in this case pods.
        If it's null, this PodAffinityTerm matches with no Pods.
        """

        match_expressions: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgsDict"
                    ]
                ]
            ]
        ]
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        match_labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """

elif False:
    IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs:
    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs"
                    ]
                ]
            ]
        ] = None,
        match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None
    ):
        """
        A label query over a set of resources, in this case pods.
        If it's null, this PodAffinityTerm matches with no Pods.
        :param pulumi.Input[Sequence[pulumi.Input['IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs']]] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
               map is equivalent to an element of matchExpressions, whose key field is "key", the
               operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs"
                ]
            ]
        ]
    ]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(
        self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
    ):
        pulumi.set(self, "match_labels", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArgsDict(
        TypedDict
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        key is the label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """

elif False:
    IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        operator: Optional[pulumi.Input[str]] = None,
        values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        :param pulumi.Input[str] key: key is the label key that the selector applies to.
        :param pulumi.Input[str] operator: operator represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists and DoesNotExist.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: values is an array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. This array is replaced during a strategic
               merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgsDict(
        TypedDict
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        key is the label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """

elif False:
    IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        operator: Optional[pulumi.Input[str]] = None,
        values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        :param pulumi.Input[str] key: key is the label key that the selector applies to.
        :param pulumi.Input[str] operator: operator represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists and DoesNotExist.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: values is an array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. This array is replaced during a strategic
               merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchArgsDict(
        TypedDict
    ):
        """
        A label query over the set of namespaces that the term applies to.
        The term is applied to the union of the namespaces selected by this field
        and the ones listed in the namespaces field.
        null selector and null or empty namespaces list means "this pod's namespace".
        An empty selector ({}) matches all namespaces.
        """

        match_expressions: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArgsDict"
                    ]
                ]
            ]
        ]
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        match_labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """

elif False:
    IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchArgs:
    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArgs"
                    ]
                ]
            ]
        ] = None,
        match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None
    ):
        """
        A label query over the set of namespaces that the term applies to.
        The term is applied to the union of the namespaces selected by this field
        and the ones listed in the namespaces field.
        null selector and null or empty namespaces list means "this pod's namespace".
        An empty selector ({}) matches all namespaces.
        :param pulumi.Input[Sequence[pulumi.Input['IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArgs']]] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
               map is equivalent to an element of matchExpressions, whose key field is "key", the
               operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArgs"
                ]
            ]
        ]
    ]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(
        self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
    ):
        pulumi.set(self, "match_labels", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgsDict(
        TypedDict
    ):
        """
        A label query over the set of namespaces that the term applies to.
        The term is applied to the union of the namespaces selected by this field
        and the ones listed in the namespaces field.
        null selector and null or empty namespaces list means "this pod's namespace".
        An empty selector ({}) matches all namespaces.
        """

        match_expressions: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgsDict"
                    ]
                ]
            ]
        ]
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        match_labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """

elif False:
    IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs:
    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs"
                    ]
                ]
            ]
        ] = None,
        match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None
    ):
        """
        A label query over the set of namespaces that the term applies to.
        The term is applied to the union of the namespaces selected by this field
        and the ones listed in the namespaces field.
        null selector and null or empty namespaces list means "this pod's namespace".
        An empty selector ({}) matches all namespaces.
        :param pulumi.Input[Sequence[pulumi.Input['IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs']]] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
               map is equivalent to an element of matchExpressions, whose key field is "key", the
               operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs"
                ]
            ]
        ]
    ]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(
        self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
    ):
        pulumi.set(self, "match_labels", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgsDict(
        TypedDict
    ):
        """
        Defines a set of pods (namely those matching the labelSelector
        relative to the given namespace(s)) that this pod should be
        co-located (affinity) or not co-located (anti-affinity) with,
        where co-located is defined as running on a node whose value of
        the label with key <topologyKey> matches that of any node on which
        a pod of the set of pods is running
        """

        label_selector: NotRequired[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchArgsDict"
            ]
        ]
        match_label_keys: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        MatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both matchLabelKeys and labelSelector.
        Also, matchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        mismatch_label_keys: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        MismatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
        Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        namespace_selector: NotRequired[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchArgsDict"
            ]
        ]
        namespaces: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        namespaces specifies a static list of namespace names that the term applies to.
        The term is applied to the union of the namespaces listed in this field
        and the ones selected by namespaceSelector.
        null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        """
        topology_key: NotRequired[pulumi.Input[str]]
        """
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
        the labelSelector in the specified namespaces, where co-located is defined as running on a node
        whose value of the label with key topologyKey matches that of any node on which any of the
        selected pods is running.
        Empty topologyKey is not allowed.
        """

elif False:
    IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgs:
    def __init__(
        __self__,
        *,
        label_selector: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchArgs"
            ]
        ] = None,
        match_label_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        mismatch_label_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        namespace_selector: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchArgs"
            ]
        ] = None,
        namespaces: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        topology_key: Optional[pulumi.Input[str]] = None
    ):
        """
        Defines a set of pods (namely those matching the labelSelector
        relative to the given namespace(s)) that this pod should be
        co-located (affinity) or not co-located (anti-affinity) with,
        where co-located is defined as running on a node whose value of
        the label with key <topologyKey> matches that of any node on which
        a pod of the set of pods is running
        :param pulumi.Input[Sequence[pulumi.Input[str]]] match_label_keys: MatchLabelKeys is a set of pod label keys to select which pods will
               be taken into consideration. The keys are used to lookup values from the
               incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
               to select the group of existing pods which pods will be taken into consideration
               for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
               pod labels will be ignored. The default value is empty.
               The same key is forbidden to exist in both matchLabelKeys and labelSelector.
               Also, matchLabelKeys cannot be set when labelSelector isn't set.
               This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] mismatch_label_keys: MismatchLabelKeys is a set of pod label keys to select which pods will
               be taken into consideration. The keys are used to lookup values from the
               incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
               to select the group of existing pods which pods will be taken into consideration
               for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
               pod labels will be ignored. The default value is empty.
               The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
               Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
               This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] namespaces: namespaces specifies a static list of namespace names that the term applies to.
               The term is applied to the union of the namespaces listed in this field
               and the ones selected by namespaceSelector.
               null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        :param pulumi.Input[str] topology_key: This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
               the labelSelector in the specified namespaces, where co-located is defined as running on a node
               whose value of the label with key topologyKey matches that of any node on which any of the
               selected pods is running.
               Empty topologyKey is not allowed.
        """
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if match_label_keys is not None:
            pulumi.set(__self__, "match_label_keys", match_label_keys)
        if mismatch_label_keys is not None:
            pulumi.set(__self__, "mismatch_label_keys", mismatch_label_keys)
        if namespace_selector is not None:
            pulumi.set(__self__, "namespace_selector", namespace_selector)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)
        if topology_key is not None:
            pulumi.set(__self__, "topology_key", topology_key)

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(
        self,
    ) -> Optional[
        pulumi.Input[
            "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchArgs"
        ]
    ]:
        return pulumi.get(self, "label_selector")

    @label_selector.setter
    def label_selector(
        self,
        value: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "label_selector", value)

    @property
    @pulumi.getter(name="matchLabelKeys")
    def match_label_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        MatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both matchLabelKeys and labelSelector.
        Also, matchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        return pulumi.get(self, "match_label_keys")

    @match_label_keys.setter
    def match_label_keys(
        self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]
    ):
        pulumi.set(self, "match_label_keys", value)

    @property
    @pulumi.getter(name="mismatchLabelKeys")
    def mismatch_label_keys(
        self,
    ) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        MismatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
        Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        return pulumi.get(self, "mismatch_label_keys")

    @mismatch_label_keys.setter
    def mismatch_label_keys(
        self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]
    ):
        pulumi.set(self, "mismatch_label_keys", value)

    @property
    @pulumi.getter(name="namespaceSelector")
    def namespace_selector(
        self,
    ) -> Optional[
        pulumi.Input[
            "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchArgs"
        ]
    ]:
        return pulumi.get(self, "namespace_selector")

    @namespace_selector.setter
    def namespace_selector(
        self,
        value: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "namespace_selector", value)

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        namespaces specifies a static list of namespace names that the term applies to.
        The term is applied to the union of the namespaces listed in this field
        and the ones selected by namespaceSelector.
        null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        """
        return pulumi.get(self, "namespaces")

    @namespaces.setter
    def namespaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "namespaces", value)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> Optional[pulumi.Input[str]]:
        """
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
        the labelSelector in the specified namespaces, where co-located is defined as running on a node
        whose value of the label with key topologyKey matches that of any node on which any of the
        selected pods is running.
        Empty topologyKey is not allowed.
        """
        return pulumi.get(self, "topology_key")

    @topology_key.setter
    def topology_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topology_key", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgsDict(
        TypedDict
    ):
        """
        Defines a set of pods (namely those matching the labelSelector
        relative to the given namespace(s)) that this pod should be
        co-located (affinity) or not co-located (anti-affinity) with,
        where co-located is defined as running on a node whose value of
        the label with key <topologyKey> matches that of any node on which
        a pod of the set of pods is running
        """

        label_selector: NotRequired[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgsDict"
            ]
        ]
        match_label_keys: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        MatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both matchLabelKeys and labelSelector.
        Also, matchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        mismatch_label_keys: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        MismatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
        Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        namespace_selector: NotRequired[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgsDict"
            ]
        ]
        namespaces: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        namespaces specifies a static list of namespace names that the term applies to.
        The term is applied to the union of the namespaces listed in this field
        and the ones selected by namespaceSelector.
        null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        """
        topology_key: NotRequired[pulumi.Input[str]]
        """
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
        the labelSelector in the specified namespaces, where co-located is defined as running on a node
        whose value of the label with key topologyKey matches that of any node on which any of the
        selected pods is running.
        Empty topologyKey is not allowed.
        """

elif False:
    IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs:
    def __init__(
        __self__,
        *,
        label_selector: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs"
            ]
        ] = None,
        match_label_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        mismatch_label_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        namespace_selector: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs"
            ]
        ] = None,
        namespaces: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        topology_key: Optional[pulumi.Input[str]] = None
    ):
        """
        Defines a set of pods (namely those matching the labelSelector
        relative to the given namespace(s)) that this pod should be
        co-located (affinity) or not co-located (anti-affinity) with,
        where co-located is defined as running on a node whose value of
        the label with key <topologyKey> matches that of any node on which
        a pod of the set of pods is running
        :param pulumi.Input[Sequence[pulumi.Input[str]]] match_label_keys: MatchLabelKeys is a set of pod label keys to select which pods will
               be taken into consideration. The keys are used to lookup values from the
               incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
               to select the group of existing pods which pods will be taken into consideration
               for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
               pod labels will be ignored. The default value is empty.
               The same key is forbidden to exist in both matchLabelKeys and labelSelector.
               Also, matchLabelKeys cannot be set when labelSelector isn't set.
               This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] mismatch_label_keys: MismatchLabelKeys is a set of pod label keys to select which pods will
               be taken into consideration. The keys are used to lookup values from the
               incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
               to select the group of existing pods which pods will be taken into consideration
               for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
               pod labels will be ignored. The default value is empty.
               The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
               Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
               This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] namespaces: namespaces specifies a static list of namespace names that the term applies to.
               The term is applied to the union of the namespaces listed in this field
               and the ones selected by namespaceSelector.
               null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        :param pulumi.Input[str] topology_key: This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
               the labelSelector in the specified namespaces, where co-located is defined as running on a node
               whose value of the label with key topologyKey matches that of any node on which any of the
               selected pods is running.
               Empty topologyKey is not allowed.
        """
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if match_label_keys is not None:
            pulumi.set(__self__, "match_label_keys", match_label_keys)
        if mismatch_label_keys is not None:
            pulumi.set(__self__, "mismatch_label_keys", mismatch_label_keys)
        if namespace_selector is not None:
            pulumi.set(__self__, "namespace_selector", namespace_selector)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)
        if topology_key is not None:
            pulumi.set(__self__, "topology_key", topology_key)

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(
        self,
    ) -> Optional[
        pulumi.Input[
            "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs"
        ]
    ]:
        return pulumi.get(self, "label_selector")

    @label_selector.setter
    def label_selector(
        self,
        value: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs"
            ]
        ],
    ):
        pulumi.set(self, "label_selector", value)

    @property
    @pulumi.getter(name="matchLabelKeys")
    def match_label_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        MatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both matchLabelKeys and labelSelector.
        Also, matchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        return pulumi.get(self, "match_label_keys")

    @match_label_keys.setter
    def match_label_keys(
        self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]
    ):
        pulumi.set(self, "match_label_keys", value)

    @property
    @pulumi.getter(name="mismatchLabelKeys")
    def mismatch_label_keys(
        self,
    ) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        MismatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
        Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        return pulumi.get(self, "mismatch_label_keys")

    @mismatch_label_keys.setter
    def mismatch_label_keys(
        self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]
    ):
        pulumi.set(self, "mismatch_label_keys", value)

    @property
    @pulumi.getter(name="namespaceSelector")
    def namespace_selector(
        self,
    ) -> Optional[
        pulumi.Input[
            "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs"
        ]
    ]:
        return pulumi.get(self, "namespace_selector")

    @namespace_selector.setter
    def namespace_selector(
        self,
        value: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs"
            ]
        ],
    ):
        pulumi.set(self, "namespace_selector", value)

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        namespaces specifies a static list of namespace names that the term applies to.
        The term is applied to the union of the namespaces listed in this field
        and the ones selected by namespaceSelector.
        null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        """
        return pulumi.get(self, "namespaces")

    @namespaces.setter
    def namespaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "namespaces", value)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> Optional[pulumi.Input[str]]:
        """
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
        the labelSelector in the specified namespaces, where co-located is defined as running on a node
        whose value of the label with key topologyKey matches that of any node on which any of the
        selected pods is running.
        Empty topologyKey is not allowed.
        """
        return pulumi.get(self, "topology_key")

    @topology_key.setter
    def topology_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topology_key", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityArgsDict(
        TypedDict
    ):
        """
        Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
        """

        preferred_during_scheduling_ignored_during_execution: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgsDict"
                    ]
                ]
            ]
        ]
        """
        The scheduler will prefer to schedule pods to nodes that satisfy
        the affinity expressions specified by this field, but it may choose
        a node that violates one or more of the expressions. The node that is
        most preferred is the one with the greatest sum of weights, i.e.
        for each node that meets all of the scheduling requirements (resource
        request, requiredDuringScheduling affinity expressions, etc.),
        compute a sum by iterating through the elements of this field and adding
        "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
        node(s) with the highest sum are the most preferred.
        """
        required_during_scheduling_ignored_during_execution: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgsDict"
                    ]
                ]
            ]
        ]
        """
        If the affinity requirements specified by this field are not met at
        scheduling time, the pod will not be scheduled onto the node.
        If the affinity requirements specified by this field cease to be met
        at some point during pod execution (e.g. due to a pod label update), the
        system may or may not try to eventually evict the pod from its node.
        When there are multiple elements, the lists of nodes corresponding to each
        podAffinityTerm are intersected, i.e. all terms must be satisfied.
        """

elif False:
    IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityArgs:
    def __init__(
        __self__,
        *,
        preferred_during_scheduling_ignored_during_execution: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs"
                    ]
                ]
            ]
        ] = None,
        required_during_scheduling_ignored_during_execution: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs"
                    ]
                ]
            ]
        ] = None
    ):
        """
        Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
        :param pulumi.Input[Sequence[pulumi.Input['IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs']]] preferred_during_scheduling_ignored_during_execution: The scheduler will prefer to schedule pods to nodes that satisfy
               the affinity expressions specified by this field, but it may choose
               a node that violates one or more of the expressions. The node that is
               most preferred is the one with the greatest sum of weights, i.e.
               for each node that meets all of the scheduling requirements (resource
               request, requiredDuringScheduling affinity expressions, etc.),
               compute a sum by iterating through the elements of this field and adding
               "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
               node(s) with the highest sum are the most preferred.
        :param pulumi.Input[Sequence[pulumi.Input['IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs']]] required_during_scheduling_ignored_during_execution: If the affinity requirements specified by this field are not met at
               scheduling time, the pod will not be scheduled onto the node.
               If the affinity requirements specified by this field cease to be met
               at some point during pod execution (e.g. due to a pod label update), the
               system may or may not try to eventually evict the pod from its node.
               When there are multiple elements, the lists of nodes corresponding to each
               podAffinityTerm are intersected, i.e. all terms must be satisfied.
        """
        if preferred_during_scheduling_ignored_during_execution is not None:
            pulumi.set(
                __self__,
                "preferred_during_scheduling_ignored_during_execution",
                preferred_during_scheduling_ignored_during_execution,
            )
        if required_during_scheduling_ignored_during_execution is not None:
            pulumi.set(
                __self__,
                "required_during_scheduling_ignored_during_execution",
                required_during_scheduling_ignored_during_execution,
            )

    @property
    @pulumi.getter(name="preferredDuringSchedulingIgnoredDuringExecution")
    def preferred_during_scheduling_ignored_during_execution(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs"
                ]
            ]
        ]
    ]:
        """
        The scheduler will prefer to schedule pods to nodes that satisfy
        the affinity expressions specified by this field, but it may choose
        a node that violates one or more of the expressions. The node that is
        most preferred is the one with the greatest sum of weights, i.e.
        for each node that meets all of the scheduling requirements (resource
        request, requiredDuringScheduling affinity expressions, etc.),
        compute a sum by iterating through the elements of this field and adding
        "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
        node(s) with the highest sum are the most preferred.
        """
        return pulumi.get(self, "preferred_during_scheduling_ignored_during_execution")

    @preferred_during_scheduling_ignored_during_execution.setter
    def preferred_during_scheduling_ignored_during_execution(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "preferred_during_scheduling_ignored_during_execution", value)

    @property
    @pulumi.getter(name="requiredDuringSchedulingIgnoredDuringExecution")
    def required_during_scheduling_ignored_during_execution(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs"
                ]
            ]
        ]
    ]:
        """
        If the affinity requirements specified by this field are not met at
        scheduling time, the pod will not be scheduled onto the node.
        If the affinity requirements specified by this field cease to be met
        at some point during pod execution (e.g. due to a pod label update), the
        system may or may not try to eventually evict the pod from its node.
        When there are multiple elements, the lists of nodes corresponding to each
        podAffinityTerm are intersected, i.e. all terms must be satisfied.
        """
        return pulumi.get(self, "required_during_scheduling_ignored_during_execution")

    @required_during_scheduling_ignored_during_execution.setter
    def required_during_scheduling_ignored_during_execution(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "required_during_scheduling_ignored_during_execution", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPatchArgsDict(
        TypedDict
    ):
        """
        Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
        """

        preferred_during_scheduling_ignored_during_execution: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgsDict"
                    ]
                ]
            ]
        ]
        """
        The scheduler will prefer to schedule pods to nodes that satisfy
        the anti-affinity expressions specified by this field, but it may choose
        a node that violates one or more of the expressions. The node that is
        most preferred is the one with the greatest sum of weights, i.e.
        for each node that meets all of the scheduling requirements (resource
        request, requiredDuringScheduling anti-affinity expressions, etc.),
        compute a sum by iterating through the elements of this field and adding
        "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
        node(s) with the highest sum are the most preferred.
        """
        required_during_scheduling_ignored_during_execution: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgsDict"
                    ]
                ]
            ]
        ]
        """
        If the anti-affinity requirements specified by this field are not met at
        scheduling time, the pod will not be scheduled onto the node.
        If the anti-affinity requirements specified by this field cease to be met
        at some point during pod execution (e.g. due to a pod label update), the
        system may or may not try to eventually evict the pod from its node.
        When there are multiple elements, the lists of nodes corresponding to each
        podAffinityTerm are intersected, i.e. all terms must be satisfied.
        """

elif False:
    IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPatchArgs:
    def __init__(
        __self__,
        *,
        preferred_during_scheduling_ignored_during_execution: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgs"
                    ]
                ]
            ]
        ] = None,
        required_during_scheduling_ignored_during_execution: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgs"
                    ]
                ]
            ]
        ] = None
    ):
        """
        Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
        :param pulumi.Input[Sequence[pulumi.Input['IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgs']]] preferred_during_scheduling_ignored_during_execution: The scheduler will prefer to schedule pods to nodes that satisfy
               the anti-affinity expressions specified by this field, but it may choose
               a node that violates one or more of the expressions. The node that is
               most preferred is the one with the greatest sum of weights, i.e.
               for each node that meets all of the scheduling requirements (resource
               request, requiredDuringScheduling anti-affinity expressions, etc.),
               compute a sum by iterating through the elements of this field and adding
               "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
               node(s) with the highest sum are the most preferred.
        :param pulumi.Input[Sequence[pulumi.Input['IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgs']]] required_during_scheduling_ignored_during_execution: If the anti-affinity requirements specified by this field are not met at
               scheduling time, the pod will not be scheduled onto the node.
               If the anti-affinity requirements specified by this field cease to be met
               at some point during pod execution (e.g. due to a pod label update), the
               system may or may not try to eventually evict the pod from its node.
               When there are multiple elements, the lists of nodes corresponding to each
               podAffinityTerm are intersected, i.e. all terms must be satisfied.
        """
        if preferred_during_scheduling_ignored_during_execution is not None:
            pulumi.set(
                __self__,
                "preferred_during_scheduling_ignored_during_execution",
                preferred_during_scheduling_ignored_during_execution,
            )
        if required_during_scheduling_ignored_during_execution is not None:
            pulumi.set(
                __self__,
                "required_during_scheduling_ignored_during_execution",
                required_during_scheduling_ignored_during_execution,
            )

    @property
    @pulumi.getter(name="preferredDuringSchedulingIgnoredDuringExecution")
    def preferred_during_scheduling_ignored_during_execution(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgs"
                ]
            ]
        ]
    ]:
        """
        The scheduler will prefer to schedule pods to nodes that satisfy
        the anti-affinity expressions specified by this field, but it may choose
        a node that violates one or more of the expressions. The node that is
        most preferred is the one with the greatest sum of weights, i.e.
        for each node that meets all of the scheduling requirements (resource
        request, requiredDuringScheduling anti-affinity expressions, etc.),
        compute a sum by iterating through the elements of this field and adding
        "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
        node(s) with the highest sum are the most preferred.
        """
        return pulumi.get(self, "preferred_during_scheduling_ignored_during_execution")

    @preferred_during_scheduling_ignored_during_execution.setter
    def preferred_during_scheduling_ignored_during_execution(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "preferred_during_scheduling_ignored_during_execution", value)

    @property
    @pulumi.getter(name="requiredDuringSchedulingIgnoredDuringExecution")
    def required_during_scheduling_ignored_during_execution(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgs"
                ]
            ]
        ]
    ]:
        """
        If the anti-affinity requirements specified by this field are not met at
        scheduling time, the pod will not be scheduled onto the node.
        If the anti-affinity requirements specified by this field cease to be met
        at some point during pod execution (e.g. due to a pod label update), the
        system may or may not try to eventually evict the pod from its node.
        When there are multiple elements, the lists of nodes corresponding to each
        podAffinityTerm are intersected, i.e. all terms must be satisfied.
        """
        return pulumi.get(self, "required_during_scheduling_ignored_during_execution")

    @required_during_scheduling_ignored_during_execution.setter
    def required_during_scheduling_ignored_during_execution(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "required_during_scheduling_ignored_during_execution", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgsDict(
        TypedDict
    ):
        """
        The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
        """

        pod_affinity_term: NotRequired[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchArgsDict"
            ]
        ]
        weight: NotRequired[pulumi.Input[int]]
        """
        weight associated with matching the corresponding podAffinityTerm,
        in the range 1-100.
        """

elif False:
    IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgs:
    def __init__(
        __self__,
        *,
        pod_affinity_term: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchArgs"
            ]
        ] = None,
        weight: Optional[pulumi.Input[int]] = None
    ):
        """
        The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
        :param pulumi.Input[int] weight: weight associated with matching the corresponding podAffinityTerm,
               in the range 1-100.
        """
        if pod_affinity_term is not None:
            pulumi.set(__self__, "pod_affinity_term", pod_affinity_term)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter(name="podAffinityTerm")
    def pod_affinity_term(
        self,
    ) -> Optional[
        pulumi.Input[
            "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchArgs"
        ]
    ]:
        return pulumi.get(self, "pod_affinity_term")

    @pod_affinity_term.setter
    def pod_affinity_term(
        self,
        value: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "pod_affinity_term", value)

    @property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[int]]:
        """
        weight associated with matching the corresponding podAffinityTerm,
        in the range 1-100.
        """
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "weight", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArgsDict(
        TypedDict
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        key is the label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """

elif False:
    IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        operator: Optional[pulumi.Input[str]] = None,
        values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        :param pulumi.Input[str] key: key is the label key that the selector applies to.
        :param pulumi.Input[str] operator: operator represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists and DoesNotExist.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: values is an array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. This array is replaced during a strategic
               merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgsDict(
        TypedDict
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        key is the label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """

elif False:
    IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        operator: Optional[pulumi.Input[str]] = None,
        values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        :param pulumi.Input[str] key: key is the label key that the selector applies to.
        :param pulumi.Input[str] operator: operator represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists and DoesNotExist.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: values is an array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. This array is replaced during a strategic
               merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchArgsDict(
        TypedDict
    ):
        """
        A label query over a set of resources, in this case pods.
        If it's null, this PodAffinityTerm matches with no Pods.
        """

        match_expressions: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArgsDict"
                    ]
                ]
            ]
        ]
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        match_labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """

elif False:
    IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchArgs:
    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArgs"
                    ]
                ]
            ]
        ] = None,
        match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None
    ):
        """
        A label query over a set of resources, in this case pods.
        If it's null, this PodAffinityTerm matches with no Pods.
        :param pulumi.Input[Sequence[pulumi.Input['IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArgs']]] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
               map is equivalent to an element of matchExpressions, whose key field is "key", the
               operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArgs"
                ]
            ]
        ]
    ]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(
        self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
    ):
        pulumi.set(self, "match_labels", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgsDict(
        TypedDict
    ):
        """
        A label query over a set of resources, in this case pods.
        If it's null, this PodAffinityTerm matches with no Pods.
        """

        match_expressions: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgsDict"
                    ]
                ]
            ]
        ]
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        match_labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """

elif False:
    IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs:
    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs"
                    ]
                ]
            ]
        ] = None,
        match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None
    ):
        """
        A label query over a set of resources, in this case pods.
        If it's null, this PodAffinityTerm matches with no Pods.
        :param pulumi.Input[Sequence[pulumi.Input['IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs']]] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
               map is equivalent to an element of matchExpressions, whose key field is "key", the
               operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs"
                ]
            ]
        ]
    ]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(
        self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
    ):
        pulumi.set(self, "match_labels", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArgsDict(
        TypedDict
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        key is the label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """

elif False:
    IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        operator: Optional[pulumi.Input[str]] = None,
        values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        :param pulumi.Input[str] key: key is the label key that the selector applies to.
        :param pulumi.Input[str] operator: operator represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists and DoesNotExist.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: values is an array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. This array is replaced during a strategic
               merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgsDict(
        TypedDict
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        key is the label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """

elif False:
    IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        operator: Optional[pulumi.Input[str]] = None,
        values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        :param pulumi.Input[str] key: key is the label key that the selector applies to.
        :param pulumi.Input[str] operator: operator represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists and DoesNotExist.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: values is an array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. This array is replaced during a strategic
               merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchArgsDict(
        TypedDict
    ):
        """
        A label query over the set of namespaces that the term applies to.
        The term is applied to the union of the namespaces selected by this field
        and the ones listed in the namespaces field.
        null selector and null or empty namespaces list means "this pod's namespace".
        An empty selector ({}) matches all namespaces.
        """

        match_expressions: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArgsDict"
                    ]
                ]
            ]
        ]
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        match_labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """

elif False:
    IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchArgs:
    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArgs"
                    ]
                ]
            ]
        ] = None,
        match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None
    ):
        """
        A label query over the set of namespaces that the term applies to.
        The term is applied to the union of the namespaces selected by this field
        and the ones listed in the namespaces field.
        null selector and null or empty namespaces list means "this pod's namespace".
        An empty selector ({}) matches all namespaces.
        :param pulumi.Input[Sequence[pulumi.Input['IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArgs']]] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
               map is equivalent to an element of matchExpressions, whose key field is "key", the
               operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArgs"
                ]
            ]
        ]
    ]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(
        self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
    ):
        pulumi.set(self, "match_labels", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgsDict(
        TypedDict
    ):
        """
        A label query over the set of namespaces that the term applies to.
        The term is applied to the union of the namespaces selected by this field
        and the ones listed in the namespaces field.
        null selector and null or empty namespaces list means "this pod's namespace".
        An empty selector ({}) matches all namespaces.
        """

        match_expressions: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgsDict"
                    ]
                ]
            ]
        ]
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        match_labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """

elif False:
    IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs:
    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs"
                    ]
                ]
            ]
        ] = None,
        match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None
    ):
        """
        A label query over the set of namespaces that the term applies to.
        The term is applied to the union of the namespaces selected by this field
        and the ones listed in the namespaces field.
        null selector and null or empty namespaces list means "this pod's namespace".
        An empty selector ({}) matches all namespaces.
        :param pulumi.Input[Sequence[pulumi.Input['IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs']]] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
               map is equivalent to an element of matchExpressions, whose key field is "key", the
               operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs"
                ]
            ]
        ]
    ]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(
        self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
    ):
        pulumi.set(self, "match_labels", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchArgsDict(
        TypedDict
    ):
        """
        Required. A pod affinity term, associated with the corresponding weight.
        """

        label_selector: NotRequired[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchArgsDict"
            ]
        ]
        match_label_keys: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        MatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both matchLabelKeys and labelSelector.
        Also, matchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        mismatch_label_keys: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        MismatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
        Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        namespace_selector: NotRequired[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchArgsDict"
            ]
        ]
        namespaces: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        namespaces specifies a static list of namespace names that the term applies to.
        The term is applied to the union of the namespaces listed in this field
        and the ones selected by namespaceSelector.
        null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        """
        topology_key: NotRequired[pulumi.Input[str]]
        """
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
        the labelSelector in the specified namespaces, where co-located is defined as running on a node
        whose value of the label with key topologyKey matches that of any node on which any of the
        selected pods is running.
        Empty topologyKey is not allowed.
        """

elif False:
    IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchArgs:
    def __init__(
        __self__,
        *,
        label_selector: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchArgs"
            ]
        ] = None,
        match_label_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        mismatch_label_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        namespace_selector: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchArgs"
            ]
        ] = None,
        namespaces: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        topology_key: Optional[pulumi.Input[str]] = None
    ):
        """
        Required. A pod affinity term, associated with the corresponding weight.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] match_label_keys: MatchLabelKeys is a set of pod label keys to select which pods will
               be taken into consideration. The keys are used to lookup values from the
               incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
               to select the group of existing pods which pods will be taken into consideration
               for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
               pod labels will be ignored. The default value is empty.
               The same key is forbidden to exist in both matchLabelKeys and labelSelector.
               Also, matchLabelKeys cannot be set when labelSelector isn't set.
               This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] mismatch_label_keys: MismatchLabelKeys is a set of pod label keys to select which pods will
               be taken into consideration. The keys are used to lookup values from the
               incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
               to select the group of existing pods which pods will be taken into consideration
               for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
               pod labels will be ignored. The default value is empty.
               The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
               Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
               This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] namespaces: namespaces specifies a static list of namespace names that the term applies to.
               The term is applied to the union of the namespaces listed in this field
               and the ones selected by namespaceSelector.
               null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        :param pulumi.Input[str] topology_key: This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
               the labelSelector in the specified namespaces, where co-located is defined as running on a node
               whose value of the label with key topologyKey matches that of any node on which any of the
               selected pods is running.
               Empty topologyKey is not allowed.
        """
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if match_label_keys is not None:
            pulumi.set(__self__, "match_label_keys", match_label_keys)
        if mismatch_label_keys is not None:
            pulumi.set(__self__, "mismatch_label_keys", mismatch_label_keys)
        if namespace_selector is not None:
            pulumi.set(__self__, "namespace_selector", namespace_selector)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)
        if topology_key is not None:
            pulumi.set(__self__, "topology_key", topology_key)

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(
        self,
    ) -> Optional[
        pulumi.Input[
            "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchArgs"
        ]
    ]:
        return pulumi.get(self, "label_selector")

    @label_selector.setter
    def label_selector(
        self,
        value: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "label_selector", value)

    @property
    @pulumi.getter(name="matchLabelKeys")
    def match_label_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        MatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both matchLabelKeys and labelSelector.
        Also, matchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        return pulumi.get(self, "match_label_keys")

    @match_label_keys.setter
    def match_label_keys(
        self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]
    ):
        pulumi.set(self, "match_label_keys", value)

    @property
    @pulumi.getter(name="mismatchLabelKeys")
    def mismatch_label_keys(
        self,
    ) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        MismatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
        Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        return pulumi.get(self, "mismatch_label_keys")

    @mismatch_label_keys.setter
    def mismatch_label_keys(
        self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]
    ):
        pulumi.set(self, "mismatch_label_keys", value)

    @property
    @pulumi.getter(name="namespaceSelector")
    def namespace_selector(
        self,
    ) -> Optional[
        pulumi.Input[
            "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchArgs"
        ]
    ]:
        return pulumi.get(self, "namespace_selector")

    @namespace_selector.setter
    def namespace_selector(
        self,
        value: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "namespace_selector", value)

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        namespaces specifies a static list of namespace names that the term applies to.
        The term is applied to the union of the namespaces listed in this field
        and the ones selected by namespaceSelector.
        null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        """
        return pulumi.get(self, "namespaces")

    @namespaces.setter
    def namespaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "namespaces", value)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> Optional[pulumi.Input[str]]:
        """
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
        the labelSelector in the specified namespaces, where co-located is defined as running on a node
        whose value of the label with key topologyKey matches that of any node on which any of the
        selected pods is running.
        Empty topologyKey is not allowed.
        """
        return pulumi.get(self, "topology_key")

    @topology_key.setter
    def topology_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topology_key", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgsDict(
        TypedDict
    ):
        """
        Required. A pod affinity term, associated with the corresponding weight.
        """

        label_selector: NotRequired[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgsDict"
            ]
        ]
        match_label_keys: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        MatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both matchLabelKeys and labelSelector.
        Also, matchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        mismatch_label_keys: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        MismatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
        Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        namespace_selector: NotRequired[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgsDict"
            ]
        ]
        namespaces: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        namespaces specifies a static list of namespace names that the term applies to.
        The term is applied to the union of the namespaces listed in this field
        and the ones selected by namespaceSelector.
        null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        """
        topology_key: NotRequired[pulumi.Input[str]]
        """
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
        the labelSelector in the specified namespaces, where co-located is defined as running on a node
        whose value of the label with key topologyKey matches that of any node on which any of the
        selected pods is running.
        Empty topologyKey is not allowed.
        """

elif False:
    IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs:
    def __init__(
        __self__,
        *,
        label_selector: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs"
            ]
        ] = None,
        match_label_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        mismatch_label_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        namespace_selector: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs"
            ]
        ] = None,
        namespaces: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        topology_key: Optional[pulumi.Input[str]] = None
    ):
        """
        Required. A pod affinity term, associated with the corresponding weight.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] match_label_keys: MatchLabelKeys is a set of pod label keys to select which pods will
               be taken into consideration. The keys are used to lookup values from the
               incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
               to select the group of existing pods which pods will be taken into consideration
               for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
               pod labels will be ignored. The default value is empty.
               The same key is forbidden to exist in both matchLabelKeys and labelSelector.
               Also, matchLabelKeys cannot be set when labelSelector isn't set.
               This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] mismatch_label_keys: MismatchLabelKeys is a set of pod label keys to select which pods will
               be taken into consideration. The keys are used to lookup values from the
               incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
               to select the group of existing pods which pods will be taken into consideration
               for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
               pod labels will be ignored. The default value is empty.
               The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
               Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
               This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] namespaces: namespaces specifies a static list of namespace names that the term applies to.
               The term is applied to the union of the namespaces listed in this field
               and the ones selected by namespaceSelector.
               null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        :param pulumi.Input[str] topology_key: This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
               the labelSelector in the specified namespaces, where co-located is defined as running on a node
               whose value of the label with key topologyKey matches that of any node on which any of the
               selected pods is running.
               Empty topologyKey is not allowed.
        """
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if match_label_keys is not None:
            pulumi.set(__self__, "match_label_keys", match_label_keys)
        if mismatch_label_keys is not None:
            pulumi.set(__self__, "mismatch_label_keys", mismatch_label_keys)
        if namespace_selector is not None:
            pulumi.set(__self__, "namespace_selector", namespace_selector)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)
        if topology_key is not None:
            pulumi.set(__self__, "topology_key", topology_key)

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(
        self,
    ) -> Optional[
        pulumi.Input[
            "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs"
        ]
    ]:
        return pulumi.get(self, "label_selector")

    @label_selector.setter
    def label_selector(
        self,
        value: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs"
            ]
        ],
    ):
        pulumi.set(self, "label_selector", value)

    @property
    @pulumi.getter(name="matchLabelKeys")
    def match_label_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        MatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both matchLabelKeys and labelSelector.
        Also, matchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        return pulumi.get(self, "match_label_keys")

    @match_label_keys.setter
    def match_label_keys(
        self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]
    ):
        pulumi.set(self, "match_label_keys", value)

    @property
    @pulumi.getter(name="mismatchLabelKeys")
    def mismatch_label_keys(
        self,
    ) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        MismatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
        Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        return pulumi.get(self, "mismatch_label_keys")

    @mismatch_label_keys.setter
    def mismatch_label_keys(
        self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]
    ):
        pulumi.set(self, "mismatch_label_keys", value)

    @property
    @pulumi.getter(name="namespaceSelector")
    def namespace_selector(
        self,
    ) -> Optional[
        pulumi.Input[
            "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs"
        ]
    ]:
        return pulumi.get(self, "namespace_selector")

    @namespace_selector.setter
    def namespace_selector(
        self,
        value: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs"
            ]
        ],
    ):
        pulumi.set(self, "namespace_selector", value)

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        namespaces specifies a static list of namespace names that the term applies to.
        The term is applied to the union of the namespaces listed in this field
        and the ones selected by namespaceSelector.
        null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        """
        return pulumi.get(self, "namespaces")

    @namespaces.setter
    def namespaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "namespaces", value)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> Optional[pulumi.Input[str]]:
        """
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
        the labelSelector in the specified namespaces, where co-located is defined as running on a node
        whose value of the label with key topologyKey matches that of any node on which any of the
        selected pods is running.
        Empty topologyKey is not allowed.
        """
        return pulumi.get(self, "topology_key")

    @topology_key.setter
    def topology_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topology_key", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgsDict(
        TypedDict
    ):
        """
        The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
        """

        pod_affinity_term: NotRequired[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgsDict"
            ]
        ]
        weight: NotRequired[pulumi.Input[int]]
        """
        weight associated with matching the corresponding podAffinityTerm,
        in the range 1-100.
        """

elif False:
    IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs:
    def __init__(
        __self__,
        *,
        pod_affinity_term: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs"
            ]
        ] = None,
        weight: Optional[pulumi.Input[int]] = None
    ):
        """
        The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
        :param pulumi.Input[int] weight: weight associated with matching the corresponding podAffinityTerm,
               in the range 1-100.
        """
        if pod_affinity_term is not None:
            pulumi.set(__self__, "pod_affinity_term", pod_affinity_term)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter(name="podAffinityTerm")
    def pod_affinity_term(
        self,
    ) -> Optional[
        pulumi.Input[
            "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs"
        ]
    ]:
        return pulumi.get(self, "pod_affinity_term")

    @pod_affinity_term.setter
    def pod_affinity_term(
        self,
        value: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs"
            ]
        ],
    ):
        pulumi.set(self, "pod_affinity_term", value)

    @property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[int]]:
        """
        weight associated with matching the corresponding podAffinityTerm,
        in the range 1-100.
        """
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "weight", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArgsDict(
        TypedDict
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        key is the label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """

elif False:
    IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        operator: Optional[pulumi.Input[str]] = None,
        values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        :param pulumi.Input[str] key: key is the label key that the selector applies to.
        :param pulumi.Input[str] operator: operator represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists and DoesNotExist.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: values is an array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. This array is replaced during a strategic
               merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgsDict(
        TypedDict
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        key is the label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """

elif False:
    IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        operator: Optional[pulumi.Input[str]] = None,
        values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        :param pulumi.Input[str] key: key is the label key that the selector applies to.
        :param pulumi.Input[str] operator: operator represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists and DoesNotExist.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: values is an array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. This array is replaced during a strategic
               merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchArgsDict(
        TypedDict
    ):
        """
        A label query over a set of resources, in this case pods.
        If it's null, this PodAffinityTerm matches with no Pods.
        """

        match_expressions: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArgsDict"
                    ]
                ]
            ]
        ]
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        match_labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """

elif False:
    IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchArgs:
    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArgs"
                    ]
                ]
            ]
        ] = None,
        match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None
    ):
        """
        A label query over a set of resources, in this case pods.
        If it's null, this PodAffinityTerm matches with no Pods.
        :param pulumi.Input[Sequence[pulumi.Input['IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArgs']]] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
               map is equivalent to an element of matchExpressions, whose key field is "key", the
               operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArgs"
                ]
            ]
        ]
    ]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(
        self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
    ):
        pulumi.set(self, "match_labels", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgsDict(
        TypedDict
    ):
        """
        A label query over a set of resources, in this case pods.
        If it's null, this PodAffinityTerm matches with no Pods.
        """

        match_expressions: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgsDict"
                    ]
                ]
            ]
        ]
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        match_labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """

elif False:
    IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs:
    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs"
                    ]
                ]
            ]
        ] = None,
        match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None
    ):
        """
        A label query over a set of resources, in this case pods.
        If it's null, this PodAffinityTerm matches with no Pods.
        :param pulumi.Input[Sequence[pulumi.Input['IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs']]] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
               map is equivalent to an element of matchExpressions, whose key field is "key", the
               operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs"
                ]
            ]
        ]
    ]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(
        self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
    ):
        pulumi.set(self, "match_labels", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArgsDict(
        TypedDict
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        key is the label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """

elif False:
    IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        operator: Optional[pulumi.Input[str]] = None,
        values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        :param pulumi.Input[str] key: key is the label key that the selector applies to.
        :param pulumi.Input[str] operator: operator represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists and DoesNotExist.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: values is an array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. This array is replaced during a strategic
               merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgsDict(
        TypedDict
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        key is the label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """

elif False:
    IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        operator: Optional[pulumi.Input[str]] = None,
        values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None
    ):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that
        relates the key and values.
        :param pulumi.Input[str] key: key is the label key that the selector applies to.
        :param pulumi.Input[str] operator: operator represents a key's relationship to a set of values.
               Valid operators are In, NotIn, Exists and DoesNotExist.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: values is an array of string values. If the operator is In or NotIn,
               the values array must be non-empty. If the operator is Exists or DoesNotExist,
               the values array must be empty. This array is replaced during a strategic
               merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchArgsDict(
        TypedDict
    ):
        """
        A label query over the set of namespaces that the term applies to.
        The term is applied to the union of the namespaces selected by this field
        and the ones listed in the namespaces field.
        null selector and null or empty namespaces list means "this pod's namespace".
        An empty selector ({}) matches all namespaces.
        """

        match_expressions: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArgsDict"
                    ]
                ]
            ]
        ]
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        match_labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """

elif False:
    IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchArgs:
    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArgs"
                    ]
                ]
            ]
        ] = None,
        match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None
    ):
        """
        A label query over the set of namespaces that the term applies to.
        The term is applied to the union of the namespaces selected by this field
        and the ones listed in the namespaces field.
        null selector and null or empty namespaces list means "this pod's namespace".
        An empty selector ({}) matches all namespaces.
        :param pulumi.Input[Sequence[pulumi.Input['IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArgs']]] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
               map is equivalent to an element of matchExpressions, whose key field is "key", the
               operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArgs"
                ]
            ]
        ]
    ]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(
        self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
    ):
        pulumi.set(self, "match_labels", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgsDict(
        TypedDict
    ):
        """
        A label query over the set of namespaces that the term applies to.
        The term is applied to the union of the namespaces selected by this field
        and the ones listed in the namespaces field.
        null selector and null or empty namespaces list means "this pod's namespace".
        An empty selector ({}) matches all namespaces.
        """

        match_expressions: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgsDict"
                    ]
                ]
            ]
        ]
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        match_labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """

elif False:
    IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs:
    def __init__(
        __self__,
        *,
        match_expressions: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs"
                    ]
                ]
            ]
        ] = None,
        match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None
    ):
        """
        A label query over the set of namespaces that the term applies to.
        The term is applied to the union of the namespaces selected by this field
        and the ones listed in the namespaces field.
        null selector and null or empty namespaces list means "this pod's namespace".
        An empty selector ({}) matches all namespaces.
        :param pulumi.Input[Sequence[pulumi.Input['IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs']]] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
               map is equivalent to an element of matchExpressions, whose key field is "key", the
               operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs"
                ]
            ]
        ]
    ]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(
        self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
    ):
        pulumi.set(self, "match_labels", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgsDict(
        TypedDict
    ):
        """
        Defines a set of pods (namely those matching the labelSelector
        relative to the given namespace(s)) that this pod should be
        co-located (affinity) or not co-located (anti-affinity) with,
        where co-located is defined as running on a node whose value of
        the label with key <topologyKey> matches that of any node on which
        a pod of the set of pods is running
        """

        label_selector: NotRequired[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchArgsDict"
            ]
        ]
        match_label_keys: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        MatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both matchLabelKeys and labelSelector.
        Also, matchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        mismatch_label_keys: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        MismatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
        Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        namespace_selector: NotRequired[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchArgsDict"
            ]
        ]
        namespaces: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        namespaces specifies a static list of namespace names that the term applies to.
        The term is applied to the union of the namespaces listed in this field
        and the ones selected by namespaceSelector.
        null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        """
        topology_key: NotRequired[pulumi.Input[str]]
        """
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
        the labelSelector in the specified namespaces, where co-located is defined as running on a node
        whose value of the label with key topologyKey matches that of any node on which any of the
        selected pods is running.
        Empty topologyKey is not allowed.
        """

elif False:
    IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgs:
    def __init__(
        __self__,
        *,
        label_selector: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchArgs"
            ]
        ] = None,
        match_label_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        mismatch_label_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        namespace_selector: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchArgs"
            ]
        ] = None,
        namespaces: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        topology_key: Optional[pulumi.Input[str]] = None
    ):
        """
        Defines a set of pods (namely those matching the labelSelector
        relative to the given namespace(s)) that this pod should be
        co-located (affinity) or not co-located (anti-affinity) with,
        where co-located is defined as running on a node whose value of
        the label with key <topologyKey> matches that of any node on which
        a pod of the set of pods is running
        :param pulumi.Input[Sequence[pulumi.Input[str]]] match_label_keys: MatchLabelKeys is a set of pod label keys to select which pods will
               be taken into consideration. The keys are used to lookup values from the
               incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
               to select the group of existing pods which pods will be taken into consideration
               for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
               pod labels will be ignored. The default value is empty.
               The same key is forbidden to exist in both matchLabelKeys and labelSelector.
               Also, matchLabelKeys cannot be set when labelSelector isn't set.
               This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] mismatch_label_keys: MismatchLabelKeys is a set of pod label keys to select which pods will
               be taken into consideration. The keys are used to lookup values from the
               incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
               to select the group of existing pods which pods will be taken into consideration
               for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
               pod labels will be ignored. The default value is empty.
               The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
               Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
               This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] namespaces: namespaces specifies a static list of namespace names that the term applies to.
               The term is applied to the union of the namespaces listed in this field
               and the ones selected by namespaceSelector.
               null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        :param pulumi.Input[str] topology_key: This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
               the labelSelector in the specified namespaces, where co-located is defined as running on a node
               whose value of the label with key topologyKey matches that of any node on which any of the
               selected pods is running.
               Empty topologyKey is not allowed.
        """
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if match_label_keys is not None:
            pulumi.set(__self__, "match_label_keys", match_label_keys)
        if mismatch_label_keys is not None:
            pulumi.set(__self__, "mismatch_label_keys", mismatch_label_keys)
        if namespace_selector is not None:
            pulumi.set(__self__, "namespace_selector", namespace_selector)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)
        if topology_key is not None:
            pulumi.set(__self__, "topology_key", topology_key)

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(
        self,
    ) -> Optional[
        pulumi.Input[
            "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchArgs"
        ]
    ]:
        return pulumi.get(self, "label_selector")

    @label_selector.setter
    def label_selector(
        self,
        value: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "label_selector", value)

    @property
    @pulumi.getter(name="matchLabelKeys")
    def match_label_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        MatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both matchLabelKeys and labelSelector.
        Also, matchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        return pulumi.get(self, "match_label_keys")

    @match_label_keys.setter
    def match_label_keys(
        self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]
    ):
        pulumi.set(self, "match_label_keys", value)

    @property
    @pulumi.getter(name="mismatchLabelKeys")
    def mismatch_label_keys(
        self,
    ) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        MismatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
        Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        return pulumi.get(self, "mismatch_label_keys")

    @mismatch_label_keys.setter
    def mismatch_label_keys(
        self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]
    ):
        pulumi.set(self, "mismatch_label_keys", value)

    @property
    @pulumi.getter(name="namespaceSelector")
    def namespace_selector(
        self,
    ) -> Optional[
        pulumi.Input[
            "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchArgs"
        ]
    ]:
        return pulumi.get(self, "namespace_selector")

    @namespace_selector.setter
    def namespace_selector(
        self,
        value: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "namespace_selector", value)

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        namespaces specifies a static list of namespace names that the term applies to.
        The term is applied to the union of the namespaces listed in this field
        and the ones selected by namespaceSelector.
        null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        """
        return pulumi.get(self, "namespaces")

    @namespaces.setter
    def namespaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "namespaces", value)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> Optional[pulumi.Input[str]]:
        """
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
        the labelSelector in the specified namespaces, where co-located is defined as running on a node
        whose value of the label with key topologyKey matches that of any node on which any of the
        selected pods is running.
        Empty topologyKey is not allowed.
        """
        return pulumi.get(self, "topology_key")

    @topology_key.setter
    def topology_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topology_key", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgsDict(
        TypedDict
    ):
        """
        Defines a set of pods (namely those matching the labelSelector
        relative to the given namespace(s)) that this pod should be
        co-located (affinity) or not co-located (anti-affinity) with,
        where co-located is defined as running on a node whose value of
        the label with key <topologyKey> matches that of any node on which
        a pod of the set of pods is running
        """

        label_selector: NotRequired[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgsDict"
            ]
        ]
        match_label_keys: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        MatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both matchLabelKeys and labelSelector.
        Also, matchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        mismatch_label_keys: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        MismatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
        Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        namespace_selector: NotRequired[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgsDict"
            ]
        ]
        namespaces: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        namespaces specifies a static list of namespace names that the term applies to.
        The term is applied to the union of the namespaces listed in this field
        and the ones selected by namespaceSelector.
        null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        """
        topology_key: NotRequired[pulumi.Input[str]]
        """
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
        the labelSelector in the specified namespaces, where co-located is defined as running on a node
        whose value of the label with key topologyKey matches that of any node on which any of the
        selected pods is running.
        Empty topologyKey is not allowed.
        """

elif False:
    IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs:
    def __init__(
        __self__,
        *,
        label_selector: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs"
            ]
        ] = None,
        match_label_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        mismatch_label_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        namespace_selector: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs"
            ]
        ] = None,
        namespaces: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        topology_key: Optional[pulumi.Input[str]] = None
    ):
        """
        Defines a set of pods (namely those matching the labelSelector
        relative to the given namespace(s)) that this pod should be
        co-located (affinity) or not co-located (anti-affinity) with,
        where co-located is defined as running on a node whose value of
        the label with key <topologyKey> matches that of any node on which
        a pod of the set of pods is running
        :param pulumi.Input[Sequence[pulumi.Input[str]]] match_label_keys: MatchLabelKeys is a set of pod label keys to select which pods will
               be taken into consideration. The keys are used to lookup values from the
               incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
               to select the group of existing pods which pods will be taken into consideration
               for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
               pod labels will be ignored. The default value is empty.
               The same key is forbidden to exist in both matchLabelKeys and labelSelector.
               Also, matchLabelKeys cannot be set when labelSelector isn't set.
               This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] mismatch_label_keys: MismatchLabelKeys is a set of pod label keys to select which pods will
               be taken into consideration. The keys are used to lookup values from the
               incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
               to select the group of existing pods which pods will be taken into consideration
               for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
               pod labels will be ignored. The default value is empty.
               The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
               Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
               This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] namespaces: namespaces specifies a static list of namespace names that the term applies to.
               The term is applied to the union of the namespaces listed in this field
               and the ones selected by namespaceSelector.
               null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        :param pulumi.Input[str] topology_key: This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
               the labelSelector in the specified namespaces, where co-located is defined as running on a node
               whose value of the label with key topologyKey matches that of any node on which any of the
               selected pods is running.
               Empty topologyKey is not allowed.
        """
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if match_label_keys is not None:
            pulumi.set(__self__, "match_label_keys", match_label_keys)
        if mismatch_label_keys is not None:
            pulumi.set(__self__, "mismatch_label_keys", mismatch_label_keys)
        if namespace_selector is not None:
            pulumi.set(__self__, "namespace_selector", namespace_selector)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)
        if topology_key is not None:
            pulumi.set(__self__, "topology_key", topology_key)

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(
        self,
    ) -> Optional[
        pulumi.Input[
            "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs"
        ]
    ]:
        return pulumi.get(self, "label_selector")

    @label_selector.setter
    def label_selector(
        self,
        value: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs"
            ]
        ],
    ):
        pulumi.set(self, "label_selector", value)

    @property
    @pulumi.getter(name="matchLabelKeys")
    def match_label_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        MatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both matchLabelKeys and labelSelector.
        Also, matchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        return pulumi.get(self, "match_label_keys")

    @match_label_keys.setter
    def match_label_keys(
        self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]
    ):
        pulumi.set(self, "match_label_keys", value)

    @property
    @pulumi.getter(name="mismatchLabelKeys")
    def mismatch_label_keys(
        self,
    ) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        MismatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
        Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
        """
        return pulumi.get(self, "mismatch_label_keys")

    @mismatch_label_keys.setter
    def mismatch_label_keys(
        self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]
    ):
        pulumi.set(self, "mismatch_label_keys", value)

    @property
    @pulumi.getter(name="namespaceSelector")
    def namespace_selector(
        self,
    ) -> Optional[
        pulumi.Input[
            "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs"
        ]
    ]:
        return pulumi.get(self, "namespace_selector")

    @namespace_selector.setter
    def namespace_selector(
        self,
        value: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs"
            ]
        ],
    ):
        pulumi.set(self, "namespace_selector", value)

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        namespaces specifies a static list of namespace names that the term applies to.
        The term is applied to the union of the namespaces listed in this field
        and the ones selected by namespaceSelector.
        null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        """
        return pulumi.get(self, "namespaces")

    @namespaces.setter
    def namespaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "namespaces", value)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> Optional[pulumi.Input[str]]:
        """
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
        the labelSelector in the specified namespaces, where co-located is defined as running on a node
        whose value of the label with key topologyKey matches that of any node on which any of the
        selected pods is running.
        Empty topologyKey is not allowed.
        """
        return pulumi.get(self, "topology_key")

    @topology_key.setter
    def topology_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topology_key", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityArgsDict(
        TypedDict
    ):
        """
        Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
        """

        preferred_during_scheduling_ignored_during_execution: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgsDict"
                    ]
                ]
            ]
        ]
        """
        The scheduler will prefer to schedule pods to nodes that satisfy
        the anti-affinity expressions specified by this field, but it may choose
        a node that violates one or more of the expressions. The node that is
        most preferred is the one with the greatest sum of weights, i.e.
        for each node that meets all of the scheduling requirements (resource
        request, requiredDuringScheduling anti-affinity expressions, etc.),
        compute a sum by iterating through the elements of this field and adding
        "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
        node(s) with the highest sum are the most preferred.
        """
        required_during_scheduling_ignored_during_execution: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgsDict"
                    ]
                ]
            ]
        ]
        """
        If the anti-affinity requirements specified by this field are not met at
        scheduling time, the pod will not be scheduled onto the node.
        If the anti-affinity requirements specified by this field cease to be met
        at some point during pod execution (e.g. due to a pod label update), the
        system may or may not try to eventually evict the pod from its node.
        When there are multiple elements, the lists of nodes corresponding to each
        podAffinityTerm are intersected, i.e. all terms must be satisfied.
        """

elif False:
    IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityArgs:
    def __init__(
        __self__,
        *,
        preferred_during_scheduling_ignored_during_execution: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs"
                    ]
                ]
            ]
        ] = None,
        required_during_scheduling_ignored_during_execution: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs"
                    ]
                ]
            ]
        ] = None
    ):
        """
        Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
        :param pulumi.Input[Sequence[pulumi.Input['IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs']]] preferred_during_scheduling_ignored_during_execution: The scheduler will prefer to schedule pods to nodes that satisfy
               the anti-affinity expressions specified by this field, but it may choose
               a node that violates one or more of the expressions. The node that is
               most preferred is the one with the greatest sum of weights, i.e.
               for each node that meets all of the scheduling requirements (resource
               request, requiredDuringScheduling anti-affinity expressions, etc.),
               compute a sum by iterating through the elements of this field and adding
               "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
               node(s) with the highest sum are the most preferred.
        :param pulumi.Input[Sequence[pulumi.Input['IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs']]] required_during_scheduling_ignored_during_execution: If the anti-affinity requirements specified by this field are not met at
               scheduling time, the pod will not be scheduled onto the node.
               If the anti-affinity requirements specified by this field cease to be met
               at some point during pod execution (e.g. due to a pod label update), the
               system may or may not try to eventually evict the pod from its node.
               When there are multiple elements, the lists of nodes corresponding to each
               podAffinityTerm are intersected, i.e. all terms must be satisfied.
        """
        if preferred_during_scheduling_ignored_during_execution is not None:
            pulumi.set(
                __self__,
                "preferred_during_scheduling_ignored_during_execution",
                preferred_during_scheduling_ignored_during_execution,
            )
        if required_during_scheduling_ignored_during_execution is not None:
            pulumi.set(
                __self__,
                "required_during_scheduling_ignored_during_execution",
                required_during_scheduling_ignored_during_execution,
            )

    @property
    @pulumi.getter(name="preferredDuringSchedulingIgnoredDuringExecution")
    def preferred_during_scheduling_ignored_during_execution(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs"
                ]
            ]
        ]
    ]:
        """
        The scheduler will prefer to schedule pods to nodes that satisfy
        the anti-affinity expressions specified by this field, but it may choose
        a node that violates one or more of the expressions. The node that is
        most preferred is the one with the greatest sum of weights, i.e.
        for each node that meets all of the scheduling requirements (resource
        request, requiredDuringScheduling anti-affinity expressions, etc.),
        compute a sum by iterating through the elements of this field and adding
        "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
        node(s) with the highest sum are the most preferred.
        """
        return pulumi.get(self, "preferred_during_scheduling_ignored_during_execution")

    @preferred_during_scheduling_ignored_during_execution.setter
    def preferred_during_scheduling_ignored_during_execution(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "preferred_during_scheduling_ignored_during_execution", value)

    @property
    @pulumi.getter(name="requiredDuringSchedulingIgnoredDuringExecution")
    def required_during_scheduling_ignored_during_execution(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs"
                ]
            ]
        ]
    ]:
        """
        If the anti-affinity requirements specified by this field are not met at
        scheduling time, the pod will not be scheduled onto the node.
        If the anti-affinity requirements specified by this field cease to be met
        at some point during pod execution (e.g. due to a pod label update), the
        system may or may not try to eventually evict the pod from its node.
        When there are multiple elements, the lists of nodes corresponding to each
        podAffinityTerm are intersected, i.e. all terms must be satisfied.
        """
        return pulumi.get(self, "required_during_scheduling_ignored_during_execution")

    @required_during_scheduling_ignored_during_execution.setter
    def required_during_scheduling_ignored_during_execution(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "required_during_scheduling_ignored_during_execution", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityArgsDict(TypedDict):
        """
        If specified, the pod's scheduling constraints
        """

        node_affinity: NotRequired[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityArgsDict"
            ]
        ]
        pod_affinity: NotRequired[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityArgsDict"
            ]
        ]
        pod_anti_affinity: NotRequired[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityArgsDict"
            ]
        ]

elif False:
    IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityArgsDict: TypeAlias = (
        Mapping[str, Any]
    )


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityArgs:
    def __init__(
        __self__,
        *,
        node_affinity: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityArgs"
            ]
        ] = None,
        pod_affinity: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityArgs"
            ]
        ] = None,
        pod_anti_affinity: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityArgs"
            ]
        ] = None
    ):
        """
        If specified, the pod's scheduling constraints
        """
        if node_affinity is not None:
            pulumi.set(__self__, "node_affinity", node_affinity)
        if pod_affinity is not None:
            pulumi.set(__self__, "pod_affinity", pod_affinity)
        if pod_anti_affinity is not None:
            pulumi.set(__self__, "pod_anti_affinity", pod_anti_affinity)

    @property
    @pulumi.getter(name="nodeAffinity")
    def node_affinity(
        self,
    ) -> Optional[
        pulumi.Input[
            "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityArgs"
        ]
    ]:
        return pulumi.get(self, "node_affinity")

    @node_affinity.setter
    def node_affinity(
        self,
        value: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityArgs"
            ]
        ],
    ):
        pulumi.set(self, "node_affinity", value)

    @property
    @pulumi.getter(name="podAffinity")
    def pod_affinity(
        self,
    ) -> Optional[
        pulumi.Input[
            "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityArgs"
        ]
    ]:
        return pulumi.get(self, "pod_affinity")

    @pod_affinity.setter
    def pod_affinity(
        self,
        value: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityArgs"
            ]
        ],
    ):
        pulumi.set(self, "pod_affinity", value)

    @property
    @pulumi.getter(name="podAntiAffinity")
    def pod_anti_affinity(
        self,
    ) -> Optional[
        pulumi.Input[
            "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityArgs"
        ]
    ]:
        return pulumi.get(self, "pod_anti_affinity")

    @pod_anti_affinity.setter
    def pod_anti_affinity(
        self,
        value: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityArgs"
            ]
        ],
    ):
        pulumi.set(self, "pod_anti_affinity", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecImagePullSecretsPatchArgsDict(
        TypedDict
    ):
        """
        LocalObjectReference contains enough information to let you locate the
        referenced object inside the same namespace.
        """

        name: NotRequired[pulumi.Input[str]]
        """
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """

elif False:
    IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecImagePullSecretsPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecImagePullSecretsPatchArgs:
    def __init__(__self__, *, name: Optional[pulumi.Input[str]] = None):
        """
        LocalObjectReference contains enough information to let you locate the
        referenced object inside the same namespace.
        :param pulumi.Input[str] name: Name of the referent.
               This field is effectively required, but due to backwards compatibility is
               allowed to be empty. Instances of this type with an empty value here are
               almost certainly wrong.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecImagePullSecretsArgsDict(
        TypedDict
    ):
        """
        LocalObjectReference contains enough information to let you locate the
        referenced object inside the same namespace.
        """

        name: NotRequired[pulumi.Input[str]]
        """
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """

elif False:
    IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecImagePullSecretsArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecImagePullSecretsArgs:
    def __init__(__self__, *, name: Optional[pulumi.Input[str]] = None):
        """
        LocalObjectReference contains enough information to let you locate the
        referenced object inside the same namespace.
        :param pulumi.Input[str] name: Name of the referent.
               This field is effectively required, but due to backwards compatibility is
               allowed to be empty. Instances of this type with an empty value here are
               almost certainly wrong.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecPatchArgsDict(TypedDict):
        """
        PodSpec defines overrides for the HTTP01 challenge solver pod.
        Check ACMEChallengeSolverHTTP01IngressPodSpec to find out currently supported fields.
        All other fields will be ignored.
        """

        affinity: NotRequired[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPatchArgsDict"
            ]
        ]
        image_pull_secrets: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecImagePullSecretsPatchArgsDict"
                    ]
                ]
            ]
        ]
        """
        If specified, the pod's imagePullSecrets
        """
        node_selector: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        NodeSelector is a selector which must be true for the pod to fit on a node.
        Selector which must match a node's labels for the pod to be scheduled on that node.
        More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
        """
        priority_class_name: NotRequired[pulumi.Input[str]]
        """
        If specified, the pod's priorityClassName.
        """
        security_context: NotRequired[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextPatchArgsDict"
            ]
        ]
        service_account_name: NotRequired[pulumi.Input[str]]
        """
        If specified, the pod's service account
        """
        tolerations: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecTolerationsPatchArgsDict"
                    ]
                ]
            ]
        ]
        """
        If specified, the pod's tolerations.
        """

elif False:
    IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecPatchArgs:
    def __init__(
        __self__,
        *,
        affinity: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPatchArgs"
            ]
        ] = None,
        image_pull_secrets: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecImagePullSecretsPatchArgs"
                    ]
                ]
            ]
        ] = None,
        node_selector: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
        priority_class_name: Optional[pulumi.Input[str]] = None,
        security_context: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextPatchArgs"
            ]
        ] = None,
        service_account_name: Optional[pulumi.Input[str]] = None,
        tolerations: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecTolerationsPatchArgs"
                    ]
                ]
            ]
        ] = None
    ):
        """
        PodSpec defines overrides for the HTTP01 challenge solver pod.
        Check ACMEChallengeSolverHTTP01IngressPodSpec to find out currently supported fields.
        All other fields will be ignored.
        :param pulumi.Input[Sequence[pulumi.Input['IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecImagePullSecretsPatchArgs']]] image_pull_secrets: If specified, the pod's imagePullSecrets
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] node_selector: NodeSelector is a selector which must be true for the pod to fit on a node.
               Selector which must match a node's labels for the pod to be scheduled on that node.
               More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
        :param pulumi.Input[str] priority_class_name: If specified, the pod's priorityClassName.
        :param pulumi.Input[str] service_account_name: If specified, the pod's service account
        :param pulumi.Input[Sequence[pulumi.Input['IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecTolerationsPatchArgs']]] tolerations: If specified, the pod's tolerations.
        """
        if affinity is not None:
            pulumi.set(__self__, "affinity", affinity)
        if image_pull_secrets is not None:
            pulumi.set(__self__, "image_pull_secrets", image_pull_secrets)
        if node_selector is not None:
            pulumi.set(__self__, "node_selector", node_selector)
        if priority_class_name is not None:
            pulumi.set(__self__, "priority_class_name", priority_class_name)
        if security_context is not None:
            pulumi.set(__self__, "security_context", security_context)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tolerations is not None:
            pulumi.set(__self__, "tolerations", tolerations)

    @property
    @pulumi.getter
    def affinity(
        self,
    ) -> Optional[
        pulumi.Input[
            "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPatchArgs"
        ]
    ]:
        return pulumi.get(self, "affinity")

    @affinity.setter
    def affinity(
        self,
        value: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "affinity", value)

    @property
    @pulumi.getter(name="imagePullSecrets")
    def image_pull_secrets(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecImagePullSecretsPatchArgs"
                ]
            ]
        ]
    ]:
        """
        If specified, the pod's imagePullSecrets
        """
        return pulumi.get(self, "image_pull_secrets")

    @image_pull_secrets.setter
    def image_pull_secrets(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecImagePullSecretsPatchArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "image_pull_secrets", value)

    @property
    @pulumi.getter(name="nodeSelector")
    def node_selector(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        NodeSelector is a selector which must be true for the pod to fit on a node.
        Selector which must match a node's labels for the pod to be scheduled on that node.
        More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
        """
        return pulumi.get(self, "node_selector")

    @node_selector.setter
    def node_selector(
        self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
    ):
        pulumi.set(self, "node_selector", value)

    @property
    @pulumi.getter(name="priorityClassName")
    def priority_class_name(self) -> Optional[pulumi.Input[str]]:
        """
        If specified, the pod's priorityClassName.
        """
        return pulumi.get(self, "priority_class_name")

    @priority_class_name.setter
    def priority_class_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "priority_class_name", value)

    @property
    @pulumi.getter(name="securityContext")
    def security_context(
        self,
    ) -> Optional[
        pulumi.Input[
            "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextPatchArgs"
        ]
    ]:
        return pulumi.get(self, "security_context")

    @security_context.setter
    def security_context(
        self,
        value: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextPatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "security_context", value)

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[pulumi.Input[str]]:
        """
        If specified, the pod's service account
        """
        return pulumi.get(self, "service_account_name")

    @service_account_name.setter
    def service_account_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account_name", value)

    @property
    @pulumi.getter
    def tolerations(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecTolerationsPatchArgs"
                ]
            ]
        ]
    ]:
        """
        If specified, the pod's tolerations.
        """
        return pulumi.get(self, "tolerations")

    @tolerations.setter
    def tolerations(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecTolerationsPatchArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "tolerations", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextPatchArgsDict(
        TypedDict
    ):
        """
        If specified, the pod's security context
        """

        fs_group: NotRequired[pulumi.Input[int]]
        """
        A special supplemental group that applies to all containers in a pod.
        Some volume types allow the Kubelet to change the ownership of that volume
        to be owned by the pod:

        1. The owning GID will be the FSGroup
        2. The setgid bit is set (new files created in the volume will be owned by FSGroup)
        3. The permission bits are OR'd with rw-rw----

        If unset, the Kubelet will not modify the ownership and permissions of any volume.
        Note that this field cannot be set when spec.os.name is windows.
        """
        fs_group_change_policy: NotRequired[pulumi.Input[str]]
        """
        fsGroupChangePolicy defines behavior of changing ownership and permission of the volume
        before being exposed inside Pod. This field will only apply to
        volume types which support fsGroup based ownership(and permissions).
        It will have no effect on ephemeral volume types such as: secret, configmaps
        and emptydir.
        Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used.
        Note that this field cannot be set when spec.os.name is windows.
        """
        run_as_group: NotRequired[pulumi.Input[int]]
        """
        The GID to run the entrypoint of the container process.
        Uses runtime default if unset.
        May also be set in SecurityContext.  If set in both SecurityContext and
        PodSecurityContext, the value specified in SecurityContext takes precedence
        for that container.
        Note that this field cannot be set when spec.os.name is windows.
        """
        run_as_non_root: NotRequired[pulumi.Input[bool]]
        """
        Indicates that the container must run as a non-root user.
        If true, the Kubelet will validate the image at runtime to ensure that it
        does not run as UID 0 (root) and fail to start the container if it does.
        If unset or false, no such validation will be performed.
        May also be set in SecurityContext.  If set in both SecurityContext and
        PodSecurityContext, the value specified in SecurityContext takes precedence.
        """
        run_as_user: NotRequired[pulumi.Input[int]]
        """
        The UID to run the entrypoint of the container process.
        Defaults to user specified in image metadata if unspecified.
        May also be set in SecurityContext.  If set in both SecurityContext and
        PodSecurityContext, the value specified in SecurityContext takes precedence
        for that container.
        Note that this field cannot be set when spec.os.name is windows.
        """
        se_linux_options: NotRequired[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextSeLinuxOptionsPatchArgsDict"
            ]
        ]
        seccomp_profile: NotRequired[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextSeccompProfilePatchArgsDict"
            ]
        ]
        supplemental_groups: NotRequired[pulumi.Input[Sequence[pulumi.Input[int]]]]
        """
        A list of groups applied to the first process run in each container, in addition
        to the container's primary GID, the fsGroup (if specified), and group memberships
        defined in the container image for the uid of the container process. If unspecified,
        no additional groups are added to any container. Note that group memberships
        defined in the container image for the uid of the container process are still effective,
        even if they are not included in this list.
        Note that this field cannot be set when spec.os.name is windows.
        """
        sysctls: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextSysctlsPatchArgsDict"
                    ]
                ]
            ]
        ]
        """
        Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported
        sysctls (by the container runtime) might fail to launch.
        Note that this field cannot be set when spec.os.name is windows.
        """

elif False:
    IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextPatchArgs:
    def __init__(
        __self__,
        *,
        fs_group: Optional[pulumi.Input[int]] = None,
        fs_group_change_policy: Optional[pulumi.Input[str]] = None,
        run_as_group: Optional[pulumi.Input[int]] = None,
        run_as_non_root: Optional[pulumi.Input[bool]] = None,
        run_as_user: Optional[pulumi.Input[int]] = None,
        se_linux_options: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextSeLinuxOptionsPatchArgs"
            ]
        ] = None,
        seccomp_profile: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextSeccompProfilePatchArgs"
            ]
        ] = None,
        supplemental_groups: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
        sysctls: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextSysctlsPatchArgs"
                    ]
                ]
            ]
        ] = None
    ):
        """
        If specified, the pod's security context
        :param pulumi.Input[int] fs_group: A special supplemental group that applies to all containers in a pod.
               Some volume types allow the Kubelet to change the ownership of that volume
               to be owned by the pod:

               1. The owning GID will be the FSGroup
               2. The setgid bit is set (new files created in the volume will be owned by FSGroup)
               3. The permission bits are OR'd with rw-rw----

               If unset, the Kubelet will not modify the ownership and permissions of any volume.
               Note that this field cannot be set when spec.os.name is windows.
        :param pulumi.Input[str] fs_group_change_policy: fsGroupChangePolicy defines behavior of changing ownership and permission of the volume
               before being exposed inside Pod. This field will only apply to
               volume types which support fsGroup based ownership(and permissions).
               It will have no effect on ephemeral volume types such as: secret, configmaps
               and emptydir.
               Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used.
               Note that this field cannot be set when spec.os.name is windows.
        :param pulumi.Input[int] run_as_group: The GID to run the entrypoint of the container process.
               Uses runtime default if unset.
               May also be set in SecurityContext.  If set in both SecurityContext and
               PodSecurityContext, the value specified in SecurityContext takes precedence
               for that container.
               Note that this field cannot be set when spec.os.name is windows.
        :param pulumi.Input[bool] run_as_non_root: Indicates that the container must run as a non-root user.
               If true, the Kubelet will validate the image at runtime to ensure that it
               does not run as UID 0 (root) and fail to start the container if it does.
               If unset or false, no such validation will be performed.
               May also be set in SecurityContext.  If set in both SecurityContext and
               PodSecurityContext, the value specified in SecurityContext takes precedence.
        :param pulumi.Input[int] run_as_user: The UID to run the entrypoint of the container process.
               Defaults to user specified in image metadata if unspecified.
               May also be set in SecurityContext.  If set in both SecurityContext and
               PodSecurityContext, the value specified in SecurityContext takes precedence
               for that container.
               Note that this field cannot be set when spec.os.name is windows.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] supplemental_groups: A list of groups applied to the first process run in each container, in addition
               to the container's primary GID, the fsGroup (if specified), and group memberships
               defined in the container image for the uid of the container process. If unspecified,
               no additional groups are added to any container. Note that group memberships
               defined in the container image for the uid of the container process are still effective,
               even if they are not included in this list.
               Note that this field cannot be set when spec.os.name is windows.
        :param pulumi.Input[Sequence[pulumi.Input['IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextSysctlsPatchArgs']]] sysctls: Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported
               sysctls (by the container runtime) might fail to launch.
               Note that this field cannot be set when spec.os.name is windows.
        """
        if fs_group is not None:
            pulumi.set(__self__, "fs_group", fs_group)
        if fs_group_change_policy is not None:
            pulumi.set(__self__, "fs_group_change_policy", fs_group_change_policy)
        if run_as_group is not None:
            pulumi.set(__self__, "run_as_group", run_as_group)
        if run_as_non_root is not None:
            pulumi.set(__self__, "run_as_non_root", run_as_non_root)
        if run_as_user is not None:
            pulumi.set(__self__, "run_as_user", run_as_user)
        if se_linux_options is not None:
            pulumi.set(__self__, "se_linux_options", se_linux_options)
        if seccomp_profile is not None:
            pulumi.set(__self__, "seccomp_profile", seccomp_profile)
        if supplemental_groups is not None:
            pulumi.set(__self__, "supplemental_groups", supplemental_groups)
        if sysctls is not None:
            pulumi.set(__self__, "sysctls", sysctls)

    @property
    @pulumi.getter(name="fsGroup")
    def fs_group(self) -> Optional[pulumi.Input[int]]:
        """
        A special supplemental group that applies to all containers in a pod.
        Some volume types allow the Kubelet to change the ownership of that volume
        to be owned by the pod:

        1. The owning GID will be the FSGroup
        2. The setgid bit is set (new files created in the volume will be owned by FSGroup)
        3. The permission bits are OR'd with rw-rw----

        If unset, the Kubelet will not modify the ownership and permissions of any volume.
        Note that this field cannot be set when spec.os.name is windows.
        """
        return pulumi.get(self, "fs_group")

    @fs_group.setter
    def fs_group(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fs_group", value)

    @property
    @pulumi.getter(name="fsGroupChangePolicy")
    def fs_group_change_policy(self) -> Optional[pulumi.Input[str]]:
        """
        fsGroupChangePolicy defines behavior of changing ownership and permission of the volume
        before being exposed inside Pod. This field will only apply to
        volume types which support fsGroup based ownership(and permissions).
        It will have no effect on ephemeral volume types such as: secret, configmaps
        and emptydir.
        Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used.
        Note that this field cannot be set when spec.os.name is windows.
        """
        return pulumi.get(self, "fs_group_change_policy")

    @fs_group_change_policy.setter
    def fs_group_change_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fs_group_change_policy", value)

    @property
    @pulumi.getter(name="runAsGroup")
    def run_as_group(self) -> Optional[pulumi.Input[int]]:
        """
        The GID to run the entrypoint of the container process.
        Uses runtime default if unset.
        May also be set in SecurityContext.  If set in both SecurityContext and
        PodSecurityContext, the value specified in SecurityContext takes precedence
        for that container.
        Note that this field cannot be set when spec.os.name is windows.
        """
        return pulumi.get(self, "run_as_group")

    @run_as_group.setter
    def run_as_group(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "run_as_group", value)

    @property
    @pulumi.getter(name="runAsNonRoot")
    def run_as_non_root(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates that the container must run as a non-root user.
        If true, the Kubelet will validate the image at runtime to ensure that it
        does not run as UID 0 (root) and fail to start the container if it does.
        If unset or false, no such validation will be performed.
        May also be set in SecurityContext.  If set in both SecurityContext and
        PodSecurityContext, the value specified in SecurityContext takes precedence.
        """
        return pulumi.get(self, "run_as_non_root")

    @run_as_non_root.setter
    def run_as_non_root(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "run_as_non_root", value)

    @property
    @pulumi.getter(name="runAsUser")
    def run_as_user(self) -> Optional[pulumi.Input[int]]:
        """
        The UID to run the entrypoint of the container process.
        Defaults to user specified in image metadata if unspecified.
        May also be set in SecurityContext.  If set in both SecurityContext and
        PodSecurityContext, the value specified in SecurityContext takes precedence
        for that container.
        Note that this field cannot be set when spec.os.name is windows.
        """
        return pulumi.get(self, "run_as_user")

    @run_as_user.setter
    def run_as_user(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "run_as_user", value)

    @property
    @pulumi.getter(name="seLinuxOptions")
    def se_linux_options(
        self,
    ) -> Optional[
        pulumi.Input[
            "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextSeLinuxOptionsPatchArgs"
        ]
    ]:
        return pulumi.get(self, "se_linux_options")

    @se_linux_options.setter
    def se_linux_options(
        self,
        value: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextSeLinuxOptionsPatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "se_linux_options", value)

    @property
    @pulumi.getter(name="seccompProfile")
    def seccomp_profile(
        self,
    ) -> Optional[
        pulumi.Input[
            "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextSeccompProfilePatchArgs"
        ]
    ]:
        return pulumi.get(self, "seccomp_profile")

    @seccomp_profile.setter
    def seccomp_profile(
        self,
        value: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextSeccompProfilePatchArgs"
            ]
        ],
    ):
        pulumi.set(self, "seccomp_profile", value)

    @property
    @pulumi.getter(name="supplementalGroups")
    def supplemental_groups(
        self,
    ) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        A list of groups applied to the first process run in each container, in addition
        to the container's primary GID, the fsGroup (if specified), and group memberships
        defined in the container image for the uid of the container process. If unspecified,
        no additional groups are added to any container. Note that group memberships
        defined in the container image for the uid of the container process are still effective,
        even if they are not included in this list.
        Note that this field cannot be set when spec.os.name is windows.
        """
        return pulumi.get(self, "supplemental_groups")

    @supplemental_groups.setter
    def supplemental_groups(
        self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]
    ):
        pulumi.set(self, "supplemental_groups", value)

    @property
    @pulumi.getter
    def sysctls(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextSysctlsPatchArgs"
                ]
            ]
        ]
    ]:
        """
        Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported
        sysctls (by the container runtime) might fail to launch.
        Note that this field cannot be set when spec.os.name is windows.
        """
        return pulumi.get(self, "sysctls")

    @sysctls.setter
    def sysctls(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextSysctlsPatchArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "sysctls", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextSeLinuxOptionsPatchArgsDict(
        TypedDict
    ):
        """
        The SELinux context to be applied to all containers.
        If unspecified, the container runtime will allocate a random SELinux context for each
        container.  May also be set in SecurityContext.  If set in
        both SecurityContext and PodSecurityContext, the value specified in SecurityContext
        takes precedence for that container.
        Note that this field cannot be set when spec.os.name is windows.
        """

        level: NotRequired[pulumi.Input[str]]
        """
        Level is SELinux level label that applies to the container.
        """
        role: NotRequired[pulumi.Input[str]]
        """
        Role is a SELinux role label that applies to the container.
        """
        type: NotRequired[pulumi.Input[str]]
        """
        Type is a SELinux type label that applies to the container.
        """
        user: NotRequired[pulumi.Input[str]]
        """
        User is a SELinux user label that applies to the container.
        """

elif False:
    IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextSeLinuxOptionsPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextSeLinuxOptionsPatchArgs:
    def __init__(
        __self__,
        *,
        level: Optional[pulumi.Input[str]] = None,
        role: Optional[pulumi.Input[str]] = None,
        type: Optional[pulumi.Input[str]] = None,
        user: Optional[pulumi.Input[str]] = None
    ):
        """
        The SELinux context to be applied to all containers.
        If unspecified, the container runtime will allocate a random SELinux context for each
        container.  May also be set in SecurityContext.  If set in
        both SecurityContext and PodSecurityContext, the value specified in SecurityContext
        takes precedence for that container.
        Note that this field cannot be set when spec.os.name is windows.
        :param pulumi.Input[str] level: Level is SELinux level label that applies to the container.
        :param pulumi.Input[str] role: Role is a SELinux role label that applies to the container.
        :param pulumi.Input[str] type: Type is a SELinux type label that applies to the container.
        :param pulumi.Input[str] user: User is a SELinux user label that applies to the container.
        """
        if level is not None:
            pulumi.set(__self__, "level", level)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        """
        Level is SELinux level label that applies to the container.
        """
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input[str]]:
        """
        Role is a SELinux role label that applies to the container.
        """
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Type is a SELinux type label that applies to the container.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def user(self) -> Optional[pulumi.Input[str]]:
        """
        User is a SELinux user label that applies to the container.
        """
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextSeLinuxOptionsArgsDict(
        TypedDict
    ):
        """
        The SELinux context to be applied to all containers.
        If unspecified, the container runtime will allocate a random SELinux context for each
        container.  May also be set in SecurityContext.  If set in
        both SecurityContext and PodSecurityContext, the value specified in SecurityContext
        takes precedence for that container.
        Note that this field cannot be set when spec.os.name is windows.
        """

        level: NotRequired[pulumi.Input[str]]
        """
        Level is SELinux level label that applies to the container.
        """
        role: NotRequired[pulumi.Input[str]]
        """
        Role is a SELinux role label that applies to the container.
        """
        type: NotRequired[pulumi.Input[str]]
        """
        Type is a SELinux type label that applies to the container.
        """
        user: NotRequired[pulumi.Input[str]]
        """
        User is a SELinux user label that applies to the container.
        """

elif False:
    IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextSeLinuxOptionsArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextSeLinuxOptionsArgs:
    def __init__(
        __self__,
        *,
        level: Optional[pulumi.Input[str]] = None,
        role: Optional[pulumi.Input[str]] = None,
        type: Optional[pulumi.Input[str]] = None,
        user: Optional[pulumi.Input[str]] = None
    ):
        """
        The SELinux context to be applied to all containers.
        If unspecified, the container runtime will allocate a random SELinux context for each
        container.  May also be set in SecurityContext.  If set in
        both SecurityContext and PodSecurityContext, the value specified in SecurityContext
        takes precedence for that container.
        Note that this field cannot be set when spec.os.name is windows.
        :param pulumi.Input[str] level: Level is SELinux level label that applies to the container.
        :param pulumi.Input[str] role: Role is a SELinux role label that applies to the container.
        :param pulumi.Input[str] type: Type is a SELinux type label that applies to the container.
        :param pulumi.Input[str] user: User is a SELinux user label that applies to the container.
        """
        if level is not None:
            pulumi.set(__self__, "level", level)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        """
        Level is SELinux level label that applies to the container.
        """
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input[str]]:
        """
        Role is a SELinux role label that applies to the container.
        """
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Type is a SELinux type label that applies to the container.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def user(self) -> Optional[pulumi.Input[str]]:
        """
        User is a SELinux user label that applies to the container.
        """
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextSeccompProfilePatchArgsDict(
        TypedDict
    ):
        """
        The seccomp options to use by the containers in this pod.
        Note that this field cannot be set when spec.os.name is windows.
        """

        localhost_profile: NotRequired[pulumi.Input[str]]
        """
        localhostProfile indicates a profile defined in a file on the node should be used.
        The profile must be preconfigured on the node to work.
        Must be a descending path, relative to the kubelet's configured seccomp profile location.
        Must be set if type is "Localhost". Must NOT be set for any other type.
        """
        type: NotRequired[pulumi.Input[str]]
        """
        type indicates which kind of seccomp profile will be applied.
        Valid options are:

        Localhost - a profile defined in a file on the node should be used.
        RuntimeDefault - the container runtime default profile should be used.
        Unconfined - no profile should be applied.
        """

elif False:
    IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextSeccompProfilePatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextSeccompProfilePatchArgs:
    def __init__(
        __self__,
        *,
        localhost_profile: Optional[pulumi.Input[str]] = None,
        type: Optional[pulumi.Input[str]] = None
    ):
        """
        The seccomp options to use by the containers in this pod.
        Note that this field cannot be set when spec.os.name is windows.
        :param pulumi.Input[str] localhost_profile: localhostProfile indicates a profile defined in a file on the node should be used.
               The profile must be preconfigured on the node to work.
               Must be a descending path, relative to the kubelet's configured seccomp profile location.
               Must be set if type is "Localhost". Must NOT be set for any other type.
        :param pulumi.Input[str] type: type indicates which kind of seccomp profile will be applied.
               Valid options are:

               Localhost - a profile defined in a file on the node should be used.
               RuntimeDefault - the container runtime default profile should be used.
               Unconfined - no profile should be applied.
        """
        if localhost_profile is not None:
            pulumi.set(__self__, "localhost_profile", localhost_profile)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="localhostProfile")
    def localhost_profile(self) -> Optional[pulumi.Input[str]]:
        """
        localhostProfile indicates a profile defined in a file on the node should be used.
        The profile must be preconfigured on the node to work.
        Must be a descending path, relative to the kubelet's configured seccomp profile location.
        Must be set if type is "Localhost". Must NOT be set for any other type.
        """
        return pulumi.get(self, "localhost_profile")

    @localhost_profile.setter
    def localhost_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "localhost_profile", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        type indicates which kind of seccomp profile will be applied.
        Valid options are:

        Localhost - a profile defined in a file on the node should be used.
        RuntimeDefault - the container runtime default profile should be used.
        Unconfined - no profile should be applied.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextSeccompProfileArgsDict(
        TypedDict
    ):
        """
        The seccomp options to use by the containers in this pod.
        Note that this field cannot be set when spec.os.name is windows.
        """

        localhost_profile: NotRequired[pulumi.Input[str]]
        """
        localhostProfile indicates a profile defined in a file on the node should be used.
        The profile must be preconfigured on the node to work.
        Must be a descending path, relative to the kubelet's configured seccomp profile location.
        Must be set if type is "Localhost". Must NOT be set for any other type.
        """
        type: NotRequired[pulumi.Input[str]]
        """
        type indicates which kind of seccomp profile will be applied.
        Valid options are:

        Localhost - a profile defined in a file on the node should be used.
        RuntimeDefault - the container runtime default profile should be used.
        Unconfined - no profile should be applied.
        """

elif False:
    IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextSeccompProfileArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextSeccompProfileArgs:
    def __init__(
        __self__,
        *,
        localhost_profile: Optional[pulumi.Input[str]] = None,
        type: Optional[pulumi.Input[str]] = None
    ):
        """
        The seccomp options to use by the containers in this pod.
        Note that this field cannot be set when spec.os.name is windows.
        :param pulumi.Input[str] localhost_profile: localhostProfile indicates a profile defined in a file on the node should be used.
               The profile must be preconfigured on the node to work.
               Must be a descending path, relative to the kubelet's configured seccomp profile location.
               Must be set if type is "Localhost". Must NOT be set for any other type.
        :param pulumi.Input[str] type: type indicates which kind of seccomp profile will be applied.
               Valid options are:

               Localhost - a profile defined in a file on the node should be used.
               RuntimeDefault - the container runtime default profile should be used.
               Unconfined - no profile should be applied.
        """
        if localhost_profile is not None:
            pulumi.set(__self__, "localhost_profile", localhost_profile)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="localhostProfile")
    def localhost_profile(self) -> Optional[pulumi.Input[str]]:
        """
        localhostProfile indicates a profile defined in a file on the node should be used.
        The profile must be preconfigured on the node to work.
        Must be a descending path, relative to the kubelet's configured seccomp profile location.
        Must be set if type is "Localhost". Must NOT be set for any other type.
        """
        return pulumi.get(self, "localhost_profile")

    @localhost_profile.setter
    def localhost_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "localhost_profile", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        type indicates which kind of seccomp profile will be applied.
        Valid options are:

        Localhost - a profile defined in a file on the node should be used.
        RuntimeDefault - the container runtime default profile should be used.
        Unconfined - no profile should be applied.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextSysctlsPatchArgsDict(
        TypedDict
    ):
        """
        Sysctl defines a kernel parameter to be set
        """

        name: NotRequired[pulumi.Input[str]]
        """
        Name of a property to set
        """
        value: NotRequired[pulumi.Input[str]]
        """
        Value of a property to set
        """

elif False:
    IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextSysctlsPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextSysctlsPatchArgs:
    def __init__(
        __self__,
        *,
        name: Optional[pulumi.Input[str]] = None,
        value: Optional[pulumi.Input[str]] = None
    ):
        """
        Sysctl defines a kernel parameter to be set
        :param pulumi.Input[str] name: Name of a property to set
        :param pulumi.Input[str] value: Value of a property to set
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of a property to set
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Value of a property to set
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextSysctlsArgsDict(
        TypedDict
    ):
        """
        Sysctl defines a kernel parameter to be set
        """

        name: NotRequired[pulumi.Input[str]]
        """
        Name of a property to set
        """
        value: NotRequired[pulumi.Input[str]]
        """
        Value of a property to set
        """

elif False:
    IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextSysctlsArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextSysctlsArgs:
    def __init__(
        __self__,
        *,
        name: Optional[pulumi.Input[str]] = None,
        value: Optional[pulumi.Input[str]] = None
    ):
        """
        Sysctl defines a kernel parameter to be set
        :param pulumi.Input[str] name: Name of a property to set
        :param pulumi.Input[str] value: Value of a property to set
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of a property to set
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Value of a property to set
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextArgsDict(
        TypedDict
    ):
        """
        If specified, the pod's security context
        """

        fs_group: NotRequired[pulumi.Input[int]]
        """
        A special supplemental group that applies to all containers in a pod.
        Some volume types allow the Kubelet to change the ownership of that volume
        to be owned by the pod:

        1. The owning GID will be the FSGroup
        2. The setgid bit is set (new files created in the volume will be owned by FSGroup)
        3. The permission bits are OR'd with rw-rw----

        If unset, the Kubelet will not modify the ownership and permissions of any volume.
        Note that this field cannot be set when spec.os.name is windows.
        """
        fs_group_change_policy: NotRequired[pulumi.Input[str]]
        """
        fsGroupChangePolicy defines behavior of changing ownership and permission of the volume
        before being exposed inside Pod. This field will only apply to
        volume types which support fsGroup based ownership(and permissions).
        It will have no effect on ephemeral volume types such as: secret, configmaps
        and emptydir.
        Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used.
        Note that this field cannot be set when spec.os.name is windows.
        """
        run_as_group: NotRequired[pulumi.Input[int]]
        """
        The GID to run the entrypoint of the container process.
        Uses runtime default if unset.
        May also be set in SecurityContext.  If set in both SecurityContext and
        PodSecurityContext, the value specified in SecurityContext takes precedence
        for that container.
        Note that this field cannot be set when spec.os.name is windows.
        """
        run_as_non_root: NotRequired[pulumi.Input[bool]]
        """
        Indicates that the container must run as a non-root user.
        If true, the Kubelet will validate the image at runtime to ensure that it
        does not run as UID 0 (root) and fail to start the container if it does.
        If unset or false, no such validation will be performed.
        May also be set in SecurityContext.  If set in both SecurityContext and
        PodSecurityContext, the value specified in SecurityContext takes precedence.
        """
        run_as_user: NotRequired[pulumi.Input[int]]
        """
        The UID to run the entrypoint of the container process.
        Defaults to user specified in image metadata if unspecified.
        May also be set in SecurityContext.  If set in both SecurityContext and
        PodSecurityContext, the value specified in SecurityContext takes precedence
        for that container.
        Note that this field cannot be set when spec.os.name is windows.
        """
        se_linux_options: NotRequired[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextSeLinuxOptionsArgsDict"
            ]
        ]
        seccomp_profile: NotRequired[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextSeccompProfileArgsDict"
            ]
        ]
        supplemental_groups: NotRequired[pulumi.Input[Sequence[pulumi.Input[int]]]]
        """
        A list of groups applied to the first process run in each container, in addition
        to the container's primary GID, the fsGroup (if specified), and group memberships
        defined in the container image for the uid of the container process. If unspecified,
        no additional groups are added to any container. Note that group memberships
        defined in the container image for the uid of the container process are still effective,
        even if they are not included in this list.
        Note that this field cannot be set when spec.os.name is windows.
        """
        sysctls: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextSysctlsArgsDict"
                    ]
                ]
            ]
        ]
        """
        Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported
        sysctls (by the container runtime) might fail to launch.
        Note that this field cannot be set when spec.os.name is windows.
        """

elif False:
    IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextArgs:
    def __init__(
        __self__,
        *,
        fs_group: Optional[pulumi.Input[int]] = None,
        fs_group_change_policy: Optional[pulumi.Input[str]] = None,
        run_as_group: Optional[pulumi.Input[int]] = None,
        run_as_non_root: Optional[pulumi.Input[bool]] = None,
        run_as_user: Optional[pulumi.Input[int]] = None,
        se_linux_options: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextSeLinuxOptionsArgs"
            ]
        ] = None,
        seccomp_profile: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextSeccompProfileArgs"
            ]
        ] = None,
        supplemental_groups: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
        sysctls: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextSysctlsArgs"
                    ]
                ]
            ]
        ] = None
    ):
        """
        If specified, the pod's security context
        :param pulumi.Input[int] fs_group: A special supplemental group that applies to all containers in a pod.
               Some volume types allow the Kubelet to change the ownership of that volume
               to be owned by the pod:

               1. The owning GID will be the FSGroup
               2. The setgid bit is set (new files created in the volume will be owned by FSGroup)
               3. The permission bits are OR'd with rw-rw----

               If unset, the Kubelet will not modify the ownership and permissions of any volume.
               Note that this field cannot be set when spec.os.name is windows.
        :param pulumi.Input[str] fs_group_change_policy: fsGroupChangePolicy defines behavior of changing ownership and permission of the volume
               before being exposed inside Pod. This field will only apply to
               volume types which support fsGroup based ownership(and permissions).
               It will have no effect on ephemeral volume types such as: secret, configmaps
               and emptydir.
               Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used.
               Note that this field cannot be set when spec.os.name is windows.
        :param pulumi.Input[int] run_as_group: The GID to run the entrypoint of the container process.
               Uses runtime default if unset.
               May also be set in SecurityContext.  If set in both SecurityContext and
               PodSecurityContext, the value specified in SecurityContext takes precedence
               for that container.
               Note that this field cannot be set when spec.os.name is windows.
        :param pulumi.Input[bool] run_as_non_root: Indicates that the container must run as a non-root user.
               If true, the Kubelet will validate the image at runtime to ensure that it
               does not run as UID 0 (root) and fail to start the container if it does.
               If unset or false, no such validation will be performed.
               May also be set in SecurityContext.  If set in both SecurityContext and
               PodSecurityContext, the value specified in SecurityContext takes precedence.
        :param pulumi.Input[int] run_as_user: The UID to run the entrypoint of the container process.
               Defaults to user specified in image metadata if unspecified.
               May also be set in SecurityContext.  If set in both SecurityContext and
               PodSecurityContext, the value specified in SecurityContext takes precedence
               for that container.
               Note that this field cannot be set when spec.os.name is windows.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] supplemental_groups: A list of groups applied to the first process run in each container, in addition
               to the container's primary GID, the fsGroup (if specified), and group memberships
               defined in the container image for the uid of the container process. If unspecified,
               no additional groups are added to any container. Note that group memberships
               defined in the container image for the uid of the container process are still effective,
               even if they are not included in this list.
               Note that this field cannot be set when spec.os.name is windows.
        :param pulumi.Input[Sequence[pulumi.Input['IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextSysctlsArgs']]] sysctls: Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported
               sysctls (by the container runtime) might fail to launch.
               Note that this field cannot be set when spec.os.name is windows.
        """
        if fs_group is not None:
            pulumi.set(__self__, "fs_group", fs_group)
        if fs_group_change_policy is not None:
            pulumi.set(__self__, "fs_group_change_policy", fs_group_change_policy)
        if run_as_group is not None:
            pulumi.set(__self__, "run_as_group", run_as_group)
        if run_as_non_root is not None:
            pulumi.set(__self__, "run_as_non_root", run_as_non_root)
        if run_as_user is not None:
            pulumi.set(__self__, "run_as_user", run_as_user)
        if se_linux_options is not None:
            pulumi.set(__self__, "se_linux_options", se_linux_options)
        if seccomp_profile is not None:
            pulumi.set(__self__, "seccomp_profile", seccomp_profile)
        if supplemental_groups is not None:
            pulumi.set(__self__, "supplemental_groups", supplemental_groups)
        if sysctls is not None:
            pulumi.set(__self__, "sysctls", sysctls)

    @property
    @pulumi.getter(name="fsGroup")
    def fs_group(self) -> Optional[pulumi.Input[int]]:
        """
        A special supplemental group that applies to all containers in a pod.
        Some volume types allow the Kubelet to change the ownership of that volume
        to be owned by the pod:

        1. The owning GID will be the FSGroup
        2. The setgid bit is set (new files created in the volume will be owned by FSGroup)
        3. The permission bits are OR'd with rw-rw----

        If unset, the Kubelet will not modify the ownership and permissions of any volume.
        Note that this field cannot be set when spec.os.name is windows.
        """
        return pulumi.get(self, "fs_group")

    @fs_group.setter
    def fs_group(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fs_group", value)

    @property
    @pulumi.getter(name="fsGroupChangePolicy")
    def fs_group_change_policy(self) -> Optional[pulumi.Input[str]]:
        """
        fsGroupChangePolicy defines behavior of changing ownership and permission of the volume
        before being exposed inside Pod. This field will only apply to
        volume types which support fsGroup based ownership(and permissions).
        It will have no effect on ephemeral volume types such as: secret, configmaps
        and emptydir.
        Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used.
        Note that this field cannot be set when spec.os.name is windows.
        """
        return pulumi.get(self, "fs_group_change_policy")

    @fs_group_change_policy.setter
    def fs_group_change_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fs_group_change_policy", value)

    @property
    @pulumi.getter(name="runAsGroup")
    def run_as_group(self) -> Optional[pulumi.Input[int]]:
        """
        The GID to run the entrypoint of the container process.
        Uses runtime default if unset.
        May also be set in SecurityContext.  If set in both SecurityContext and
        PodSecurityContext, the value specified in SecurityContext takes precedence
        for that container.
        Note that this field cannot be set when spec.os.name is windows.
        """
        return pulumi.get(self, "run_as_group")

    @run_as_group.setter
    def run_as_group(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "run_as_group", value)

    @property
    @pulumi.getter(name="runAsNonRoot")
    def run_as_non_root(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates that the container must run as a non-root user.
        If true, the Kubelet will validate the image at runtime to ensure that it
        does not run as UID 0 (root) and fail to start the container if it does.
        If unset or false, no such validation will be performed.
        May also be set in SecurityContext.  If set in both SecurityContext and
        PodSecurityContext, the value specified in SecurityContext takes precedence.
        """
        return pulumi.get(self, "run_as_non_root")

    @run_as_non_root.setter
    def run_as_non_root(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "run_as_non_root", value)

    @property
    @pulumi.getter(name="runAsUser")
    def run_as_user(self) -> Optional[pulumi.Input[int]]:
        """
        The UID to run the entrypoint of the container process.
        Defaults to user specified in image metadata if unspecified.
        May also be set in SecurityContext.  If set in both SecurityContext and
        PodSecurityContext, the value specified in SecurityContext takes precedence
        for that container.
        Note that this field cannot be set when spec.os.name is windows.
        """
        return pulumi.get(self, "run_as_user")

    @run_as_user.setter
    def run_as_user(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "run_as_user", value)

    @property
    @pulumi.getter(name="seLinuxOptions")
    def se_linux_options(
        self,
    ) -> Optional[
        pulumi.Input[
            "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextSeLinuxOptionsArgs"
        ]
    ]:
        return pulumi.get(self, "se_linux_options")

    @se_linux_options.setter
    def se_linux_options(
        self,
        value: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextSeLinuxOptionsArgs"
            ]
        ],
    ):
        pulumi.set(self, "se_linux_options", value)

    @property
    @pulumi.getter(name="seccompProfile")
    def seccomp_profile(
        self,
    ) -> Optional[
        pulumi.Input[
            "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextSeccompProfileArgs"
        ]
    ]:
        return pulumi.get(self, "seccomp_profile")

    @seccomp_profile.setter
    def seccomp_profile(
        self,
        value: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextSeccompProfileArgs"
            ]
        ],
    ):
        pulumi.set(self, "seccomp_profile", value)

    @property
    @pulumi.getter(name="supplementalGroups")
    def supplemental_groups(
        self,
    ) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        A list of groups applied to the first process run in each container, in addition
        to the container's primary GID, the fsGroup (if specified), and group memberships
        defined in the container image for the uid of the container process. If unspecified,
        no additional groups are added to any container. Note that group memberships
        defined in the container image for the uid of the container process are still effective,
        even if they are not included in this list.
        Note that this field cannot be set when spec.os.name is windows.
        """
        return pulumi.get(self, "supplemental_groups")

    @supplemental_groups.setter
    def supplemental_groups(
        self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]
    ):
        pulumi.set(self, "supplemental_groups", value)

    @property
    @pulumi.getter
    def sysctls(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextSysctlsArgs"
                ]
            ]
        ]
    ]:
        """
        Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported
        sysctls (by the container runtime) might fail to launch.
        Note that this field cannot be set when spec.os.name is windows.
        """
        return pulumi.get(self, "sysctls")

    @sysctls.setter
    def sysctls(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextSysctlsArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "sysctls", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecTolerationsPatchArgsDict(
        TypedDict
    ):
        """
        The pod this Toleration is attached to tolerates any taint that matches
        the triple <key,value,effect> using the matching operator <operator>.
        """

        effect: NotRequired[pulumi.Input[str]]
        """
        Effect indicates the taint effect to match. Empty means match all taint effects.
        When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
        """
        key: NotRequired[pulumi.Input[str]]
        """
        Key is the taint key that the toleration applies to. Empty means match all taint keys.
        If the key is empty, operator must be Exists; this combination means to match all values and all keys.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        Operator represents a key's relationship to the value.
        Valid operators are Exists and Equal. Defaults to Equal.
        Exists is equivalent to wildcard for value, so that a pod can
        tolerate all taints of a particular category.
        """
        toleration_seconds: NotRequired[pulumi.Input[int]]
        """
        TolerationSeconds represents the period of time the toleration (which must be
        of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,
        it is not set, which means tolerate the taint forever (do not evict). Zero and
        negative values will be treated as 0 (evict immediately) by the system.
        """
        value: NotRequired[pulumi.Input[str]]
        """
        Value is the taint value the toleration matches to.
        If the operator is Exists, the value should be empty, otherwise just a regular string.
        """

elif False:
    IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecTolerationsPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecTolerationsPatchArgs:
    def __init__(
        __self__,
        *,
        effect: Optional[pulumi.Input[str]] = None,
        key: Optional[pulumi.Input[str]] = None,
        operator: Optional[pulumi.Input[str]] = None,
        toleration_seconds: Optional[pulumi.Input[int]] = None,
        value: Optional[pulumi.Input[str]] = None
    ):
        """
        The pod this Toleration is attached to tolerates any taint that matches
        the triple <key,value,effect> using the matching operator <operator>.
        :param pulumi.Input[str] effect: Effect indicates the taint effect to match. Empty means match all taint effects.
               When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
        :param pulumi.Input[str] key: Key is the taint key that the toleration applies to. Empty means match all taint keys.
               If the key is empty, operator must be Exists; this combination means to match all values and all keys.
        :param pulumi.Input[str] operator: Operator represents a key's relationship to the value.
               Valid operators are Exists and Equal. Defaults to Equal.
               Exists is equivalent to wildcard for value, so that a pod can
               tolerate all taints of a particular category.
        :param pulumi.Input[int] toleration_seconds: TolerationSeconds represents the period of time the toleration (which must be
               of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,
               it is not set, which means tolerate the taint forever (do not evict). Zero and
               negative values will be treated as 0 (evict immediately) by the system.
        :param pulumi.Input[str] value: Value is the taint value the toleration matches to.
               If the operator is Exists, the value should be empty, otherwise just a regular string.
        """
        if effect is not None:
            pulumi.set(__self__, "effect", effect)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if toleration_seconds is not None:
            pulumi.set(__self__, "toleration_seconds", toleration_seconds)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def effect(self) -> Optional[pulumi.Input[str]]:
        """
        Effect indicates the taint effect to match. Empty means match all taint effects.
        When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
        """
        return pulumi.get(self, "effect")

    @effect.setter
    def effect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "effect", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        Key is the taint key that the toleration applies to. Empty means match all taint keys.
        If the key is empty, operator must be Exists; this combination means to match all values and all keys.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        Operator represents a key's relationship to the value.
        Valid operators are Exists and Equal. Defaults to Equal.
        Exists is equivalent to wildcard for value, so that a pod can
        tolerate all taints of a particular category.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter(name="tolerationSeconds")
    def toleration_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        TolerationSeconds represents the period of time the toleration (which must be
        of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,
        it is not set, which means tolerate the taint forever (do not evict). Zero and
        negative values will be treated as 0 (evict immediately) by the system.
        """
        return pulumi.get(self, "toleration_seconds")

    @toleration_seconds.setter
    def toleration_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "toleration_seconds", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Value is the taint value the toleration matches to.
        If the operator is Exists, the value should be empty, otherwise just a regular string.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecTolerationsArgsDict(
        TypedDict
    ):
        """
        The pod this Toleration is attached to tolerates any taint that matches
        the triple <key,value,effect> using the matching operator <operator>.
        """

        effect: NotRequired[pulumi.Input[str]]
        """
        Effect indicates the taint effect to match. Empty means match all taint effects.
        When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
        """
        key: NotRequired[pulumi.Input[str]]
        """
        Key is the taint key that the toleration applies to. Empty means match all taint keys.
        If the key is empty, operator must be Exists; this combination means to match all values and all keys.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        Operator represents a key's relationship to the value.
        Valid operators are Exists and Equal. Defaults to Equal.
        Exists is equivalent to wildcard for value, so that a pod can
        tolerate all taints of a particular category.
        """
        toleration_seconds: NotRequired[pulumi.Input[int]]
        """
        TolerationSeconds represents the period of time the toleration (which must be
        of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,
        it is not set, which means tolerate the taint forever (do not evict). Zero and
        negative values will be treated as 0 (evict immediately) by the system.
        """
        value: NotRequired[pulumi.Input[str]]
        """
        Value is the taint value the toleration matches to.
        If the operator is Exists, the value should be empty, otherwise just a regular string.
        """

elif False:
    IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecTolerationsArgsDict: TypeAlias = (
        Mapping[str, Any]
    )


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecTolerationsArgs:
    def __init__(
        __self__,
        *,
        effect: Optional[pulumi.Input[str]] = None,
        key: Optional[pulumi.Input[str]] = None,
        operator: Optional[pulumi.Input[str]] = None,
        toleration_seconds: Optional[pulumi.Input[int]] = None,
        value: Optional[pulumi.Input[str]] = None
    ):
        """
        The pod this Toleration is attached to tolerates any taint that matches
        the triple <key,value,effect> using the matching operator <operator>.
        :param pulumi.Input[str] effect: Effect indicates the taint effect to match. Empty means match all taint effects.
               When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
        :param pulumi.Input[str] key: Key is the taint key that the toleration applies to. Empty means match all taint keys.
               If the key is empty, operator must be Exists; this combination means to match all values and all keys.
        :param pulumi.Input[str] operator: Operator represents a key's relationship to the value.
               Valid operators are Exists and Equal. Defaults to Equal.
               Exists is equivalent to wildcard for value, so that a pod can
               tolerate all taints of a particular category.
        :param pulumi.Input[int] toleration_seconds: TolerationSeconds represents the period of time the toleration (which must be
               of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,
               it is not set, which means tolerate the taint forever (do not evict). Zero and
               negative values will be treated as 0 (evict immediately) by the system.
        :param pulumi.Input[str] value: Value is the taint value the toleration matches to.
               If the operator is Exists, the value should be empty, otherwise just a regular string.
        """
        if effect is not None:
            pulumi.set(__self__, "effect", effect)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if toleration_seconds is not None:
            pulumi.set(__self__, "toleration_seconds", toleration_seconds)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def effect(self) -> Optional[pulumi.Input[str]]:
        """
        Effect indicates the taint effect to match. Empty means match all taint effects.
        When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
        """
        return pulumi.get(self, "effect")

    @effect.setter
    def effect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "effect", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        Key is the taint key that the toleration applies to. Empty means match all taint keys.
        If the key is empty, operator must be Exists; this combination means to match all values and all keys.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        Operator represents a key's relationship to the value.
        Valid operators are Exists and Equal. Defaults to Equal.
        Exists is equivalent to wildcard for value, so that a pod can
        tolerate all taints of a particular category.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter(name="tolerationSeconds")
    def toleration_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        TolerationSeconds represents the period of time the toleration (which must be
        of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,
        it is not set, which means tolerate the taint forever (do not evict). Zero and
        negative values will be treated as 0 (evict immediately) by the system.
        """
        return pulumi.get(self, "toleration_seconds")

    @toleration_seconds.setter
    def toleration_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "toleration_seconds", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Value is the taint value the toleration matches to.
        If the operator is Exists, the value should be empty, otherwise just a regular string.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecArgsDict(TypedDict):
        """
        PodSpec defines overrides for the HTTP01 challenge solver pod.
        Check ACMEChallengeSolverHTTP01IngressPodSpec to find out currently supported fields.
        All other fields will be ignored.
        """

        affinity: NotRequired[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityArgsDict"
            ]
        ]
        image_pull_secrets: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecImagePullSecretsArgsDict"
                    ]
                ]
            ]
        ]
        """
        If specified, the pod's imagePullSecrets
        """
        node_selector: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        NodeSelector is a selector which must be true for the pod to fit on a node.
        Selector which must match a node's labels for the pod to be scheduled on that node.
        More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
        """
        priority_class_name: NotRequired[pulumi.Input[str]]
        """
        If specified, the pod's priorityClassName.
        """
        security_context: NotRequired[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextArgsDict"
            ]
        ]
        service_account_name: NotRequired[pulumi.Input[str]]
        """
        If specified, the pod's service account
        """
        tolerations: NotRequired[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecTolerationsArgsDict"
                    ]
                ]
            ]
        ]
        """
        If specified, the pod's tolerations.
        """

elif False:
    IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecArgs:
    def __init__(
        __self__,
        *,
        affinity: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityArgs"
            ]
        ] = None,
        image_pull_secrets: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecImagePullSecretsArgs"
                    ]
                ]
            ]
        ] = None,
        node_selector: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
        priority_class_name: Optional[pulumi.Input[str]] = None,
        security_context: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextArgs"
            ]
        ] = None,
        service_account_name: Optional[pulumi.Input[str]] = None,
        tolerations: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecTolerationsArgs"
                    ]
                ]
            ]
        ] = None
    ):
        """
        PodSpec defines overrides for the HTTP01 challenge solver pod.
        Check ACMEChallengeSolverHTTP01IngressPodSpec to find out currently supported fields.
        All other fields will be ignored.
        :param pulumi.Input[Sequence[pulumi.Input['IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecImagePullSecretsArgs']]] image_pull_secrets: If specified, the pod's imagePullSecrets
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] node_selector: NodeSelector is a selector which must be true for the pod to fit on a node.
               Selector which must match a node's labels for the pod to be scheduled on that node.
               More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
        :param pulumi.Input[str] priority_class_name: If specified, the pod's priorityClassName.
        :param pulumi.Input[str] service_account_name: If specified, the pod's service account
        :param pulumi.Input[Sequence[pulumi.Input['IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecTolerationsArgs']]] tolerations: If specified, the pod's tolerations.
        """
        if affinity is not None:
            pulumi.set(__self__, "affinity", affinity)
        if image_pull_secrets is not None:
            pulumi.set(__self__, "image_pull_secrets", image_pull_secrets)
        if node_selector is not None:
            pulumi.set(__self__, "node_selector", node_selector)
        if priority_class_name is not None:
            pulumi.set(__self__, "priority_class_name", priority_class_name)
        if security_context is not None:
            pulumi.set(__self__, "security_context", security_context)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tolerations is not None:
            pulumi.set(__self__, "tolerations", tolerations)

    @property
    @pulumi.getter
    def affinity(
        self,
    ) -> Optional[
        pulumi.Input["IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityArgs"]
    ]:
        return pulumi.get(self, "affinity")

    @affinity.setter
    def affinity(
        self,
        value: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityArgs"
            ]
        ],
    ):
        pulumi.set(self, "affinity", value)

    @property
    @pulumi.getter(name="imagePullSecrets")
    def image_pull_secrets(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecImagePullSecretsArgs"
                ]
            ]
        ]
    ]:
        """
        If specified, the pod's imagePullSecrets
        """
        return pulumi.get(self, "image_pull_secrets")

    @image_pull_secrets.setter
    def image_pull_secrets(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecImagePullSecretsArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "image_pull_secrets", value)

    @property
    @pulumi.getter(name="nodeSelector")
    def node_selector(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        NodeSelector is a selector which must be true for the pod to fit on a node.
        Selector which must match a node's labels for the pod to be scheduled on that node.
        More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
        """
        return pulumi.get(self, "node_selector")

    @node_selector.setter
    def node_selector(
        self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
    ):
        pulumi.set(self, "node_selector", value)

    @property
    @pulumi.getter(name="priorityClassName")
    def priority_class_name(self) -> Optional[pulumi.Input[str]]:
        """
        If specified, the pod's priorityClassName.
        """
        return pulumi.get(self, "priority_class_name")

    @priority_class_name.setter
    def priority_class_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "priority_class_name", value)

    @property
    @pulumi.getter(name="securityContext")
    def security_context(
        self,
    ) -> Optional[
        pulumi.Input[
            "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextArgs"
        ]
    ]:
        return pulumi.get(self, "security_context")

    @security_context.setter
    def security_context(
        self,
        value: Optional[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextArgs"
            ]
        ],
    ):
        pulumi.set(self, "security_context", value)

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[pulumi.Input[str]]:
        """
        If specified, the pod's service account
        """
        return pulumi.get(self, "service_account_name")

    @service_account_name.setter
    def service_account_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account_name", value)

    @property
    @pulumi.getter
    def tolerations(
        self,
    ) -> Optional[
        pulumi.Input[
            Sequence[
                pulumi.Input[
                    "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecTolerationsArgs"
                ]
            ]
        ]
    ]:
        """
        If specified, the pod's tolerations.
        """
        return pulumi.get(self, "tolerations")

    @tolerations.setter
    def tolerations(
        self,
        value: Optional[
            pulumi.Input[
                Sequence[
                    pulumi.Input[
                        "IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecTolerationsArgs"
                    ]
                ]
            ]
        ],
    ):
        pulumi.set(self, "tolerations", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01IngressPodTemplateArgsDict(TypedDict):
        """
        Optional pod template used to configure the ACME challenge solver pods
        used for HTTP01 challenges.
        """

        metadata: NotRequired[
            pulumi.Input[
                "IssuerSpecAcmeSolversHttp01IngressPodTemplateMetadataArgsDict"
            ]
        ]
        spec: NotRequired[
            pulumi.Input["IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecArgsDict"]
        ]

elif False:
    IssuerSpecAcmeSolversHttp01IngressPodTemplateArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01IngressPodTemplateArgs:
    def __init__(
        __self__,
        *,
        metadata: Optional[
            pulumi.Input["IssuerSpecAcmeSolversHttp01IngressPodTemplateMetadataArgs"]
        ] = None,
        spec: Optional[
            pulumi.Input["IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecArgs"]
        ] = None
    ):
        """
        Optional pod template used to configure the ACME challenge solver pods
        used for HTTP01 challenges.
        """
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if spec is not None:
            pulumi.set(__self__, "spec", spec)

    @property
    @pulumi.getter
    def metadata(
        self,
    ) -> Optional[
        pulumi.Input["IssuerSpecAcmeSolversHttp01IngressPodTemplateMetadataArgs"]
    ]:
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(
        self,
        value: Optional[
            pulumi.Input["IssuerSpecAcmeSolversHttp01IngressPodTemplateMetadataArgs"]
        ],
    ):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter
    def spec(
        self,
    ) -> Optional[
        pulumi.Input["IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecArgs"]
    ]:
        return pulumi.get(self, "spec")

    @spec.setter
    def spec(
        self,
        value: Optional[
            pulumi.Input["IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecArgs"]
        ],
    ):
        pulumi.set(self, "spec", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01IngressArgsDict(TypedDict):
        """
        The ingress based HTTP01 challenge solver will solve challenges by
        creating or modifying Ingress resources in order to route requests for
        '/.well-known/acme-challenge/XYZ' to 'challenge solver' pods that are
        provisioned by cert-manager for each Challenge to be completed.
        """

        class_: NotRequired[pulumi.Input[str]]
        """
        This field configures the annotation `kubernetes.io/ingress.class` when
        creating Ingress resources to solve ACME challenges that use this
        challenge solver. Only one of `class`, `name` or `ingressClassName` may
        be specified.
        """
        ingress_class_name: NotRequired[pulumi.Input[str]]
        """
        This field configures the field `ingressClassName` on the created Ingress
        resources used to solve ACME challenges that use this challenge solver.
        This is the recommended way of configuring the ingress class. Only one of
        `class`, `name` or `ingressClassName` may be specified.
        """
        ingress_template: NotRequired[
            pulumi.Input["IssuerSpecAcmeSolversHttp01IngressIngressTemplateArgsDict"]
        ]
        name: NotRequired[pulumi.Input[str]]
        """
        The name of the ingress resource that should have ACME challenge solving
        routes inserted into it in order to solve HTTP01 challenges.
        This is typically used in conjunction with ingress controllers like
        ingress-gce, which maintains a 1:1 mapping between external IPs and
        ingress resources. Only one of `class`, `name` or `ingressClassName` may
        be specified.
        """
        pod_template: NotRequired[
            pulumi.Input["IssuerSpecAcmeSolversHttp01IngressPodTemplateArgsDict"]
        ]
        service_type: NotRequired[pulumi.Input[str]]
        """
        Optional service type for Kubernetes solver service. Supported values
        are NodePort or ClusterIP. If unset, defaults to NodePort.
        """

elif False:
    IssuerSpecAcmeSolversHttp01IngressArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01IngressArgs:
    def __init__(
        __self__,
        *,
        class_: Optional[pulumi.Input[str]] = None,
        ingress_class_name: Optional[pulumi.Input[str]] = None,
        ingress_template: Optional[
            pulumi.Input["IssuerSpecAcmeSolversHttp01IngressIngressTemplateArgs"]
        ] = None,
        name: Optional[pulumi.Input[str]] = None,
        pod_template: Optional[
            pulumi.Input["IssuerSpecAcmeSolversHttp01IngressPodTemplateArgs"]
        ] = None,
        service_type: Optional[pulumi.Input[str]] = None
    ):
        """
        The ingress based HTTP01 challenge solver will solve challenges by
        creating or modifying Ingress resources in order to route requests for
        '/.well-known/acme-challenge/XYZ' to 'challenge solver' pods that are
        provisioned by cert-manager for each Challenge to be completed.
        :param pulumi.Input[str] class_: This field configures the annotation `kubernetes.io/ingress.class` when
               creating Ingress resources to solve ACME challenges that use this
               challenge solver. Only one of `class`, `name` or `ingressClassName` may
               be specified.
        :param pulumi.Input[str] ingress_class_name: This field configures the field `ingressClassName` on the created Ingress
               resources used to solve ACME challenges that use this challenge solver.
               This is the recommended way of configuring the ingress class. Only one of
               `class`, `name` or `ingressClassName` may be specified.
        :param pulumi.Input[str] name: The name of the ingress resource that should have ACME challenge solving
               routes inserted into it in order to solve HTTP01 challenges.
               This is typically used in conjunction with ingress controllers like
               ingress-gce, which maintains a 1:1 mapping between external IPs and
               ingress resources. Only one of `class`, `name` or `ingressClassName` may
               be specified.
        :param pulumi.Input[str] service_type: Optional service type for Kubernetes solver service. Supported values
               are NodePort or ClusterIP. If unset, defaults to NodePort.
        """
        if class_ is not None:
            pulumi.set(__self__, "class_", class_)
        if ingress_class_name is not None:
            pulumi.set(__self__, "ingress_class_name", ingress_class_name)
        if ingress_template is not None:
            pulumi.set(__self__, "ingress_template", ingress_template)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if pod_template is not None:
            pulumi.set(__self__, "pod_template", pod_template)
        if service_type is not None:
            pulumi.set(__self__, "service_type", service_type)

    @property
    @pulumi.getter(name="class")
    def class_(self) -> Optional[pulumi.Input[str]]:
        """
        This field configures the annotation `kubernetes.io/ingress.class` when
        creating Ingress resources to solve ACME challenges that use this
        challenge solver. Only one of `class`, `name` or `ingressClassName` may
        be specified.
        """
        return pulumi.get(self, "class_")

    @class_.setter
    def class_(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "class_", value)

    @property
    @pulumi.getter(name="ingressClassName")
    def ingress_class_name(self) -> Optional[pulumi.Input[str]]:
        """
        This field configures the field `ingressClassName` on the created Ingress
        resources used to solve ACME challenges that use this challenge solver.
        This is the recommended way of configuring the ingress class. Only one of
        `class`, `name` or `ingressClassName` may be specified.
        """
        return pulumi.get(self, "ingress_class_name")

    @ingress_class_name.setter
    def ingress_class_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ingress_class_name", value)

    @property
    @pulumi.getter(name="ingressTemplate")
    def ingress_template(
        self,
    ) -> Optional[
        pulumi.Input["IssuerSpecAcmeSolversHttp01IngressIngressTemplateArgs"]
    ]:
        return pulumi.get(self, "ingress_template")

    @ingress_template.setter
    def ingress_template(
        self,
        value: Optional[
            pulumi.Input["IssuerSpecAcmeSolversHttp01IngressIngressTemplateArgs"]
        ],
    ):
        pulumi.set(self, "ingress_template", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the ingress resource that should have ACME challenge solving
        routes inserted into it in order to solve HTTP01 challenges.
        This is typically used in conjunction with ingress controllers like
        ingress-gce, which maintains a 1:1 mapping between external IPs and
        ingress resources. Only one of `class`, `name` or `ingressClassName` may
        be specified.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="podTemplate")
    def pod_template(
        self,
    ) -> Optional[pulumi.Input["IssuerSpecAcmeSolversHttp01IngressPodTemplateArgs"]]:
        return pulumi.get(self, "pod_template")

    @pod_template.setter
    def pod_template(
        self,
        value: Optional[
            pulumi.Input["IssuerSpecAcmeSolversHttp01IngressPodTemplateArgs"]
        ],
    ):
        pulumi.set(self, "pod_template", value)

    @property
    @pulumi.getter(name="serviceType")
    def service_type(self) -> Optional[pulumi.Input[str]]:
        """
        Optional service type for Kubernetes solver service. Supported values
        are NodePort or ClusterIP. If unset, defaults to NodePort.
        """
        return pulumi.get(self, "service_type")

    @service_type.setter
    def service_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_type", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01PatchArgsDict(TypedDict):
        """
        Configures cert-manager to attempt to complete authorizations by
        performing the HTTP01 challenge flow.
        It is not possible to obtain certificates for wildcard domain names
        (e.g. `*.example.com`) using the HTTP01 challenge mechanism.
        """

        gateway_http_route: NotRequired[
            pulumi.Input["IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePatchArgsDict"]
        ]
        ingress: NotRequired[
            pulumi.Input["IssuerSpecAcmeSolversHttp01IngressPatchArgsDict"]
        ]

elif False:
    IssuerSpecAcmeSolversHttp01PatchArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01PatchArgs:
    def __init__(
        __self__,
        *,
        gateway_http_route: Optional[
            pulumi.Input["IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePatchArgs"]
        ] = None,
        ingress: Optional[
            pulumi.Input["IssuerSpecAcmeSolversHttp01IngressPatchArgs"]
        ] = None
    ):
        """
        Configures cert-manager to attempt to complete authorizations by
        performing the HTTP01 challenge flow.
        It is not possible to obtain certificates for wildcard domain names
        (e.g. `*.example.com`) using the HTTP01 challenge mechanism.
        """
        if gateway_http_route is not None:
            pulumi.set(__self__, "gateway_http_route", gateway_http_route)
        if ingress is not None:
            pulumi.set(__self__, "ingress", ingress)

    @property
    @pulumi.getter(name="gatewayHTTPRoute")
    def gateway_http_route(
        self,
    ) -> Optional[pulumi.Input["IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePatchArgs"]]:
        return pulumi.get(self, "gateway_http_route")

    @gateway_http_route.setter
    def gateway_http_route(
        self,
        value: Optional[
            pulumi.Input["IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePatchArgs"]
        ],
    ):
        pulumi.set(self, "gateway_http_route", value)

    @property
    @pulumi.getter
    def ingress(
        self,
    ) -> Optional[pulumi.Input["IssuerSpecAcmeSolversHttp01IngressPatchArgs"]]:
        return pulumi.get(self, "ingress")

    @ingress.setter
    def ingress(
        self,
        value: Optional[pulumi.Input["IssuerSpecAcmeSolversHttp01IngressPatchArgs"]],
    ):
        pulumi.set(self, "ingress", value)


if not MYPY:

    class IssuerSpecAcmeSolversHttp01ArgsDict(TypedDict):
        """
        Configures cert-manager to attempt to complete authorizations by
        performing the HTTP01 challenge flow.
        It is not possible to obtain certificates for wildcard domain names
        (e.g. `*.example.com`) using the HTTP01 challenge mechanism.
        """

        gateway_http_route: NotRequired[
            pulumi.Input["IssuerSpecAcmeSolversHttp01GatewayHTTPRouteArgsDict"]
        ]
        ingress: NotRequired[pulumi.Input["IssuerSpecAcmeSolversHttp01IngressArgsDict"]]

elif False:
    IssuerSpecAcmeSolversHttp01ArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class IssuerSpecAcmeSolversHttp01Args:
    def __init__(
        __self__,
        *,
        gateway_http_route: Optional[
            pulumi.Input["IssuerSpecAcmeSolversHttp01GatewayHTTPRouteArgs"]
        ] = None,
        ingress: Optional[pulumi.Input["IssuerSpecAcmeSolversHttp01IngressArgs"]] = None
    ):
        """
        Configures cert-manager to attempt to complete authorizations by
        performing the HTTP01 challenge flow.
        It is not possible to obtain certificates for wildcard domain names
        (e.g. `*.example.com`) using the HTTP01 challenge mechanism.
        """
        if gateway_http_route is not None:
            pulumi.set(__self__, "gateway_http_route", gateway_http_route)
        if ingress is not None:
            pulumi.set(__self__, "ingress", ingress)

    @property
    @pulumi.getter(name="gatewayHTTPRoute")
    def gateway_http_route(
        self,
    ) -> Optional[pulumi.Input["IssuerSpecAcmeSolversHttp01GatewayHTTPRouteArgs"]]:
        return pulumi.get(self, "gateway_http_route")

    @gateway_http_route.setter
    def gateway_http_route(
        self,
        value: Optional[
            pulumi.Input["IssuerSpecAcmeSolversHttp01GatewayHTTPRouteArgs"]
        ],
    ):
        pulumi.set(self, "gateway_http_route", value)

    @property
    @pulumi.getter
    def ingress(
        self,
    ) -> Optional[pulumi.Input["IssuerSpecAcmeSolversHttp01IngressArgs"]]:
        return pulumi.get(self, "ingress")

    @ingress.setter
    def ingress(
        self, value: Optional[pulumi.Input["IssuerSpecAcmeSolversHttp01IngressArgs"]]
    ):
        pulumi.set(self, "ingress", value)


if not MYPY:

    class IssuerSpecAcmeSolversPatchArgsDict(TypedDict):
        """
        An ACMEChallengeSolver describes how to solve ACME challenges for the issuer it is part of.
        A selector may be provided to use different solving strategies for different DNS names.
        Only one of HTTP01 or DNS01 must be provided.
        """

        dns01: NotRequired[pulumi.Input["IssuerSpecAcmeSolversDns01PatchArgsDict"]]
        http01: NotRequired[pulumi.Input["IssuerSpecAcmeSolversHttp01PatchArgsDict"]]
        selector: NotRequired[
            pulumi.Input["IssuerSpecAcmeSolversSelectorPatchArgsDict"]
        ]

elif False:
    IssuerSpecAcmeSolversPatchArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class IssuerSpecAcmeSolversPatchArgs:
    def __init__(
        __self__,
        *,
        dns01: Optional[pulumi.Input["IssuerSpecAcmeSolversDns01PatchArgs"]] = None,
        http01: Optional[pulumi.Input["IssuerSpecAcmeSolversHttp01PatchArgs"]] = None,
        selector: Optional[
            pulumi.Input["IssuerSpecAcmeSolversSelectorPatchArgs"]
        ] = None
    ):
        """
        An ACMEChallengeSolver describes how to solve ACME challenges for the issuer it is part of.
        A selector may be provided to use different solving strategies for different DNS names.
        Only one of HTTP01 or DNS01 must be provided.
        """
        if dns01 is not None:
            pulumi.set(__self__, "dns01", dns01)
        if http01 is not None:
            pulumi.set(__self__, "http01", http01)
        if selector is not None:
            pulumi.set(__self__, "selector", selector)

    @property
    @pulumi.getter
    def dns01(self) -> Optional[pulumi.Input["IssuerSpecAcmeSolversDns01PatchArgs"]]:
        return pulumi.get(self, "dns01")

    @dns01.setter
    def dns01(
        self, value: Optional[pulumi.Input["IssuerSpecAcmeSolversDns01PatchArgs"]]
    ):
        pulumi.set(self, "dns01", value)

    @property
    @pulumi.getter
    def http01(self) -> Optional[pulumi.Input["IssuerSpecAcmeSolversHttp01PatchArgs"]]:
        return pulumi.get(self, "http01")

    @http01.setter
    def http01(
        self, value: Optional[pulumi.Input["IssuerSpecAcmeSolversHttp01PatchArgs"]]
    ):
        pulumi.set(self, "http01", value)

    @property
    @pulumi.getter
    def selector(
        self,
    ) -> Optional[pulumi.Input["IssuerSpecAcmeSolversSelectorPatchArgs"]]:
        return pulumi.get(self, "selector")

    @selector.setter
    def selector(
        self, value: Optional[pulumi.Input["IssuerSpecAcmeSolversSelectorPatchArgs"]]
    ):
        pulumi.set(self, "selector", value)


if not MYPY:

    class IssuerSpecAcmeSolversSelectorPatchArgsDict(TypedDict):
        """
        Selector selects a set of DNSNames on the Certificate resource that
        should be solved using this challenge solver.
        If not specified, the solver will be treated as the 'default' solver
        with the lowest priority, i.e. if any other solver has a more specific
        match, it will be used instead.
        """

        dns_names: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        List of DNSNames that this solver will be used to solve.
        If specified and a match is found, a dnsNames selector will take
        precedence over a dnsZones selector.
        If multiple solvers match with the same dnsNames value, the solver
        with the most matching labels in matchLabels will be selected.
        If neither has more matches, the solver defined earlier in the list
        will be selected.
        """
        dns_zones: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        List of DNSZones that this solver will be used to solve.
        The most specific DNS zone match specified here will take precedence
        over other DNS zone matches, so a solver specifying sys.example.com
        will be selected over one specifying example.com for the domain
        www.sys.example.com.
        If multiple solvers match with the same dnsZones value, the solver
        with the most matching labels in matchLabels will be selected.
        If neither has more matches, the solver defined earlier in the list
        will be selected.
        """
        match_labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        A label selector that is used to refine the set of certificate's that
        this challenge solver will apply to.
        """

elif False:
    IssuerSpecAcmeSolversSelectorPatchArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class IssuerSpecAcmeSolversSelectorPatchArgs:
    def __init__(
        __self__,
        *,
        dns_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        dns_zones: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None
    ):
        """
        Selector selects a set of DNSNames on the Certificate resource that
        should be solved using this challenge solver.
        If not specified, the solver will be treated as the 'default' solver
        with the lowest priority, i.e. if any other solver has a more specific
        match, it will be used instead.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] dns_names: List of DNSNames that this solver will be used to solve.
               If specified and a match is found, a dnsNames selector will take
               precedence over a dnsZones selector.
               If multiple solvers match with the same dnsNames value, the solver
               with the most matching labels in matchLabels will be selected.
               If neither has more matches, the solver defined earlier in the list
               will be selected.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] dns_zones: List of DNSZones that this solver will be used to solve.
               The most specific DNS zone match specified here will take precedence
               over other DNS zone matches, so a solver specifying sys.example.com
               will be selected over one specifying example.com for the domain
               www.sys.example.com.
               If multiple solvers match with the same dnsZones value, the solver
               with the most matching labels in matchLabels will be selected.
               If neither has more matches, the solver defined earlier in the list
               will be selected.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] match_labels: A label selector that is used to refine the set of certificate's that
               this challenge solver will apply to.
        """
        if dns_names is not None:
            pulumi.set(__self__, "dns_names", dns_names)
        if dns_zones is not None:
            pulumi.set(__self__, "dns_zones", dns_zones)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="dnsNames")
    def dns_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of DNSNames that this solver will be used to solve.
        If specified and a match is found, a dnsNames selector will take
        precedence over a dnsZones selector.
        If multiple solvers match with the same dnsNames value, the solver
        with the most matching labels in matchLabels will be selected.
        If neither has more matches, the solver defined earlier in the list
        will be selected.
        """
        return pulumi.get(self, "dns_names")

    @dns_names.setter
    def dns_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "dns_names", value)

    @property
    @pulumi.getter(name="dnsZones")
    def dns_zones(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of DNSZones that this solver will be used to solve.
        The most specific DNS zone match specified here will take precedence
        over other DNS zone matches, so a solver specifying sys.example.com
        will be selected over one specifying example.com for the domain
        www.sys.example.com.
        If multiple solvers match with the same dnsZones value, the solver
        with the most matching labels in matchLabels will be selected.
        If neither has more matches, the solver defined earlier in the list
        will be selected.
        """
        return pulumi.get(self, "dns_zones")

    @dns_zones.setter
    def dns_zones(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "dns_zones", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A label selector that is used to refine the set of certificate's that
        this challenge solver will apply to.
        """
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(
        self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
    ):
        pulumi.set(self, "match_labels", value)


if not MYPY:

    class IssuerSpecAcmeSolversSelectorArgsDict(TypedDict):
        """
        Selector selects a set of DNSNames on the Certificate resource that
        should be solved using this challenge solver.
        If not specified, the solver will be treated as the 'default' solver
        with the lowest priority, i.e. if any other solver has a more specific
        match, it will be used instead.
        """

        dns_names: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        List of DNSNames that this solver will be used to solve.
        If specified and a match is found, a dnsNames selector will take
        precedence over a dnsZones selector.
        If multiple solvers match with the same dnsNames value, the solver
        with the most matching labels in matchLabels will be selected.
        If neither has more matches, the solver defined earlier in the list
        will be selected.
        """
        dns_zones: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        List of DNSZones that this solver will be used to solve.
        The most specific DNS zone match specified here will take precedence
        over other DNS zone matches, so a solver specifying sys.example.com
        will be selected over one specifying example.com for the domain
        www.sys.example.com.
        If multiple solvers match with the same dnsZones value, the solver
        with the most matching labels in matchLabels will be selected.
        If neither has more matches, the solver defined earlier in the list
        will be selected.
        """
        match_labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        A label selector that is used to refine the set of certificate's that
        this challenge solver will apply to.
        """

elif False:
    IssuerSpecAcmeSolversSelectorArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class IssuerSpecAcmeSolversSelectorArgs:
    def __init__(
        __self__,
        *,
        dns_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        dns_zones: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None
    ):
        """
        Selector selects a set of DNSNames on the Certificate resource that
        should be solved using this challenge solver.
        If not specified, the solver will be treated as the 'default' solver
        with the lowest priority, i.e. if any other solver has a more specific
        match, it will be used instead.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] dns_names: List of DNSNames that this solver will be used to solve.
               If specified and a match is found, a dnsNames selector will take
               precedence over a dnsZones selector.
               If multiple solvers match with the same dnsNames value, the solver
               with the most matching labels in matchLabels will be selected.
               If neither has more matches, the solver defined earlier in the list
               will be selected.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] dns_zones: List of DNSZones that this solver will be used to solve.
               The most specific DNS zone match specified here will take precedence
               over other DNS zone matches, so a solver specifying sys.example.com
               will be selected over one specifying example.com for the domain
               www.sys.example.com.
               If multiple solvers match with the same dnsZones value, the solver
               with the most matching labels in matchLabels will be selected.
               If neither has more matches, the solver defined earlier in the list
               will be selected.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] match_labels: A label selector that is used to refine the set of certificate's that
               this challenge solver will apply to.
        """
        if dns_names is not None:
            pulumi.set(__self__, "dns_names", dns_names)
        if dns_zones is not None:
            pulumi.set(__self__, "dns_zones", dns_zones)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="dnsNames")
    def dns_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of DNSNames that this solver will be used to solve.
        If specified and a match is found, a dnsNames selector will take
        precedence over a dnsZones selector.
        If multiple solvers match with the same dnsNames value, the solver
        with the most matching labels in matchLabels will be selected.
        If neither has more matches, the solver defined earlier in the list
        will be selected.
        """
        return pulumi.get(self, "dns_names")

    @dns_names.setter
    def dns_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "dns_names", value)

    @property
    @pulumi.getter(name="dnsZones")
    def dns_zones(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of DNSZones that this solver will be used to solve.
        The most specific DNS zone match specified here will take precedence
        over other DNS zone matches, so a solver specifying sys.example.com
        will be selected over one specifying example.com for the domain
        www.sys.example.com.
        If multiple solvers match with the same dnsZones value, the solver
        with the most matching labels in matchLabels will be selected.
        If neither has more matches, the solver defined earlier in the list
        will be selected.
        """
        return pulumi.get(self, "dns_zones")

    @dns_zones.setter
    def dns_zones(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "dns_zones", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A label selector that is used to refine the set of certificate's that
        this challenge solver will apply to.
        """
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(
        self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
    ):
        pulumi.set(self, "match_labels", value)


if not MYPY:

    class IssuerSpecAcmeSolversArgsDict(TypedDict):
        """
        An ACMEChallengeSolver describes how to solve ACME challenges for the issuer it is part of.
        A selector may be provided to use different solving strategies for different DNS names.
        Only one of HTTP01 or DNS01 must be provided.
        """

        dns01: NotRequired[pulumi.Input["IssuerSpecAcmeSolversDns01ArgsDict"]]
        http01: NotRequired[pulumi.Input["IssuerSpecAcmeSolversHttp01ArgsDict"]]
        selector: NotRequired[pulumi.Input["IssuerSpecAcmeSolversSelectorArgsDict"]]

elif False:
    IssuerSpecAcmeSolversArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class IssuerSpecAcmeSolversArgs:
    def __init__(
        __self__,
        *,
        dns01: Optional[pulumi.Input["IssuerSpecAcmeSolversDns01Args"]] = None,
        http01: Optional[pulumi.Input["IssuerSpecAcmeSolversHttp01Args"]] = None,
        selector: Optional[pulumi.Input["IssuerSpecAcmeSolversSelectorArgs"]] = None
    ):
        """
        An ACMEChallengeSolver describes how to solve ACME challenges for the issuer it is part of.
        A selector may be provided to use different solving strategies for different DNS names.
        Only one of HTTP01 or DNS01 must be provided.
        """
        if dns01 is not None:
            pulumi.set(__self__, "dns01", dns01)
        if http01 is not None:
            pulumi.set(__self__, "http01", http01)
        if selector is not None:
            pulumi.set(__self__, "selector", selector)

    @property
    @pulumi.getter
    def dns01(self) -> Optional[pulumi.Input["IssuerSpecAcmeSolversDns01Args"]]:
        return pulumi.get(self, "dns01")

    @dns01.setter
    def dns01(self, value: Optional[pulumi.Input["IssuerSpecAcmeSolversDns01Args"]]):
        pulumi.set(self, "dns01", value)

    @property
    @pulumi.getter
    def http01(self) -> Optional[pulumi.Input["IssuerSpecAcmeSolversHttp01Args"]]:
        return pulumi.get(self, "http01")

    @http01.setter
    def http01(self, value: Optional[pulumi.Input["IssuerSpecAcmeSolversHttp01Args"]]):
        pulumi.set(self, "http01", value)

    @property
    @pulumi.getter
    def selector(self) -> Optional[pulumi.Input["IssuerSpecAcmeSolversSelectorArgs"]]:
        return pulumi.get(self, "selector")

    @selector.setter
    def selector(
        self, value: Optional[pulumi.Input["IssuerSpecAcmeSolversSelectorArgs"]]
    ):
        pulumi.set(self, "selector", value)


if not MYPY:

    class IssuerSpecAcmeArgsDict(TypedDict):
        """
        ACME configures this issuer to communicate with a RFC8555 (ACME) server
        to obtain signed x509 certificates.
        """

        ca_bundle: NotRequired[pulumi.Input[str]]
        """
        Base64-encoded bundle of PEM CAs which can be used to validate the certificate
        chain presented by the ACME server.
        Mutually exclusive with SkipTLSVerify; prefer using CABundle to prevent various
        kinds of security vulnerabilities.
        If CABundle and SkipTLSVerify are unset, the system certificate bundle inside
        the container is used to validate the TLS connection.
        """
        disable_account_key_generation: NotRequired[pulumi.Input[bool]]
        """
        Enables or disables generating a new ACME account key.
        If true, the Issuer resource will *not* request a new account but will expect
        the account key to be supplied via an existing secret.
        If false, the cert-manager system will generate a new ACME account key
        for the Issuer.
        Defaults to false.
        """
        email: NotRequired[pulumi.Input[str]]
        """
        Email is the email address to be associated with the ACME account.
        This field is optional, but it is strongly recommended to be set.
        It will be used to contact you in case of issues with your account or
        certificates, including expiry notification emails.
        This field may be updated after the account is initially registered.
        """
        enable_duration_feature: NotRequired[pulumi.Input[bool]]
        """
        Enables requesting a Not After date on certificates that matches the
        duration of the certificate. This is not supported by all ACME servers
        like Let's Encrypt. If set to true when the ACME server does not support
        it, it will create an error on the Order.
        Defaults to false.
        """
        external_account_binding: NotRequired[
            pulumi.Input["IssuerSpecAcmeExternalAccountBindingArgsDict"]
        ]
        preferred_chain: NotRequired[pulumi.Input[str]]
        """
        PreferredChain is the chain to use if the ACME server outputs multiple.
        PreferredChain is no guarantee that this one gets delivered by the ACME
        endpoint.
        For example, for Let's Encrypt's DST crosssign you would use:
        "DST Root CA X3" or "ISRG Root X1" for the newer Let's Encrypt root CA.
        This value picks the first certificate bundle in the combined set of
        ACME default and alternative chains that has a root-most certificate with
        this value as its issuer's commonname.
        """
        private_key_secret_ref: NotRequired[
            pulumi.Input["IssuerSpecAcmePrivateKeySecretRefArgsDict"]
        ]
        server: NotRequired[pulumi.Input[str]]
        """
        Server is the URL used to access the ACME server's 'directory' endpoint.
        For example, for Let's Encrypt's staging endpoint, you would use:
        "https://acme-staging-v02.api.letsencrypt.org/directory".
        Only ACME v2 endpoints (i.e. RFC 8555) are supported.
        """
        skip_tls_verify: NotRequired[pulumi.Input[bool]]
        """
        INSECURE: Enables or disables validation of the ACME server TLS certificate.
        If true, requests to the ACME server will not have the TLS certificate chain
        validated.
        Mutually exclusive with CABundle; prefer using CABundle to prevent various
        kinds of security vulnerabilities.
        Only enable this option in development environments.
        If CABundle and SkipTLSVerify are unset, the system certificate bundle inside
        the container is used to validate the TLS connection.
        Defaults to false.
        """
        solvers: NotRequired[
            pulumi.Input[Sequence[pulumi.Input["IssuerSpecAcmeSolversArgsDict"]]]
        ]
        """
        Solvers is a list of challenge solvers that will be used to solve
        ACME challenges for the matching domains.
        Solver configurations must be provided in order to obtain certificates
        from an ACME server.
        For more information, see: https://cert-manager.io/docs/configuration/acme/
        """

elif False:
    IssuerSpecAcmeArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class IssuerSpecAcmeArgs:
    def __init__(
        __self__,
        *,
        ca_bundle: Optional[pulumi.Input[str]] = None,
        disable_account_key_generation: Optional[pulumi.Input[bool]] = None,
        email: Optional[pulumi.Input[str]] = None,
        enable_duration_feature: Optional[pulumi.Input[bool]] = None,
        external_account_binding: Optional[
            pulumi.Input["IssuerSpecAcmeExternalAccountBindingArgs"]
        ] = None,
        preferred_chain: Optional[pulumi.Input[str]] = None,
        private_key_secret_ref: Optional[
            pulumi.Input["IssuerSpecAcmePrivateKeySecretRefArgs"]
        ] = None,
        server: Optional[pulumi.Input[str]] = None,
        skip_tls_verify: Optional[pulumi.Input[bool]] = None,
        solvers: Optional[
            pulumi.Input[Sequence[pulumi.Input["IssuerSpecAcmeSolversArgs"]]]
        ] = None
    ):
        """
        ACME configures this issuer to communicate with a RFC8555 (ACME) server
        to obtain signed x509 certificates.
        :param pulumi.Input[str] ca_bundle: Base64-encoded bundle of PEM CAs which can be used to validate the certificate
               chain presented by the ACME server.
               Mutually exclusive with SkipTLSVerify; prefer using CABundle to prevent various
               kinds of security vulnerabilities.
               If CABundle and SkipTLSVerify are unset, the system certificate bundle inside
               the container is used to validate the TLS connection.
        :param pulumi.Input[bool] disable_account_key_generation: Enables or disables generating a new ACME account key.
               If true, the Issuer resource will *not* request a new account but will expect
               the account key to be supplied via an existing secret.
               If false, the cert-manager system will generate a new ACME account key
               for the Issuer.
               Defaults to false.
        :param pulumi.Input[str] email: Email is the email address to be associated with the ACME account.
               This field is optional, but it is strongly recommended to be set.
               It will be used to contact you in case of issues with your account or
               certificates, including expiry notification emails.
               This field may be updated after the account is initially registered.
        :param pulumi.Input[bool] enable_duration_feature: Enables requesting a Not After date on certificates that matches the
               duration of the certificate. This is not supported by all ACME servers
               like Let's Encrypt. If set to true when the ACME server does not support
               it, it will create an error on the Order.
               Defaults to false.
        :param pulumi.Input[str] preferred_chain: PreferredChain is the chain to use if the ACME server outputs multiple.
               PreferredChain is no guarantee that this one gets delivered by the ACME
               endpoint.
               For example, for Let's Encrypt's DST crosssign you would use:
               "DST Root CA X3" or "ISRG Root X1" for the newer Let's Encrypt root CA.
               This value picks the first certificate bundle in the combined set of
               ACME default and alternative chains that has a root-most certificate with
               this value as its issuer's commonname.
        :param pulumi.Input[str] server: Server is the URL used to access the ACME server's 'directory' endpoint.
               For example, for Let's Encrypt's staging endpoint, you would use:
               "https://acme-staging-v02.api.letsencrypt.org/directory".
               Only ACME v2 endpoints (i.e. RFC 8555) are supported.
        :param pulumi.Input[bool] skip_tls_verify: INSECURE: Enables or disables validation of the ACME server TLS certificate.
               If true, requests to the ACME server will not have the TLS certificate chain
               validated.
               Mutually exclusive with CABundle; prefer using CABundle to prevent various
               kinds of security vulnerabilities.
               Only enable this option in development environments.
               If CABundle and SkipTLSVerify are unset, the system certificate bundle inside
               the container is used to validate the TLS connection.
               Defaults to false.
        :param pulumi.Input[Sequence[pulumi.Input['IssuerSpecAcmeSolversArgs']]] solvers: Solvers is a list of challenge solvers that will be used to solve
               ACME challenges for the matching domains.
               Solver configurations must be provided in order to obtain certificates
               from an ACME server.
               For more information, see: https://cert-manager.io/docs/configuration/acme/
        """
        if ca_bundle is not None:
            pulumi.set(__self__, "ca_bundle", ca_bundle)
        if disable_account_key_generation is not None:
            pulumi.set(
                __self__,
                "disable_account_key_generation",
                disable_account_key_generation,
            )
        if email is not None:
            pulumi.set(__self__, "email", email)
        if enable_duration_feature is not None:
            pulumi.set(__self__, "enable_duration_feature", enable_duration_feature)
        if external_account_binding is not None:
            pulumi.set(__self__, "external_account_binding", external_account_binding)
        if preferred_chain is not None:
            pulumi.set(__self__, "preferred_chain", preferred_chain)
        if private_key_secret_ref is not None:
            pulumi.set(__self__, "private_key_secret_ref", private_key_secret_ref)
        if server is not None:
            pulumi.set(__self__, "server", server)
        if skip_tls_verify is not None:
            pulumi.set(__self__, "skip_tls_verify", skip_tls_verify)
        if solvers is not None:
            pulumi.set(__self__, "solvers", solvers)

    @property
    @pulumi.getter(name="caBundle")
    def ca_bundle(self) -> Optional[pulumi.Input[str]]:
        """
        Base64-encoded bundle of PEM CAs which can be used to validate the certificate
        chain presented by the ACME server.
        Mutually exclusive with SkipTLSVerify; prefer using CABundle to prevent various
        kinds of security vulnerabilities.
        If CABundle and SkipTLSVerify are unset, the system certificate bundle inside
        the container is used to validate the TLS connection.
        """
        return pulumi.get(self, "ca_bundle")

    @ca_bundle.setter
    def ca_bundle(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ca_bundle", value)

    @property
    @pulumi.getter(name="disableAccountKeyGeneration")
    def disable_account_key_generation(self) -> Optional[pulumi.Input[bool]]:
        """
        Enables or disables generating a new ACME account key.
        If true, the Issuer resource will *not* request a new account but will expect
        the account key to be supplied via an existing secret.
        If false, the cert-manager system will generate a new ACME account key
        for the Issuer.
        Defaults to false.
        """
        return pulumi.get(self, "disable_account_key_generation")

    @disable_account_key_generation.setter
    def disable_account_key_generation(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disable_account_key_generation", value)

    @property
    @pulumi.getter
    def email(self) -> Optional[pulumi.Input[str]]:
        """
        Email is the email address to be associated with the ACME account.
        This field is optional, but it is strongly recommended to be set.
        It will be used to contact you in case of issues with your account or
        certificates, including expiry notification emails.
        This field may be updated after the account is initially registered.
        """
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email", value)

    @property
    @pulumi.getter(name="enableDurationFeature")
    def enable_duration_feature(self) -> Optional[pulumi.Input[bool]]:
        """
        Enables requesting a Not After date on certificates that matches the
        duration of the certificate. This is not supported by all ACME servers
        like Let's Encrypt. If set to true when the ACME server does not support
        it, it will create an error on the Order.
        Defaults to false.
        """
        return pulumi.get(self, "enable_duration_feature")

    @enable_duration_feature.setter
    def enable_duration_feature(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_duration_feature", value)

    @property
    @pulumi.getter(name="externalAccountBinding")
    def external_account_binding(
        self,
    ) -> Optional[pulumi.Input["IssuerSpecAcmeExternalAccountBindingArgs"]]:
        return pulumi.get(self, "external_account_binding")

    @external_account_binding.setter
    def external_account_binding(
        self, value: Optional[pulumi.Input["IssuerSpecAcmeExternalAccountBindingArgs"]]
    ):
        pulumi.set(self, "external_account_binding", value)

    @property
    @pulumi.getter(name="preferredChain")
    def preferred_chain(self) -> Optional[pulumi.Input[str]]:
        """
        PreferredChain is the chain to use if the ACME server outputs multiple.
        PreferredChain is no guarantee that this one gets delivered by the ACME
        endpoint.
        For example, for Let's Encrypt's DST crosssign you would use:
        "DST Root CA X3" or "ISRG Root X1" for the newer Let's Encrypt root CA.
        This value picks the first certificate bundle in the combined set of
        ACME default and alternative chains that has a root-most certificate with
        this value as its issuer's commonname.
        """
        return pulumi.get(self, "preferred_chain")

    @preferred_chain.setter
    def preferred_chain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "preferred_chain", value)

    @property
    @pulumi.getter(name="privateKeySecretRef")
    def private_key_secret_ref(
        self,
    ) -> Optional[pulumi.Input["IssuerSpecAcmePrivateKeySecretRefArgs"]]:
        return pulumi.get(self, "private_key_secret_ref")

    @private_key_secret_ref.setter
    def private_key_secret_ref(
        self, value: Optional[pulumi.Input["IssuerSpecAcmePrivateKeySecretRefArgs"]]
    ):
        pulumi.set(self, "private_key_secret_ref", value)

    @property
    @pulumi.getter
    def server(self) -> Optional[pulumi.Input[str]]:
        """
        Server is the URL used to access the ACME server's 'directory' endpoint.
        For example, for Let's Encrypt's staging endpoint, you would use:
        "https://acme-staging-v02.api.letsencrypt.org/directory".
        Only ACME v2 endpoints (i.e. RFC 8555) are supported.
        """
        return pulumi.get(self, "server")

    @server.setter
    def server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server", value)

    @property
    @pulumi.getter(name="skipTLSVerify")
    def skip_tls_verify(self) -> Optional[pulumi.Input[bool]]:
        """
        INSECURE: Enables or disables validation of the ACME server TLS certificate.
        If true, requests to the ACME server will not have the TLS certificate chain
        validated.
        Mutually exclusive with CABundle; prefer using CABundle to prevent various
        kinds of security vulnerabilities.
        Only enable this option in development environments.
        If CABundle and SkipTLSVerify are unset, the system certificate bundle inside
        the container is used to validate the TLS connection.
        Defaults to false.
        """
        return pulumi.get(self, "skip_tls_verify")

    @skip_tls_verify.setter
    def skip_tls_verify(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "skip_tls_verify", value)

    @property
    @pulumi.getter
    def solvers(
        self,
    ) -> Optional[pulumi.Input[Sequence[pulumi.Input["IssuerSpecAcmeSolversArgs"]]]]:
        """
        Solvers is a list of challenge solvers that will be used to solve
        ACME challenges for the matching domains.
        Solver configurations must be provided in order to obtain certificates
        from an ACME server.
        For more information, see: https://cert-manager.io/docs/configuration/acme/
        """
        return pulumi.get(self, "solvers")

    @solvers.setter
    def solvers(
        self,
        value: Optional[
            pulumi.Input[Sequence[pulumi.Input["IssuerSpecAcmeSolversArgs"]]]
        ],
    ):
        pulumi.set(self, "solvers", value)


if not MYPY:

    class IssuerSpecCaPatchArgsDict(TypedDict):
        """
        CA configures this issuer to sign certificates using a signing CA keypair
        stored in a Secret resource.
        This is used to build internal PKIs that are managed by cert-manager.
        """

        crl_distribution_points: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        The CRL distribution points is an X.509 v3 certificate extension which identifies
        the location of the CRL from which the revocation of this certificate can be checked.
        If not set, certificates will be issued without distribution points set.
        """
        issuing_certificate_urls: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        IssuingCertificateURLs is a list of URLs which this issuer should embed into certificates
        it creates. See https://www.rfc-editor.org/rfc/rfc5280#section-4.2.2.1 for more details.
        As an example, such a URL might be "http://ca.domain.com/ca.crt".
        """
        ocsp_servers: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        The OCSP server list is an X.509 v3 extension that defines a list of
        URLs of OCSP responders. The OCSP responders can be queried for the
        revocation status of an issued certificate. If not set, the
        certificate will be issued with no OCSP servers set. For example, an
        OCSP server URL could be "http://ocsp.int-x3.letsencrypt.org".
        """
        secretName: NotRequired[pulumi.Input[str]]
        """
        SecretName is the name of the secret used to sign Certificates issued
        by this Issuer.
        """

elif False:
    IssuerSpecCaPatchArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class IssuerSpecCaPatchArgs:
    def __init__(
        __self__,
        *,
        crl_distribution_points: Optional[
            pulumi.Input[Sequence[pulumi.Input[str]]]
        ] = None,
        issuing_certificate_urls: Optional[
            pulumi.Input[Sequence[pulumi.Input[str]]]
        ] = None,
        ocsp_servers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        secretName: Optional[pulumi.Input[str]] = None
    ):
        """
        CA configures this issuer to sign certificates using a signing CA keypair
        stored in a Secret resource.
        This is used to build internal PKIs that are managed by cert-manager.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] crl_distribution_points: The CRL distribution points is an X.509 v3 certificate extension which identifies
               the location of the CRL from which the revocation of this certificate can be checked.
               If not set, certificates will be issued without distribution points set.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] issuing_certificate_urls: IssuingCertificateURLs is a list of URLs which this issuer should embed into certificates
               it creates. See https://www.rfc-editor.org/rfc/rfc5280#section-4.2.2.1 for more details.
               As an example, such a URL might be "http://ca.domain.com/ca.crt".
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ocsp_servers: The OCSP server list is an X.509 v3 extension that defines a list of
               URLs of OCSP responders. The OCSP responders can be queried for the
               revocation status of an issued certificate. If not set, the
               certificate will be issued with no OCSP servers set. For example, an
               OCSP server URL could be "http://ocsp.int-x3.letsencrypt.org".
        :param pulumi.Input[str] secretName: SecretName is the name of the secret used to sign Certificates issued
               by this Issuer.
        """
        if crl_distribution_points is not None:
            pulumi.set(__self__, "crl_distribution_points", crl_distribution_points)
        if issuing_certificate_urls is not None:
            pulumi.set(__self__, "issuing_certificate_urls", issuing_certificate_urls)
        if ocsp_servers is not None:
            pulumi.set(__self__, "ocsp_servers", ocsp_servers)
        if secretName is not None:
            pulumi.set(__self__, "secretName", secretName)

    @property
    @pulumi.getter(name="crlDistributionPoints")
    def crl_distribution_points(
        self,
    ) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The CRL distribution points is an X.509 v3 certificate extension which identifies
        the location of the CRL from which the revocation of this certificate can be checked.
        If not set, certificates will be issued without distribution points set.
        """
        return pulumi.get(self, "crl_distribution_points")

    @crl_distribution_points.setter
    def crl_distribution_points(
        self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]
    ):
        pulumi.set(self, "crl_distribution_points", value)

    @property
    @pulumi.getter(name="issuingCertificateURLs")
    def issuing_certificate_urls(
        self,
    ) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        IssuingCertificateURLs is a list of URLs which this issuer should embed into certificates
        it creates. See https://www.rfc-editor.org/rfc/rfc5280#section-4.2.2.1 for more details.
        As an example, such a URL might be "http://ca.domain.com/ca.crt".
        """
        return pulumi.get(self, "issuing_certificate_urls")

    @issuing_certificate_urls.setter
    def issuing_certificate_urls(
        self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]
    ):
        pulumi.set(self, "issuing_certificate_urls", value)

    @property
    @pulumi.getter(name="ocspServers")
    def ocsp_servers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The OCSP server list is an X.509 v3 extension that defines a list of
        URLs of OCSP responders. The OCSP responders can be queried for the
        revocation status of an issued certificate. If not set, the
        certificate will be issued with no OCSP servers set. For example, an
        OCSP server URL could be "http://ocsp.int-x3.letsencrypt.org".
        """
        return pulumi.get(self, "ocsp_servers")

    @ocsp_servers.setter
    def ocsp_servers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ocsp_servers", value)

    @property
    @pulumi.getter(name="secretName")
    def secretName(self) -> Optional[pulumi.Input[str]]:
        """
        SecretName is the name of the secret used to sign Certificates issued
        by this Issuer.
        """
        return pulumi.get(self, "secretName")

    @secretName.setter
    def secretName(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secretName", value)


if not MYPY:

    class IssuerSpecCaArgsDict(TypedDict):
        """
        CA configures this issuer to sign certificates using a signing CA keypair
        stored in a Secret resource.
        This is used to build internal PKIs that are managed by cert-manager.
        """

        crl_distribution_points: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        The CRL distribution points is an X.509 v3 certificate extension which identifies
        the location of the CRL from which the revocation of this certificate can be checked.
        If not set, certificates will be issued without distribution points set.
        """
        issuing_certificate_urls: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        IssuingCertificateURLs is a list of URLs which this issuer should embed into certificates
        it creates. See https://www.rfc-editor.org/rfc/rfc5280#section-4.2.2.1 for more details.
        As an example, such a URL might be "http://ca.domain.com/ca.crt".
        """
        ocsp_servers: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        The OCSP server list is an X.509 v3 extension that defines a list of
        URLs of OCSP responders. The OCSP responders can be queried for the
        revocation status of an issued certificate. If not set, the
        certificate will be issued with no OCSP servers set. For example, an
        OCSP server URL could be "http://ocsp.int-x3.letsencrypt.org".
        """
        secretName: NotRequired[pulumi.Input[str]]
        """
        SecretName is the name of the secret used to sign Certificates issued
        by this Issuer.
        """

elif False:
    IssuerSpecCaArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class IssuerSpecCaArgs:
    def __init__(
        __self__,
        *,
        crl_distribution_points: Optional[
            pulumi.Input[Sequence[pulumi.Input[str]]]
        ] = None,
        issuing_certificate_urls: Optional[
            pulumi.Input[Sequence[pulumi.Input[str]]]
        ] = None,
        ocsp_servers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        secretName: Optional[pulumi.Input[str]] = None
    ):
        """
        CA configures this issuer to sign certificates using a signing CA keypair
        stored in a Secret resource.
        This is used to build internal PKIs that are managed by cert-manager.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] crl_distribution_points: The CRL distribution points is an X.509 v3 certificate extension which identifies
               the location of the CRL from which the revocation of this certificate can be checked.
               If not set, certificates will be issued without distribution points set.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] issuing_certificate_urls: IssuingCertificateURLs is a list of URLs which this issuer should embed into certificates
               it creates. See https://www.rfc-editor.org/rfc/rfc5280#section-4.2.2.1 for more details.
               As an example, such a URL might be "http://ca.domain.com/ca.crt".
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ocsp_servers: The OCSP server list is an X.509 v3 extension that defines a list of
               URLs of OCSP responders. The OCSP responders can be queried for the
               revocation status of an issued certificate. If not set, the
               certificate will be issued with no OCSP servers set. For example, an
               OCSP server URL could be "http://ocsp.int-x3.letsencrypt.org".
        :param pulumi.Input[str] secretName: SecretName is the name of the secret used to sign Certificates issued
               by this Issuer.
        """
        if crl_distribution_points is not None:
            pulumi.set(__self__, "crl_distribution_points", crl_distribution_points)
        if issuing_certificate_urls is not None:
            pulumi.set(__self__, "issuing_certificate_urls", issuing_certificate_urls)
        if ocsp_servers is not None:
            pulumi.set(__self__, "ocsp_servers", ocsp_servers)
        if secretName is not None:
            pulumi.set(__self__, "secretName", secretName)

    @property
    @pulumi.getter(name="crlDistributionPoints")
    def crl_distribution_points(
        self,
    ) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The CRL distribution points is an X.509 v3 certificate extension which identifies
        the location of the CRL from which the revocation of this certificate can be checked.
        If not set, certificates will be issued without distribution points set.
        """
        return pulumi.get(self, "crl_distribution_points")

    @crl_distribution_points.setter
    def crl_distribution_points(
        self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]
    ):
        pulumi.set(self, "crl_distribution_points", value)

    @property
    @pulumi.getter(name="issuingCertificateURLs")
    def issuing_certificate_urls(
        self,
    ) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        IssuingCertificateURLs is a list of URLs which this issuer should embed into certificates
        it creates. See https://www.rfc-editor.org/rfc/rfc5280#section-4.2.2.1 for more details.
        As an example, such a URL might be "http://ca.domain.com/ca.crt".
        """
        return pulumi.get(self, "issuing_certificate_urls")

    @issuing_certificate_urls.setter
    def issuing_certificate_urls(
        self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]
    ):
        pulumi.set(self, "issuing_certificate_urls", value)

    @property
    @pulumi.getter(name="ocspServers")
    def ocsp_servers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The OCSP server list is an X.509 v3 extension that defines a list of
        URLs of OCSP responders. The OCSP responders can be queried for the
        revocation status of an issued certificate. If not set, the
        certificate will be issued with no OCSP servers set. For example, an
        OCSP server URL could be "http://ocsp.int-x3.letsencrypt.org".
        """
        return pulumi.get(self, "ocsp_servers")

    @ocsp_servers.setter
    def ocsp_servers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ocsp_servers", value)

    @property
    @pulumi.getter(name="secretName")
    def secretName(self) -> Optional[pulumi.Input[str]]:
        """
        SecretName is the name of the secret used to sign Certificates issued
        by this Issuer.
        """
        return pulumi.get(self, "secretName")

    @secretName.setter
    def secretName(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secretName", value)


if not MYPY:

    class IssuerSpecPatchArgsDict(TypedDict):
        """
        Desired state of the Issuer resource.
        """

        acme: NotRequired[pulumi.Input["IssuerSpecAcmePatchArgsDict"]]
        ca: NotRequired[pulumi.Input["IssuerSpecCaPatchArgsDict"]]
        self_signed: NotRequired[pulumi.Input["IssuerSpecSelfSignedPatchArgsDict"]]
        vault: NotRequired[pulumi.Input["IssuerSpecVaultPatchArgsDict"]]
        venafi: NotRequired[pulumi.Input["IssuerSpecVenafiPatchArgsDict"]]

elif False:
    IssuerSpecPatchArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class IssuerSpecPatchArgs:
    def __init__(
        __self__,
        *,
        acme: Optional[pulumi.Input["IssuerSpecAcmePatchArgs"]] = None,
        ca: Optional[pulumi.Input["IssuerSpecCaPatchArgs"]] = None,
        self_signed: Optional[pulumi.Input["IssuerSpecSelfSignedPatchArgs"]] = None,
        vault: Optional[pulumi.Input["IssuerSpecVaultPatchArgs"]] = None,
        venafi: Optional[pulumi.Input["IssuerSpecVenafiPatchArgs"]] = None
    ):
        """
        Desired state of the Issuer resource.
        """
        if acme is not None:
            pulumi.set(__self__, "acme", acme)
        if ca is not None:
            pulumi.set(__self__, "ca", ca)
        if self_signed is not None:
            pulumi.set(__self__, "self_signed", self_signed)
        if vault is not None:
            pulumi.set(__self__, "vault", vault)
        if venafi is not None:
            pulumi.set(__self__, "venafi", venafi)

    @property
    @pulumi.getter
    def acme(self) -> Optional[pulumi.Input["IssuerSpecAcmePatchArgs"]]:
        return pulumi.get(self, "acme")

    @acme.setter
    def acme(self, value: Optional[pulumi.Input["IssuerSpecAcmePatchArgs"]]):
        pulumi.set(self, "acme", value)

    @property
    @pulumi.getter
    def ca(self) -> Optional[pulumi.Input["IssuerSpecCaPatchArgs"]]:
        return pulumi.get(self, "ca")

    @ca.setter
    def ca(self, value: Optional[pulumi.Input["IssuerSpecCaPatchArgs"]]):
        pulumi.set(self, "ca", value)

    @property
    @pulumi.getter(name="selfSigned")
    def self_signed(self) -> Optional[pulumi.Input["IssuerSpecSelfSignedPatchArgs"]]:
        return pulumi.get(self, "self_signed")

    @self_signed.setter
    def self_signed(
        self, value: Optional[pulumi.Input["IssuerSpecSelfSignedPatchArgs"]]
    ):
        pulumi.set(self, "self_signed", value)

    @property
    @pulumi.getter
    def vault(self) -> Optional[pulumi.Input["IssuerSpecVaultPatchArgs"]]:
        return pulumi.get(self, "vault")

    @vault.setter
    def vault(self, value: Optional[pulumi.Input["IssuerSpecVaultPatchArgs"]]):
        pulumi.set(self, "vault", value)

    @property
    @pulumi.getter
    def venafi(self) -> Optional[pulumi.Input["IssuerSpecVenafiPatchArgs"]]:
        return pulumi.get(self, "venafi")

    @venafi.setter
    def venafi(self, value: Optional[pulumi.Input["IssuerSpecVenafiPatchArgs"]]):
        pulumi.set(self, "venafi", value)


if not MYPY:

    class IssuerSpecSelfSignedPatchArgsDict(TypedDict):
        """
        SelfSigned configures this issuer to 'self sign' certificates using the
        private key used to create the CertificateRequest object.
        """

        crl_distribution_points: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        The CRL distribution points is an X.509 v3 certificate extension which identifies
        the location of the CRL from which the revocation of this certificate can be checked.
        If not set certificate will be issued without CDP. Values are strings.
        """

elif False:
    IssuerSpecSelfSignedPatchArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class IssuerSpecSelfSignedPatchArgs:
    def __init__(
        __self__,
        *,
        crl_distribution_points: Optional[
            pulumi.Input[Sequence[pulumi.Input[str]]]
        ] = None
    ):
        """
        SelfSigned configures this issuer to 'self sign' certificates using the
        private key used to create the CertificateRequest object.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] crl_distribution_points: The CRL distribution points is an X.509 v3 certificate extension which identifies
               the location of the CRL from which the revocation of this certificate can be checked.
               If not set certificate will be issued without CDP. Values are strings.
        """
        if crl_distribution_points is not None:
            pulumi.set(__self__, "crl_distribution_points", crl_distribution_points)

    @property
    @pulumi.getter(name="crlDistributionPoints")
    def crl_distribution_points(
        self,
    ) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The CRL distribution points is an X.509 v3 certificate extension which identifies
        the location of the CRL from which the revocation of this certificate can be checked.
        If not set certificate will be issued without CDP. Values are strings.
        """
        return pulumi.get(self, "crl_distribution_points")

    @crl_distribution_points.setter
    def crl_distribution_points(
        self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]
    ):
        pulumi.set(self, "crl_distribution_points", value)


if not MYPY:

    class IssuerSpecSelfSignedArgsDict(TypedDict):
        """
        SelfSigned configures this issuer to 'self sign' certificates using the
        private key used to create the CertificateRequest object.
        """

        crl_distribution_points: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        The CRL distribution points is an X.509 v3 certificate extension which identifies
        the location of the CRL from which the revocation of this certificate can be checked.
        If not set certificate will be issued without CDP. Values are strings.
        """

elif False:
    IssuerSpecSelfSignedArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class IssuerSpecSelfSignedArgs:
    def __init__(
        __self__,
        *,
        crl_distribution_points: Optional[
            pulumi.Input[Sequence[pulumi.Input[str]]]
        ] = None
    ):
        """
        SelfSigned configures this issuer to 'self sign' certificates using the
        private key used to create the CertificateRequest object.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] crl_distribution_points: The CRL distribution points is an X.509 v3 certificate extension which identifies
               the location of the CRL from which the revocation of this certificate can be checked.
               If not set certificate will be issued without CDP. Values are strings.
        """
        if crl_distribution_points is not None:
            pulumi.set(__self__, "crl_distribution_points", crl_distribution_points)

    @property
    @pulumi.getter(name="crlDistributionPoints")
    def crl_distribution_points(
        self,
    ) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The CRL distribution points is an X.509 v3 certificate extension which identifies
        the location of the CRL from which the revocation of this certificate can be checked.
        If not set certificate will be issued without CDP. Values are strings.
        """
        return pulumi.get(self, "crl_distribution_points")

    @crl_distribution_points.setter
    def crl_distribution_points(
        self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]
    ):
        pulumi.set(self, "crl_distribution_points", value)


if not MYPY:

    class IssuerSpecVaultAuthAppRolePatchArgsDict(TypedDict):
        """
        AppRole authenticates with Vault using the App Role auth mechanism,
        with the role and secret stored in a Kubernetes Secret resource.
        """

        path: NotRequired[pulumi.Input[str]]
        """
        Path where the App Role authentication backend is mounted in Vault, e.g:
        "approle"
        """
        role_id: NotRequired[pulumi.Input[str]]
        """
        RoleID configured in the App Role authentication backend when setting
        up the authentication backend in Vault.
        """
        secret_ref: NotRequired[
            pulumi.Input["IssuerSpecVaultAuthAppRoleSecretRefPatchArgsDict"]
        ]

elif False:
    IssuerSpecVaultAuthAppRolePatchArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class IssuerSpecVaultAuthAppRolePatchArgs:
    def __init__(
        __self__,
        *,
        path: Optional[pulumi.Input[str]] = None,
        role_id: Optional[pulumi.Input[str]] = None,
        secret_ref: Optional[
            pulumi.Input["IssuerSpecVaultAuthAppRoleSecretRefPatchArgs"]
        ] = None
    ):
        """
        AppRole authenticates with Vault using the App Role auth mechanism,
        with the role and secret stored in a Kubernetes Secret resource.
        :param pulumi.Input[str] path: Path where the App Role authentication backend is mounted in Vault, e.g:
               "approle"
        :param pulumi.Input[str] role_id: RoleID configured in the App Role authentication backend when setting
               up the authentication backend in Vault.
        """
        if path is not None:
            pulumi.set(__self__, "path", path)
        if role_id is not None:
            pulumi.set(__self__, "role_id", role_id)
        if secret_ref is not None:
            pulumi.set(__self__, "secret_ref", secret_ref)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
        Path where the App Role authentication backend is mounted in Vault, e.g:
        "approle"
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter(name="roleId")
    def role_id(self) -> Optional[pulumi.Input[str]]:
        """
        RoleID configured in the App Role authentication backend when setting
        up the authentication backend in Vault.
        """
        return pulumi.get(self, "role_id")

    @role_id.setter
    def role_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role_id", value)

    @property
    @pulumi.getter(name="secretRef")
    def secret_ref(
        self,
    ) -> Optional[pulumi.Input["IssuerSpecVaultAuthAppRoleSecretRefPatchArgs"]]:
        return pulumi.get(self, "secret_ref")

    @secret_ref.setter
    def secret_ref(
        self,
        value: Optional[pulumi.Input["IssuerSpecVaultAuthAppRoleSecretRefPatchArgs"]],
    ):
        pulumi.set(self, "secret_ref", value)


if not MYPY:

    class IssuerSpecVaultAuthAppRoleSecretRefPatchArgsDict(TypedDict):
        """
        Reference to a key in a Secret that contains the App Role secret used
        to authenticate with Vault.
        The `key` field must be specified and denotes which entry within the Secret
        resource is used as the app role secret.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """

elif False:
    IssuerSpecVaultAuthAppRoleSecretRefPatchArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class IssuerSpecVaultAuthAppRoleSecretRefPatchArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        name: Optional[pulumi.Input[str]] = None
    ):
        """
        Reference to a key in a Secret that contains the App Role secret used
        to authenticate with Vault.
        The `key` field must be specified and denotes which entry within the Secret
        resource is used as the app role secret.
        :param pulumi.Input[str] key: The key of the entry in the Secret resource's `data` field to be used.
               Some instances of this field may be defaulted, in others it may be
               required.
        :param pulumi.Input[str] name: Name of the resource being referred to.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:

    class IssuerSpecVaultAuthAppRoleSecretRefArgsDict(TypedDict):
        """
        Reference to a key in a Secret that contains the App Role secret used
        to authenticate with Vault.
        The `key` field must be specified and denotes which entry within the Secret
        resource is used as the app role secret.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """

elif False:
    IssuerSpecVaultAuthAppRoleSecretRefArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class IssuerSpecVaultAuthAppRoleSecretRefArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        name: Optional[pulumi.Input[str]] = None
    ):
        """
        Reference to a key in a Secret that contains the App Role secret used
        to authenticate with Vault.
        The `key` field must be specified and denotes which entry within the Secret
        resource is used as the app role secret.
        :param pulumi.Input[str] key: The key of the entry in the Secret resource's `data` field to be used.
               Some instances of this field may be defaulted, in others it may be
               required.
        :param pulumi.Input[str] name: Name of the resource being referred to.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:

    class IssuerSpecVaultAuthAppRoleArgsDict(TypedDict):
        """
        AppRole authenticates with Vault using the App Role auth mechanism,
        with the role and secret stored in a Kubernetes Secret resource.
        """

        path: NotRequired[pulumi.Input[str]]
        """
        Path where the App Role authentication backend is mounted in Vault, e.g:
        "approle"
        """
        role_id: NotRequired[pulumi.Input[str]]
        """
        RoleID configured in the App Role authentication backend when setting
        up the authentication backend in Vault.
        """
        secret_ref: NotRequired[
            pulumi.Input["IssuerSpecVaultAuthAppRoleSecretRefArgsDict"]
        ]

elif False:
    IssuerSpecVaultAuthAppRoleArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class IssuerSpecVaultAuthAppRoleArgs:
    def __init__(
        __self__,
        *,
        path: Optional[pulumi.Input[str]] = None,
        role_id: Optional[pulumi.Input[str]] = None,
        secret_ref: Optional[
            pulumi.Input["IssuerSpecVaultAuthAppRoleSecretRefArgs"]
        ] = None
    ):
        """
        AppRole authenticates with Vault using the App Role auth mechanism,
        with the role and secret stored in a Kubernetes Secret resource.
        :param pulumi.Input[str] path: Path where the App Role authentication backend is mounted in Vault, e.g:
               "approle"
        :param pulumi.Input[str] role_id: RoleID configured in the App Role authentication backend when setting
               up the authentication backend in Vault.
        """
        if path is not None:
            pulumi.set(__self__, "path", path)
        if role_id is not None:
            pulumi.set(__self__, "role_id", role_id)
        if secret_ref is not None:
            pulumi.set(__self__, "secret_ref", secret_ref)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
        Path where the App Role authentication backend is mounted in Vault, e.g:
        "approle"
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter(name="roleId")
    def role_id(self) -> Optional[pulumi.Input[str]]:
        """
        RoleID configured in the App Role authentication backend when setting
        up the authentication backend in Vault.
        """
        return pulumi.get(self, "role_id")

    @role_id.setter
    def role_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role_id", value)

    @property
    @pulumi.getter(name="secretRef")
    def secret_ref(
        self,
    ) -> Optional[pulumi.Input["IssuerSpecVaultAuthAppRoleSecretRefArgs"]]:
        return pulumi.get(self, "secret_ref")

    @secret_ref.setter
    def secret_ref(
        self, value: Optional[pulumi.Input["IssuerSpecVaultAuthAppRoleSecretRefArgs"]]
    ):
        pulumi.set(self, "secret_ref", value)


if not MYPY:

    class IssuerSpecVaultAuthClientCertificatePatchArgsDict(TypedDict):
        """
        ClientCertificate authenticates with Vault by presenting a client
        certificate during the request's TLS handshake.
        Works only when using HTTPS protocol.
        """

        mount_path: NotRequired[pulumi.Input[str]]
        """
        The Vault mountPath here is the mount path to use when authenticating with
        Vault. For example, setting a value to `/v1/auth/foo`, will use the path
        `/v1/auth/foo/login` to authenticate with Vault. If unspecified, the
        default value "/v1/auth/cert" will be used.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the certificate role to authenticate against.
        If not set, matching any certificate role, if available.
        """
        secretName: NotRequired[pulumi.Input[str]]
        """
        Reference to Kubernetes Secret of type "kubernetes.io/tls" (hence containing
        tls.crt and tls.key) used to authenticate to Vault using TLS client
        authentication.
        """

elif False:
    IssuerSpecVaultAuthClientCertificatePatchArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class IssuerSpecVaultAuthClientCertificatePatchArgs:
    def __init__(
        __self__,
        *,
        mount_path: Optional[pulumi.Input[str]] = None,
        name: Optional[pulumi.Input[str]] = None,
        secretName: Optional[pulumi.Input[str]] = None
    ):
        """
        ClientCertificate authenticates with Vault by presenting a client
        certificate during the request's TLS handshake.
        Works only when using HTTPS protocol.
        :param pulumi.Input[str] mount_path: The Vault mountPath here is the mount path to use when authenticating with
               Vault. For example, setting a value to `/v1/auth/foo`, will use the path
               `/v1/auth/foo/login` to authenticate with Vault. If unspecified, the
               default value "/v1/auth/cert" will be used.
        :param pulumi.Input[str] name: Name of the certificate role to authenticate against.
               If not set, matching any certificate role, if available.
        :param pulumi.Input[str] secretName: Reference to Kubernetes Secret of type "kubernetes.io/tls" (hence containing
               tls.crt and tls.key) used to authenticate to Vault using TLS client
               authentication.
        """
        if mount_path is not None:
            pulumi.set(__self__, "mount_path", mount_path)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if secretName is not None:
            pulumi.set(__self__, "secretName", secretName)

    @property
    @pulumi.getter(name="mountPath")
    def mount_path(self) -> Optional[pulumi.Input[str]]:
        """
        The Vault mountPath here is the mount path to use when authenticating with
        Vault. For example, setting a value to `/v1/auth/foo`, will use the path
        `/v1/auth/foo/login` to authenticate with Vault. If unspecified, the
        default value "/v1/auth/cert" will be used.
        """
        return pulumi.get(self, "mount_path")

    @mount_path.setter
    def mount_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mount_path", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the certificate role to authenticate against.
        If not set, matching any certificate role, if available.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="secretName")
    def secretName(self) -> Optional[pulumi.Input[str]]:
        """
        Reference to Kubernetes Secret of type "kubernetes.io/tls" (hence containing
        tls.crt and tls.key) used to authenticate to Vault using TLS client
        authentication.
        """
        return pulumi.get(self, "secretName")

    @secretName.setter
    def secretName(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secretName", value)


if not MYPY:

    class IssuerSpecVaultAuthClientCertificateArgsDict(TypedDict):
        """
        ClientCertificate authenticates with Vault by presenting a client
        certificate during the request's TLS handshake.
        Works only when using HTTPS protocol.
        """

        mount_path: NotRequired[pulumi.Input[str]]
        """
        The Vault mountPath here is the mount path to use when authenticating with
        Vault. For example, setting a value to `/v1/auth/foo`, will use the path
        `/v1/auth/foo/login` to authenticate with Vault. If unspecified, the
        default value "/v1/auth/cert" will be used.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the certificate role to authenticate against.
        If not set, matching any certificate role, if available.
        """
        secretName: NotRequired[pulumi.Input[str]]
        """
        Reference to Kubernetes Secret of type "kubernetes.io/tls" (hence containing
        tls.crt and tls.key) used to authenticate to Vault using TLS client
        authentication.
        """

elif False:
    IssuerSpecVaultAuthClientCertificateArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class IssuerSpecVaultAuthClientCertificateArgs:
    def __init__(
        __self__,
        *,
        mount_path: Optional[pulumi.Input[str]] = None,
        name: Optional[pulumi.Input[str]] = None,
        secretName: Optional[pulumi.Input[str]] = None
    ):
        """
        ClientCertificate authenticates with Vault by presenting a client
        certificate during the request's TLS handshake.
        Works only when using HTTPS protocol.
        :param pulumi.Input[str] mount_path: The Vault mountPath here is the mount path to use when authenticating with
               Vault. For example, setting a value to `/v1/auth/foo`, will use the path
               `/v1/auth/foo/login` to authenticate with Vault. If unspecified, the
               default value "/v1/auth/cert" will be used.
        :param pulumi.Input[str] name: Name of the certificate role to authenticate against.
               If not set, matching any certificate role, if available.
        :param pulumi.Input[str] secretName: Reference to Kubernetes Secret of type "kubernetes.io/tls" (hence containing
               tls.crt and tls.key) used to authenticate to Vault using TLS client
               authentication.
        """
        if mount_path is not None:
            pulumi.set(__self__, "mount_path", mount_path)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if secretName is not None:
            pulumi.set(__self__, "secretName", secretName)

    @property
    @pulumi.getter(name="mountPath")
    def mount_path(self) -> Optional[pulumi.Input[str]]:
        """
        The Vault mountPath here is the mount path to use when authenticating with
        Vault. For example, setting a value to `/v1/auth/foo`, will use the path
        `/v1/auth/foo/login` to authenticate with Vault. If unspecified, the
        default value "/v1/auth/cert" will be used.
        """
        return pulumi.get(self, "mount_path")

    @mount_path.setter
    def mount_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mount_path", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the certificate role to authenticate against.
        If not set, matching any certificate role, if available.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="secretName")
    def secretName(self) -> Optional[pulumi.Input[str]]:
        """
        Reference to Kubernetes Secret of type "kubernetes.io/tls" (hence containing
        tls.crt and tls.key) used to authenticate to Vault using TLS client
        authentication.
        """
        return pulumi.get(self, "secretName")

    @secretName.setter
    def secretName(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secretName", value)


if not MYPY:

    class IssuerSpecVaultAuthKubernetesPatchArgsDict(TypedDict):
        """
        Kubernetes authenticates with Vault by passing the ServiceAccount
        token stored in the named Secret resource to the Vault server.
        """

        mount_path: NotRequired[pulumi.Input[str]]
        """
        The Vault mountPath here is the mount path to use when authenticating with
        Vault. For example, setting a value to `/v1/auth/foo`, will use the path
        `/v1/auth/foo/login` to authenticate with Vault. If unspecified, the
        default value "/v1/auth/kubernetes" will be used.
        """
        role: NotRequired[pulumi.Input[str]]
        """
        A required field containing the Vault Role to assume. A Role binds a
        Kubernetes ServiceAccount with a set of Vault policies.
        """
        secret_ref: NotRequired[
            pulumi.Input["IssuerSpecVaultAuthKubernetesSecretRefPatchArgsDict"]
        ]
        service_account_ref: NotRequired[
            pulumi.Input["IssuerSpecVaultAuthKubernetesServiceAccountRefPatchArgsDict"]
        ]

elif False:
    IssuerSpecVaultAuthKubernetesPatchArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class IssuerSpecVaultAuthKubernetesPatchArgs:
    def __init__(
        __self__,
        *,
        mount_path: Optional[pulumi.Input[str]] = None,
        role: Optional[pulumi.Input[str]] = None,
        secret_ref: Optional[
            pulumi.Input["IssuerSpecVaultAuthKubernetesSecretRefPatchArgs"]
        ] = None,
        service_account_ref: Optional[
            pulumi.Input["IssuerSpecVaultAuthKubernetesServiceAccountRefPatchArgs"]
        ] = None
    ):
        """
        Kubernetes authenticates with Vault by passing the ServiceAccount
        token stored in the named Secret resource to the Vault server.
        :param pulumi.Input[str] mount_path: The Vault mountPath here is the mount path to use when authenticating with
               Vault. For example, setting a value to `/v1/auth/foo`, will use the path
               `/v1/auth/foo/login` to authenticate with Vault. If unspecified, the
               default value "/v1/auth/kubernetes" will be used.
        :param pulumi.Input[str] role: A required field containing the Vault Role to assume. A Role binds a
               Kubernetes ServiceAccount with a set of Vault policies.
        """
        if mount_path is not None:
            pulumi.set(__self__, "mount_path", mount_path)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if secret_ref is not None:
            pulumi.set(__self__, "secret_ref", secret_ref)
        if service_account_ref is not None:
            pulumi.set(__self__, "service_account_ref", service_account_ref)

    @property
    @pulumi.getter(name="mountPath")
    def mount_path(self) -> Optional[pulumi.Input[str]]:
        """
        The Vault mountPath here is the mount path to use when authenticating with
        Vault. For example, setting a value to `/v1/auth/foo`, will use the path
        `/v1/auth/foo/login` to authenticate with Vault. If unspecified, the
        default value "/v1/auth/kubernetes" will be used.
        """
        return pulumi.get(self, "mount_path")

    @mount_path.setter
    def mount_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mount_path", value)

    @property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input[str]]:
        """
        A required field containing the Vault Role to assume. A Role binds a
        Kubernetes ServiceAccount with a set of Vault policies.
        """
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role", value)

    @property
    @pulumi.getter(name="secretRef")
    def secret_ref(
        self,
    ) -> Optional[pulumi.Input["IssuerSpecVaultAuthKubernetesSecretRefPatchArgs"]]:
        return pulumi.get(self, "secret_ref")

    @secret_ref.setter
    def secret_ref(
        self,
        value: Optional[
            pulumi.Input["IssuerSpecVaultAuthKubernetesSecretRefPatchArgs"]
        ],
    ):
        pulumi.set(self, "secret_ref", value)

    @property
    @pulumi.getter(name="serviceAccountRef")
    def service_account_ref(
        self,
    ) -> Optional[
        pulumi.Input["IssuerSpecVaultAuthKubernetesServiceAccountRefPatchArgs"]
    ]:
        return pulumi.get(self, "service_account_ref")

    @service_account_ref.setter
    def service_account_ref(
        self,
        value: Optional[
            pulumi.Input["IssuerSpecVaultAuthKubernetesServiceAccountRefPatchArgs"]
        ],
    ):
        pulumi.set(self, "service_account_ref", value)


if not MYPY:

    class IssuerSpecVaultAuthKubernetesSecretRefPatchArgsDict(TypedDict):
        """
        The required Secret field containing a Kubernetes ServiceAccount JWT used
        for authenticating with Vault. Use of 'ambient credentials' is not
        supported.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """

elif False:
    IssuerSpecVaultAuthKubernetesSecretRefPatchArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class IssuerSpecVaultAuthKubernetesSecretRefPatchArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        name: Optional[pulumi.Input[str]] = None
    ):
        """
        The required Secret field containing a Kubernetes ServiceAccount JWT used
        for authenticating with Vault. Use of 'ambient credentials' is not
        supported.
        :param pulumi.Input[str] key: The key of the entry in the Secret resource's `data` field to be used.
               Some instances of this field may be defaulted, in others it may be
               required.
        :param pulumi.Input[str] name: Name of the resource being referred to.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:

    class IssuerSpecVaultAuthKubernetesSecretRefArgsDict(TypedDict):
        """
        The required Secret field containing a Kubernetes ServiceAccount JWT used
        for authenticating with Vault. Use of 'ambient credentials' is not
        supported.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """

elif False:
    IssuerSpecVaultAuthKubernetesSecretRefArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class IssuerSpecVaultAuthKubernetesSecretRefArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        name: Optional[pulumi.Input[str]] = None
    ):
        """
        The required Secret field containing a Kubernetes ServiceAccount JWT used
        for authenticating with Vault. Use of 'ambient credentials' is not
        supported.
        :param pulumi.Input[str] key: The key of the entry in the Secret resource's `data` field to be used.
               Some instances of this field may be defaulted, in others it may be
               required.
        :param pulumi.Input[str] name: Name of the resource being referred to.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:

    class IssuerSpecVaultAuthKubernetesServiceAccountRefPatchArgsDict(TypedDict):
        """
        A reference to a service account that will be used to request a bound
        token (also known as "projected token"). Compared to using "secretRef",
        using this field means that you don't rely on statically bound tokens. To
        use this field, you must configure an RBAC rule to let cert-manager
        request a token.
        """

        audiences: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        TokenAudiences is an optional list of extra audiences to include in the token passed to Vault. The default token
        consisting of the issuer's namespace and name is always included.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the ServiceAccount used to request a token.
        """

elif False:
    IssuerSpecVaultAuthKubernetesServiceAccountRefPatchArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecVaultAuthKubernetesServiceAccountRefPatchArgs:
    def __init__(
        __self__,
        *,
        audiences: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        name: Optional[pulumi.Input[str]] = None
    ):
        """
        A reference to a service account that will be used to request a bound
        token (also known as "projected token"). Compared to using "secretRef",
        using this field means that you don't rely on statically bound tokens. To
        use this field, you must configure an RBAC rule to let cert-manager
        request a token.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] audiences: TokenAudiences is an optional list of extra audiences to include in the token passed to Vault. The default token
               consisting of the issuer's namespace and name is always included.
        :param pulumi.Input[str] name: Name of the ServiceAccount used to request a token.
        """
        if audiences is not None:
            pulumi.set(__self__, "audiences", audiences)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def audiences(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        TokenAudiences is an optional list of extra audiences to include in the token passed to Vault. The default token
        consisting of the issuer's namespace and name is always included.
        """
        return pulumi.get(self, "audiences")

    @audiences.setter
    def audiences(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "audiences", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the ServiceAccount used to request a token.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:

    class IssuerSpecVaultAuthKubernetesServiceAccountRefArgsDict(TypedDict):
        """
        A reference to a service account that will be used to request a bound
        token (also known as "projected token"). Compared to using "secretRef",
        using this field means that you don't rely on statically bound tokens. To
        use this field, you must configure an RBAC rule to let cert-manager
        request a token.
        """

        audiences: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        TokenAudiences is an optional list of extra audiences to include in the token passed to Vault. The default token
        consisting of the issuer's namespace and name is always included.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the ServiceAccount used to request a token.
        """

elif False:
    IssuerSpecVaultAuthKubernetesServiceAccountRefArgsDict: TypeAlias = Mapping[
        str, Any
    ]


@pulumi.input_type
class IssuerSpecVaultAuthKubernetesServiceAccountRefArgs:
    def __init__(
        __self__,
        *,
        audiences: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
        name: Optional[pulumi.Input[str]] = None
    ):
        """
        A reference to a service account that will be used to request a bound
        token (also known as "projected token"). Compared to using "secretRef",
        using this field means that you don't rely on statically bound tokens. To
        use this field, you must configure an RBAC rule to let cert-manager
        request a token.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] audiences: TokenAudiences is an optional list of extra audiences to include in the token passed to Vault. The default token
               consisting of the issuer's namespace and name is always included.
        :param pulumi.Input[str] name: Name of the ServiceAccount used to request a token.
        """
        if audiences is not None:
            pulumi.set(__self__, "audiences", audiences)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def audiences(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        TokenAudiences is an optional list of extra audiences to include in the token passed to Vault. The default token
        consisting of the issuer's namespace and name is always included.
        """
        return pulumi.get(self, "audiences")

    @audiences.setter
    def audiences(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "audiences", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the ServiceAccount used to request a token.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:

    class IssuerSpecVaultAuthKubernetesArgsDict(TypedDict):
        """
        Kubernetes authenticates with Vault by passing the ServiceAccount
        token stored in the named Secret resource to the Vault server.
        """

        mount_path: NotRequired[pulumi.Input[str]]
        """
        The Vault mountPath here is the mount path to use when authenticating with
        Vault. For example, setting a value to `/v1/auth/foo`, will use the path
        `/v1/auth/foo/login` to authenticate with Vault. If unspecified, the
        default value "/v1/auth/kubernetes" will be used.
        """
        role: NotRequired[pulumi.Input[str]]
        """
        A required field containing the Vault Role to assume. A Role binds a
        Kubernetes ServiceAccount with a set of Vault policies.
        """
        secret_ref: NotRequired[
            pulumi.Input["IssuerSpecVaultAuthKubernetesSecretRefArgsDict"]
        ]
        service_account_ref: NotRequired[
            pulumi.Input["IssuerSpecVaultAuthKubernetesServiceAccountRefArgsDict"]
        ]

elif False:
    IssuerSpecVaultAuthKubernetesArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class IssuerSpecVaultAuthKubernetesArgs:
    def __init__(
        __self__,
        *,
        mount_path: Optional[pulumi.Input[str]] = None,
        role: Optional[pulumi.Input[str]] = None,
        secret_ref: Optional[
            pulumi.Input["IssuerSpecVaultAuthKubernetesSecretRefArgs"]
        ] = None,
        service_account_ref: Optional[
            pulumi.Input["IssuerSpecVaultAuthKubernetesServiceAccountRefArgs"]
        ] = None
    ):
        """
        Kubernetes authenticates with Vault by passing the ServiceAccount
        token stored in the named Secret resource to the Vault server.
        :param pulumi.Input[str] mount_path: The Vault mountPath here is the mount path to use when authenticating with
               Vault. For example, setting a value to `/v1/auth/foo`, will use the path
               `/v1/auth/foo/login` to authenticate with Vault. If unspecified, the
               default value "/v1/auth/kubernetes" will be used.
        :param pulumi.Input[str] role: A required field containing the Vault Role to assume. A Role binds a
               Kubernetes ServiceAccount with a set of Vault policies.
        """
        if mount_path is not None:
            pulumi.set(__self__, "mount_path", mount_path)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if secret_ref is not None:
            pulumi.set(__self__, "secret_ref", secret_ref)
        if service_account_ref is not None:
            pulumi.set(__self__, "service_account_ref", service_account_ref)

    @property
    @pulumi.getter(name="mountPath")
    def mount_path(self) -> Optional[pulumi.Input[str]]:
        """
        The Vault mountPath here is the mount path to use when authenticating with
        Vault. For example, setting a value to `/v1/auth/foo`, will use the path
        `/v1/auth/foo/login` to authenticate with Vault. If unspecified, the
        default value "/v1/auth/kubernetes" will be used.
        """
        return pulumi.get(self, "mount_path")

    @mount_path.setter
    def mount_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mount_path", value)

    @property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input[str]]:
        """
        A required field containing the Vault Role to assume. A Role binds a
        Kubernetes ServiceAccount with a set of Vault policies.
        """
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role", value)

    @property
    @pulumi.getter(name="secretRef")
    def secret_ref(
        self,
    ) -> Optional[pulumi.Input["IssuerSpecVaultAuthKubernetesSecretRefArgs"]]:
        return pulumi.get(self, "secret_ref")

    @secret_ref.setter
    def secret_ref(
        self,
        value: Optional[pulumi.Input["IssuerSpecVaultAuthKubernetesSecretRefArgs"]],
    ):
        pulumi.set(self, "secret_ref", value)

    @property
    @pulumi.getter(name="serviceAccountRef")
    def service_account_ref(
        self,
    ) -> Optional[pulumi.Input["IssuerSpecVaultAuthKubernetesServiceAccountRefArgs"]]:
        return pulumi.get(self, "service_account_ref")

    @service_account_ref.setter
    def service_account_ref(
        self,
        value: Optional[
            pulumi.Input["IssuerSpecVaultAuthKubernetesServiceAccountRefArgs"]
        ],
    ):
        pulumi.set(self, "service_account_ref", value)


if not MYPY:

    class IssuerSpecVaultAuthPatchArgsDict(TypedDict):
        """
        Auth configures how cert-manager authenticates with the Vault server.
        """

        app_role: NotRequired[pulumi.Input["IssuerSpecVaultAuthAppRolePatchArgsDict"]]
        client_certificate: NotRequired[
            pulumi.Input["IssuerSpecVaultAuthClientCertificatePatchArgsDict"]
        ]
        kubernetes: NotRequired[
            pulumi.Input["IssuerSpecVaultAuthKubernetesPatchArgsDict"]
        ]
        token_secret_ref: NotRequired[
            pulumi.Input["IssuerSpecVaultAuthTokenSecretRefPatchArgsDict"]
        ]

elif False:
    IssuerSpecVaultAuthPatchArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class IssuerSpecVaultAuthPatchArgs:
    def __init__(
        __self__,
        *,
        app_role: Optional[pulumi.Input["IssuerSpecVaultAuthAppRolePatchArgs"]] = None,
        client_certificate: Optional[
            pulumi.Input["IssuerSpecVaultAuthClientCertificatePatchArgs"]
        ] = None,
        kubernetes: Optional[
            pulumi.Input["IssuerSpecVaultAuthKubernetesPatchArgs"]
        ] = None,
        token_secret_ref: Optional[
            pulumi.Input["IssuerSpecVaultAuthTokenSecretRefPatchArgs"]
        ] = None
    ):
        """
        Auth configures how cert-manager authenticates with the Vault server.
        """
        if app_role is not None:
            pulumi.set(__self__, "app_role", app_role)
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)
        if kubernetes is not None:
            pulumi.set(__self__, "kubernetes", kubernetes)
        if token_secret_ref is not None:
            pulumi.set(__self__, "token_secret_ref", token_secret_ref)

    @property
    @pulumi.getter(name="appRole")
    def app_role(self) -> Optional[pulumi.Input["IssuerSpecVaultAuthAppRolePatchArgs"]]:
        return pulumi.get(self, "app_role")

    @app_role.setter
    def app_role(
        self, value: Optional[pulumi.Input["IssuerSpecVaultAuthAppRolePatchArgs"]]
    ):
        pulumi.set(self, "app_role", value)

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(
        self,
    ) -> Optional[pulumi.Input["IssuerSpecVaultAuthClientCertificatePatchArgs"]]:
        return pulumi.get(self, "client_certificate")

    @client_certificate.setter
    def client_certificate(
        self,
        value: Optional[pulumi.Input["IssuerSpecVaultAuthClientCertificatePatchArgs"]],
    ):
        pulumi.set(self, "client_certificate", value)

    @property
    @pulumi.getter
    def kubernetes(
        self,
    ) -> Optional[pulumi.Input["IssuerSpecVaultAuthKubernetesPatchArgs"]]:
        return pulumi.get(self, "kubernetes")

    @kubernetes.setter
    def kubernetes(
        self, value: Optional[pulumi.Input["IssuerSpecVaultAuthKubernetesPatchArgs"]]
    ):
        pulumi.set(self, "kubernetes", value)

    @property
    @pulumi.getter(name="tokenSecretRef")
    def token_secret_ref(
        self,
    ) -> Optional[pulumi.Input["IssuerSpecVaultAuthTokenSecretRefPatchArgs"]]:
        return pulumi.get(self, "token_secret_ref")

    @token_secret_ref.setter
    def token_secret_ref(
        self,
        value: Optional[pulumi.Input["IssuerSpecVaultAuthTokenSecretRefPatchArgs"]],
    ):
        pulumi.set(self, "token_secret_ref", value)


if not MYPY:

    class IssuerSpecVaultAuthTokenSecretRefPatchArgsDict(TypedDict):
        """
        TokenSecretRef authenticates with Vault by presenting a token.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """

elif False:
    IssuerSpecVaultAuthTokenSecretRefPatchArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class IssuerSpecVaultAuthTokenSecretRefPatchArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        name: Optional[pulumi.Input[str]] = None
    ):
        """
        TokenSecretRef authenticates with Vault by presenting a token.
        :param pulumi.Input[str] key: The key of the entry in the Secret resource's `data` field to be used.
               Some instances of this field may be defaulted, in others it may be
               required.
        :param pulumi.Input[str] name: Name of the resource being referred to.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:

    class IssuerSpecVaultAuthTokenSecretRefArgsDict(TypedDict):
        """
        TokenSecretRef authenticates with Vault by presenting a token.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """

elif False:
    IssuerSpecVaultAuthTokenSecretRefArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class IssuerSpecVaultAuthTokenSecretRefArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        name: Optional[pulumi.Input[str]] = None
    ):
        """
        TokenSecretRef authenticates with Vault by presenting a token.
        :param pulumi.Input[str] key: The key of the entry in the Secret resource's `data` field to be used.
               Some instances of this field may be defaulted, in others it may be
               required.
        :param pulumi.Input[str] name: Name of the resource being referred to.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:

    class IssuerSpecVaultAuthArgsDict(TypedDict):
        """
        Auth configures how cert-manager authenticates with the Vault server.
        """

        app_role: NotRequired[pulumi.Input["IssuerSpecVaultAuthAppRoleArgsDict"]]
        client_certificate: NotRequired[
            pulumi.Input["IssuerSpecVaultAuthClientCertificateArgsDict"]
        ]
        kubernetes: NotRequired[pulumi.Input["IssuerSpecVaultAuthKubernetesArgsDict"]]
        token_secret_ref: NotRequired[
            pulumi.Input["IssuerSpecVaultAuthTokenSecretRefArgsDict"]
        ]

elif False:
    IssuerSpecVaultAuthArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class IssuerSpecVaultAuthArgs:
    def __init__(
        __self__,
        *,
        app_role: Optional[pulumi.Input["IssuerSpecVaultAuthAppRoleArgs"]] = None,
        client_certificate: Optional[
            pulumi.Input["IssuerSpecVaultAuthClientCertificateArgs"]
        ] = None,
        kubernetes: Optional[pulumi.Input["IssuerSpecVaultAuthKubernetesArgs"]] = None,
        token_secret_ref: Optional[
            pulumi.Input["IssuerSpecVaultAuthTokenSecretRefArgs"]
        ] = None
    ):
        """
        Auth configures how cert-manager authenticates with the Vault server.
        """
        if app_role is not None:
            pulumi.set(__self__, "app_role", app_role)
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)
        if kubernetes is not None:
            pulumi.set(__self__, "kubernetes", kubernetes)
        if token_secret_ref is not None:
            pulumi.set(__self__, "token_secret_ref", token_secret_ref)

    @property
    @pulumi.getter(name="appRole")
    def app_role(self) -> Optional[pulumi.Input["IssuerSpecVaultAuthAppRoleArgs"]]:
        return pulumi.get(self, "app_role")

    @app_role.setter
    def app_role(self, value: Optional[pulumi.Input["IssuerSpecVaultAuthAppRoleArgs"]]):
        pulumi.set(self, "app_role", value)

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(
        self,
    ) -> Optional[pulumi.Input["IssuerSpecVaultAuthClientCertificateArgs"]]:
        return pulumi.get(self, "client_certificate")

    @client_certificate.setter
    def client_certificate(
        self, value: Optional[pulumi.Input["IssuerSpecVaultAuthClientCertificateArgs"]]
    ):
        pulumi.set(self, "client_certificate", value)

    @property
    @pulumi.getter
    def kubernetes(self) -> Optional[pulumi.Input["IssuerSpecVaultAuthKubernetesArgs"]]:
        return pulumi.get(self, "kubernetes")

    @kubernetes.setter
    def kubernetes(
        self, value: Optional[pulumi.Input["IssuerSpecVaultAuthKubernetesArgs"]]
    ):
        pulumi.set(self, "kubernetes", value)

    @property
    @pulumi.getter(name="tokenSecretRef")
    def token_secret_ref(
        self,
    ) -> Optional[pulumi.Input["IssuerSpecVaultAuthTokenSecretRefArgs"]]:
        return pulumi.get(self, "token_secret_ref")

    @token_secret_ref.setter
    def token_secret_ref(
        self, value: Optional[pulumi.Input["IssuerSpecVaultAuthTokenSecretRefArgs"]]
    ):
        pulumi.set(self, "token_secret_ref", value)


if not MYPY:

    class IssuerSpecVaultCaBundleSecretRefPatchArgsDict(TypedDict):
        """
        Reference to a Secret containing a bundle of PEM-encoded CAs to use when
        verifying the certificate chain presented by Vault when using HTTPS.
        Mutually exclusive with CABundle.
        If neither CABundle nor CABundleSecretRef are defined, the certificate bundle in
        the cert-manager controller container is used to validate the TLS connection.
        If no key for the Secret is specified, cert-manager will default to 'ca.crt'.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """

elif False:
    IssuerSpecVaultCaBundleSecretRefPatchArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class IssuerSpecVaultCaBundleSecretRefPatchArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        name: Optional[pulumi.Input[str]] = None
    ):
        """
        Reference to a Secret containing a bundle of PEM-encoded CAs to use when
        verifying the certificate chain presented by Vault when using HTTPS.
        Mutually exclusive with CABundle.
        If neither CABundle nor CABundleSecretRef are defined, the certificate bundle in
        the cert-manager controller container is used to validate the TLS connection.
        If no key for the Secret is specified, cert-manager will default to 'ca.crt'.
        :param pulumi.Input[str] key: The key of the entry in the Secret resource's `data` field to be used.
               Some instances of this field may be defaulted, in others it may be
               required.
        :param pulumi.Input[str] name: Name of the resource being referred to.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:

    class IssuerSpecVaultCaBundleSecretRefArgsDict(TypedDict):
        """
        Reference to a Secret containing a bundle of PEM-encoded CAs to use when
        verifying the certificate chain presented by Vault when using HTTPS.
        Mutually exclusive with CABundle.
        If neither CABundle nor CABundleSecretRef are defined, the certificate bundle in
        the cert-manager controller container is used to validate the TLS connection.
        If no key for the Secret is specified, cert-manager will default to 'ca.crt'.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """

elif False:
    IssuerSpecVaultCaBundleSecretRefArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class IssuerSpecVaultCaBundleSecretRefArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        name: Optional[pulumi.Input[str]] = None
    ):
        """
        Reference to a Secret containing a bundle of PEM-encoded CAs to use when
        verifying the certificate chain presented by Vault when using HTTPS.
        Mutually exclusive with CABundle.
        If neither CABundle nor CABundleSecretRef are defined, the certificate bundle in
        the cert-manager controller container is used to validate the TLS connection.
        If no key for the Secret is specified, cert-manager will default to 'ca.crt'.
        :param pulumi.Input[str] key: The key of the entry in the Secret resource's `data` field to be used.
               Some instances of this field may be defaulted, in others it may be
               required.
        :param pulumi.Input[str] name: Name of the resource being referred to.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:

    class IssuerSpecVaultClientCertSecretRefPatchArgsDict(TypedDict):
        """
        Reference to a Secret containing a PEM-encoded Client Certificate to use when the
        Vault server requires mTLS.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """

elif False:
    IssuerSpecVaultClientCertSecretRefPatchArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class IssuerSpecVaultClientCertSecretRefPatchArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        name: Optional[pulumi.Input[str]] = None
    ):
        """
        Reference to a Secret containing a PEM-encoded Client Certificate to use when the
        Vault server requires mTLS.
        :param pulumi.Input[str] key: The key of the entry in the Secret resource's `data` field to be used.
               Some instances of this field may be defaulted, in others it may be
               required.
        :param pulumi.Input[str] name: Name of the resource being referred to.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:

    class IssuerSpecVaultClientCertSecretRefArgsDict(TypedDict):
        """
        Reference to a Secret containing a PEM-encoded Client Certificate to use when the
        Vault server requires mTLS.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """

elif False:
    IssuerSpecVaultClientCertSecretRefArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class IssuerSpecVaultClientCertSecretRefArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        name: Optional[pulumi.Input[str]] = None
    ):
        """
        Reference to a Secret containing a PEM-encoded Client Certificate to use when the
        Vault server requires mTLS.
        :param pulumi.Input[str] key: The key of the entry in the Secret resource's `data` field to be used.
               Some instances of this field may be defaulted, in others it may be
               required.
        :param pulumi.Input[str] name: Name of the resource being referred to.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:

    class IssuerSpecVaultClientKeySecretRefPatchArgsDict(TypedDict):
        """
        Reference to a Secret containing a PEM-encoded Client Private Key to use when the
        Vault server requires mTLS.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """

elif False:
    IssuerSpecVaultClientKeySecretRefPatchArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class IssuerSpecVaultClientKeySecretRefPatchArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        name: Optional[pulumi.Input[str]] = None
    ):
        """
        Reference to a Secret containing a PEM-encoded Client Private Key to use when the
        Vault server requires mTLS.
        :param pulumi.Input[str] key: The key of the entry in the Secret resource's `data` field to be used.
               Some instances of this field may be defaulted, in others it may be
               required.
        :param pulumi.Input[str] name: Name of the resource being referred to.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:

    class IssuerSpecVaultClientKeySecretRefArgsDict(TypedDict):
        """
        Reference to a Secret containing a PEM-encoded Client Private Key to use when the
        Vault server requires mTLS.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """

elif False:
    IssuerSpecVaultClientKeySecretRefArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class IssuerSpecVaultClientKeySecretRefArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        name: Optional[pulumi.Input[str]] = None
    ):
        """
        Reference to a Secret containing a PEM-encoded Client Private Key to use when the
        Vault server requires mTLS.
        :param pulumi.Input[str] key: The key of the entry in the Secret resource's `data` field to be used.
               Some instances of this field may be defaulted, in others it may be
               required.
        :param pulumi.Input[str] name: Name of the resource being referred to.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:

    class IssuerSpecVaultPatchArgsDict(TypedDict):
        """
        Vault configures this issuer to sign certificates using a HashiCorp Vault
        PKI backend.
        """

        auth: NotRequired[pulumi.Input["IssuerSpecVaultAuthPatchArgsDict"]]
        ca_bundle: NotRequired[pulumi.Input[str]]
        """
        Base64-encoded bundle of PEM CAs which will be used to validate the certificate
        chain presented by Vault. Only used if using HTTPS to connect to Vault and
        ignored for HTTP connections.
        Mutually exclusive with CABundleSecretRef.
        If neither CABundle nor CABundleSecretRef are defined, the certificate bundle in
        the cert-manager controller container is used to validate the TLS connection.
        """
        ca_bundle_secret_ref: NotRequired[
            pulumi.Input["IssuerSpecVaultCaBundleSecretRefPatchArgsDict"]
        ]
        client_cert_secret_ref: NotRequired[
            pulumi.Input["IssuerSpecVaultClientCertSecretRefPatchArgsDict"]
        ]
        client_key_secret_ref: NotRequired[
            pulumi.Input["IssuerSpecVaultClientKeySecretRefPatchArgsDict"]
        ]
        namespace: NotRequired[pulumi.Input[str]]
        """
        Name of the vault namespace. Namespaces is a set of features within Vault Enterprise that allows Vault environments to support Secure Multi-tenancy. e.g: "ns1"
        More about namespaces can be found here https://www.vaultproject.io/docs/enterprise/namespaces
        """
        path: NotRequired[pulumi.Input[str]]
        """
        Path is the mount path of the Vault PKI backend's `sign` endpoint, e.g:
        "my_pki_mount/sign/my-role-name".
        """
        server: NotRequired[pulumi.Input[str]]
        """
        Server is the connection address for the Vault server, e.g: "https://vault.example.com:8200".
        """

elif False:
    IssuerSpecVaultPatchArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class IssuerSpecVaultPatchArgs:
    def __init__(
        __self__,
        *,
        auth: Optional[pulumi.Input["IssuerSpecVaultAuthPatchArgs"]] = None,
        ca_bundle: Optional[pulumi.Input[str]] = None,
        ca_bundle_secret_ref: Optional[
            pulumi.Input["IssuerSpecVaultCaBundleSecretRefPatchArgs"]
        ] = None,
        client_cert_secret_ref: Optional[
            pulumi.Input["IssuerSpecVaultClientCertSecretRefPatchArgs"]
        ] = None,
        client_key_secret_ref: Optional[
            pulumi.Input["IssuerSpecVaultClientKeySecretRefPatchArgs"]
        ] = None,
        namespace: Optional[pulumi.Input[str]] = None,
        path: Optional[pulumi.Input[str]] = None,
        server: Optional[pulumi.Input[str]] = None
    ):
        """
        Vault configures this issuer to sign certificates using a HashiCorp Vault
        PKI backend.
        :param pulumi.Input[str] ca_bundle: Base64-encoded bundle of PEM CAs which will be used to validate the certificate
               chain presented by Vault. Only used if using HTTPS to connect to Vault and
               ignored for HTTP connections.
               Mutually exclusive with CABundleSecretRef.
               If neither CABundle nor CABundleSecretRef are defined, the certificate bundle in
               the cert-manager controller container is used to validate the TLS connection.
        :param pulumi.Input[str] namespace: Name of the vault namespace. Namespaces is a set of features within Vault Enterprise that allows Vault environments to support Secure Multi-tenancy. e.g: "ns1"
               More about namespaces can be found here https://www.vaultproject.io/docs/enterprise/namespaces
        :param pulumi.Input[str] path: Path is the mount path of the Vault PKI backend's `sign` endpoint, e.g:
               "my_pki_mount/sign/my-role-name".
        :param pulumi.Input[str] server: Server is the connection address for the Vault server, e.g: "https://vault.example.com:8200".
        """
        if auth is not None:
            pulumi.set(__self__, "auth", auth)
        if ca_bundle is not None:
            pulumi.set(__self__, "ca_bundle", ca_bundle)
        if ca_bundle_secret_ref is not None:
            pulumi.set(__self__, "ca_bundle_secret_ref", ca_bundle_secret_ref)
        if client_cert_secret_ref is not None:
            pulumi.set(__self__, "client_cert_secret_ref", client_cert_secret_ref)
        if client_key_secret_ref is not None:
            pulumi.set(__self__, "client_key_secret_ref", client_key_secret_ref)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if server is not None:
            pulumi.set(__self__, "server", server)

    @property
    @pulumi.getter
    def auth(self) -> Optional[pulumi.Input["IssuerSpecVaultAuthPatchArgs"]]:
        return pulumi.get(self, "auth")

    @auth.setter
    def auth(self, value: Optional[pulumi.Input["IssuerSpecVaultAuthPatchArgs"]]):
        pulumi.set(self, "auth", value)

    @property
    @pulumi.getter(name="caBundle")
    def ca_bundle(self) -> Optional[pulumi.Input[str]]:
        """
        Base64-encoded bundle of PEM CAs which will be used to validate the certificate
        chain presented by Vault. Only used if using HTTPS to connect to Vault and
        ignored for HTTP connections.
        Mutually exclusive with CABundleSecretRef.
        If neither CABundle nor CABundleSecretRef are defined, the certificate bundle in
        the cert-manager controller container is used to validate the TLS connection.
        """
        return pulumi.get(self, "ca_bundle")

    @ca_bundle.setter
    def ca_bundle(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ca_bundle", value)

    @property
    @pulumi.getter(name="caBundleSecretRef")
    def ca_bundle_secret_ref(
        self,
    ) -> Optional[pulumi.Input["IssuerSpecVaultCaBundleSecretRefPatchArgs"]]:
        return pulumi.get(self, "ca_bundle_secret_ref")

    @ca_bundle_secret_ref.setter
    def ca_bundle_secret_ref(
        self, value: Optional[pulumi.Input["IssuerSpecVaultCaBundleSecretRefPatchArgs"]]
    ):
        pulumi.set(self, "ca_bundle_secret_ref", value)

    @property
    @pulumi.getter(name="clientCertSecretRef")
    def client_cert_secret_ref(
        self,
    ) -> Optional[pulumi.Input["IssuerSpecVaultClientCertSecretRefPatchArgs"]]:
        return pulumi.get(self, "client_cert_secret_ref")

    @client_cert_secret_ref.setter
    def client_cert_secret_ref(
        self,
        value: Optional[pulumi.Input["IssuerSpecVaultClientCertSecretRefPatchArgs"]],
    ):
        pulumi.set(self, "client_cert_secret_ref", value)

    @property
    @pulumi.getter(name="clientKeySecretRef")
    def client_key_secret_ref(
        self,
    ) -> Optional[pulumi.Input["IssuerSpecVaultClientKeySecretRefPatchArgs"]]:
        return pulumi.get(self, "client_key_secret_ref")

    @client_key_secret_ref.setter
    def client_key_secret_ref(
        self,
        value: Optional[pulumi.Input["IssuerSpecVaultClientKeySecretRefPatchArgs"]],
    ):
        pulumi.set(self, "client_key_secret_ref", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the vault namespace. Namespaces is a set of features within Vault Enterprise that allows Vault environments to support Secure Multi-tenancy. e.g: "ns1"
        More about namespaces can be found here https://www.vaultproject.io/docs/enterprise/namespaces
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
        Path is the mount path of the Vault PKI backend's `sign` endpoint, e.g:
        "my_pki_mount/sign/my-role-name".
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def server(self) -> Optional[pulumi.Input[str]]:
        """
        Server is the connection address for the Vault server, e.g: "https://vault.example.com:8200".
        """
        return pulumi.get(self, "server")

    @server.setter
    def server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server", value)


if not MYPY:

    class IssuerSpecVaultArgsDict(TypedDict):
        """
        Vault configures this issuer to sign certificates using a HashiCorp Vault
        PKI backend.
        """

        auth: NotRequired[pulumi.Input["IssuerSpecVaultAuthArgsDict"]]
        ca_bundle: NotRequired[pulumi.Input[str]]
        """
        Base64-encoded bundle of PEM CAs which will be used to validate the certificate
        chain presented by Vault. Only used if using HTTPS to connect to Vault and
        ignored for HTTP connections.
        Mutually exclusive with CABundleSecretRef.
        If neither CABundle nor CABundleSecretRef are defined, the certificate bundle in
        the cert-manager controller container is used to validate the TLS connection.
        """
        ca_bundle_secret_ref: NotRequired[
            pulumi.Input["IssuerSpecVaultCaBundleSecretRefArgsDict"]
        ]
        client_cert_secret_ref: NotRequired[
            pulumi.Input["IssuerSpecVaultClientCertSecretRefArgsDict"]
        ]
        client_key_secret_ref: NotRequired[
            pulumi.Input["IssuerSpecVaultClientKeySecretRefArgsDict"]
        ]
        namespace: NotRequired[pulumi.Input[str]]
        """
        Name of the vault namespace. Namespaces is a set of features within Vault Enterprise that allows Vault environments to support Secure Multi-tenancy. e.g: "ns1"
        More about namespaces can be found here https://www.vaultproject.io/docs/enterprise/namespaces
        """
        path: NotRequired[pulumi.Input[str]]
        """
        Path is the mount path of the Vault PKI backend's `sign` endpoint, e.g:
        "my_pki_mount/sign/my-role-name".
        """
        server: NotRequired[pulumi.Input[str]]
        """
        Server is the connection address for the Vault server, e.g: "https://vault.example.com:8200".
        """

elif False:
    IssuerSpecVaultArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class IssuerSpecVaultArgs:
    def __init__(
        __self__,
        *,
        auth: Optional[pulumi.Input["IssuerSpecVaultAuthArgs"]] = None,
        ca_bundle: Optional[pulumi.Input[str]] = None,
        ca_bundle_secret_ref: Optional[
            pulumi.Input["IssuerSpecVaultCaBundleSecretRefArgs"]
        ] = None,
        client_cert_secret_ref: Optional[
            pulumi.Input["IssuerSpecVaultClientCertSecretRefArgs"]
        ] = None,
        client_key_secret_ref: Optional[
            pulumi.Input["IssuerSpecVaultClientKeySecretRefArgs"]
        ] = None,
        namespace: Optional[pulumi.Input[str]] = None,
        path: Optional[pulumi.Input[str]] = None,
        server: Optional[pulumi.Input[str]] = None
    ):
        """
        Vault configures this issuer to sign certificates using a HashiCorp Vault
        PKI backend.
        :param pulumi.Input[str] ca_bundle: Base64-encoded bundle of PEM CAs which will be used to validate the certificate
               chain presented by Vault. Only used if using HTTPS to connect to Vault and
               ignored for HTTP connections.
               Mutually exclusive with CABundleSecretRef.
               If neither CABundle nor CABundleSecretRef are defined, the certificate bundle in
               the cert-manager controller container is used to validate the TLS connection.
        :param pulumi.Input[str] namespace: Name of the vault namespace. Namespaces is a set of features within Vault Enterprise that allows Vault environments to support Secure Multi-tenancy. e.g: "ns1"
               More about namespaces can be found here https://www.vaultproject.io/docs/enterprise/namespaces
        :param pulumi.Input[str] path: Path is the mount path of the Vault PKI backend's `sign` endpoint, e.g:
               "my_pki_mount/sign/my-role-name".
        :param pulumi.Input[str] server: Server is the connection address for the Vault server, e.g: "https://vault.example.com:8200".
        """
        if auth is not None:
            pulumi.set(__self__, "auth", auth)
        if ca_bundle is not None:
            pulumi.set(__self__, "ca_bundle", ca_bundle)
        if ca_bundle_secret_ref is not None:
            pulumi.set(__self__, "ca_bundle_secret_ref", ca_bundle_secret_ref)
        if client_cert_secret_ref is not None:
            pulumi.set(__self__, "client_cert_secret_ref", client_cert_secret_ref)
        if client_key_secret_ref is not None:
            pulumi.set(__self__, "client_key_secret_ref", client_key_secret_ref)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if server is not None:
            pulumi.set(__self__, "server", server)

    @property
    @pulumi.getter
    def auth(self) -> Optional[pulumi.Input["IssuerSpecVaultAuthArgs"]]:
        return pulumi.get(self, "auth")

    @auth.setter
    def auth(self, value: Optional[pulumi.Input["IssuerSpecVaultAuthArgs"]]):
        pulumi.set(self, "auth", value)

    @property
    @pulumi.getter(name="caBundle")
    def ca_bundle(self) -> Optional[pulumi.Input[str]]:
        """
        Base64-encoded bundle of PEM CAs which will be used to validate the certificate
        chain presented by Vault. Only used if using HTTPS to connect to Vault and
        ignored for HTTP connections.
        Mutually exclusive with CABundleSecretRef.
        If neither CABundle nor CABundleSecretRef are defined, the certificate bundle in
        the cert-manager controller container is used to validate the TLS connection.
        """
        return pulumi.get(self, "ca_bundle")

    @ca_bundle.setter
    def ca_bundle(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ca_bundle", value)

    @property
    @pulumi.getter(name="caBundleSecretRef")
    def ca_bundle_secret_ref(
        self,
    ) -> Optional[pulumi.Input["IssuerSpecVaultCaBundleSecretRefArgs"]]:
        return pulumi.get(self, "ca_bundle_secret_ref")

    @ca_bundle_secret_ref.setter
    def ca_bundle_secret_ref(
        self, value: Optional[pulumi.Input["IssuerSpecVaultCaBundleSecretRefArgs"]]
    ):
        pulumi.set(self, "ca_bundle_secret_ref", value)

    @property
    @pulumi.getter(name="clientCertSecretRef")
    def client_cert_secret_ref(
        self,
    ) -> Optional[pulumi.Input["IssuerSpecVaultClientCertSecretRefArgs"]]:
        return pulumi.get(self, "client_cert_secret_ref")

    @client_cert_secret_ref.setter
    def client_cert_secret_ref(
        self, value: Optional[pulumi.Input["IssuerSpecVaultClientCertSecretRefArgs"]]
    ):
        pulumi.set(self, "client_cert_secret_ref", value)

    @property
    @pulumi.getter(name="clientKeySecretRef")
    def client_key_secret_ref(
        self,
    ) -> Optional[pulumi.Input["IssuerSpecVaultClientKeySecretRefArgs"]]:
        return pulumi.get(self, "client_key_secret_ref")

    @client_key_secret_ref.setter
    def client_key_secret_ref(
        self, value: Optional[pulumi.Input["IssuerSpecVaultClientKeySecretRefArgs"]]
    ):
        pulumi.set(self, "client_key_secret_ref", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the vault namespace. Namespaces is a set of features within Vault Enterprise that allows Vault environments to support Secure Multi-tenancy. e.g: "ns1"
        More about namespaces can be found here https://www.vaultproject.io/docs/enterprise/namespaces
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
        Path is the mount path of the Vault PKI backend's `sign` endpoint, e.g:
        "my_pki_mount/sign/my-role-name".
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def server(self) -> Optional[pulumi.Input[str]]:
        """
        Server is the connection address for the Vault server, e.g: "https://vault.example.com:8200".
        """
        return pulumi.get(self, "server")

    @server.setter
    def server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server", value)


if not MYPY:

    class IssuerSpecVenafiCloudApiTokenSecretRefPatchArgsDict(TypedDict):
        """
        APITokenSecretRef is a secret key selector for the Venafi Cloud API token.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """

elif False:
    IssuerSpecVenafiCloudApiTokenSecretRefPatchArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class IssuerSpecVenafiCloudApiTokenSecretRefPatchArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        name: Optional[pulumi.Input[str]] = None
    ):
        """
        APITokenSecretRef is a secret key selector for the Venafi Cloud API token.
        :param pulumi.Input[str] key: The key of the entry in the Secret resource's `data` field to be used.
               Some instances of this field may be defaulted, in others it may be
               required.
        :param pulumi.Input[str] name: Name of the resource being referred to.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:

    class IssuerSpecVenafiCloudApiTokenSecretRefArgsDict(TypedDict):
        """
        APITokenSecretRef is a secret key selector for the Venafi Cloud API token.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """

elif False:
    IssuerSpecVenafiCloudApiTokenSecretRefArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class IssuerSpecVenafiCloudApiTokenSecretRefArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        name: Optional[pulumi.Input[str]] = None
    ):
        """
        APITokenSecretRef is a secret key selector for the Venafi Cloud API token.
        :param pulumi.Input[str] key: The key of the entry in the Secret resource's `data` field to be used.
               Some instances of this field may be defaulted, in others it may be
               required.
        :param pulumi.Input[str] name: Name of the resource being referred to.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:

    class IssuerSpecVenafiCloudPatchArgsDict(TypedDict):
        """
        Cloud specifies the Venafi cloud configuration settings.
        Only one of TPP or Cloud may be specified.
        """

        api_token_secret_ref: NotRequired[
            pulumi.Input["IssuerSpecVenafiCloudApiTokenSecretRefPatchArgsDict"]
        ]
        url: NotRequired[pulumi.Input[str]]
        """
        URL is the base URL for Venafi Cloud.
        Defaults to "https://api.venafi.cloud/v1".
        """

elif False:
    IssuerSpecVenafiCloudPatchArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class IssuerSpecVenafiCloudPatchArgs:
    def __init__(
        __self__,
        *,
        api_token_secret_ref: Optional[
            pulumi.Input["IssuerSpecVenafiCloudApiTokenSecretRefPatchArgs"]
        ] = None,
        url: Optional[pulumi.Input[str]] = None
    ):
        """
        Cloud specifies the Venafi cloud configuration settings.
        Only one of TPP or Cloud may be specified.
        :param pulumi.Input[str] url: URL is the base URL for Venafi Cloud.
               Defaults to "https://api.venafi.cloud/v1".
        """
        if api_token_secret_ref is not None:
            pulumi.set(__self__, "api_token_secret_ref", api_token_secret_ref)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="apiTokenSecretRef")
    def api_token_secret_ref(
        self,
    ) -> Optional[pulumi.Input["IssuerSpecVenafiCloudApiTokenSecretRefPatchArgs"]]:
        return pulumi.get(self, "api_token_secret_ref")

    @api_token_secret_ref.setter
    def api_token_secret_ref(
        self,
        value: Optional[
            pulumi.Input["IssuerSpecVenafiCloudApiTokenSecretRefPatchArgs"]
        ],
    ):
        pulumi.set(self, "api_token_secret_ref", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        """
        URL is the base URL for Venafi Cloud.
        Defaults to "https://api.venafi.cloud/v1".
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)


if not MYPY:

    class IssuerSpecVenafiCloudArgsDict(TypedDict):
        """
        Cloud specifies the Venafi cloud configuration settings.
        Only one of TPP or Cloud may be specified.
        """

        api_token_secret_ref: NotRequired[
            pulumi.Input["IssuerSpecVenafiCloudApiTokenSecretRefArgsDict"]
        ]
        url: NotRequired[pulumi.Input[str]]
        """
        URL is the base URL for Venafi Cloud.
        Defaults to "https://api.venafi.cloud/v1".
        """

elif False:
    IssuerSpecVenafiCloudArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class IssuerSpecVenafiCloudArgs:
    def __init__(
        __self__,
        *,
        api_token_secret_ref: Optional[
            pulumi.Input["IssuerSpecVenafiCloudApiTokenSecretRefArgs"]
        ] = None,
        url: Optional[pulumi.Input[str]] = None
    ):
        """
        Cloud specifies the Venafi cloud configuration settings.
        Only one of TPP or Cloud may be specified.
        :param pulumi.Input[str] url: URL is the base URL for Venafi Cloud.
               Defaults to "https://api.venafi.cloud/v1".
        """
        if api_token_secret_ref is not None:
            pulumi.set(__self__, "api_token_secret_ref", api_token_secret_ref)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="apiTokenSecretRef")
    def api_token_secret_ref(
        self,
    ) -> Optional[pulumi.Input["IssuerSpecVenafiCloudApiTokenSecretRefArgs"]]:
        return pulumi.get(self, "api_token_secret_ref")

    @api_token_secret_ref.setter
    def api_token_secret_ref(
        self,
        value: Optional[pulumi.Input["IssuerSpecVenafiCloudApiTokenSecretRefArgs"]],
    ):
        pulumi.set(self, "api_token_secret_ref", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        """
        URL is the base URL for Venafi Cloud.
        Defaults to "https://api.venafi.cloud/v1".
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)


if not MYPY:

    class IssuerSpecVenafiPatchArgsDict(TypedDict):
        """
        Venafi configures this issuer to sign certificates using a Venafi TPP
        or Venafi Cloud policy zone.
        """

        cloud: NotRequired[pulumi.Input["IssuerSpecVenafiCloudPatchArgsDict"]]
        tpp: NotRequired[pulumi.Input["IssuerSpecVenafiTppPatchArgsDict"]]
        zone: NotRequired[pulumi.Input[str]]
        """
        Zone is the Venafi Policy Zone to use for this issuer.
        All requests made to the Venafi platform will be restricted by the named
        zone policy.
        This field is required.
        """

elif False:
    IssuerSpecVenafiPatchArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class IssuerSpecVenafiPatchArgs:
    def __init__(
        __self__,
        *,
        cloud: Optional[pulumi.Input["IssuerSpecVenafiCloudPatchArgs"]] = None,
        tpp: Optional[pulumi.Input["IssuerSpecVenafiTppPatchArgs"]] = None,
        zone: Optional[pulumi.Input[str]] = None
    ):
        """
        Venafi configures this issuer to sign certificates using a Venafi TPP
        or Venafi Cloud policy zone.
        :param pulumi.Input[str] zone: Zone is the Venafi Policy Zone to use for this issuer.
               All requests made to the Venafi platform will be restricted by the named
               zone policy.
               This field is required.
        """
        if cloud is not None:
            pulumi.set(__self__, "cloud", cloud)
        if tpp is not None:
            pulumi.set(__self__, "tpp", tpp)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter
    def cloud(self) -> Optional[pulumi.Input["IssuerSpecVenafiCloudPatchArgs"]]:
        return pulumi.get(self, "cloud")

    @cloud.setter
    def cloud(self, value: Optional[pulumi.Input["IssuerSpecVenafiCloudPatchArgs"]]):
        pulumi.set(self, "cloud", value)

    @property
    @pulumi.getter
    def tpp(self) -> Optional[pulumi.Input["IssuerSpecVenafiTppPatchArgs"]]:
        return pulumi.get(self, "tpp")

    @tpp.setter
    def tpp(self, value: Optional[pulumi.Input["IssuerSpecVenafiTppPatchArgs"]]):
        pulumi.set(self, "tpp", value)

    @property
    @pulumi.getter
    def zone(self) -> Optional[pulumi.Input[str]]:
        """
        Zone is the Venafi Policy Zone to use for this issuer.
        All requests made to the Venafi platform will be restricted by the named
        zone policy.
        This field is required.
        """
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "zone", value)


if not MYPY:

    class IssuerSpecVenafiTppCaBundleSecretRefPatchArgsDict(TypedDict):
        """
        Reference to a Secret containing a base64-encoded bundle of PEM CAs
        which will be used to validate the certificate chain presented by the TPP server.
        Only used if using HTTPS; ignored for HTTP. Mutually exclusive with CABundle.
        If neither CABundle nor CABundleSecretRef is defined, the certificate bundle in
        the cert-manager controller container is used to validate the TLS connection.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """

elif False:
    IssuerSpecVenafiTppCaBundleSecretRefPatchArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class IssuerSpecVenafiTppCaBundleSecretRefPatchArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        name: Optional[pulumi.Input[str]] = None
    ):
        """
        Reference to a Secret containing a base64-encoded bundle of PEM CAs
        which will be used to validate the certificate chain presented by the TPP server.
        Only used if using HTTPS; ignored for HTTP. Mutually exclusive with CABundle.
        If neither CABundle nor CABundleSecretRef is defined, the certificate bundle in
        the cert-manager controller container is used to validate the TLS connection.
        :param pulumi.Input[str] key: The key of the entry in the Secret resource's `data` field to be used.
               Some instances of this field may be defaulted, in others it may be
               required.
        :param pulumi.Input[str] name: Name of the resource being referred to.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:

    class IssuerSpecVenafiTppCaBundleSecretRefArgsDict(TypedDict):
        """
        Reference to a Secret containing a base64-encoded bundle of PEM CAs
        which will be used to validate the certificate chain presented by the TPP server.
        Only used if using HTTPS; ignored for HTTP. Mutually exclusive with CABundle.
        If neither CABundle nor CABundleSecretRef is defined, the certificate bundle in
        the cert-manager controller container is used to validate the TLS connection.
        """

        key: NotRequired[pulumi.Input[str]]
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """

elif False:
    IssuerSpecVenafiTppCaBundleSecretRefArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class IssuerSpecVenafiTppCaBundleSecretRefArgs:
    def __init__(
        __self__,
        *,
        key: Optional[pulumi.Input[str]] = None,
        name: Optional[pulumi.Input[str]] = None
    ):
        """
        Reference to a Secret containing a base64-encoded bundle of PEM CAs
        which will be used to validate the certificate chain presented by the TPP server.
        Only used if using HTTPS; ignored for HTTP. Mutually exclusive with CABundle.
        If neither CABundle nor CABundleSecretRef is defined, the certificate bundle in
        the cert-manager controller container is used to validate the TLS connection.
        :param pulumi.Input[str] key: The key of the entry in the Secret resource's `data` field to be used.
               Some instances of this field may be defaulted, in others it may be
               required.
        :param pulumi.Input[str] name: Name of the resource being referred to.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:

    class IssuerSpecVenafiTppCredentialsRefPatchArgsDict(TypedDict):
        """
        CredentialsRef is a reference to a Secret containing the Venafi TPP API credentials.
        The secret must contain the key 'access-token' for the Access Token Authentication,
        or two keys, 'username' and 'password' for the API Keys Authentication.
        """

        name: NotRequired[pulumi.Input[str]]
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """

elif False:
    IssuerSpecVenafiTppCredentialsRefPatchArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class IssuerSpecVenafiTppCredentialsRefPatchArgs:
    def __init__(__self__, *, name: Optional[pulumi.Input[str]] = None):
        """
        CredentialsRef is a reference to a Secret containing the Venafi TPP API credentials.
        The secret must contain the key 'access-token' for the Access Token Authentication,
        or two keys, 'username' and 'password' for the API Keys Authentication.
        :param pulumi.Input[str] name: Name of the resource being referred to.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:

    class IssuerSpecVenafiTppCredentialsRefArgsDict(TypedDict):
        """
        CredentialsRef is a reference to a Secret containing the Venafi TPP API credentials.
        The secret must contain the key 'access-token' for the Access Token Authentication,
        or two keys, 'username' and 'password' for the API Keys Authentication.
        """

        name: NotRequired[pulumi.Input[str]]
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """

elif False:
    IssuerSpecVenafiTppCredentialsRefArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class IssuerSpecVenafiTppCredentialsRefArgs:
    def __init__(__self__, *, name: Optional[pulumi.Input[str]] = None):
        """
        CredentialsRef is a reference to a Secret containing the Venafi TPP API credentials.
        The secret must contain the key 'access-token' for the Access Token Authentication,
        or two keys, 'username' and 'password' for the API Keys Authentication.
        :param pulumi.Input[str] name: Name of the resource being referred to.
               More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:

    class IssuerSpecVenafiTppPatchArgsDict(TypedDict):
        """
        TPP specifies Trust Protection Platform configuration settings.
        Only one of TPP or Cloud may be specified.
        """

        ca_bundle: NotRequired[pulumi.Input[str]]
        """
        Base64-encoded bundle of PEM CAs which will be used to validate the certificate
        chain presented by the TPP server. Only used if using HTTPS; ignored for HTTP.
        If undefined, the certificate bundle in the cert-manager controller container
        is used to validate the chain.
        """
        ca_bundle_secret_ref: NotRequired[
            pulumi.Input["IssuerSpecVenafiTppCaBundleSecretRefPatchArgsDict"]
        ]
        credentials_ref: NotRequired[
            pulumi.Input["IssuerSpecVenafiTppCredentialsRefPatchArgsDict"]
        ]
        url: NotRequired[pulumi.Input[str]]
        """
        URL is the base URL for the vedsdk endpoint of the Venafi TPP instance,
        for example: "https://tpp.example.com/vedsdk".
        """

elif False:
    IssuerSpecVenafiTppPatchArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class IssuerSpecVenafiTppPatchArgs:
    def __init__(
        __self__,
        *,
        ca_bundle: Optional[pulumi.Input[str]] = None,
        ca_bundle_secret_ref: Optional[
            pulumi.Input["IssuerSpecVenafiTppCaBundleSecretRefPatchArgs"]
        ] = None,
        credentials_ref: Optional[
            pulumi.Input["IssuerSpecVenafiTppCredentialsRefPatchArgs"]
        ] = None,
        url: Optional[pulumi.Input[str]] = None
    ):
        """
        TPP specifies Trust Protection Platform configuration settings.
        Only one of TPP or Cloud may be specified.
        :param pulumi.Input[str] ca_bundle: Base64-encoded bundle of PEM CAs which will be used to validate the certificate
               chain presented by the TPP server. Only used if using HTTPS; ignored for HTTP.
               If undefined, the certificate bundle in the cert-manager controller container
               is used to validate the chain.
        :param pulumi.Input[str] url: URL is the base URL for the vedsdk endpoint of the Venafi TPP instance,
               for example: "https://tpp.example.com/vedsdk".
        """
        if ca_bundle is not None:
            pulumi.set(__self__, "ca_bundle", ca_bundle)
        if ca_bundle_secret_ref is not None:
            pulumi.set(__self__, "ca_bundle_secret_ref", ca_bundle_secret_ref)
        if credentials_ref is not None:
            pulumi.set(__self__, "credentials_ref", credentials_ref)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="caBundle")
    def ca_bundle(self) -> Optional[pulumi.Input[str]]:
        """
        Base64-encoded bundle of PEM CAs which will be used to validate the certificate
        chain presented by the TPP server. Only used if using HTTPS; ignored for HTTP.
        If undefined, the certificate bundle in the cert-manager controller container
        is used to validate the chain.
        """
        return pulumi.get(self, "ca_bundle")

    @ca_bundle.setter
    def ca_bundle(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ca_bundle", value)

    @property
    @pulumi.getter(name="caBundleSecretRef")
    def ca_bundle_secret_ref(
        self,
    ) -> Optional[pulumi.Input["IssuerSpecVenafiTppCaBundleSecretRefPatchArgs"]]:
        return pulumi.get(self, "ca_bundle_secret_ref")

    @ca_bundle_secret_ref.setter
    def ca_bundle_secret_ref(
        self,
        value: Optional[pulumi.Input["IssuerSpecVenafiTppCaBundleSecretRefPatchArgs"]],
    ):
        pulumi.set(self, "ca_bundle_secret_ref", value)

    @property
    @pulumi.getter(name="credentialsRef")
    def credentials_ref(
        self,
    ) -> Optional[pulumi.Input["IssuerSpecVenafiTppCredentialsRefPatchArgs"]]:
        return pulumi.get(self, "credentials_ref")

    @credentials_ref.setter
    def credentials_ref(
        self,
        value: Optional[pulumi.Input["IssuerSpecVenafiTppCredentialsRefPatchArgs"]],
    ):
        pulumi.set(self, "credentials_ref", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        """
        URL is the base URL for the vedsdk endpoint of the Venafi TPP instance,
        for example: "https://tpp.example.com/vedsdk".
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)


if not MYPY:

    class IssuerSpecVenafiTppArgsDict(TypedDict):
        """
        TPP specifies Trust Protection Platform configuration settings.
        Only one of TPP or Cloud may be specified.
        """

        ca_bundle: NotRequired[pulumi.Input[str]]
        """
        Base64-encoded bundle of PEM CAs which will be used to validate the certificate
        chain presented by the TPP server. Only used if using HTTPS; ignored for HTTP.
        If undefined, the certificate bundle in the cert-manager controller container
        is used to validate the chain.
        """
        ca_bundle_secret_ref: NotRequired[
            pulumi.Input["IssuerSpecVenafiTppCaBundleSecretRefArgsDict"]
        ]
        credentials_ref: NotRequired[
            pulumi.Input["IssuerSpecVenafiTppCredentialsRefArgsDict"]
        ]
        url: NotRequired[pulumi.Input[str]]
        """
        URL is the base URL for the vedsdk endpoint of the Venafi TPP instance,
        for example: "https://tpp.example.com/vedsdk".
        """

elif False:
    IssuerSpecVenafiTppArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class IssuerSpecVenafiTppArgs:
    def __init__(
        __self__,
        *,
        ca_bundle: Optional[pulumi.Input[str]] = None,
        ca_bundle_secret_ref: Optional[
            pulumi.Input["IssuerSpecVenafiTppCaBundleSecretRefArgs"]
        ] = None,
        credentials_ref: Optional[
            pulumi.Input["IssuerSpecVenafiTppCredentialsRefArgs"]
        ] = None,
        url: Optional[pulumi.Input[str]] = None
    ):
        """
        TPP specifies Trust Protection Platform configuration settings.
        Only one of TPP or Cloud may be specified.
        :param pulumi.Input[str] ca_bundle: Base64-encoded bundle of PEM CAs which will be used to validate the certificate
               chain presented by the TPP server. Only used if using HTTPS; ignored for HTTP.
               If undefined, the certificate bundle in the cert-manager controller container
               is used to validate the chain.
        :param pulumi.Input[str] url: URL is the base URL for the vedsdk endpoint of the Venafi TPP instance,
               for example: "https://tpp.example.com/vedsdk".
        """
        if ca_bundle is not None:
            pulumi.set(__self__, "ca_bundle", ca_bundle)
        if ca_bundle_secret_ref is not None:
            pulumi.set(__self__, "ca_bundle_secret_ref", ca_bundle_secret_ref)
        if credentials_ref is not None:
            pulumi.set(__self__, "credentials_ref", credentials_ref)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="caBundle")
    def ca_bundle(self) -> Optional[pulumi.Input[str]]:
        """
        Base64-encoded bundle of PEM CAs which will be used to validate the certificate
        chain presented by the TPP server. Only used if using HTTPS; ignored for HTTP.
        If undefined, the certificate bundle in the cert-manager controller container
        is used to validate the chain.
        """
        return pulumi.get(self, "ca_bundle")

    @ca_bundle.setter
    def ca_bundle(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ca_bundle", value)

    @property
    @pulumi.getter(name="caBundleSecretRef")
    def ca_bundle_secret_ref(
        self,
    ) -> Optional[pulumi.Input["IssuerSpecVenafiTppCaBundleSecretRefArgs"]]:
        return pulumi.get(self, "ca_bundle_secret_ref")

    @ca_bundle_secret_ref.setter
    def ca_bundle_secret_ref(
        self, value: Optional[pulumi.Input["IssuerSpecVenafiTppCaBundleSecretRefArgs"]]
    ):
        pulumi.set(self, "ca_bundle_secret_ref", value)

    @property
    @pulumi.getter(name="credentialsRef")
    def credentials_ref(
        self,
    ) -> Optional[pulumi.Input["IssuerSpecVenafiTppCredentialsRefArgs"]]:
        return pulumi.get(self, "credentials_ref")

    @credentials_ref.setter
    def credentials_ref(
        self, value: Optional[pulumi.Input["IssuerSpecVenafiTppCredentialsRefArgs"]]
    ):
        pulumi.set(self, "credentials_ref", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        """
        URL is the base URL for the vedsdk endpoint of the Venafi TPP instance,
        for example: "https://tpp.example.com/vedsdk".
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)


if not MYPY:

    class IssuerSpecVenafiArgsDict(TypedDict):
        """
        Venafi configures this issuer to sign certificates using a Venafi TPP
        or Venafi Cloud policy zone.
        """

        cloud: NotRequired[pulumi.Input["IssuerSpecVenafiCloudArgsDict"]]
        tpp: NotRequired[pulumi.Input["IssuerSpecVenafiTppArgsDict"]]
        zone: NotRequired[pulumi.Input[str]]
        """
        Zone is the Venafi Policy Zone to use for this issuer.
        All requests made to the Venafi platform will be restricted by the named
        zone policy.
        This field is required.
        """

elif False:
    IssuerSpecVenafiArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class IssuerSpecVenafiArgs:
    def __init__(
        __self__,
        *,
        cloud: Optional[pulumi.Input["IssuerSpecVenafiCloudArgs"]] = None,
        tpp: Optional[pulumi.Input["IssuerSpecVenafiTppArgs"]] = None,
        zone: Optional[pulumi.Input[str]] = None
    ):
        """
        Venafi configures this issuer to sign certificates using a Venafi TPP
        or Venafi Cloud policy zone.
        :param pulumi.Input[str] zone: Zone is the Venafi Policy Zone to use for this issuer.
               All requests made to the Venafi platform will be restricted by the named
               zone policy.
               This field is required.
        """
        if cloud is not None:
            pulumi.set(__self__, "cloud", cloud)
        if tpp is not None:
            pulumi.set(__self__, "tpp", tpp)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter
    def cloud(self) -> Optional[pulumi.Input["IssuerSpecVenafiCloudArgs"]]:
        return pulumi.get(self, "cloud")

    @cloud.setter
    def cloud(self, value: Optional[pulumi.Input["IssuerSpecVenafiCloudArgs"]]):
        pulumi.set(self, "cloud", value)

    @property
    @pulumi.getter
    def tpp(self) -> Optional[pulumi.Input["IssuerSpecVenafiTppArgs"]]:
        return pulumi.get(self, "tpp")

    @tpp.setter
    def tpp(self, value: Optional[pulumi.Input["IssuerSpecVenafiTppArgs"]]):
        pulumi.set(self, "tpp", value)

    @property
    @pulumi.getter
    def zone(self) -> Optional[pulumi.Input[str]]:
        """
        Zone is the Venafi Policy Zone to use for this issuer.
        All requests made to the Venafi platform will be restricted by the named
        zone policy.
        This field is required.
        """
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "zone", value)


if not MYPY:

    class IssuerSpecArgsDict(TypedDict):
        """
        Desired state of the Issuer resource.
        """

        acme: NotRequired[pulumi.Input["IssuerSpecAcmeArgsDict"]]
        ca: NotRequired[pulumi.Input["IssuerSpecCaArgsDict"]]
        self_signed: NotRequired[pulumi.Input["IssuerSpecSelfSignedArgsDict"]]
        vault: NotRequired[pulumi.Input["IssuerSpecVaultArgsDict"]]
        venafi: NotRequired[pulumi.Input["IssuerSpecVenafiArgsDict"]]

elif False:
    IssuerSpecArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class IssuerSpecArgs:
    def __init__(
        __self__,
        *,
        acme: Optional[pulumi.Input["IssuerSpecAcmeArgs"]] = None,
        ca: Optional[pulumi.Input["IssuerSpecCaArgs"]] = None,
        self_signed: Optional[pulumi.Input["IssuerSpecSelfSignedArgs"]] = None,
        vault: Optional[pulumi.Input["IssuerSpecVaultArgs"]] = None,
        venafi: Optional[pulumi.Input["IssuerSpecVenafiArgs"]] = None
    ):
        """
        Desired state of the Issuer resource.
        """
        if acme is not None:
            pulumi.set(__self__, "acme", acme)
        if ca is not None:
            pulumi.set(__self__, "ca", ca)
        if self_signed is not None:
            pulumi.set(__self__, "self_signed", self_signed)
        if vault is not None:
            pulumi.set(__self__, "vault", vault)
        if venafi is not None:
            pulumi.set(__self__, "venafi", venafi)

    @property
    @pulumi.getter
    def acme(self) -> Optional[pulumi.Input["IssuerSpecAcmeArgs"]]:
        return pulumi.get(self, "acme")

    @acme.setter
    def acme(self, value: Optional[pulumi.Input["IssuerSpecAcmeArgs"]]):
        pulumi.set(self, "acme", value)

    @property
    @pulumi.getter
    def ca(self) -> Optional[pulumi.Input["IssuerSpecCaArgs"]]:
        return pulumi.get(self, "ca")

    @ca.setter
    def ca(self, value: Optional[pulumi.Input["IssuerSpecCaArgs"]]):
        pulumi.set(self, "ca", value)

    @property
    @pulumi.getter(name="selfSigned")
    def self_signed(self) -> Optional[pulumi.Input["IssuerSpecSelfSignedArgs"]]:
        return pulumi.get(self, "self_signed")

    @self_signed.setter
    def self_signed(self, value: Optional[pulumi.Input["IssuerSpecSelfSignedArgs"]]):
        pulumi.set(self, "self_signed", value)

    @property
    @pulumi.getter
    def vault(self) -> Optional[pulumi.Input["IssuerSpecVaultArgs"]]:
        return pulumi.get(self, "vault")

    @vault.setter
    def vault(self, value: Optional[pulumi.Input["IssuerSpecVaultArgs"]]):
        pulumi.set(self, "vault", value)

    @property
    @pulumi.getter
    def venafi(self) -> Optional[pulumi.Input["IssuerSpecVenafiArgs"]]:
        return pulumi.get(self, "venafi")

    @venafi.setter
    def venafi(self, value: Optional[pulumi.Input["IssuerSpecVenafiArgs"]]):
        pulumi.set(self, "venafi", value)


if not MYPY:

    class IssuerStatusAcmeArgsDict(TypedDict):
        """
        ACME specific status options.
        This field should only be set if the Issuer is configured to use an ACME
        server to issue certificates.
        """

        last_private_key_hash: NotRequired[pulumi.Input[str]]
        """
        LastPrivateKeyHash is a hash of the private key associated with the latest
        registered ACME account, in order to track changes made to registered account
        associated with the Issuer
        """
        last_registered_email: NotRequired[pulumi.Input[str]]
        """
        LastRegisteredEmail is the email associated with the latest registered
        ACME account, in order to track changes made to registered account
        associated with the  Issuer
        """
        uri: NotRequired[pulumi.Input[str]]
        """
        URI is the unique account identifier, which can also be used to retrieve
        account details from the CA
        """

elif False:
    IssuerStatusAcmeArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class IssuerStatusAcmeArgs:
    def __init__(
        __self__,
        *,
        last_private_key_hash: Optional[pulumi.Input[str]] = None,
        last_registered_email: Optional[pulumi.Input[str]] = None,
        uri: Optional[pulumi.Input[str]] = None
    ):
        """
        ACME specific status options.
        This field should only be set if the Issuer is configured to use an ACME
        server to issue certificates.
        :param pulumi.Input[str] last_private_key_hash: LastPrivateKeyHash is a hash of the private key associated with the latest
               registered ACME account, in order to track changes made to registered account
               associated with the Issuer
        :param pulumi.Input[str] last_registered_email: LastRegisteredEmail is the email associated with the latest registered
               ACME account, in order to track changes made to registered account
               associated with the  Issuer
        :param pulumi.Input[str] uri: URI is the unique account identifier, which can also be used to retrieve
               account details from the CA
        """
        if last_private_key_hash is not None:
            pulumi.set(__self__, "last_private_key_hash", last_private_key_hash)
        if last_registered_email is not None:
            pulumi.set(__self__, "last_registered_email", last_registered_email)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)

    @property
    @pulumi.getter(name="lastPrivateKeyHash")
    def last_private_key_hash(self) -> Optional[pulumi.Input[str]]:
        """
        LastPrivateKeyHash is a hash of the private key associated with the latest
        registered ACME account, in order to track changes made to registered account
        associated with the Issuer
        """
        return pulumi.get(self, "last_private_key_hash")

    @last_private_key_hash.setter
    def last_private_key_hash(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_private_key_hash", value)

    @property
    @pulumi.getter(name="lastRegisteredEmail")
    def last_registered_email(self) -> Optional[pulumi.Input[str]]:
        """
        LastRegisteredEmail is the email associated with the latest registered
        ACME account, in order to track changes made to registered account
        associated with the  Issuer
        """
        return pulumi.get(self, "last_registered_email")

    @last_registered_email.setter
    def last_registered_email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_registered_email", value)

    @property
    @pulumi.getter
    def uri(self) -> Optional[pulumi.Input[str]]:
        """
        URI is the unique account identifier, which can also be used to retrieve
        account details from the CA
        """
        return pulumi.get(self, "uri")

    @uri.setter
    def uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uri", value)


if not MYPY:

    class IssuerStatusConditionsArgsDict(TypedDict):
        """
        IssuerCondition contains condition information for an Issuer.
        """

        last_transition_time: NotRequired[pulumi.Input[str]]
        """
        LastTransitionTime is the timestamp corresponding to the last status
        change of this condition.
        """
        message: NotRequired[pulumi.Input[str]]
        """
        Message is a human readable description of the details of the last
        transition, complementing reason.
        """
        observed_generation: NotRequired[pulumi.Input[int]]
        """
        If set, this represents the .metadata.generation that the condition was
        set based upon.
        For instance, if .metadata.generation is currently 12, but the
        .status.condition[x].observedGeneration is 9, the condition is out of date
        with respect to the current state of the Issuer.
        """
        reason: NotRequired[pulumi.Input[str]]
        """
        Reason is a brief machine readable explanation for the condition's last
        transition.
        """
        status: NotRequired[pulumi.Input[str]]
        """
        Status of the condition, one of (`True`, `False`, `Unknown`).
        """
        type: NotRequired[pulumi.Input[str]]
        """
        Type of the condition, known values are (`Ready`).
        """

elif False:
    IssuerStatusConditionsArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class IssuerStatusConditionsArgs:
    def __init__(
        __self__,
        *,
        last_transition_time: Optional[pulumi.Input[str]] = None,
        message: Optional[pulumi.Input[str]] = None,
        observed_generation: Optional[pulumi.Input[int]] = None,
        reason: Optional[pulumi.Input[str]] = None,
        status: Optional[pulumi.Input[str]] = None,
        type: Optional[pulumi.Input[str]] = None
    ):
        """
        IssuerCondition contains condition information for an Issuer.
        :param pulumi.Input[str] last_transition_time: LastTransitionTime is the timestamp corresponding to the last status
               change of this condition.
        :param pulumi.Input[str] message: Message is a human readable description of the details of the last
               transition, complementing reason.
        :param pulumi.Input[int] observed_generation: If set, this represents the .metadata.generation that the condition was
               set based upon.
               For instance, if .metadata.generation is currently 12, but the
               .status.condition[x].observedGeneration is 9, the condition is out of date
               with respect to the current state of the Issuer.
        :param pulumi.Input[str] reason: Reason is a brief machine readable explanation for the condition's last
               transition.
        :param pulumi.Input[str] status: Status of the condition, one of (`True`, `False`, `Unknown`).
        :param pulumi.Input[str] type: Type of the condition, known values are (`Ready`).
        """
        if last_transition_time is not None:
            pulumi.set(__self__, "last_transition_time", last_transition_time)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if observed_generation is not None:
            pulumi.set(__self__, "observed_generation", observed_generation)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> Optional[pulumi.Input[str]]:
        """
        LastTransitionTime is the timestamp corresponding to the last status
        change of this condition.
        """
        return pulumi.get(self, "last_transition_time")

    @last_transition_time.setter
    def last_transition_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_transition_time", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        """
        Message is a human readable description of the details of the last
        transition, complementing reason.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter(name="observedGeneration")
    def observed_generation(self) -> Optional[pulumi.Input[int]]:
        """
        If set, this represents the .metadata.generation that the condition was
        set based upon.
        For instance, if .metadata.generation is currently 12, but the
        .status.condition[x].observedGeneration is 9, the condition is out of date
        with respect to the current state of the Issuer.
        """
        return pulumi.get(self, "observed_generation")

    @observed_generation.setter
    def observed_generation(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "observed_generation", value)

    @property
    @pulumi.getter
    def reason(self) -> Optional[pulumi.Input[str]]:
        """
        Reason is a brief machine readable explanation for the condition's last
        transition.
        """
        return pulumi.get(self, "reason")

    @reason.setter
    def reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reason", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Status of the condition, one of (`True`, `False`, `Unknown`).
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of the condition, known values are (`Ready`).
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


if not MYPY:

    class IssuerStatusArgsDict(TypedDict):
        """
        Status of the Issuer. This is set and managed automatically.
        """

        acme: NotRequired[pulumi.Input["IssuerStatusAcmeArgsDict"]]
        conditions: NotRequired[
            pulumi.Input[Sequence[pulumi.Input["IssuerStatusConditionsArgsDict"]]]
        ]
        """
        List of status conditions to indicate the status of a CertificateRequest.
        Known condition types are `Ready`.
        """

elif False:
    IssuerStatusArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class IssuerStatusArgs:
    def __init__(
        __self__,
        *,
        acme: Optional[pulumi.Input["IssuerStatusAcmeArgs"]] = None,
        conditions: Optional[
            pulumi.Input[Sequence[pulumi.Input["IssuerStatusConditionsArgs"]]]
        ] = None
    ):
        """
        Status of the Issuer. This is set and managed automatically.
        :param pulumi.Input[Sequence[pulumi.Input['IssuerStatusConditionsArgs']]] conditions: List of status conditions to indicate the status of a CertificateRequest.
               Known condition types are `Ready`.
        """
        if acme is not None:
            pulumi.set(__self__, "acme", acme)
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)

    @property
    @pulumi.getter
    def acme(self) -> Optional[pulumi.Input["IssuerStatusAcmeArgs"]]:
        return pulumi.get(self, "acme")

    @acme.setter
    def acme(self, value: Optional[pulumi.Input["IssuerStatusAcmeArgs"]]):
        pulumi.set(self, "acme", value)

    @property
    @pulumi.getter
    def conditions(
        self,
    ) -> Optional[pulumi.Input[Sequence[pulumi.Input["IssuerStatusConditionsArgs"]]]]:
        """
        List of status conditions to indicate the status of a CertificateRequest.
        Known condition types are `Ready`.
        """
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(
        self,
        value: Optional[
            pulumi.Input[Sequence[pulumi.Input["IssuerStatusConditionsArgs"]]]
        ],
    ):
        pulumi.set(self, "conditions", value)


if not MYPY:

    class IssuerArgsDict(TypedDict):
        """
        An Issuer represents a certificate issuing authority which can be
        referenced as part of `issuerRef` fields.
        It is scoped to a single namespace and can therefore only be referenced by
        resources within the same namespace.
        """

        api_version: NotRequired[pulumi.Input[str]]
        """
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
        """
        kind: NotRequired[pulumi.Input[str]]
        """
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        """
        metadata: NotRequired[pulumi.Input["_meta.v1.ObjectMetaArgsDict"]]
        """
        Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
        """
        spec: NotRequired[pulumi.Input["IssuerSpecArgsDict"]]
        status: NotRequired[pulumi.Input["IssuerStatusArgsDict"]]

elif False:
    IssuerArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class IssuerArgs:
    def __init__(
        __self__,
        *,
        api_version: Optional[pulumi.Input[str]] = None,
        kind: Optional[pulumi.Input[str]] = None,
        metadata: Optional[pulumi.Input["_meta.v1.ObjectMetaArgs"]] = None,
        spec: Optional[pulumi.Input["IssuerSpecArgs"]] = None,
        status: Optional[pulumi.Input["IssuerStatusArgs"]] = None
    ):
        """
        An Issuer represents a certificate issuing authority which can be
        referenced as part of `issuerRef` fields.
        It is scoped to a single namespace and can therefore only be referenced by
        resources within the same namespace.
        :param pulumi.Input[str] api_version: APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
        :param pulumi.Input[str] kind: Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        :param pulumi.Input['_meta.v1.ObjectMetaArgs'] metadata: Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
        """
        if api_version is not None:
            pulumi.set(__self__, "api_version", "cert-manager.io/v1")
        if kind is not None:
            pulumi.set(__self__, "kind", "Issuer")
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if spec is not None:
            pulumi.set(__self__, "spec", spec)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[pulumi.Input[str]]:
        """
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
        """
        return pulumi.get(self, "api_version")

    @api_version.setter
    def api_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_version", value)

    @property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[str]]:
        """
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input["_meta.v1.ObjectMetaArgs"]]:
        """
        Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
        """
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input["_meta.v1.ObjectMetaArgs"]]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter
    def spec(self) -> Optional[pulumi.Input["IssuerSpecArgs"]]:
        return pulumi.get(self, "spec")

    @spec.setter
    def spec(self, value: Optional[pulumi.Input["IssuerSpecArgs"]]):
        pulumi.set(self, "spec", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input["IssuerStatusArgs"]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input["IssuerStatusArgs"]]):
        pulumi.set(self, "status", value)
