apiVersion: v1
kind: Secret
metadata:
  name: user-default-login.service-account-token
  namespace: argo
  annotations:
    kubernetes.io/service-account.name: user-default-login
type: kubernetes.io/service-account-token
---
apiVersion: v1
kind: Secret
metadata:
  name: admin-user-sa.service-account-token
  namespace: argo
  annotations:
    kubernetes.io/service-account.name: admin-user-sa
type: kubernetes.io/service-account-token
---
apiVersion: v1
kind: Secret
metadata:
  name: user-read-only.service-account-token
  namespace: argo
  annotations:
    kubernetes.io/service-account.name: user-read-only
type: kubernetes.io/service-account-token
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: user-default-login
  namespace: argo
  annotations:
    workflows.argoproj.io/rbac-rule: "true"
    workflows.argoproj.io/rbac-rule-precedence: "0"
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: user-read-only
  annotations:
    # The rule is an expression used to determine if this service account
    # should be used.
    # * `groups` - an array of the OIDC groups
    # * `iss` - the issuer ("argo-server")
    # * `sub` - the subject (typically the username)
    # Must evaluate to a boolean.
    # If you want an account to be the default to use, this rule can be "true".
    # Details of the expression language are available in
    # https://expr-lang.org/docs/language-definition.
    workflows.argoproj.io/rbac-rule: "'<group_id>' in groups"
    # The precedence is used to determine which service account to use when
    # Precedence is an integer. It may be negative. If omitted, it defaults to "0".
    # Numerically higher values have higher precedence (not lower, which maybe
    # counter-intuitive to you).
    # If two rules match and have the same precedence, then which one used will
    # be arbitrary.
    workflows.argoproj.io/rbac-rule-precedence: "1"
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: admin-user-sa
  annotations:
    # The rule is an expression used to determine if this service account
    # should be used.
    # * `groups` - an array of the OIDC groups
    # * `iss` - the issuer ("argo-server")
    # * `sub` - the subject (typically the username)
    # Must evaluate to a boolean.
    # If you want an account to be the default to use, this rule can be "true".
    # Details of the expression language are available in
    # https://expr-lang.org/docs/language-definition.
    workflows.argoproj.io/rbac-rule: "'<group-id>' in groups"
    # The precedence is used to determine which service account to use when
    # Precedence is an integer. It may be negative. If omitted, it defaults to "0".
    # Numerically higher values have higher precedence (not lower, which maybe
    # counter-intuitive to you).
    # If two rules match and have the same precedence, then which one used will
    # be arbitrary.
    workflows.argoproj.io/rbac-rule-precedence: "2"
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: ui-user-read-only
rules:
  # k8s standard APIs
  - apiGroups:
      - ""
    resources:
      - events
      - pods
      - pods/log
    verbs:
      - get
      - list
      - watch
  # Argo APIs. See also https://github.com/argoproj/argo-workflows/blob/main/manifests/cluster-install/workflow-controller-rbac/workflow-aggregate-roles.yaml#L4
  - apiGroups:
      - argoproj.io
    resources:
      - eventsources
      - sensors
      - workflows
      - workfloweventbindings
      - workflowtemplates
      - clusterworkflowtemplates
      - cronworkflows
      - workflowtaskresults
    verbs:
      - get
      - list
      - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: ui-user-read-only-binding
  namespace: argo
roleRef: # points to the Role
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: ui-user-read-only # name of Role
subjects: # points to the ServiceAccount
- kind: ServiceAccount
  name: user-read-only # service account to bind to
  namespace: argo # ns of service account
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: admin-user-full
rules:
  # k8s standard APIs
  - apiGroups:
      - ""
    resources:
      - secrets
      - events
      - pods
      - pods/log
    verbs:
      - get
      - list
      - watch
  # Argo APIs. See also https://github.com/argoproj/argo-workflows/blob/main/manifests/cluster-install/workflow-controller-rbac/workflow-aggregate-roles.yaml#L4
  - apiGroups:
      - argoproj.io
    resources:
      - eventsources
      - sensors
      - workflows
      - workfloweventbindings
      - workflowtemplates
      - clusterworkflowtemplates
      - cronworkflows
      - workflowtaskresults
    verbs:
      - create
      - delete
      - deletecollection
      - get
      - list
      - patch
      - update
      - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: admin-user-binding
  namespace: argo
roleRef: # points to the Role
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: admin-user-full # name of Role
subjects: # points to the ServiceAccount
- kind: ServiceAccount
  name: admin-user-sa # service account to bind to
  namespace: argo # ns of service account
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: default
  annotations:
    workflows.argoproj.io/rbac-rule: "true"
    workflows.argoproj.io/rbac-rule-precedence: "0"
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: default-role
  namespace: argo
rules:
  - apiGroups:
      - argoproj.io
    resources:
      - workflowtaskresults
    verbs:
      - create
      - patch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: default-role-binding
  namespace: argo
roleRef: # points to the Role
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: default-role # name of Role
  namespace: argo
subjects: # points to the ServiceAccount
- kind: ServiceAccount
  name: user-default-login # service account to bind to
  namespace: argo # ns of service account